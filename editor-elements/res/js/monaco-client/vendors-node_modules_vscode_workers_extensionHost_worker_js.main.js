/******/ var __webpack_modules__ = ({

/***/ "./node_modules/vscode/_virtual/semver.js":
/*!************************************************!*\
  !*** ./node_modules/vscode/_virtual/semver.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __module: () => (/* binding */ semver)
/* harmony export */ });
var semver = {exports: {}};



/***/ }),

/***/ "./node_modules/vscode/external/tslib/tslib.es6.js":
/*!*********************************************************!*\
  !*** ./node_modules/vscode/external/tslib/tslib.es6.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __param: () => (/* binding */ __param)
/* harmony export */ });
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}



/***/ }),

/***/ "./node_modules/vscode/external/vscode-marked/lib/marked.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode/external/vscode-marked/lib/marked.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ marked_1)
/* harmony export */ });
var defaults$5 = {exports: {}};
function getDefaults$1() {
  return {
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: '',
    highlight: null,
    langPrefix: 'language-',
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
function changeDefaults$1(newDefaults) {
  defaults$5.exports.defaults = newDefaults;
}
defaults$5.exports = {
  defaults: getDefaults$1(),
  getDefaults: getDefaults$1,
  changeDefaults: changeDefaults$1
};
const escapeTest = /[&<>"']/;
const escapeReplace = /[&<>"']/g;
const escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
const escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
const escapeReplacements = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};
const getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape$3(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html;
}
const unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape$1(html) {
  return html.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}
const caret = /(^|[^\[])\^/g;
function edit$1(regex, opt) {
  regex = regex.source || regex;
  opt = opt || '';
  const obj = {
    replace: (name, val) => {
      val = val.source || val;
      val = val.replace(caret, '$1');
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
const nonWordAndColonTest = /[^\w:]/g;
const originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl$1(sanitize, base, href) {
  if (sanitize) {
    let prot;
    try {
      prot = decodeURIComponent(unescape$1(href))
        .replace(nonWordAndColonTest, '')
        .toLowerCase();
    } catch (e) {
      return null;
    }
    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
      return null;
    }
  }
  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }
  try {
    href = encodeURI(href).replace(/%25/g, '%');
  } catch (e) {
    return null;
  }
  return href;
}
const baseUrls = {};
const justDomain = /^[^:]+:\/*[^/]*$/;
const protocol = /^([^:]+:)[\s\S]*$/;
const domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(base, href) {
  if (!baseUrls[' ' + base]) {
    if (justDomain.test(base)) {
      baseUrls[' ' + base] = base + '/';
    } else {
      baseUrls[' ' + base] = rtrim$1(base, '/', true);
    }
  }
  base = baseUrls[' ' + base];
  const relativeBase = base.indexOf(':') === -1;
  if (href.substring(0, 2) === '//') {
    if (relativeBase) {
      return href;
    }
    return base.replace(protocol, '$1') + href;
  } else if (href.charAt(0) === '/') {
    if (relativeBase) {
      return href;
    }
    return base.replace(domain, '$1') + href;
  } else {
    return base + href;
  }
}
const noopTest$1 = { exec: function noopTest() {} };
function merge$2(obj) {
  let i = 1,
    target,
    key;
  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }
  return obj;
}
function splitCells$1(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match, offset, str) => {
      let escaped = false,
        curr = offset;
      while (--curr >= 0 && str[curr] === '\\') escaped = !escaped;
      if (escaped) {
        return '|';
      } else {
        return ' |';
      }
    }),
    cells = row.split(/ \|/);
  let i = 0;
  if (!cells[0].trim()) { cells.shift(); }
  if (!cells[cells.length - 1].trim()) { cells.pop(); }
  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count) cells.push('');
  }
  for (; i < cells.length; i++) {
    cells[i] = cells[i].trim().replace(/\\\|/g, '|');
  }
  return cells;
}
function rtrim$1(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return '';
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.substr(0, l - suffLen);
}
function findClosingBracket$1(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  const l = str.length;
  let level = 0,
    i = 0;
  for (; i < l; i++) {
    if (str[i] === '\\') {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  return -1;
}
function checkSanitizeDeprecation$1(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
  }
}
function repeatString$1(pattern, count) {
  if (count < 1) {
    return '';
  }
  let result = '';
  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }
    count >>= 1;
    pattern += pattern;
  }
  return result + pattern;
}
var helpers = {
  escape: escape$3,
  unescape: unescape$1,
  edit: edit$1,
  cleanUrl: cleanUrl$1,
  resolveUrl,
  noopTest: noopTest$1,
  merge: merge$2,
  splitCells: splitCells$1,
  rtrim: rtrim$1,
  findClosingBracket: findClosingBracket$1,
  checkSanitizeDeprecation: checkSanitizeDeprecation$1,
  repeatString: repeatString$1
};
const { defaults: defaults$4 } = defaults$5.exports;
const {
  rtrim,
  splitCells,
  escape: escape$2,
  findClosingBracket
} = helpers;
function outputLink(cap, link, raw, lexer) {
  const href = link.href;
  const title = link.title ? escape$2(link.title) : null;
  const text = cap[1].replace(/\\([\[\]])/g, '$1');
  if (cap[0].charAt(0) !== '!') {
    lexer.state.inLink = true;
    const token = {
      type: 'link',
      raw,
      href,
      title,
      text,
      tokens: lexer.inlineTokens(text, [])
    };
    lexer.state.inLink = false;
    return token;
  } else {
    return {
      type: 'image',
      raw,
      href,
      title,
      text: escape$2(text)
    };
  }
}
function indentCodeCompensation(raw, text) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text;
  }
  const indentToCode = matchIndentToCode[1];
  return ( text
    .split('\n')
    .map(node => {
      const matchIndentInNode = node.match(/^\s+/);
      if (matchIndentInNode === null) {
        return node;
      }
      const [indentInNode] = matchIndentInNode;
      if (indentInNode.length >= indentToCode.length) {
        return node.slice(indentToCode.length);
      }
      return node;
    }))
    .join('\n');
}
var Tokenizer_1 = class Tokenizer {
  constructor(options) {
    this.options = options || defaults$4;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap) {
      if (cap[0].length > 1) {
        return {
          type: 'space',
          raw: cap[0]
        };
      }
      return { raw: '\n' };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ {1,4}/gm, '');
      return {
        type: 'code',
        raw: cap[0],
        codeBlockStyle: 'indented',
        text: !this.options.pedantic
          ? rtrim(text, '\n')
          : text
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text = indentCodeCompensation(raw, cap[3] || '');
      return {
        type: 'code',
        raw,
        lang: cap[2] ? cap[2].trim() : cap[2],
        text
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text = cap[2].trim();
      if (/#$/.test(text)) {
        const trimmed = rtrim(text, '#');
        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text = trimmed.trim();
        }
      }
      const token = {
        type: 'heading',
        raw: cap[0],
        depth: cap[1].length,
        text: text,
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: 'hr',
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text = cap[0].replace(/^ *> ?/gm, '');
      return {
        type: 'blockquote',
        raw: cap[0],
        tokens: this.lexer.blockTokens(text, []),
        text
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,
        line, lines, itemContents;
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: 'list',
        raw: '',
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : '',
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : '[*+-]';
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\n]*| *)(?:\\n[^\\n]*)*(?:\\n|$))`);
      while (src) {
        if (this.rules.block.hr.test(src)) {
          break;
        }
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        lines = cap[2].split('\n');
        if (this.options.pedantic) {
          indent = 2;
          itemContents = lines[0].trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = cap[1].length + (indent > 4 ? 1 : indent);
          itemContents = lines[0].slice(indent - cap[1].length);
        }
        blankLine = false;
        raw = cap[0];
        if (!lines[0] && /^ *$/.test(lines[1])) {
          raw = cap[1] + lines.slice(0, 2).join('\n') + '\n';
          list.loose = true;
          lines = [];
        }
        const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])`);
        for (i = 1; i < lines.length; i++) {
          line = lines[i];
          if (this.options.pedantic) {
            line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
          }
          if (nextBulletRegex.test(line)) {
            raw = cap[1] + lines.slice(0, i).join('\n') + '\n';
            break;
          }
          if (!blankLine) {
            if (!line.trim()) {
              blankLine = true;
            }
            if (line.search(/[^ ]/) >= indent) {
              itemContents += '\n' + line.slice(indent);
            } else {
              itemContents += '\n' + line;
            }
            continue;
          }
          if (line.search(/[^ ]/) >= indent || !line.trim()) {
            itemContents += '\n' + line.slice(indent);
            continue;
          } else {
            raw = cap[1] + lines.slice(0, i).join('\n') + '\n';
            break;
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== '[ ] ';
            itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
          }
        }
        list.items.push({
          type: 'list_item',
          raw: raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
        src = src.slice(raw.length);
      }
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      const l = list.items.length;
      for (i = 0; i < l; i++) {
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        if (( list.items[i].tokens.some(t => t.type === 'space'))) {
          list.loose = true;
          list.items[i].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: 'html',
        raw: cap[0],
        pre: !this.options.sanitizer
          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
        text: cap[0]
      };
      if (this.options.sanitize) {
        token.type = 'paragraph';
        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$2(cap[0]);
        token.tokens = [];
        this.lexer.inline(token.text, token.tokens);
      }
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
      const tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
      return {
        type: 'def',
        tag,
        raw: cap[0],
        href: cap[2],
        title: cap[3]
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      const item = {
        type: 'table',
        header: ( splitCells(cap[1]).map(c => { return { text: c }; })),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        rows: cap[3] ? cap[3].replace(/\n$/, '').split('\n') : []
      };
      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        let l = item.align.length;
        let i, j, k, row;
        for (i = 0; i < l; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }
        l = item.rows.length;
        for (i = 0; i < l; i++) {
          item.rows[i] = ( splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; }));
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = [];
          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k = 0; k < row.length; k++) {
            row[k].tokens = [];
            this.lexer.inlineTokens(row[k].text, row[k].tokens);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      const token = {
        type: 'heading',
        raw: cap[0],
        depth: cap[2].charAt(0) === '=' ? 1 : 2,
        text: cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const token = {
        type: 'paragraph',
        raw: cap[0],
        text: cap[1].charAt(cap[1].length - 1) === '\n'
          ? cap[1].slice(0, -1)
          : cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      const token = {
        type: 'text',
        raw: cap[0],
        text: cap[0],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: 'escape',
        raw: cap[0],
        text: escape$2(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: this.options.sanitize
          ? 'text'
          : 'html',
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize
          ? (this.options.sanitizer
            ? this.options.sanitizer(cap[0])
            : escape$2(cap[0]))
          : cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!(/>$/.test(trimmedUrl))) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], '()');
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf('!') === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = '';
        }
      }
      let href = cap[2];
      let title = '';
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : '';
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
        title: title ? title.replace(this.rules.inline._escapes, '$1') : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src))
        || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = links[link.toLowerCase()];
      if (!link || !link.href) {
        const text = cap[0].charAt(0);
        return {
          type: 'text',
          raw: text,
          text
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = '') {
    let match = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match) return;
    if (match[3] && prevChar.match(/[\p{L}\p{N}]/u)) return;
    const nextChar = match[1] || match[2] || '';
    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {
      const lLength = match[0].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match = endReg.exec(maskedSrc)) != null) {
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim) continue;
        rLength = rDelim.length;
        if (match[3] || match[4]) {
          delimTotal += rLength;
          continue;
        } else if (match[5] || match[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0) continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        if (Math.min(lLength, rLength) % 2) {
          const text = src.slice(1, lLength + match.index + rLength);
          return {
            type: 'em',
            raw: src.slice(0, lLength + match.index + rLength + 1),
            text,
            tokens: this.lexer.inlineTokens(text, [])
          };
        }
        const text = src.slice(2, lLength + match.index + rLength - 1);
        return {
          type: 'strong',
          raw: src.slice(0, lLength + match.index + rLength + 1),
          text,
          tokens: this.lexer.inlineTokens(text, [])
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text = cap[2].replace(/\n/g, ' ');
      const hasNonSpaceChars = /[^ ]/.test(text);
      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }
      text = escape$2(text, true);
      return {
        type: 'codespan',
        raw: cap[0],
        text
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: 'br',
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: 'del',
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2], [])
      };
    }
  }
  autolink(src, mangle) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text, href;
      if (cap[2] === '@') {
        text = escape$2(this.options.mangle ? mangle(cap[1]) : cap[1]);
        href = 'mailto:' + text;
      } else {
        text = escape$2(cap[1]);
        href = text;
      }
      return {
        type: 'link',
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: 'text',
            raw: text,
            text
          }
        ]
      };
    }
  }
  url(src, mangle) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text, href;
      if (cap[2] === '@') {
        text = escape$2(this.options.mangle ? mangle(cap[0]) : cap[0]);
        href = 'mailto:' + text;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text = escape$2(cap[0]);
        if (cap[1] === 'www.') {
          href = 'http://' + text;
        } else {
          href = text;
        }
      }
      return {
        type: 'link',
        raw: cap[0],
        text,
        href,
        tokens: [
          {
            type: 'text',
            raw: text,
            text
          }
        ]
      };
    }
  }
  inlineText(src, smartypants) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text;
      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape$2(cap[0])) : cap[0];
      } else {
        text = escape$2(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
      }
      return {
        type: 'text',
        raw: cap[0],
        text
      };
    }
  }
};
const {
  noopTest,
  edit,
  merge: merge$1
} = helpers;
const block$1 = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
  html: '^ {0,3}(?:'
    + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)'
    + '|comment[^\\n]*(\\n+|$)'
    + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)'
    + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)'
    + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)'
    + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)'
    + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)'
    + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)'
    + ')',
  def: /^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block$1._label = /(?!\s*\])(?:\\[\[\]]|[^\[\]])+/;
block$1._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block$1.def = edit(block$1.def)
  .replace('label', block$1._label)
  .replace('title', block$1._title)
  .getRegex();
block$1.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block$1.listItemStart = edit(/^( *)(bull) */)
  .replace('bull', block$1.bullet)
  .getRegex();
block$1.list = edit(block$1.list)
  .replace(/bull/g, block$1.bullet)
  .replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))')
  .replace('def', '\\n+(?=' + block$1.def.source + ')')
  .getRegex();
block$1._tag = 'address|article|aside|base|basefont|blockquote|body|caption'
  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'
  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'
  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'
  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'
  + '|track|ul';
block$1._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block$1.html = edit(block$1.html, 'i')
  .replace('comment', block$1._comment)
  .replace('tag', block$1._tag)
  .replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/)
  .getRegex();
block$1.paragraph = edit(block$1._paragraph)
  .replace('hr', block$1.hr)
  .replace('heading', ' {0,3}#{1,6} ')
  .replace('|lheading', '')
  .replace('blockquote', ' {0,3}>')
  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ')
  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
  .replace('tag', block$1._tag)
  .getRegex();
block$1.blockquote = edit(block$1.blockquote)
  .replace('paragraph', block$1.paragraph)
  .getRegex();
block$1.normal = merge$1({}, block$1);
block$1.gfm = merge$1({}, block$1.normal, {
  table: '^ *([^\\n ].*\\|.*)\\n'
    + ' {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)\\|?'
    + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)'
});
block$1.gfm.table = edit(block$1.gfm.table)
  .replace('hr', block$1.hr)
  .replace('heading', ' {0,3}#{1,6} ')
  .replace('blockquote', ' {0,3}>')
  .replace('code', ' {4}[^\\n]')
  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ')
  .replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)')
  .replace('tag', block$1._tag)
  .getRegex();
block$1.pedantic = merge$1({}, block$1.normal, {
  html: edit(
    '^ *(?:comment *(?:\\n|\\s*$)'
    + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)'
    + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))')
    .replace('comment', block$1._comment)
    .replace(/tag/g, '(?!(?:'
      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'
      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'
      + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b')
    .getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  paragraph: edit(block$1.normal._paragraph)
    .replace('hr', block$1.hr)
    .replace('heading', ' *#{1,6} *[^\n]')
    .replace('lheading', block$1.lheading)
    .replace('blockquote', ' {0,3}>')
    .replace('|fences', '')
    .replace('|list', '')
    .replace('|html', '')
    .getRegex()
});
const inline$1 = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: '^comment'
    + '|^</[a-zA-Z][\\w:-]*\\s*>'
    + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>'
    + '|^<\\?[\\s\\S]*?\\?>'
    + '|^<![a-zA-Z]+\\s[\\s\\S]*?>'
    + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,
  nolink: /^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,
  reflinkSearch: 'reflink|nolink(?!\\()',
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    rDelimAst: /\_\_[^_*]*?\*[^_*]*?\_\_|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
    rDelimUnd: /\*\*[^_*]*?\_[^_*]*?\*\*|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
};
inline$1._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
inline$1.punctuation = edit(inline$1.punctuation).replace(/punctuation/g, inline$1._punctuation).getRegex();
inline$1.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline$1.escapedEmSt = /\\\*|\\_/g;
inline$1._comment = edit(block$1._comment).replace('(?:-->|$)', '-->').getRegex();
inline$1.emStrong.lDelim = edit(inline$1.emStrong.lDelim)
  .replace(/punct/g, inline$1._punctuation)
  .getRegex();
inline$1.emStrong.rDelimAst = edit(inline$1.emStrong.rDelimAst, 'g')
  .replace(/punct/g, inline$1._punctuation)
  .getRegex();
inline$1.emStrong.rDelimUnd = edit(inline$1.emStrong.rDelimUnd, 'g')
  .replace(/punct/g, inline$1._punctuation)
  .getRegex();
inline$1._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline$1._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline$1._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline$1.autolink = edit(inline$1.autolink)
  .replace('scheme', inline$1._scheme)
  .replace('email', inline$1._email)
  .getRegex();
inline$1._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline$1.tag = edit(inline$1.tag)
  .replace('comment', inline$1._comment)
  .replace('attribute', inline$1._attribute)
  .getRegex();
inline$1._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline$1._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline$1._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline$1.link = edit(inline$1.link)
  .replace('label', inline$1._label)
  .replace('href', inline$1._href)
  .replace('title', inline$1._title)
  .getRegex();
inline$1.reflink = edit(inline$1.reflink)
  .replace('label', inline$1._label)
  .getRegex();
inline$1.reflinkSearch = edit(inline$1.reflinkSearch, 'g')
  .replace('reflink', inline$1.reflink)
  .replace('nolink', inline$1.nolink)
  .getRegex();
inline$1.normal = merge$1({}, inline$1);
inline$1.pedantic = merge$1({}, inline$1.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/)
    .replace('label', inline$1._label)
    .getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
    .replace('label', inline$1._label)
    .getRegex()
});
inline$1.gfm = merge$1({}, inline$1.normal, {
  escape: edit(inline$1.escape).replace('])', '~|])').getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
inline$1.gfm.url = edit(inline$1.gfm.url, 'i')
  .replace('email', inline$1.gfm._extended_email)
  .getRegex();
inline$1.breaks = merge$1({}, inline$1.gfm, {
  br: edit(inline$1.br).replace('{2,}', '*').getRegex(),
  text: edit(inline$1.gfm.text)
    .replace('\\b_', '\\b_| {2,}\\n')
    .replace(/\{2,\}/g, '*')
    .getRegex()
});
var rules = {
  block: block$1,
  inline: inline$1
};
const Tokenizer$1 = Tokenizer_1;
const { defaults: defaults$3 } = defaults$5.exports;
const { block, inline } = rules;
const { repeatString } = helpers;
function smartypants(text) {
  return text
    .replace(/---/g, '\u2014')
    .replace(/--/g, '\u2013')
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
    .replace(/'/g, '\u2019')
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
    .replace(/"/g, '\u201d')
    .replace(/\.{3}/g, '\u2026');
}
function mangle(text) {
  let out = '',
    i,
    ch;
  const l = text.length;
  for (i = 0; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ( ch.toString(16));
    }
    out += '&#' + ch + ';';
  }
  return out;
}
var Lexer_1 = class Lexer {
  constructor(options) {
    this.tokens = [];
    this.tokens.links = Object.create(null);
    this.options = options || defaults$3;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer$1();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  static get rules() {
    return {
      block,
      inline
    };
  }
  static lex(src, options) {
    const lexer = new Lexer(options);
    return lexer.lex(src);
  }
  static lexInline(src, options) {
    const lexer = new Lexer(options);
    return lexer.inlineTokens(src);
  }
  lex(src) {
    src = src
      .replace(/\r\n|\r/g, '\n')
      .replace(/\t/g, '    ');
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/^ +$/gm, '');
    }
    let token, lastToken, cutSrc, lastParagraphClipped;
    while (src) {
      if (this.options.extensions
        && this.options.extensions.block
        && ( this.options.extensions.block.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        }))) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.type) {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === 'paragraph') {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = (cutSrc.length !== src.length);
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === 'text') {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens) {
    this.inlineQueue.push({ src, tokens });
  }
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = ( Object.keys(this.tokens.links));
      if (links.length > 0) {
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = '';
      }
      keepPrevChar = false;
      if (this.options.extensions
        && this.options.extensions.inline
        && ( this.options.extensions.inline.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        }))) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach(function(getStartIndex) {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== '_') {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === 'text') {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
const { defaults: defaults$2 } = defaults$5.exports;
const {
  cleanUrl,
  escape: escape$1
} = helpers;
var Renderer_1 = class Renderer {
  constructor(options) {
    this.options = options || defaults$2;
  }
  code(code, infostring, escaped) {
    const lang = (infostring || '').match(/\S*/)[0];
    if (this.options.highlight) {
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) {
        escaped = true;
        code = out;
      }
    }
    code = code.replace(/\n$/, '') + '\n';
    if (!lang) {
      return '<pre><code>'
        + (escaped ? code : escape$1(code, true))
        + '</code></pre>\n';
    }
    return '<pre><code class="'
      + this.options.langPrefix
      + escape$1(lang, true)
      + '">'
      + (escaped ? code : escape$1(code, true))
      + '</code></pre>\n';
  }
  blockquote(quote) {
    return '<blockquote>\n' + quote + '</blockquote>\n';
  }
  html(html) {
    return html;
  }
  heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      return '<h'
        + level
        + ' id="'
        + this.options.headerPrefix
        + slugger.slug(raw)
        + '">'
        + text
        + '</h'
        + level
        + '>\n';
    }
    return '<h' + level + '>' + text + '</h' + level + '>\n';
  }
  hr() {
    return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
  }
  list(body, ordered, start) {
    const type = ordered ? 'ol' : 'ul',
      startatt = (ordered && start !== 1) ? (' start="' + start + '"') : '';
    return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
  }
  listitem(text) {
    return '<li>' + text + '</li>\n';
  }
  checkbox(checked) {
    return '<input '
      + (checked ? 'checked="" ' : '')
      + 'disabled="" type="checkbox"'
      + (this.options.xhtml ? ' /' : '')
      + '> ';
  }
  paragraph(text) {
    return '<p>' + text + '</p>\n';
  }
  table(header, body) {
    if (body) body = '<tbody>' + body + '</tbody>';
    return '<table>\n'
      + '<thead>\n'
      + header
      + '</thead>\n'
      + body
      + '</table>\n';
  }
  tablerow(content) {
    return '<tr>\n' + content + '</tr>\n';
  }
  tablecell(content, flags) {
    const type = flags.header ? 'th' : 'td';
    const tag = flags.align
      ? '<' + type + ' align="' + flags.align + '">'
      : '<' + type + '>';
    return tag + content + '</' + type + '>\n';
  }
  strong(text) {
    return '<strong>' + text + '</strong>';
  }
  em(text) {
    return '<em>' + text + '</em>';
  }
  codespan(text) {
    return '<code>' + text + '</code>';
  }
  br() {
    return this.options.xhtml ? '<br/>' : '<br>';
  }
  del(text) {
    return '<del>' + text + '</del>';
  }
  link(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<a href="' + escape$1(href) + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += '>' + text + '</a>';
    return out;
  }
  image(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) {
      return text;
    }
    let out = '<img src="' + href + '" alt="' + text + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += this.options.xhtml ? '/>' : '>';
    return out;
  }
  text(text) {
    return text;
  }
};
var TextRenderer_1 = class TextRenderer {
  strong(text) {
    return text;
  }
  em(text) {
    return text;
  }
  codespan(text) {
    return text;
  }
  del(text) {
    return text;
  }
  html(text) {
    return text;
  }
  text(text) {
    return text;
  }
  link(href, title, text) {
    return '' + text;
  }
  image(href, title, text) {
    return '' + text;
  }
  br() {
    return '';
  }
};
var Slugger_1 = class Slugger {
  constructor() {
    this.seen = {};
  }
  serialize(value) {
    return value
      .toLowerCase()
      .trim()
      .replace(/<[!\/a-z].*?>/ig, '')
      .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '')
      .replace(/\s/g, '-');
  }
  getNextSafeSlug(originalSlug, isDryRun) {
    let slug = originalSlug;
    let occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];
      do {
        occurenceAccumulator++;
        slug = originalSlug + '-' + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }
    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }
    return slug;
  }
  slug(value, options = {}) {
    const slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options.dryrun);
  }
};
const Renderer$1 = Renderer_1;
const TextRenderer$1 = TextRenderer_1;
const Slugger$1 = Slugger_1;
const { defaults: defaults$1 } = defaults$5.exports;
const {
  unescape
} = helpers;
var Parser_1 = class Parser {
  constructor(options) {
    this.options = options || defaults$1;
    this.options.renderer = this.options.renderer || new Renderer$1();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer$1();
    this.slugger = new Slugger$1();
  }
  static parse(tokens, options) {
    const parser = new Parser(options);
    return parser.parse(tokens);
  }
  static parseInline(tokens, options) {
    const parser = new Parser(options);
    return parser.parseInline(tokens);
  }
  parse(tokens, top = true) {
    let out = '',
      i,
      j,
      k,
      l2,
      l3,
      row,
      cell,
      header,
      body,
      token,
      ordered,
      start,
      loose,
      itemBody,
      item,
      checked,
      task,
      checkbox,
      ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {
          out += ret || '';
          continue;
        }
      }
      switch (token.type) {
        case 'space': {
          continue;
        }
        case 'hr': {
          out += this.renderer.hr();
          continue;
        }
        case 'heading': {
          out += this.renderer.heading(
            this.parseInline(token.tokens),
            token.depth,
            unescape(this.parseInline(token.tokens, this.textRenderer)),
            this.slugger);
          continue;
        }
        case 'code': {
          out += this.renderer.code(token.text,
            token.lang,
            token.escaped);
          continue;
        }
        case 'table': {
          header = '';
          cell = '';
          l2 = token.header.length;
          for (j = 0; j < l2; j++) {
            cell += this.renderer.tablecell(
              this.parseInline(token.header[j].tokens),
              { header: true, align: token.align[j] }
            );
          }
          header += this.renderer.tablerow(cell);
          body = '';
          l2 = token.rows.length;
          for (j = 0; j < l2; j++) {
            row = token.rows[j];
            cell = '';
            l3 = row.length;
            for (k = 0; k < l3; k++) {
              cell += this.renderer.tablecell(
                this.parseInline(row[k].tokens),
                { header: false, align: token.align[k] }
              );
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case 'blockquote': {
          body = this.parse(token.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case 'list': {
          ordered = token.ordered;
          start = token.start;
          loose = token.loose;
          l2 = token.items.length;
          body = '';
          for (j = 0; j < l2; j++) {
            item = token.items[j];
            checked = item.checked;
            task = item.task;
            itemBody = '';
            if (item.task) {
              checkbox = this.renderer.checkbox(checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {
                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: 'text',
                    text: checkbox
                  });
                }
              } else {
                itemBody += checkbox;
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case 'html': {
          out += this.renderer.html(token.text);
          continue;
        }
        case 'paragraph': {
          out += this.renderer.paragraph(this.parseInline(token.tokens));
          continue;
        }
        case 'text': {
          body = token.tokens ? this.parseInline(token.tokens) : token.text;
          while (i + 1 < l && tokens[i + 1].type === 'text') {
            token = tokens[++i];
            body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    let out = '',
      i,
      token,
      ret;
    const l = tokens.length;
    for (i = 0; i < l; i++) {
      token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {
          out += ret || '';
          continue;
        }
      }
      switch (token.type) {
        case 'escape': {
          out += renderer.text(token.text);
          break;
        }
        case 'html': {
          out += renderer.html(token.text);
          break;
        }
        case 'link': {
          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
          break;
        }
        case 'image': {
          out += renderer.image(token.href, token.title, token.text);
          break;
        }
        case 'strong': {
          out += renderer.strong(this.parseInline(token.tokens, renderer));
          break;
        }
        case 'em': {
          out += renderer.em(this.parseInline(token.tokens, renderer));
          break;
        }
        case 'codespan': {
          out += renderer.codespan(token.text);
          break;
        }
        case 'br': {
          out += renderer.br();
          break;
        }
        case 'del': {
          out += renderer.del(this.parseInline(token.tokens, renderer));
          break;
        }
        case 'text': {
          out += renderer.text(token.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return;
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
const Lexer = Lexer_1;
const Parser = Parser_1;
const Tokenizer = Tokenizer_1;
const Renderer = Renderer_1;
const TextRenderer = TextRenderer_1;
const Slugger = Slugger_1;
const {
  merge,
  checkSanitizeDeprecation,
  escape
} = helpers;
const {
  getDefaults,
  changeDefaults,
  defaults
} = defaults$5.exports;
function marked(src, opt, callback) {
  if (typeof src === 'undefined' || src === null) {
    throw new Error('marked(): input parameter is undefined or null');
  }
  if (typeof src !== 'string') {
    throw new Error('marked(): input parameter is of type '
      + Object.prototype.toString.call(src) + ', string expected');
  }
  if (typeof opt === 'function') {
    callback = opt;
    opt = null;
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  if (callback) {
    const highlight = opt.highlight;
    let tokens;
    try {
      tokens = Lexer.lex(src, opt);
    } catch (e) {
      return callback(e);
    }
    const done = function(err) {
      let out;
      if (!err) {
        try {
          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }
          out = Parser.parse(tokens, opt);
        } catch (e) {
          err = e;
        }
      }
      opt.highlight = highlight;
      return err
        ? callback(err)
        : callback(null, out);
    };
    if (!highlight || highlight.length < 3) {
      return done();
    }
    delete opt.highlight;
    if (!tokens.length) return done();
    let pending = 0;
    marked.walkTokens(tokens, function(token) {
      if (token.type === 'code') {
        pending++;
        setTimeout(() => {
          highlight(token.text, token.lang, function(err, code) {
            if (err) {
              return done(err);
            }
            if (code != null && code !== token.text) {
              token.text = code;
              token.escaped = true;
            }
            pending--;
            if (pending === 0) {
              done();
            }
          });
        }, 0);
      }
    });
    if (pending === 0) {
      done();
    }
    return;
  }
  try {
    const tokens = Lexer.lex(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parse(tokens, opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
    if (opt.silent) {
      return '<p>An error occurred:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
}
marked.options =
marked.setOptions = function(opt) {
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = defaults;
marked.use = function(...args) {
  const opts = merge({}, ...args);
  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
  let hasExtensions;
  args.forEach((pack) => {
    if (pack.extensions) {
      hasExtensions = true;
      pack.extensions.forEach((ext) => {
        if (!ext.name) {
          throw new Error('extension name required');
        }
        if (ext.renderer) {
          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
          if (prevRenderer) {
            extensions.renderers[ext.name] = function(...args) {
              let ret = ext.renderer.apply(this, args);
              if (ret === false) {
                ret = prevRenderer.apply(this, args);
              }
              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }
        if (ext.tokenizer) {
          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {
            throw new Error("extension level must be 'block' or 'inline'");
          }
          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }
          if (ext.start) {
            if (ext.level === 'block') {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === 'inline') {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }
        if (ext.childTokens) {
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
    }
    if (pack.renderer) {
      const renderer = marked.defaults.renderer || new Renderer();
      for (const prop in pack.renderer) {
        const prevRenderer = renderer[prop];
        renderer[prop] = (...args) => {
          let ret = pack.renderer[prop].apply(renderer, args);
          if (ret === false) {
            ret = prevRenderer.apply(renderer, args);
          }
          return ret;
        };
      }
      opts.renderer = renderer;
    }
    if (pack.tokenizer) {
      const tokenizer = marked.defaults.tokenizer || new Tokenizer();
      for (const prop in pack.tokenizer) {
        const prevTokenizer = tokenizer[prop];
        tokenizer[prop] = (...args) => {
          let ret = pack.tokenizer[prop].apply(tokenizer, args);
          if (ret === false) {
            ret = prevTokenizer.apply(tokenizer, args);
          }
          return ret;
        };
      }
      opts.tokenizer = tokenizer;
    }
    if (pack.walkTokens) {
      const walkTokens = marked.defaults.walkTokens;
      opts.walkTokens = (token) => {
        pack.walkTokens.call(this, token);
        if (walkTokens) {
          walkTokens(token);
        }
      };
    }
    if (hasExtensions) {
      opts.extensions = extensions;
    }
    marked.setOptions(opts);
  });
};
marked.walkTokens = function(tokens, callback) {
  for (const token of tokens) {
    callback(token);
    switch (token.type) {
      case 'table': {
        for (const cell of token.header) {
          marked.walkTokens(cell.tokens, callback);
        }
        for (const row of token.rows) {
          for (const cell of row) {
            marked.walkTokens(cell.tokens, callback);
          }
        }
        break;
      }
      case 'list': {
        marked.walkTokens(token.items, callback);
        break;
      }
      default: {
        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {
            marked.walkTokens(token[childTokens], callback);
          });
        } else if (token.tokens) {
          marked.walkTokens(token.tokens, callback);
        }
      }
    }
  }
};
marked.parseInline = function(src, opt) {
  if (typeof src === 'undefined' || src === null) {
    throw new Error('marked.parseInline(): input parameter is undefined or null');
  }
  if (typeof src !== 'string') {
    throw new Error('marked.parseInline(): input parameter is of type '
      + Object.prototype.toString.call(src) + ', string expected');
  }
  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);
  try {
    const tokens = Lexer.lexInline(src, opt);
    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }
    return Parser.parseInline(tokens, opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
    if (opt.silent) {
      return '<p>An error occurred:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
};
marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var marked_1 = marked;



/***/ }),

/***/ "./node_modules/vscode/external/vscode-semver/semver.js":
/*!**************************************************************!*\
  !*** ./node_modules/vscode/external/vscode-semver/semver.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   semverExports: () => (/* binding */ semverExports)
/* harmony export */ });
/* harmony import */ var _virtual_semver_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_virtual/semver.js */ "./node_modules/vscode/_virtual/semver.js");

(function (module, exports) {
	exports = module.exports = SemVer;
	 var debug;
	 if (typeof process === 'object' &&
	     process.env &&
	     process.env.NODE_DEBUG &&
	     /\bsemver\b/i.test(process.env.NODE_DEBUG))
	   debug = function() {
	     var args = Array.prototype.slice.call(arguments, 0);
	     args.unshift('SEMVER');
	     console.log.apply(console, args);
	     };
	 else
	   debug = function() {};
	exports.SEMVER_SPEC_VERSION = '2.0.0';
	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
	var MAX_SAFE_COMPONENT_LENGTH = 16;
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;
	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';
	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';
	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')\\.' +
	                   '(' + src[NUMERICIDENTIFIER] + ')';
	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
	                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';
	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
	                            '|' + src[NONNUMERICIDENTIFIER] + ')';
	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
	                                 '|' + src[NONNUMERICIDENTIFIER] + ')';
	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
	                  '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';
	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
	                       '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';
	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';
	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
	             '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';
	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] +
	                src[PRERELEASE] + '?' +
	                src[BUILD] + '?';
	src[FULL] = '^' + FULLPLAIN + '$';
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
	                 src[PRERELEASELOOSE] + '?' +
	                 src[BUILD] + '?';
	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';
	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';
	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
	                   '(?:' + src[PRERELEASE] + ')?' +
	                   src[BUILD] + '?' +
	                   ')?)?';
	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
	                        '(?:' + src[PRERELEASELOOSE] + ')?' +
	                        src[BUILD] + '?' +
	                        ')?)?';
	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';
	var COERCE = R++;
	src[COERCE] = '(?:^|[^\\d])' +
	              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
	              '(?:$|[^\\d])';
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';
	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';
	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';
	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';
	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
	                      '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
	                   '\\s+-\\s+' +
	                   '(' + src[XRANGEPLAIN] + ')' +
	                   '\\s*$';
	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s+-\\s+' +
	                        '(' + src[XRANGEPLAINLOOSE] + ')' +
	                        '\\s*$';
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i])
	    re[i] = new RegExp(src[i]);
	}
	exports.parse = parse;
	function parse(version, loose) {
	  if (version instanceof SemVer)
	    return version;
	  if (typeof version !== 'string')
	    return null;
	  if (version.length > MAX_LENGTH)
	    return null;
	  var r = loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version))
	    return null;
	  try {
	    return new SemVer(version, loose);
	  } catch (er) {
	    return null;
	  }
	}
	exports.valid = valid;
	function valid(version, loose) {
	  var v = parse(version, loose);
	  return v ? v.version : null;
	}
	exports.clean = clean;
	function clean(version, loose) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
	  return s ? s.version : null;
	}
	exports.SemVer = SemVer;
	function SemVer(version, loose) {
	  if (version instanceof SemVer) {
	    if (version.loose === loose)
	      return version;
	    else
	      version = version.version;
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version);
	  }
	  if (version.length > MAX_LENGTH)
	    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
	  if (!(this instanceof SemVer))
	    return new SemVer(version, loose);
	  debug('SemVer', version, loose);
	  this.loose = loose;
	  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);
	  if (!m)
	    throw new TypeError('Invalid Version: ' + version);
	  this.raw = version;
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];
	  if (this.major > MAX_SAFE_INTEGER || this.major < 0)
	    throw new TypeError('Invalid major version')
	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
	    throw new TypeError('Invalid minor version')
	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
	    throw new TypeError('Invalid patch version')
	  if (!m[4])
	    this.prerelease = [];
	  else
	    this.prerelease = m[4].split('.').map(function(id) {
	      if (/^[0-9]+$/.test(id)) {
	        var num = +id;
	        if (num >= 0 && num < MAX_SAFE_INTEGER)
	          return num;
	      }
	      return id;
	    });
	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}
	SemVer.prototype.format = function() {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length)
	    this.version += '-' + this.prerelease.join('.');
	  return this.version;
	};
	SemVer.prototype.toString = function() {
	  return this.version;
	};
	SemVer.prototype.compare = function(other) {
	  debug('SemVer.compare', this.version, this.loose, other);
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);
	  return this.compareMain(other) || this.comparePre(other);
	};
	SemVer.prototype.compareMain = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);
	  return compareIdentifiers(this.major, other.major) ||
	         compareIdentifiers(this.minor, other.minor) ||
	         compareIdentifiers(this.patch, other.patch);
	};
	SemVer.prototype.comparePre = function(other) {
	  if (!(other instanceof SemVer))
	    other = new SemVer(other, this.loose);
	  if (this.prerelease.length && !other.prerelease.length)
	    return -1;
	  else if (!this.prerelease.length && other.prerelease.length)
	    return 1;
	  else if (!this.prerelease.length && !other.prerelease.length)
	    return 0;
	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined)
	      return 0;
	    else if (b === undefined)
	      return 1;
	    else if (a === undefined)
	      return -1;
	    else if (a === b)
	      continue;
	    else
	      return compareIdentifiers(a, b);
	  } while (++i);
	};
	SemVer.prototype.inc = function(release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break;
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break;
	    case 'prepatch':
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	    case 'prerelease':
	      if (this.prerelease.length === 0)
	        this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	    case 'major':
	      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)
	        this.major++;
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'minor':
	      if (this.patch !== 0 || this.prerelease.length === 0)
	        this.minor++;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'patch':
	      if (this.prerelease.length === 0)
	        this.patch++;
	      this.prerelease = [];
	      break;
	    case 'pre':
	      if (this.prerelease.length === 0)
	        this.prerelease = [0];
	      else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1)
	          this.prerelease.push(0);
	      }
	      if (identifier) {
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1]))
	            this.prerelease = [identifier, 0];
	        } else
	          this.prerelease = [identifier, 0];
	      }
	      break;
	    default:
	      throw new Error('invalid increment argument: ' + release);
	  }
	  this.format();
	  this.raw = this.version;
	  return this;
	};
	exports.inc = inc;
	function inc(version, release, loose, identifier) {
	  if (typeof(loose) === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }
	  try {
	    return new SemVer(version, loose).inc(release, identifier).version;
	  } catch (er) {
	    return null;
	  }
	}
	exports.diff = diff;
	function diff(version1, version2) {
	  if (eq(version1, version2)) {
	    return null;
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    if (v1.prerelease.length || v2.prerelease.length) {
	      for (var key in v1) {
	        if (key === 'major' || key === 'minor' || key === 'patch') {
	          if (v1[key] !== v2[key]) {
	            return 'pre'+key;
	          }
	        }
	      }
	      return 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return key;
	        }
	      }
	    }
	  }
	}
	exports.compareIdentifiers = compareIdentifiers;
	var numeric = /^[0-9]+$/;
	function compareIdentifiers(a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);
	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }
	  return (anum && !bnum) ? -1 :
	         (bnum && !anum) ? 1 :
	         a < b ? -1 :
	         a > b ? 1 :
	         0;
	}
	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers(a, b) {
	  return compareIdentifiers(b, a);
	}
	exports.major = major;
	function major(a, loose) {
	  return new SemVer(a, loose).major;
	}
	exports.minor = minor;
	function minor(a, loose) {
	  return new SemVer(a, loose).minor;
	}
	exports.patch = patch;
	function patch(a, loose) {
	  return new SemVer(a, loose).patch;
	}
	exports.compare = compare;
	function compare(a, b, loose) {
	  return new SemVer(a, loose).compare(new SemVer(b, loose));
	}
	exports.compareLoose = compareLoose;
	function compareLoose(a, b) {
	  return compare(a, b, true);
	}
	exports.rcompare = rcompare;
	function rcompare(a, b, loose) {
	  return compare(b, a, loose);
	}
	exports.sort = sort;
	function sort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.compare(a, b, loose);
	  });
	}
	exports.rsort = rsort;
	function rsort(list, loose) {
	  return list.sort(function(a, b) {
	    return exports.rcompare(a, b, loose);
	  });
	}
	exports.gt = gt;
	function gt(a, b, loose) {
	  return compare(a, b, loose) > 0;
	}
	exports.lt = lt;
	function lt(a, b, loose) {
	  return compare(a, b, loose) < 0;
	}
	exports.eq = eq;
	function eq(a, b, loose) {
	  return compare(a, b, loose) === 0;
	}
	exports.neq = neq;
	function neq(a, b, loose) {
	  return compare(a, b, loose) !== 0;
	}
	exports.gte = gte;
	function gte(a, b, loose) {
	  return compare(a, b, loose) >= 0;
	}
	exports.lte = lte;
	function lte(a, b, loose) {
	  return compare(a, b, loose) <= 0;
	}
	exports.cmp = cmp;
	function cmp(a, op, b, loose) {
	  var ret;
	  switch (op) {
	    case '===':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a === b;
	      break;
	    case '!==':
	      if (typeof a === 'object') a = a.version;
	      if (typeof b === 'object') b = b.version;
	      ret = a !== b;
	      break;
	    case '': case '=': case '==': ret = eq(a, b, loose); break;
	    case '!=': ret = neq(a, b, loose); break;
	    case '>': ret = gt(a, b, loose); break;
	    case '>=': ret = gte(a, b, loose); break;
	    case '<': ret = lt(a, b, loose); break;
	    case '<=': ret = lte(a, b, loose); break;
	    default: throw new TypeError('Invalid operator: ' + op);
	  }
	  return ret;
	}
	exports.Comparator = Comparator;
	function Comparator(comp, loose) {
	  if (comp instanceof Comparator) {
	    if (comp.loose === loose)
	      return comp;
	    else
	      comp = comp.value;
	  }
	  if (!(this instanceof Comparator))
	    return new Comparator(comp, loose);
	  debug('comparator', comp, loose);
	  this.loose = loose;
	  this.parse(comp);
	  if (this.semver === ANY)
	    this.value = '';
	  else
	    this.value = this.operator + this.semver.version;
	  debug('comp', this);
	}
	var ANY = {};
	Comparator.prototype.parse = function(comp) {
	  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);
	  if (!m)
	    throw new TypeError('Invalid comparator: ' + comp);
	  this.operator = m[1];
	  if (this.operator === '=')
	    this.operator = '';
	  if (!m[2])
	    this.semver = ANY;
	  else
	    this.semver = new SemVer(m[2], this.loose);
	};
	Comparator.prototype.toString = function() {
	  return this.value;
	};
	Comparator.prototype.test = function(version) {
	  debug('Comparator.test', version, this.loose);
	  if (this.semver === ANY)
	    return true;
	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);
	  return cmp(version, this.operator, this.semver, this.loose);
	};
	Comparator.prototype.intersects = function(comp, loose) {
	  if (!(comp instanceof Comparator)) {
	    throw new TypeError('a Comparator is required');
	  }
	  var rangeTmp;
	  if (this.operator === '') {
	    rangeTmp = new Range(comp.value, loose);
	    return satisfies(this.value, rangeTmp, loose);
	  } else if (comp.operator === '') {
	    rangeTmp = new Range(this.value, loose);
	    return satisfies(comp.semver, rangeTmp, loose);
	  }
	  var sameDirectionIncreasing =
	    (this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '>=' || comp.operator === '>');
	  var sameDirectionDecreasing =
	    (this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '<=' || comp.operator === '<');
	  var sameSemVer = this.semver.version === comp.semver.version;
	  var differentDirectionsInclusive =
	    (this.operator === '>=' || this.operator === '<=') &&
	    (comp.operator === '>=' || comp.operator === '<=');
	  var oppositeDirectionsLessThan =
	    cmp(this.semver, '<', comp.semver, loose) &&
	    ((this.operator === '>=' || this.operator === '>') &&
	    (comp.operator === '<=' || comp.operator === '<'));
	  var oppositeDirectionsGreaterThan =
	    cmp(this.semver, '>', comp.semver, loose) &&
	    ((this.operator === '<=' || this.operator === '<') &&
	    (comp.operator === '>=' || comp.operator === '>'));
	  return sameDirectionIncreasing || sameDirectionDecreasing ||
	    (sameSemVer && differentDirectionsInclusive) ||
	    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
	};
	exports.Range = Range;
	function Range(range, loose) {
	  if (range instanceof Range) {
	    if (range.loose === loose) {
	      return range;
	    } else {
	      return new Range(range.raw, loose);
	    }
	  }
	  if (range instanceof Comparator) {
	    return new Range(range.value, loose);
	  }
	  if (!(this instanceof Range))
	    return new Range(range, loose);
	  this.loose = loose;
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function(range) {
	    return this.parseRange(range.trim());
	  }, this).filter(function(c) {
	    return c.length;
	  });
	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range);
	  }
	  this.format();
	}
	Range.prototype.format = function() {
	  this.range = this.set.map(function(comps) {
	    return comps.join(' ').trim();
	  }).join('||').trim();
	  return this.range;
	};
	Range.prototype.toString = function() {
	  return this.range;
	};
	Range.prototype.parseRange = function(range) {
	  var loose = this.loose;
	  range = range.trim();
	  debug('range', range, loose);
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[COMPARATORTRIM]);
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);
	  range = range.replace(re[CARETTRIM], caretTrimReplace);
	  range = range.split(/\s+/).join(' ');
	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function(comp) {
	    return parseComparator(comp, loose);
	  }).join(' ').split(/\s+/);
	  if (this.loose) {
	    set = set.filter(function(comp) {
	      return !!comp.match(compRe);
	    });
	  }
	  set = set.map(function(comp) {
	    return new Comparator(comp, loose);
	  });
	  return set;
	};
	Range.prototype.intersects = function(range, loose) {
	  if (!(range instanceof Range)) {
	    throw new TypeError('a Range is required');
	  }
	  return this.set.some(function(thisComparators) {
	    return thisComparators.every(function(thisComparator) {
	      return range.set.some(function(rangeComparators) {
	        return rangeComparators.every(function(rangeComparator) {
	          return thisComparator.intersects(rangeComparator, loose);
	        });
	      });
	    });
	  });
	};
	exports.toComparators = toComparators;
	function toComparators(range, loose) {
	  return new Range(range, loose).set.map(function(comp) {
	    return comp.map(function(c) {
	      return c.value;
	    }).join(' ').trim().split(' ');
	  });
	}
	function parseComparator(comp, loose) {
	  debug('comp', comp);
	  comp = replaceCarets(comp, loose);
	  debug('caret', comp);
	  comp = replaceTildes(comp, loose);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, loose);
	  debug('xrange', comp);
	  comp = replaceStars(comp, loose);
	  debug('stars', comp);
	  return comp;
	}
	function isX(id) {
	  return !id || id.toLowerCase() === 'x' || id === '*';
	}
	function replaceTildes(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceTilde(comp, loose);
	  }).join(' ');
	}
	function replaceTilde(comp, loose) {
	  var r = loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;
	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p))
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    else if (pr) {
	      debug('replaceTilde pr', pr);
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      ret = '>=' + M + '.' + m + '.' + p + pr +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    } else
	      ret = '>=' + M + '.' + m + '.' + p +
	            ' <' + M + '.' + (+m + 1) + '.0';
	    debug('tilde return', ret);
	    return ret;
	  });
	}
	function replaceCarets(comp, loose) {
	  return comp.trim().split(/\s+/).map(function(comp) {
	    return replaceCaret(comp, loose);
	  }).join(' ');
	}
	function replaceCaret(comp, loose) {
	  debug('caret', comp, loose);
	  var r = loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function(_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;
	    if (isX(M))
	      ret = '';
	    else if (isX(m))
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    else if (isX(p)) {
	      if (M === '0')
	        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	      else
	        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (pr.charAt(0) !== '-')
	        pr = '-' + pr;
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p + pr +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p + pr +
	              ' <' + (+M + 1) + '.0.0';
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0')
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + m + '.' + (+p + 1);
	        else
	          ret = '>=' + M + '.' + m + '.' + p +
	                ' <' + M + '.' + (+m + 1) + '.0';
	      } else
	        ret = '>=' + M + '.' + m + '.' + p +
	              ' <' + (+M + 1) + '.0.0';
	    }
	    debug('caret return', ret);
	    return ret;
	  });
	}
	function replaceXRanges(comp, loose) {
	  debug('replaceXRanges', comp, loose);
	  return comp.split(/\s+/).map(function(comp) {
	    return replaceXRange(comp, loose);
	  }).join(' ');
	}
	function replaceXRange(comp, loose) {
	  comp = comp.trim();
	  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;
	    if (gtlt === '=' && anyX)
	      gtlt = '';
	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        ret = '<0.0.0';
	      } else {
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      if (xm)
	        m = 0;
	      if (xp)
	        p = 0;
	      if (gtlt === '>') {
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else if (xp) {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        gtlt = '<';
	        if (xm)
	          M = +M + 1;
	        else
	          m = +m + 1;
	      }
	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }
	    debug('xRange return', ret);
	    return ret;
	  });
	}
	function replaceStars(comp, loose) {
	  debug('replaceStars', comp, loose);
	  return comp.trim().replace(re[STAR], '');
	}
	function hyphenReplace($0,
	                       from, fM, fm, fp, fpr, fb,
	                       to, tM, tm, tp, tpr, tb) {
	  if (isX(fM))
	    from = '';
	  else if (isX(fm))
	    from = '>=' + fM + '.0.0';
	  else if (isX(fp))
	    from = '>=' + fM + '.' + fm + '.0';
	  else
	    from = '>=' + from;
	  if (isX(tM))
	    to = '';
	  else if (isX(tm))
	    to = '<' + (+tM + 1) + '.0.0';
	  else if (isX(tp))
	    to = '<' + tM + '.' + (+tm + 1) + '.0';
	  else if (tpr)
	    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
	  else
	    to = '<=' + to;
	  return (from + ' ' + to).trim();
	}
	Range.prototype.test = function(version) {
	  if (!version)
	    return false;
	  if (typeof version === 'string')
	    version = new SemVer(version, this.loose);
	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version))
	      return true;
	  }
	  return false;
	};
	function testSet(set, version) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version))
	      return false;
	  }
	  if (version.prerelease.length) {
	    for (var i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY)
	        continue;
	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major &&
	            allowed.minor === version.minor &&
	            allowed.patch === version.patch)
	          return true;
	      }
	    }
	    return false;
	  }
	  return true;
	}
	exports.satisfies = satisfies;
	function satisfies(version, range, loose) {
	  try {
	    range = new Range(range, loose);
	  } catch (er) {
	    return false;
	  }
	  return range.test(version);
	}
	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying(versions, range, loose) {
	  var max = null;
	  var maxSV = null;
	  try {
	    var rangeObj = new Range(range, loose);
	  } catch (er) {
	    return null;
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      if (!max || maxSV.compare(v) === -1) {
	        max = v;
	        maxSV = new SemVer(max, loose);
	      }
	    }
	  });
	  return max;
	}
	exports.minSatisfying = minSatisfying;
	function minSatisfying(versions, range, loose) {
	  var min = null;
	  var minSV = null;
	  try {
	    var rangeObj = new Range(range, loose);
	  } catch (er) {
	    return null;
	  }
	  versions.forEach(function (v) {
	    if (rangeObj.test(v)) {
	      if (!min || minSV.compare(v) === 1) {
	        min = v;
	        minSV = new SemVer(min, loose);
	      }
	    }
	  });
	  return min;
	}
	exports.validRange = validRange;
	function validRange(range, loose) {
	  try {
	    return new Range(range, loose).range || '*';
	  } catch (er) {
	    return null;
	  }
	}
	exports.ltr = ltr;
	function ltr(version, range, loose) {
	  return outside(version, range, '<', loose);
	}
	exports.gtr = gtr;
	function gtr(version, range, loose) {
	  return outside(version, range, '>', loose);
	}
	exports.outside = outside;
	function outside(version, range, hilo, loose) {
	  version = new SemVer(version, loose);
	  range = new Range(range, loose);
	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break;
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break;
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"');
	  }
	  if (satisfies(version, range, loose)) {
	    return false;
	  }
	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];
	    var high = null;
	    var low = null;
	    comparators.forEach(function(comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0');
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, loose)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, loose)) {
	        low = comparator;
	      }
	    });
	    if (high.operator === comp || high.operator === ecomp) {
	      return false;
	    }
	    if ((!low.operator || low.operator === comp) &&
	        ltefn(version, low.semver)) {
	      return false;
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false;
	    }
	  }
	  return true;
	}
	exports.prerelease = prerelease;
	function prerelease(version, loose) {
	  var parsed = parse(version, loose);
	  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null;
	}
	exports.intersects = intersects;
	function intersects(r1, r2, loose) {
	  r1 = new Range(r1, loose);
	  r2 = new Range(r2, loose);
	  return r1.intersects(r2)
	}
	exports.coerce = coerce;
	function coerce(version) {
	  if (version instanceof SemVer)
	    return version;
	  if (typeof version !== 'string')
	    return null;
	  var match = version.match(re[COERCE]);
	  if (match == null)
	    return null;
	  return parse((match[1] || '0') + '.' + (match[2] || '0') + '.' + (match[3] || '0'));
	}
} (_virtual_semver_js__WEBPACK_IMPORTED_MODULE_0__.__module, _virtual_semver_js__WEBPACK_IMPORTED_MODULE_0__.__module.exports));
var semverExports = _virtual_semver_js__WEBPACK_IMPORTED_MODULE_0__.__module.exports;



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/actions.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/actions.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Action: () => (/* binding */ Action),
/* harmony export */   ActionRunner: () => (/* binding */ ActionRunner),
/* harmony export */   EmptySubmenuAction: () => (/* binding */ EmptySubmenuAction),
/* harmony export */   Separator: () => (/* binding */ Separator),
/* harmony export */   SubmenuAction: () => (/* binding */ SubmenuAction),
/* harmony export */   toAction: () => (/* binding */ toAction)
/* harmony export */ });
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");



const _moduleId = "vs/base/common/actions";
class Action extends _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    constructor(id, label = '', cssClass = '', enabled = true, actionCallback) {
        super();
        this._onDidChange = this._register(( (new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onDidChange = this._onDidChange.event;
        this._enabled = true;
        this._id = id;
        this._label = label;
        this._cssClass = cssClass;
        this._enabled = enabled;
        this._actionCallback = actionCallback;
    }
    get id() {
        return this._id;
    }
    get label() {
        return this._label;
    }
    set label(value) {
        this._setLabel(value);
    }
    _setLabel(value) {
        if (this._label !== value) {
            this._label = value;
            this._onDidChange.fire({ label: value });
        }
    }
    get tooltip() {
        return this._tooltip || '';
    }
    set tooltip(value) {
        this._setTooltip(value);
    }
    _setTooltip(value) {
        if (this._tooltip !== value) {
            this._tooltip = value;
            this._onDidChange.fire({ tooltip: value });
        }
    }
    get class() {
        return this._cssClass;
    }
    set class(value) {
        this._setClass(value);
    }
    _setClass(value) {
        if (this._cssClass !== value) {
            this._cssClass = value;
            this._onDidChange.fire({ class: value });
        }
    }
    get enabled() {
        return this._enabled;
    }
    set enabled(value) {
        this._setEnabled(value);
    }
    _setEnabled(value) {
        if (this._enabled !== value) {
            this._enabled = value;
            this._onDidChange.fire({ enabled: value });
        }
    }
    get checked() {
        return this._checked;
    }
    set checked(value) {
        this._setChecked(value);
    }
    _setChecked(value) {
        if (this._checked !== value) {
            this._checked = value;
            this._onDidChange.fire({ checked: value });
        }
    }
    async run(event, data) {
        if (this._actionCallback) {
            await this._actionCallback(event);
        }
    }
}
class ActionRunner extends _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    constructor() {
        super(...arguments);
        this._onWillRun = this._register(( (new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onWillRun = this._onWillRun.event;
        this._onDidRun = this._register(( (new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onDidRun = this._onDidRun.event;
    }
    async run(action, context) {
        if (!action.enabled) {
            return;
        }
        this._onWillRun.fire({ action });
        let error = undefined;
        try {
            await this.runAction(action, context);
        }
        catch (e) {
            error = e;
        }
        this._onDidRun.fire({ action, error });
    }
    async runAction(action, context) {
        await action.run(context);
    }
}
class Separator {
    constructor() {
        this.id = Separator.ID;
        this.label = '';
        this.tooltip = '';
        this.class = 'separator';
        this.enabled = false;
        this.checked = false;
    }
    static join(...actionLists) {
        let out = [];
        for (const list of actionLists) {
            if (!list.length) ;
            else if (out.length) {
                out = [...out, ( (new Separator())), ...list];
            }
            else {
                out = list;
            }
        }
        return out;
    }
    static { this.ID = 'vs.actions.separator'; }
    async run() { }
}
class SubmenuAction {
    get actions() { return this._actions; }
    constructor(id, label, actions, cssClass) {
        this.tooltip = '';
        this.enabled = true;
        this.checked = undefined;
        this.id = id;
        this.label = label;
        this.class = cssClass;
        this._actions = actions;
    }
    async run() { }
}
class EmptySubmenuAction extends Action {
    static { this.ID = 'vs.actions.empty'; }
    constructor() {
        super(EmptySubmenuAction.ID, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 0, '(empty)')), undefined, false);
    }
}
function toAction(props) {
    return {
        id: props.id,
        label: props.label,
        tooltip: props.tooltip ?? props.label,
        class: props.class,
        enabled: props.enabled ?? true,
        checked: props.checked,
        run: async (...args) => props.run(...args),
    };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/async.js":
/*!****************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/async.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractIdleValue: () => (/* binding */ AbstractIdleValue),
/* harmony export */   AsyncIterableObject: () => (/* binding */ AsyncIterableObject),
/* harmony export */   AsyncIterableSource: () => (/* binding */ AsyncIterableSource),
/* harmony export */   AutoOpenBarrier: () => (/* binding */ AutoOpenBarrier),
/* harmony export */   Barrier: () => (/* binding */ Barrier),
/* harmony export */   CancelableAsyncIterableObject: () => (/* binding */ CancelableAsyncIterableObject),
/* harmony export */   DeferredPromise: () => (/* binding */ DeferredPromise),
/* harmony export */   Delayer: () => (/* binding */ Delayer),
/* harmony export */   GlobalIdleValue: () => (/* binding */ GlobalIdleValue),
/* harmony export */   IntervalCounter: () => (/* binding */ IntervalCounter),
/* harmony export */   IntervalTimer: () => (/* binding */ IntervalTimer),
/* harmony export */   LazyStatefulPromise: () => (/* binding */ LazyStatefulPromise),
/* harmony export */   Limiter: () => (/* binding */ Limiter),
/* harmony export */   Promises: () => (/* binding */ Promises),
/* harmony export */   Queue: () => (/* binding */ Queue),
/* harmony export */   ResourceQueue: () => (/* binding */ ResourceQueue),
/* harmony export */   RunOnceScheduler: () => (/* binding */ RunOnceScheduler),
/* harmony export */   RunOnceWorker: () => (/* binding */ RunOnceWorker),
/* harmony export */   Sequencer: () => (/* binding */ Sequencer),
/* harmony export */   SequencerByKey: () => (/* binding */ SequencerByKey),
/* harmony export */   StatefulPromise: () => (/* binding */ StatefulPromise),
/* harmony export */   TaskSequentializer: () => (/* binding */ TaskSequentializer),
/* harmony export */   ThrottledDelayer: () => (/* binding */ ThrottledDelayer),
/* harmony export */   Throttler: () => (/* binding */ Throttler),
/* harmony export */   TimeoutTimer: () => (/* binding */ TimeoutTimer),
/* harmony export */   _runWhenIdle: () => (/* binding */ _runWhenIdle),
/* harmony export */   asPromise: () => (/* binding */ asPromise),
/* harmony export */   createCancelableAsyncIterable: () => (/* binding */ createCancelableAsyncIterable),
/* harmony export */   createCancelablePromise: () => (/* binding */ createCancelablePromise),
/* harmony export */   disposableTimeout: () => (/* binding */ disposableTimeout),
/* harmony export */   first: () => (/* binding */ first),
/* harmony export */   isThenable: () => (/* binding */ isThenable),
/* harmony export */   promiseWithResolvers: () => (/* binding */ promiseWithResolvers),
/* harmony export */   raceCancellablePromises: () => (/* binding */ raceCancellablePromises),
/* harmony export */   raceCancellation: () => (/* binding */ raceCancellation),
/* harmony export */   raceCancellationError: () => (/* binding */ raceCancellationError),
/* harmony export */   raceTimeout: () => (/* binding */ raceTimeout),
/* harmony export */   retry: () => (/* binding */ retry),
/* harmony export */   runWhenGlobalIdle: () => (/* binding */ runWhenGlobalIdle),
/* harmony export */   sequence: () => (/* binding */ sequence),
/* harmony export */   timeout: () => (/* binding */ timeout)
/* harmony export */ });
/* harmony import */ var _cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _resources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _symbols_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./symbols.js */ "./node_modules/vscode/vscode/src/vs/base/common/symbols.js");
/* harmony import */ var _lazy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lazy.js */ "./node_modules/vscode/vscode/src/vs/base/common/lazy.js");








function isThenable(obj) {
    return !!obj && typeof obj.then === 'function';
}
function createCancelablePromise(callback) {
    const source = ( new _cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource());
    const thenable = callback(source.token);
    const promise = ( new Promise((resolve, reject) => {
        const subscription = source.token.onCancellationRequested(() => {
            subscription.dispose();
            reject(( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.CancellationError()));
        });
        Promise.resolve(thenable).then(value => {
            subscription.dispose();
            source.dispose();
            resolve(value);
        }, err => {
            subscription.dispose();
            source.dispose();
            reject(err);
        });
    }));
    return new (class {
        cancel() {
            source.cancel();
            source.dispose();
        }
        then(resolve, reject) {
            return promise.then(resolve, reject);
        }
        catch(reject) {
            return this.then(undefined, reject);
        }
        finally(onfinally) {
            return promise.finally(onfinally);
        }
    });
}
function raceCancellation(promise, token, defaultValue) {
    return ( new Promise((resolve, reject) => {
        const ref = token.onCancellationRequested(() => {
            ref.dispose();
            resolve(defaultValue);
        });
        promise.then(resolve, reject).finally(() => ref.dispose());
    }));
}
function raceCancellationError(promise, token) {
    return ( new Promise((resolve, reject) => {
        const ref = token.onCancellationRequested(() => {
            ref.dispose();
            reject(( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.CancellationError()));
        });
        promise.then(resolve, reject).finally(() => ref.dispose());
    }));
}
async function raceCancellablePromises(cancellablePromises) {
    let resolvedPromiseIndex = -1;
    const promises = ( cancellablePromises.map(
        (promise, index) => promise.then(result => { resolvedPromiseIndex = index; return result; })
    ));
    try {
        const result = await Promise.race(promises);
        return result;
    }
    finally {
        cancellablePromises.forEach((cancellablePromise, index) => {
            if (index !== resolvedPromiseIndex) {
                cancellablePromise.cancel();
            }
        });
    }
}
function raceTimeout(promise, timeout, onTimeout) {
    let promiseResolve = undefined;
    const timer = setTimeout(() => {
        promiseResolve?.(undefined);
        onTimeout?.();
    }, timeout);
    return Promise.race([
        promise.finally(() => clearTimeout(timer)),
        ( new Promise(resolve => promiseResolve = resolve))
    ]);
}
function asPromise(callback) {
    return ( new Promise((resolve, reject) => {
        const item = callback();
        if (isThenable(item)) {
            item.then(resolve, reject);
        }
        else {
            resolve(item);
        }
    }));
}
function promiseWithResolvers() {
    let resolve;
    let reject;
    const promise = ( new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    }));
    return { promise, resolve: resolve, reject: reject };
}
class Throttler {
    constructor() {
        this.isDisposed = false;
        this.activePromise = null;
        this.queuedPromise = null;
        this.queuedPromiseFactory = null;
    }
    queue(promiseFactory) {
        if (this.isDisposed) {
            return Promise.reject(( new Error('Throttler is disposed')));
        }
        if (this.activePromise) {
            this.queuedPromiseFactory = promiseFactory;
            if (!this.queuedPromise) {
                const onComplete = () => {
                    this.queuedPromise = null;
                    if (this.isDisposed) {
                        return;
                    }
                    const result = this.queue(this.queuedPromiseFactory);
                    this.queuedPromiseFactory = null;
                    return result;
                };
                this.queuedPromise = ( new Promise(resolve => {
                    this.activePromise.then(onComplete, onComplete).then(resolve);
                }));
            }
            return ( new Promise((resolve, reject) => {
                this.queuedPromise.then(resolve, reject);
            }));
        }
        this.activePromise = promiseFactory();
        return ( new Promise((resolve, reject) => {
            this.activePromise.then((result) => {
                this.activePromise = null;
                resolve(result);
            }, (err) => {
                this.activePromise = null;
                reject(err);
            });
        }));
    }
    dispose() {
        this.isDisposed = true;
    }
}
class Sequencer {
    constructor() {
        this.current = Promise.resolve(null);
    }
    queue(promiseTask) {
        return this.current = this.current.then(() => promiseTask(), () => promiseTask());
    }
}
class SequencerByKey {
    constructor() {
        this.promiseMap = ( new Map());
    }
    queue(key, promiseTask) {
        const runningPromise = this.promiseMap.get(key) ?? Promise.resolve();
        const newPromise = runningPromise
            .catch(() => { })
            .then(promiseTask)
            .finally(() => {
            if (this.promiseMap.get(key) === newPromise) {
                this.promiseMap.delete(key);
            }
        });
        this.promiseMap.set(key, newPromise);
        return newPromise;
    }
}
const timeoutDeferred = (timeout, fn) => {
    let scheduled = true;
    const handle = setTimeout(() => {
        scheduled = false;
        fn();
    }, timeout);
    return {
        isTriggered: () => scheduled,
        dispose: () => {
            clearTimeout(handle);
            scheduled = false;
        },
    };
};
const microtaskDeferred = (fn) => {
    let scheduled = true;
    queueMicrotask(() => {
        if (scheduled) {
            scheduled = false;
            fn();
        }
    });
    return {
        isTriggered: () => scheduled,
        dispose: () => { scheduled = false; },
    };
};
class Delayer {
    constructor(defaultDelay) {
        this.defaultDelay = defaultDelay;
        this.deferred = null;
        this.completionPromise = null;
        this.doResolve = null;
        this.doReject = null;
        this.task = null;
    }
    trigger(task, delay = this.defaultDelay) {
        this.task = task;
        this.cancelTimeout();
        if (!this.completionPromise) {
            this.completionPromise = ( new Promise((resolve, reject) => {
                this.doResolve = resolve;
                this.doReject = reject;
            })).then(() => {
                this.completionPromise = null;
                this.doResolve = null;
                if (this.task) {
                    const task = this.task;
                    this.task = null;
                    return task();
                }
                return undefined;
            });
        }
        const fn = () => {
            this.deferred = null;
            this.doResolve?.(null);
        };
        this.deferred = delay === _symbols_js__WEBPACK_IMPORTED_MODULE_6__.MicrotaskDelay ? microtaskDeferred(fn) : timeoutDeferred(delay, fn);
        return this.completionPromise;
    }
    isTriggered() {
        return !!this.deferred?.isTriggered();
    }
    cancel() {
        this.cancelTimeout();
        if (this.completionPromise) {
            this.doReject?.(( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.CancellationError()));
            this.completionPromise = null;
        }
    }
    cancelTimeout() {
        this.deferred?.dispose();
        this.deferred = null;
    }
    dispose() {
        this.cancel();
    }
}
class ThrottledDelayer {
    constructor(defaultDelay) {
        this.delayer = ( new Delayer(defaultDelay));
        this.throttler = ( new Throttler());
    }
    trigger(promiseFactory, delay) {
        return this.delayer.trigger(() => this.throttler.queue(promiseFactory), delay);
    }
    isTriggered() {
        return this.delayer.isTriggered();
    }
    cancel() {
        this.delayer.cancel();
    }
    dispose() {
        this.delayer.dispose();
        this.throttler.dispose();
    }
}
class Barrier {
    constructor() {
        this._isOpen = false;
        this._promise = ( new Promise((c, e) => {
            this._completePromise = c;
        }));
    }
    isOpen() {
        return this._isOpen;
    }
    open() {
        this._isOpen = true;
        this._completePromise(true);
    }
    wait() {
        return this._promise;
    }
}
class AutoOpenBarrier extends Barrier {
    constructor(autoOpenTimeMs) {
        super();
        this._timeout = setTimeout(() => this.open(), autoOpenTimeMs);
    }
    open() {
        clearTimeout(this._timeout);
        super.open();
    }
}
function timeout(millis, token) {
    if (!token) {
        return createCancelablePromise(token => timeout(millis, token));
    }
    return ( new Promise((resolve, reject) => {
        const handle = setTimeout(() => {
            disposable.dispose();
            resolve();
        }, millis);
        const disposable = token.onCancellationRequested(() => {
            clearTimeout(handle);
            disposable.dispose();
            reject(( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.CancellationError()));
        });
    }));
}
function disposableTimeout(handler, timeout = 0, store) {
    const timer = setTimeout(() => {
        handler();
        if (store) {
            disposable.dispose();
        }
    }, timeout);
    const disposable = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
        clearTimeout(timer);
        store?.deleteAndLeak(disposable);
    });
    store?.add(disposable);
    return disposable;
}
function sequence(promiseFactories) {
    const results = [];
    let index = 0;
    const len = promiseFactories.length;
    function next() {
        return index < len ? promiseFactories[index++]() : null;
    }
    function thenHandler(result) {
        if (result !== undefined && result !== null) {
            results.push(result);
        }
        const n = next();
        if (n) {
            return n.then(thenHandler);
        }
        return Promise.resolve(results);
    }
    return Promise.resolve(null).then(thenHandler);
}
function first(promiseFactories, shouldStop = t => !!t, defaultValue = null) {
    let index = 0;
    const len = promiseFactories.length;
    const loop = () => {
        if (index >= len) {
            return Promise.resolve(defaultValue);
        }
        const factory = promiseFactories[index++];
        const promise = Promise.resolve(factory());
        return promise.then(result => {
            if (shouldStop(result)) {
                return Promise.resolve(result);
            }
            return loop();
        });
    };
    return loop();
}
class Limiter {
    constructor(maxDegreeOfParalellism) {
        this._size = 0;
        this._isDisposed = false;
        this.maxDegreeOfParalellism = maxDegreeOfParalellism;
        this.outstandingPromises = [];
        this.runningPromises = 0;
        this._onDrained = ( new _event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
    }
    whenIdle() {
        return this.size > 0
            ? _event_js__WEBPACK_IMPORTED_MODULE_2__.Event.toPromise(this.onDrained)
            : Promise.resolve();
    }
    get onDrained() {
        return this._onDrained.event;
    }
    get size() {
        return this._size;
    }
    queue(factory) {
        if (this._isDisposed) {
            throw ( new Error('Object has been disposed'));
        }
        this._size++;
        return ( new Promise((c, e) => {
            this.outstandingPromises.push({ factory, c, e });
            this.consume();
        }));
    }
    consume() {
        while (this.outstandingPromises.length && this.runningPromises < this.maxDegreeOfParalellism) {
            const iLimitedTask = this.outstandingPromises.shift();
            this.runningPromises++;
            const promise = iLimitedTask.factory();
            promise.then(iLimitedTask.c, iLimitedTask.e);
            promise.then(() => this.consumed(), () => this.consumed());
        }
    }
    consumed() {
        if (this._isDisposed) {
            return;
        }
        this.runningPromises--;
        if (--this._size === 0) {
            this._onDrained.fire();
        }
        if (this.outstandingPromises.length > 0) {
            this.consume();
        }
    }
    clear() {
        if (this._isDisposed) {
            throw ( new Error('Object has been disposed'));
        }
        this.outstandingPromises.length = 0;
        this._size = this.runningPromises;
    }
    dispose() {
        this._isDisposed = true;
        this.outstandingPromises.length = 0;
        this._size = 0;
        this._onDrained.dispose();
    }
}
class Queue extends Limiter {
    constructor() {
        super(1);
    }
}
class ResourceQueue {
    constructor() {
        this.queues = ( new Map());
        this.drainers = ( new Set());
        this.drainListeners = undefined;
        this.drainListenerCount = 0;
    }
    async whenDrained() {
        if (this.isDrained()) {
            return;
        }
        const promise = ( new DeferredPromise());
        this.drainers.add(promise);
        return promise.p;
    }
    isDrained() {
        for (const [, queue] of this.queues) {
            if (queue.size > 0) {
                return false;
            }
        }
        return true;
    }
    queueSize(resource, extUri$1 = _resources_js__WEBPACK_IMPORTED_MODULE_4__.extUri) {
        const key = extUri$1.getComparisonKey(resource);
        return this.queues.get(key)?.size ?? 0;
    }
    queueFor(resource, factory, extUri$1 = _resources_js__WEBPACK_IMPORTED_MODULE_4__.extUri) {
        const key = extUri$1.getComparisonKey(resource);
        let queue = this.queues.get(key);
        if (!queue) {
            queue = ( new Queue());
            const drainListenerId = this.drainListenerCount++;
            const drainListener = _event_js__WEBPACK_IMPORTED_MODULE_2__.Event.once(queue.onDrained)(() => {
                queue?.dispose();
                this.queues.delete(key);
                this.onDidQueueDrain();
                this.drainListeners?.deleteAndDispose(drainListenerId);
                if (this.drainListeners?.size === 0) {
                    this.drainListeners.dispose();
                    this.drainListeners = undefined;
                }
            });
            if (!this.drainListeners) {
                this.drainListeners = ( new _lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableMap());
            }
            this.drainListeners.set(drainListenerId, drainListener);
            this.queues.set(key, queue);
        }
        return queue.queue(factory);
    }
    onDidQueueDrain() {
        if (!this.isDrained()) {
            return;
        }
        this.releaseDrainers();
    }
    releaseDrainers() {
        for (const drainer of this.drainers) {
            drainer.complete();
        }
        this.drainers.clear();
    }
    dispose() {
        for (const [, queue] of this.queues) {
            queue.dispose();
        }
        this.queues.clear();
        this.releaseDrainers();
        this.drainListeners?.dispose();
    }
}
class TimeoutTimer {
    constructor(runner, timeout) {
        this._isDisposed = false;
        this._token = -1;
        if (typeof runner === 'function' && typeof timeout === 'number') {
            this.setIfNotSet(runner, timeout);
        }
    }
    dispose() {
        this.cancel();
        this._isDisposed = true;
    }
    cancel() {
        if (this._token !== -1) {
            clearTimeout(this._token);
            this._token = -1;
        }
    }
    cancelAndSet(runner, timeout) {
        if (this._isDisposed) {
            throw ( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError(`Calling 'cancelAndSet' on a disposed TimeoutTimer`));
        }
        this.cancel();
        this._token = setTimeout(() => {
            this._token = -1;
            runner();
        }, timeout);
    }
    setIfNotSet(runner, timeout) {
        if (this._isDisposed) {
            throw ( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError(`Calling 'setIfNotSet' on a disposed TimeoutTimer`));
        }
        if (this._token !== -1) {
            return;
        }
        this._token = setTimeout(() => {
            this._token = -1;
            runner();
        }, timeout);
    }
}
class IntervalTimer {
    constructor() {
        this.disposable = undefined;
        this.isDisposed = false;
    }
    cancel() {
        this.disposable?.dispose();
        this.disposable = undefined;
    }
    cancelAndSet(runner, interval, context = globalThis) {
        if (this.isDisposed) {
            throw ( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError(`Calling 'cancelAndSet' on a disposed IntervalTimer`));
        }
        this.cancel();
        const handle = context.setInterval(() => {
            runner();
        }, interval);
        this.disposable = (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            context.clearInterval(handle);
            this.disposable = undefined;
        });
    }
    dispose() {
        this.cancel();
        this.isDisposed = true;
    }
}
class RunOnceScheduler {
    constructor(runner, delay) {
        this.timeoutToken = -1;
        this.runner = runner;
        this.timeout = delay;
        this.timeoutHandler = this.onTimeout.bind(this);
    }
    dispose() {
        this.cancel();
        this.runner = null;
    }
    cancel() {
        if (this.isScheduled()) {
            clearTimeout(this.timeoutToken);
            this.timeoutToken = -1;
        }
    }
    schedule(delay = this.timeout) {
        this.cancel();
        this.timeoutToken = setTimeout(this.timeoutHandler, delay);
    }
    get delay() {
        return this.timeout;
    }
    set delay(value) {
        this.timeout = value;
    }
    isScheduled() {
        return this.timeoutToken !== -1;
    }
    flush() {
        if (this.isScheduled()) {
            this.cancel();
            this.doRun();
        }
    }
    onTimeout() {
        this.timeoutToken = -1;
        if (this.runner) {
            this.doRun();
        }
    }
    doRun() {
        this.runner?.();
    }
}
class RunOnceWorker extends RunOnceScheduler {
    constructor(runner, timeout) {
        super(runner, timeout);
        this.units = [];
    }
    work(unit) {
        this.units.push(unit);
        if (!this.isScheduled()) {
            this.schedule();
        }
    }
    doRun() {
        const units = this.units;
        this.units = [];
        this.runner?.(units);
    }
    dispose() {
        this.units = [];
        super.dispose();
    }
}
let runWhenGlobalIdle;
let _runWhenIdle;
(function () {
    if (typeof globalThis.requestIdleCallback !== 'function' || typeof globalThis.cancelIdleCallback !== 'function') {
        _runWhenIdle = (_targetWindow, runner) => {
            (0,_platform_js__WEBPACK_IMPORTED_MODULE_5__.setTimeout0)(() => {
                if (disposed) {
                    return;
                }
                const end = Date.now() + 15;
                const deadline = {
                    didTimeout: true,
                    timeRemaining() {
                        return Math.max(0, end - Date.now());
                    }
                };
                runner(( Object.freeze(deadline)));
            });
            let disposed = false;
            return {
                dispose() {
                    if (disposed) {
                        return;
                    }
                    disposed = true;
                }
            };
        };
    }
    else {
        _runWhenIdle = (targetWindow, runner, timeout) => {
            const handle = targetWindow.requestIdleCallback(runner, typeof timeout === 'number' ? { timeout } : undefined);
            let disposed = false;
            return {
                dispose() {
                    if (disposed) {
                        return;
                    }
                    disposed = true;
                    targetWindow.cancelIdleCallback(handle);
                }
            };
        };
    }
    runWhenGlobalIdle = (runner) => _runWhenIdle(globalThis, runner);
})();
class AbstractIdleValue {
    constructor(targetWindow, executor) {
        this._didRun = false;
        this._executor = () => {
            try {
                this._value = executor();
            }
            catch (err) {
                this._error = err;
            }
            finally {
                this._didRun = true;
            }
        };
        this._handle = _runWhenIdle(targetWindow, () => this._executor());
    }
    dispose() {
        this._handle.dispose();
    }
    get value() {
        if (!this._didRun) {
            this._handle.dispose();
            this._executor();
        }
        if (this._error) {
            throw this._error;
        }
        return this._value;
    }
    get isInitialized() {
        return this._didRun;
    }
}
class GlobalIdleValue extends AbstractIdleValue {
    constructor(executor) {
        super(globalThis, executor);
    }
}
async function retry(task, delay, retries) {
    let lastError;
    for (let i = 0; i < retries; i++) {
        try {
            return await task();
        }
        catch (error) {
            lastError = error;
            await timeout(delay);
        }
    }
    throw lastError;
}
class TaskSequentializer {
    isRunning(taskId) {
        if (typeof taskId === 'number') {
            return this._running?.taskId === taskId;
        }
        return !!this._running;
    }
    get running() {
        return this._running?.promise;
    }
    cancelRunning() {
        this._running?.cancel();
    }
    run(taskId, promise, onCancel) {
        this._running = { taskId, cancel: () => onCancel?.(), promise };
        promise.then(() => this.doneRunning(taskId), () => this.doneRunning(taskId));
        return promise;
    }
    doneRunning(taskId) {
        if (this._running && taskId === this._running.taskId) {
            this._running = undefined;
            this.runQueued();
        }
    }
    runQueued() {
        if (this._queued) {
            const queued = this._queued;
            this._queued = undefined;
            queued.run().then(queued.promiseResolve, queued.promiseReject);
        }
    }
    queue(run) {
        if (!this._queued) {
            const { promise, resolve: promiseResolve, reject: promiseReject } = promiseWithResolvers();
            this._queued = {
                run,
                promise,
                promiseResolve: promiseResolve,
                promiseReject: promiseReject
            };
        }
        else {
            this._queued.run = run;
        }
        return this._queued.promise;
    }
    hasQueued() {
        return !!this._queued;
    }
    async join() {
        return this._queued?.promise ?? this._running?.promise;
    }
}
class IntervalCounter {
    constructor(interval, nowFn = () => Date.now()) {
        this.interval = interval;
        this.nowFn = nowFn;
        this.lastIncrementTime = 0;
        this.value = 0;
    }
    increment() {
        const now = this.nowFn();
        if (now - this.lastIncrementTime > this.interval) {
            this.lastIncrementTime = now;
            this.value = 0;
        }
        this.value++;
        return this.value;
    }
}
var DeferredOutcome;
( (function(DeferredOutcome) {
    DeferredOutcome[DeferredOutcome["Resolved"] = 0] = "Resolved";
    DeferredOutcome[DeferredOutcome["Rejected"] = 1] = "Rejected";
})(DeferredOutcome || (DeferredOutcome = {})));
class DeferredPromise {
    get isRejected() {
        return this.outcome?.outcome === DeferredOutcome.Rejected;
    }
    get isResolved() {
        return this.outcome?.outcome === DeferredOutcome.Resolved;
    }
    get isSettled() {
        return !!this.outcome;
    }
    get value() {
        return this.outcome?.outcome === DeferredOutcome.Resolved ? this.outcome?.value : undefined;
    }
    constructor() {
        this.p = ( new Promise((c, e) => {
            this.completeCallback = c;
            this.errorCallback = e;
        }));
    }
    complete(value) {
        return ( new Promise(resolve => {
            this.completeCallback(value);
            this.outcome = { outcome: DeferredOutcome.Resolved, value };
            resolve();
        }));
    }
    error(err) {
        return ( new Promise(resolve => {
            this.errorCallback(err);
            this.outcome = { outcome: DeferredOutcome.Rejected, value: err };
            resolve();
        }));
    }
    cancel() {
        return this.error(( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.CancellationError()));
    }
}
var Promises;
( (function(Promises) {
    async function settled(promises) {
        let firstError = undefined;
        const result = await Promise.all(( promises.map(promise => promise.then(value => value, error => {
            if (!firstError) {
                firstError = error;
            }
            return undefined;
        }))));
        if (typeof firstError !== 'undefined') {
            throw firstError;
        }
        return result;
    }
    Promises.settled = settled;
    function withAsyncBody(bodyFn) {
        return ( new Promise(async (resolve, reject) => {
            try {
                await bodyFn(resolve, reject);
            }
            catch (error) {
                reject(error);
            }
        }));
    }
    Promises.withAsyncBody = withAsyncBody;
})(Promises || (Promises = {})));
class StatefulPromise {
    get value() { return this._value; }
    get error() { return this._error; }
    get isResolved() { return this._isResolved; }
    constructor(promise) {
        this._value = undefined;
        this._error = undefined;
        this._isResolved = false;
        this.promise = promise.then(value => {
            this._value = value;
            this._isResolved = true;
            return value;
        }, error => {
            this._error = error;
            this._isResolved = true;
            throw error;
        });
    }
    requireValue() {
        if (!this._isResolved) {
            throw ( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.BugIndicatingError('Promise is not resolved yet'));
        }
        if (this._error) {
            throw this._error;
        }
        return this._value;
    }
}
class LazyStatefulPromise {
    constructor(_compute) {
        this._compute = _compute;
        this._promise = ( new _lazy_js__WEBPACK_IMPORTED_MODULE_7__.Lazy(() => ( new StatefulPromise(this._compute()))));
    }
    requireValue() {
        return this._promise.value.requireValue();
    }
    getPromise() {
        return this._promise.value.promise;
    }
    get currentValue() {
        return this._promise.rawValue?.value;
    }
}
var AsyncIterableSourceState;
( (function(AsyncIterableSourceState) {
    AsyncIterableSourceState[AsyncIterableSourceState["Initial"] = 0] = "Initial";
    AsyncIterableSourceState[AsyncIterableSourceState["DoneOK"] = 1] = "DoneOK";
    AsyncIterableSourceState[AsyncIterableSourceState["DoneError"] = 2] = "DoneError";
})(AsyncIterableSourceState || (AsyncIterableSourceState = {})));
class AsyncIterableObject {
    static fromArray(items) {
        return ( new AsyncIterableObject((writer) => {
            writer.emitMany(items);
        }));
    }
    static fromPromise(promise) {
        return ( new AsyncIterableObject(async (emitter) => {
            emitter.emitMany(await promise);
        }));
    }
    static fromPromises(promises) {
        return ( new AsyncIterableObject(async (emitter) => {
            await Promise.all(( promises.map(async (p) => emitter.emitOne(await p))));
        }));
    }
    static merge(iterables) {
        return ( new AsyncIterableObject(async (emitter) => {
            await Promise.all(( iterables.map(async (iterable) => {
                for await (const item of iterable) {
                    emitter.emitOne(item);
                }
            })));
        }));
    }
    static { this.EMPTY = AsyncIterableObject.fromArray([]); }
    constructor(executor, onReturn) {
        this._state = AsyncIterableSourceState.Initial;
        this._results = [];
        this._error = null;
        this._onReturn = onReturn;
        this._onStateChanged = ( new _event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        queueMicrotask(async () => {
            const writer = {
                emitOne: (item) => this.emitOne(item),
                emitMany: (items) => this.emitMany(items),
                reject: (error) => this.reject(error)
            };
            try {
                await Promise.resolve(executor(writer));
                this.resolve();
            }
            catch (err) {
                this.reject(err);
            }
            finally {
                writer.emitOne = undefined;
                writer.emitMany = undefined;
                writer.reject = undefined;
            }
        });
    }
    [Symbol.asyncIterator]() {
        let i = 0;
        return {
            next: async () => {
                do {
                    if (this._state === AsyncIterableSourceState.DoneError) {
                        throw this._error;
                    }
                    if (i < this._results.length) {
                        return { done: false, value: this._results[i++] };
                    }
                    if (this._state === AsyncIterableSourceState.DoneOK) {
                        return { done: true, value: undefined };
                    }
                    await _event_js__WEBPACK_IMPORTED_MODULE_2__.Event.toPromise(this._onStateChanged.event);
                } while (true);
            },
            return: async () => {
                this._onReturn?.();
                return { done: true, value: undefined };
            }
        };
    }
    static map(iterable, mapFn) {
        return ( new AsyncIterableObject(async (emitter) => {
            for await (const item of iterable) {
                emitter.emitOne(mapFn(item));
            }
        }));
    }
    map(mapFn) {
        return ( AsyncIterableObject.map(this, mapFn));
    }
    static filter(iterable, filterFn) {
        return ( new AsyncIterableObject(async (emitter) => {
            for await (const item of iterable) {
                if (filterFn(item)) {
                    emitter.emitOne(item);
                }
            }
        }));
    }
    filter(filterFn) {
        return AsyncIterableObject.filter(this, filterFn);
    }
    static coalesce(iterable) {
        return AsyncIterableObject.filter(iterable, item => !!item);
    }
    coalesce() {
        return AsyncIterableObject.coalesce(this);
    }
    static async toPromise(iterable) {
        const result = [];
        for await (const item of iterable) {
            result.push(item);
        }
        return result;
    }
    toPromise() {
        return AsyncIterableObject.toPromise(this);
    }
    emitOne(value) {
        if (this._state !== AsyncIterableSourceState.Initial) {
            return;
        }
        this._results.push(value);
        this._onStateChanged.fire();
    }
    emitMany(values) {
        if (this._state !== AsyncIterableSourceState.Initial) {
            return;
        }
        this._results = this._results.concat(values);
        this._onStateChanged.fire();
    }
    resolve() {
        if (this._state !== AsyncIterableSourceState.Initial) {
            return;
        }
        this._state = AsyncIterableSourceState.DoneOK;
        this._onStateChanged.fire();
    }
    reject(error) {
        if (this._state !== AsyncIterableSourceState.Initial) {
            return;
        }
        this._state = AsyncIterableSourceState.DoneError;
        this._error = error;
        this._onStateChanged.fire();
    }
}
class CancelableAsyncIterableObject extends AsyncIterableObject {
    constructor(_source, executor) {
        super(executor);
        this._source = _source;
    }
    cancel() {
        this._source.cancel();
    }
}
function createCancelableAsyncIterable(callback) {
    const source = ( new _cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource());
    const innerIterable = callback(source.token);
    return ( new CancelableAsyncIterableObject(source, async (emitter) => {
        const subscription = source.token.onCancellationRequested(() => {
            subscription.dispose();
            source.dispose();
            emitter.reject(( new _errors_js__WEBPACK_IMPORTED_MODULE_1__.CancellationError()));
        });
        try {
            for await (const item of innerIterable) {
                if (source.token.isCancellationRequested) {
                    return;
                }
                emitter.emitOne(item);
            }
            subscription.dispose();
            source.dispose();
        }
        catch (err) {
            subscription.dispose();
            source.dispose();
            emitter.reject(err);
        }
    }));
}
class AsyncIterableSource {
    constructor(onReturn) {
        this._deferred = ( new DeferredPromise());
        this._asyncIterable = ( new AsyncIterableObject(emitter => {
            if (earlyError) {
                emitter.reject(earlyError);
                return;
            }
            if (earlyItems) {
                emitter.emitMany(earlyItems);
            }
            this._errorFn = (error) => emitter.reject(error);
            this._emitFn = (item) => emitter.emitOne(item);
            return this._deferred.p;
        }, onReturn));
        let earlyError;
        let earlyItems;
        this._emitFn = (item) => {
            if (!earlyItems) {
                earlyItems = [];
            }
            earlyItems.push(item);
        };
        this._errorFn = (error) => {
            if (!earlyError) {
                earlyError = error;
            }
        };
    }
    get asyncIterable() {
        return this._asyncIterable;
    }
    resolve() {
        this._deferred.complete();
    }
    reject(error) {
        this._errorFn(error);
        this._deferred.complete();
    }
    emitOne(item) {
        this._emitFn(item);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/buffer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VSBuffer: () => (/* binding */ VSBuffer),
/* harmony export */   binaryIndexOf: () => (/* binding */ binaryIndexOf),
/* harmony export */   bufferToReadable: () => (/* binding */ bufferToReadable),
/* harmony export */   bufferToStream: () => (/* binding */ bufferToStream),
/* harmony export */   bufferedStreamToBuffer: () => (/* binding */ bufferedStreamToBuffer),
/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),
/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),
/* harmony export */   newWriteableBufferStream: () => (/* binding */ newWriteableBufferStream),
/* harmony export */   prefixedBufferReadable: () => (/* binding */ prefixedBufferReadable),
/* harmony export */   prefixedBufferStream: () => (/* binding */ prefixedBufferStream),
/* harmony export */   readUInt16LE: () => (/* binding */ readUInt16LE),
/* harmony export */   readUInt32BE: () => (/* binding */ readUInt32BE),
/* harmony export */   readUInt32LE: () => (/* binding */ readUInt32LE),
/* harmony export */   readUInt8: () => (/* binding */ readUInt8),
/* harmony export */   readableToBuffer: () => (/* binding */ readableToBuffer),
/* harmony export */   streamToBuffer: () => (/* binding */ streamToBuffer),
/* harmony export */   writeUInt16LE: () => (/* binding */ writeUInt16LE),
/* harmony export */   writeUInt32BE: () => (/* binding */ writeUInt32BE),
/* harmony export */   writeUInt32LE: () => (/* binding */ writeUInt32LE),
/* harmony export */   writeUInt8: () => (/* binding */ writeUInt8)
/* harmony export */ });
/* harmony import */ var _lazy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lazy.js */ "./node_modules/vscode/vscode/src/vs/base/common/lazy.js");
/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.js */ "./node_modules/vscode/vscode/src/vs/base/common/stream.js");


const hasBuffer = (typeof Buffer !== 'undefined');
const indexOfTable = ( new _lazy_js__WEBPACK_IMPORTED_MODULE_0__.Lazy(() => ( new Uint8Array(256))));
let textEncoder;
let textDecoder;
class VSBuffer {
    static alloc(byteLength) {
        if (hasBuffer) {
            return ( new VSBuffer(Buffer.allocUnsafe(byteLength)));
        }
        else {
            return ( new VSBuffer(( new Uint8Array(byteLength))));
        }
    }
    static wrap(actual) {
        if (hasBuffer && !(Buffer.isBuffer(actual))) {
            actual = Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength);
        }
        return ( new VSBuffer(actual));
    }
    static fromString(source, options) {
        const dontUseNodeBuffer = options?.dontUseNodeBuffer || false;
        if (!dontUseNodeBuffer && hasBuffer) {
            return ( new VSBuffer(Buffer.from(source)));
        }
        else {
            if (!textEncoder) {
                textEncoder = ( new TextEncoder());
            }
            return ( new VSBuffer(textEncoder.encode(source)));
        }
    }
    static fromByteArray(source) {
        const result = VSBuffer.alloc(source.length);
        for (let i = 0, len = source.length; i < len; i++) {
            result.buffer[i] = source[i];
        }
        return result;
    }
    static concat(buffers, totalLength) {
        if (typeof totalLength === 'undefined') {
            totalLength = 0;
            for (let i = 0, len = buffers.length; i < len; i++) {
                totalLength += buffers[i].byteLength;
            }
        }
        const ret = VSBuffer.alloc(totalLength);
        let offset = 0;
        for (let i = 0, len = buffers.length; i < len; i++) {
            const element = buffers[i];
            ret.set(element, offset);
            offset += element.byteLength;
        }
        return ret;
    }
    constructor(buffer) {
        this.buffer = buffer;
        this.byteLength = this.buffer.byteLength;
    }
    clone() {
        const result = VSBuffer.alloc(this.byteLength);
        result.set(this);
        return result;
    }
    toString() {
        if (hasBuffer) {
            return ( this.buffer.toString());
        }
        else {
            if (!textDecoder) {
                textDecoder = ( new TextDecoder());
            }
            return textDecoder.decode(this.buffer);
        }
    }
    slice(start, end) {
        return ( new VSBuffer(this.buffer.subarray(start, end)));
    }
    set(array, offset) {
        if (array instanceof VSBuffer) {
            this.buffer.set(array.buffer, offset);
        }
        else if (array instanceof Uint8Array) {
            this.buffer.set(array, offset);
        }
        else if (array instanceof ArrayBuffer) {
            this.buffer.set(( new Uint8Array(array)), offset);
        }
        else if (ArrayBuffer.isView(array)) {
            this.buffer.set(( new Uint8Array(array.buffer, array.byteOffset, array.byteLength)), offset);
        }
        else {
            throw ( new Error(`Unknown argument 'array'`));
        }
    }
    readUInt32BE(offset) {
        return readUInt32BE(this.buffer, offset);
    }
    writeUInt32BE(value, offset) {
        writeUInt32BE(this.buffer, value, offset);
    }
    readUInt32LE(offset) {
        return readUInt32LE(this.buffer, offset);
    }
    writeUInt32LE(value, offset) {
        writeUInt32LE(this.buffer, value, offset);
    }
    readUInt8(offset) {
        return readUInt8(this.buffer, offset);
    }
    writeUInt8(value, offset) {
        writeUInt8(this.buffer, value, offset);
    }
    indexOf(subarray, offset = 0) {
        return binaryIndexOf(this.buffer, subarray instanceof VSBuffer ? subarray.buffer : subarray, offset);
    }
}
function binaryIndexOf(haystack, needle, offset = 0) {
    const needleLen = needle.byteLength;
    const haystackLen = haystack.byteLength;
    if (needleLen === 0) {
        return 0;
    }
    if (needleLen === 1) {
        return haystack.indexOf(needle[0]);
    }
    if (needleLen > haystackLen - offset) {
        return -1;
    }
    const table = indexOfTable.value;
    table.fill(needle.length);
    for (let i = 0; i < needle.length; i++) {
        table[needle[i]] = needle.length - i - 1;
    }
    let i = offset + needle.length - 1;
    let j = i;
    let result = -1;
    while (i < haystackLen) {
        if (haystack[i] === needle[j]) {
            if (j === 0) {
                result = i;
                break;
            }
            i--;
            j--;
        }
        else {
            i += Math.max(needle.length - j, table[haystack[i]]);
            j = needle.length - 1;
        }
    }
    return result;
}
function readUInt16LE(source, offset) {
    return (((source[offset + 0] << 0) >>> 0) |
        ((source[offset + 1] << 8) >>> 0));
}
function writeUInt16LE(destination, value, offset) {
    destination[offset + 0] = (value & 0b11111111);
    value = value >>> 8;
    destination[offset + 1] = (value & 0b11111111);
}
function readUInt32BE(source, offset) {
    return (source[offset] * 2 ** 24
        + source[offset + 1] * 2 ** 16
        + source[offset + 2] * 2 ** 8
        + source[offset + 3]);
}
function writeUInt32BE(destination, value, offset) {
    destination[offset + 3] = value;
    value = value >>> 8;
    destination[offset + 2] = value;
    value = value >>> 8;
    destination[offset + 1] = value;
    value = value >>> 8;
    destination[offset] = value;
}
function readUInt32LE(source, offset) {
    return (((source[offset + 0] << 0) >>> 0) |
        ((source[offset + 1] << 8) >>> 0) |
        ((source[offset + 2] << 16) >>> 0) |
        ((source[offset + 3] << 24) >>> 0));
}
function writeUInt32LE(destination, value, offset) {
    destination[offset + 0] = (value & 0b11111111);
    value = value >>> 8;
    destination[offset + 1] = (value & 0b11111111);
    value = value >>> 8;
    destination[offset + 2] = (value & 0b11111111);
    value = value >>> 8;
    destination[offset + 3] = (value & 0b11111111);
}
function readUInt8(source, offset) {
    return source[offset];
}
function writeUInt8(destination, value, offset) {
    destination[offset] = value;
}
function readableToBuffer(readable) {
    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.consumeReadable)(readable, chunks => VSBuffer.concat(chunks));
}
function bufferToReadable(buffer) {
    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.toReadable)(buffer);
}
function streamToBuffer(stream) {
    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.consumeStream)(stream, chunks => VSBuffer.concat(chunks));
}
async function bufferedStreamToBuffer(bufferedStream) {
    if (bufferedStream.ended) {
        return VSBuffer.concat(bufferedStream.buffer);
    }
    return VSBuffer.concat([
        ...bufferedStream.buffer,
        await streamToBuffer(bufferedStream.stream)
    ]);
}
function bufferToStream(buffer) {
    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.toStream)(buffer, chunks => VSBuffer.concat(chunks));
}
function newWriteableBufferStream(options) {
    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.newWriteableStream)(chunks => VSBuffer.concat(chunks), options);
}
function prefixedBufferReadable(prefix, readable) {
    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.prefixedReadable)(prefix, readable, chunks => VSBuffer.concat(chunks));
}
function prefixedBufferStream(prefix, stream) {
    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.prefixedStream)(prefix, stream, chunks => VSBuffer.concat(chunks));
}
function decodeBase64(encoded) {
    let building = 0;
    let remainder = 0;
    let bufi = 0;
    const buffer = ( new Uint8Array(Math.floor(encoded.length / 4 * 3)));
    const append = (value) => {
        switch (remainder) {
            case 3:
                buffer[bufi++] = building | value;
                remainder = 0;
                break;
            case 2:
                buffer[bufi++] = building | (value >>> 2);
                building = value << 6;
                remainder = 3;
                break;
            case 1:
                buffer[bufi++] = building | (value >>> 4);
                building = value << 4;
                remainder = 2;
                break;
            default:
                building = value << 2;
                remainder = 1;
        }
    };
    for (let i = 0; i < encoded.length; i++) {
        const code = encoded.charCodeAt(i);
        if (code >= 65 && code <= 90) {
            append(code - 65);
        }
        else if (code >= 97 && code <= 122) {
            append(code - 97 + 26);
        }
        else if (code >= 48 && code <= 57) {
            append(code - 48 + 52);
        }
        else if (code === 43 || code === 45) {
            append(62);
        }
        else if (code === 47 || code === 95) {
            append(63);
        }
        else if (code === 61) {
            break;
        }
        else {
            throw ( new SyntaxError(`Unexpected base64 character ${encoded[i]}`));
        }
    }
    const unpadded = bufi;
    while (remainder > 0) {
        append(0);
    }
    return VSBuffer.wrap(buffer).slice(0, unpadded);
}
const base64Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
const base64UrlSafeAlphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';
function encodeBase64({ buffer }, padded = true, urlSafe = false) {
    const dictionary = urlSafe ? base64UrlSafeAlphabet : base64Alphabet;
    let output = '';
    const remainder = buffer.byteLength % 3;
    let i = 0;
    for (; i < buffer.byteLength - remainder; i += 3) {
        const a = buffer[i + 0];
        const b = buffer[i + 1];
        const c = buffer[i + 2];
        output += dictionary[a >>> 2];
        output += dictionary[(a << 4 | b >>> 4) & 0b111111];
        output += dictionary[(b << 2 | c >>> 6) & 0b111111];
        output += dictionary[c & 0b111111];
    }
    if (remainder === 1) {
        const a = buffer[i + 0];
        output += dictionary[a >>> 2];
        output += dictionary[(a << 4) & 0b111111];
        if (padded) {
            output += '==';
        }
    }
    else if (remainder === 2) {
        const a = buffer[i + 0];
        const b = buffer[i + 1];
        output += dictionary[a >>> 2];
        output += dictionary[(a << 4 | b >>> 4) & 0b111111];
        output += dictionary[(b << 2) & 0b111111];
        if (padded) {
            output += '=';
        }
    }
    return output;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/comparers.js":
/*!********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/comparers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareAnything: () => (/* binding */ compareAnything),
/* harmony export */   compareByPrefix: () => (/* binding */ compareByPrefix),
/* harmony export */   compareFileExtensions: () => (/* binding */ compareFileExtensions),
/* harmony export */   compareFileExtensionsDefault: () => (/* binding */ compareFileExtensionsDefault),
/* harmony export */   compareFileExtensionsLower: () => (/* binding */ compareFileExtensionsLower),
/* harmony export */   compareFileExtensionsUnicode: () => (/* binding */ compareFileExtensionsUnicode),
/* harmony export */   compareFileExtensionsUpper: () => (/* binding */ compareFileExtensionsUpper),
/* harmony export */   compareFileNames: () => (/* binding */ compareFileNames),
/* harmony export */   compareFileNamesDefault: () => (/* binding */ compareFileNamesDefault),
/* harmony export */   compareFileNamesLower: () => (/* binding */ compareFileNamesLower),
/* harmony export */   compareFileNamesUnicode: () => (/* binding */ compareFileNamesUnicode),
/* harmony export */   compareFileNamesUpper: () => (/* binding */ compareFileNamesUpper),
/* harmony export */   comparePaths: () => (/* binding */ comparePaths)
/* harmony export */ });
/* harmony import */ var _lazy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lazy.js */ "./node_modules/vscode/vscode/src/vs/base/common/lazy.js");
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");


const intlFileNameCollatorBaseNumeric = ( new _lazy_js__WEBPACK_IMPORTED_MODULE_0__.Lazy(() => {
    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });
    return {
        collator,
        collatorIsNumeric: collator.resolvedOptions().numeric
    };
}));
const intlFileNameCollatorNumeric = ( new _lazy_js__WEBPACK_IMPORTED_MODULE_0__.Lazy(() => {
    const collator = new Intl.Collator(undefined, { numeric: true });
    return {
        collator
    };
}));
const intlFileNameCollatorNumericCaseInsensitive = ( new _lazy_js__WEBPACK_IMPORTED_MODULE_0__.Lazy(() => {
    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'accent' });
    return {
        collator
    };
}));
function compareFileNames(one, other, caseSensitive = false) {
    const a = one || '';
    const b = other || '';
    const result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);
    if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && a !== b) {
        return a < b ? -1 : 1;
    }
    return result;
}
function compareFileNamesDefault(one, other) {
    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;
    one = one || '';
    other = other || '';
    return compareAndDisambiguateByLength(collatorNumeric, one, other);
}
function compareFileNamesUpper(one, other) {
    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;
    one = one || '';
    other = other || '';
    return compareCaseUpperFirst(one, other) || compareAndDisambiguateByLength(collatorNumeric, one, other);
}
function compareFileNamesLower(one, other) {
    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;
    one = one || '';
    other = other || '';
    return compareCaseLowerFirst(one, other) || compareAndDisambiguateByLength(collatorNumeric, one, other);
}
function compareFileNamesUnicode(one, other) {
    one = one || '';
    other = other || '';
    if (one === other) {
        return 0;
    }
    return one < other ? -1 : 1;
}
function compareFileExtensions(one, other) {
    const [oneName, oneExtension] = extractNameAndExtension(one);
    const [otherName, otherExtension] = extractNameAndExtension(other);
    let result = intlFileNameCollatorBaseNumeric.value.collator.compare(oneExtension, otherExtension);
    if (result === 0) {
        if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && oneExtension !== otherExtension) {
            return oneExtension < otherExtension ? -1 : 1;
        }
        result = intlFileNameCollatorBaseNumeric.value.collator.compare(oneName, otherName);
        if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && oneName !== otherName) {
            return oneName < otherName ? -1 : 1;
        }
    }
    return result;
}
function compareFileExtensionsDefault(one, other) {
    one = one || '';
    other = other || '';
    const oneExtension = extractExtension(one);
    const otherExtension = extractExtension(other);
    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;
    const collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;
    return compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||
        compareAndDisambiguateByLength(collatorNumeric, one, other);
}
function compareFileExtensionsUpper(one, other) {
    one = one || '';
    other = other || '';
    const oneExtension = extractExtension(one);
    const otherExtension = extractExtension(other);
    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;
    const collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;
    return compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||
        compareCaseUpperFirst(one, other) ||
        compareAndDisambiguateByLength(collatorNumeric, one, other);
}
function compareFileExtensionsLower(one, other) {
    one = one || '';
    other = other || '';
    const oneExtension = extractExtension(one);
    const otherExtension = extractExtension(other);
    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;
    const collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;
    return compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||
        compareCaseLowerFirst(one, other) ||
        compareAndDisambiguateByLength(collatorNumeric, one, other);
}
function compareFileExtensionsUnicode(one, other) {
    one = one || '';
    other = other || '';
    const oneExtension = extractExtension(one).toLowerCase();
    const otherExtension = extractExtension(other).toLowerCase();
    if (oneExtension !== otherExtension) {
        return oneExtension < otherExtension ? -1 : 1;
    }
    if (one !== other) {
        return one < other ? -1 : 1;
    }
    return 0;
}
const FileNameMatch = /^(.*?)(\.([^.]*))?$/;
function extractNameAndExtension(str, dotfilesAsNames = false) {
    const match = str ? FileNameMatch.exec(str) : [];
    let result = [(match && match[1]) || '', (match && match[3]) || ''];
    if (dotfilesAsNames && (!result[0] && result[1] || result[0] && result[0].charAt(0) === '.')) {
        result = [result[0] + '.' + result[1], ''];
    }
    return result;
}
function extractExtension(str) {
    const match = str ? FileNameMatch.exec(str) : [];
    return (match && match[1] && match[1].charAt(0) !== '.' && match[3]) || '';
}
function compareAndDisambiguateByLength(collator, one, other) {
    const result = collator.compare(one, other);
    if (result !== 0) {
        return result;
    }
    if (one.length !== other.length) {
        return one.length < other.length ? -1 : 1;
    }
    return 0;
}
function startsWithLower(string) {
    const character = string.charAt(0);
    return (character.toLocaleUpperCase() !== character) ? true : false;
}
function startsWithUpper(string) {
    const character = string.charAt(0);
    return (character.toLocaleLowerCase() !== character) ? true : false;
}
function compareCaseLowerFirst(one, other) {
    if (startsWithLower(one) && startsWithUpper(other)) {
        return -1;
    }
    return (startsWithUpper(one) && startsWithLower(other)) ? 1 : 0;
}
function compareCaseUpperFirst(one, other) {
    if (startsWithUpper(one) && startsWithLower(other)) {
        return -1;
    }
    return (startsWithLower(one) && startsWithUpper(other)) ? 1 : 0;
}
function comparePathComponents(one, other, caseSensitive = false) {
    if (!caseSensitive) {
        one = one && one.toLowerCase();
        other = other && other.toLowerCase();
    }
    if (one === other) {
        return 0;
    }
    return one < other ? -1 : 1;
}
function comparePaths(one, other, caseSensitive = false) {
    const oneParts = one.split(_path_js__WEBPACK_IMPORTED_MODULE_1__.sep);
    const otherParts = other.split(_path_js__WEBPACK_IMPORTED_MODULE_1__.sep);
    const lastOne = oneParts.length - 1;
    const lastOther = otherParts.length - 1;
    let endOne, endOther;
    for (let i = 0;; i++) {
        endOne = lastOne === i;
        endOther = lastOther === i;
        if (endOne && endOther) {
            return compareFileNames(oneParts[i], otherParts[i], caseSensitive);
        }
        else if (endOne) {
            return -1;
        }
        else if (endOther) {
            return 1;
        }
        const result = comparePathComponents(oneParts[i], otherParts[i], caseSensitive);
        if (result !== 0) {
            return result;
        }
    }
}
function compareAnything(one, other, lookFor) {
    const elementAName = one.toLowerCase();
    const elementBName = other.toLowerCase();
    const prefixCompare = compareByPrefix(one, other, lookFor);
    if (prefixCompare) {
        return prefixCompare;
    }
    const elementASuffixMatch = elementAName.endsWith(lookFor);
    const elementBSuffixMatch = elementBName.endsWith(lookFor);
    if (elementASuffixMatch !== elementBSuffixMatch) {
        return elementASuffixMatch ? -1 : 1;
    }
    const r = compareFileNames(elementAName, elementBName);
    if (r !== 0) {
        return r;
    }
    return elementAName.localeCompare(elementBName);
}
function compareByPrefix(one, other, lookFor) {
    const elementAName = one.toLowerCase();
    const elementBName = other.toLowerCase();
    const elementAPrefixMatch = elementAName.startsWith(lookFor);
    const elementBPrefixMatch = elementBName.startsWith(lookFor);
    if (elementAPrefixMatch !== elementBPrefixMatch) {
        return elementAPrefixMatch ? -1 : 1;
    }
    else if (elementAPrefixMatch && elementBPrefixMatch) {
        if (elementAName.length < elementBName.length) {
            return -1;
        }
        if (elementAName.length > elementBName.length) {
            return 1;
        }
    }
    return 0;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/dataTransfer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/dataTransfer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UriList: () => (/* binding */ UriList),
/* harmony export */   VSDataTransfer: () => (/* binding */ VSDataTransfer),
/* harmony export */   createFileDataTransferItem: () => (/* binding */ createFileDataTransferItem),
/* harmony export */   createStringDataTransferItem: () => (/* binding */ createStringDataTransferItem),
/* harmony export */   matchesMimeType: () => (/* binding */ matchesMimeType)
/* harmony export */ });
/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");
/* harmony import */ var _uuid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./uuid.js */ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js");



function createStringDataTransferItem(stringOrPromise) {
    return {
        asString: async () => stringOrPromise,
        asFile: () => undefined,
        value: typeof stringOrPromise === 'string' ? stringOrPromise : undefined,
    };
}
function createFileDataTransferItem(fileName, uri, data) {
    const file = { id: (0,_uuid_js__WEBPACK_IMPORTED_MODULE_2__.generateUuid)(), name: fileName, uri, data };
    return {
        asString: async () => '',
        asFile: () => file,
        value: undefined,
    };
}
class VSDataTransfer {
    constructor() {
        this._entries = ( new Map());
    }
    get size() {
        let size = 0;
        for (const _ of this._entries) {
            size++;
        }
        return size;
    }
    has(mimeType) {
        return ( this._entries.has(this.toKey(mimeType)));
    }
    matches(pattern) {
        const mimes = [...( this._entries.keys())];
        if (( _iterator_js__WEBPACK_IMPORTED_MODULE_1__.Iterable.some(this, ([_, item]) => item.asFile()))) {
            mimes.push('files');
        }
        return matchesMimeType_normalized(normalizeMimeType(pattern), mimes);
    }
    get(mimeType) {
        return this._entries.get(this.toKey(mimeType))?.[0];
    }
    append(mimeType, value) {
        const existing = this._entries.get(mimeType);
        if (existing) {
            existing.push(value);
        }
        else {
            this._entries.set(this.toKey(mimeType), [value]);
        }
    }
    replace(mimeType, value) {
        this._entries.set(this.toKey(mimeType), [value]);
    }
    delete(mimeType) {
        this._entries.delete(this.toKey(mimeType));
    }
    *[Symbol.iterator]() {
        for (const [mine, items] of this._entries) {
            for (const item of items) {
                yield [mine, item];
            }
        }
    }
    toKey(mimeType) {
        return normalizeMimeType(mimeType);
    }
}
function normalizeMimeType(mimeType) {
    return mimeType.toLowerCase();
}
function matchesMimeType(pattern, mimeTypes) {
    return matchesMimeType_normalized(normalizeMimeType(pattern), ( mimeTypes.map(normalizeMimeType)));
}
function matchesMimeType_normalized(normalizedPattern, normalizedMimeTypes) {
    if (normalizedPattern === '*/*') {
        return normalizedMimeTypes.length > 0;
    }
    if (normalizedMimeTypes.includes(normalizedPattern)) {
        return true;
    }
    const wildcard = normalizedPattern.match(/^([a-z]+)\/([a-z]+|\*)$/i);
    if (!wildcard) {
        return false;
    }
    const [_, type, subtype] = wildcard;
    if (subtype === '*') {
        return ( normalizedMimeTypes.some(mime => mime.startsWith(type + '/')));
    }
    return false;
}
const UriList = ( Object.freeze({
    create: (entries) => {
        return (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.distinct)(( entries.map(x => ( x.toString())))).join('\r\n');
    },
    split: (str) => {
        return str.split('\r\n');
    },
    parse: (str) => {
        return UriList.split(str).filter(value => !value.startsWith('#'));
    }
}));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/date.js":
/*!***************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/date.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fromNow: () => (/* binding */ fromNow),
/* harmony export */   getDurationString: () => (/* binding */ getDurationString),
/* harmony export */   toLocalISOString: () => (/* binding */ toLocalISOString)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");

const _moduleId = "vs/base/common/date";
const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const month = day * 30;
const year = day * 365;
function fromNow(date, appendAgoLabel, useFullTimeWords, disallowNow) {
    if (typeof date !== 'number') {
        date = date.getTime();
    }
    const seconds = Math.round((( (new Date())).getTime() - date) / 1000);
    if (seconds < -30) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
            _moduleId,
            0,
            'in {0}',
            fromNow(( (new Date())).getTime() + seconds * 1000, false)
        ));
    }
    if (!disallowNow && seconds < 30) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 1, 'now'));
    }
    let value;
    if (seconds < minute) {
        value = seconds;
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 2, '{0} second ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 3, '{0} sec ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 4, '{0} seconds ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 5, '{0} secs ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 6, '{0} second', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 7, '{0} sec', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 8, '{0} seconds', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 9, '{0} secs', value));
            }
        }
    }
    if (seconds < hour) {
        value = Math.floor(seconds / minute);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 10, '{0} minute ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 11, '{0} min ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 12, '{0} minutes ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 13, '{0} mins ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 14, '{0} minute', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 15, '{0} min', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 16, '{0} minutes', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 17, '{0} mins', value));
            }
        }
    }
    if (seconds < day) {
        value = Math.floor(seconds / hour);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 18, '{0} hour ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 19, '{0} hr ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 20, '{0} hours ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 21, '{0} hrs ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 22, '{0} hour', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 23, '{0} hr', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 24, '{0} hours', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 25, '{0} hrs', value));
            }
        }
    }
    if (seconds < week) {
        value = Math.floor(seconds / day);
        if (appendAgoLabel) {
            return value === 1
                ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 26, '{0} day ago', value))
                : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 27, '{0} days ago', value));
        }
        else {
            return value === 1
                ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 28, '{0} day', value))
                : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 29, '{0} days', value));
        }
    }
    if (seconds < month) {
        value = Math.floor(seconds / week);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 30, '{0} week ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 31, '{0} wk ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 32, '{0} weeks ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 33, '{0} wks ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 34, '{0} week', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 35, '{0} wk', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 36, '{0} weeks', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 37, '{0} wks', value));
            }
        }
    }
    if (seconds < year) {
        value = Math.floor(seconds / month);
        if (appendAgoLabel) {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 38, '{0} month ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 39, '{0} mo ago', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 40, '{0} months ago', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 41, '{0} mos ago', value));
            }
        }
        else {
            if (value === 1) {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 42, '{0} month', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 43, '{0} mo', value));
            }
            else {
                return useFullTimeWords
                    ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 44, '{0} months', value))
                    : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 45, '{0} mos', value));
            }
        }
    }
    value = Math.floor(seconds / year);
    if (appendAgoLabel) {
        if (value === 1) {
            return useFullTimeWords
                ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 46, '{0} year ago', value))
                : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 47, '{0} yr ago', value));
        }
        else {
            return useFullTimeWords
                ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 48, '{0} years ago', value))
                : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 49, '{0} yrs ago', value));
        }
    }
    else {
        if (value === 1) {
            return useFullTimeWords
                ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 50, '{0} year', value))
                : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 51, '{0} yr', value));
        }
        else {
            return useFullTimeWords
                ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 52, '{0} years', value))
                : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 53, '{0} yrs', value));
        }
    }
}
function getDurationString(ms, useFullTimeWords) {
    const seconds = Math.abs(ms / 1000);
    if (seconds < 1) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 55, '{0}ms', ms));
    }
    if (seconds < minute) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 57, '{0}s', Math.round(ms) / 1000));
    }
    if (seconds < hour) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 59, '{0} mins', Math.round(ms / (1000 * minute))));
    }
    if (seconds < day) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 61, '{0} hrs', Math.round(ms / (1000 * hour))));
    }
    return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 62, '{0} days', Math.round(ms / (1000 * day))));
}
function toLocalISOString(date) {
    return date.getFullYear() +
        '-' + String(date.getMonth() + 1).padStart(2, '0') +
        '-' + String(date.getDate()).padStart(2, '0') +
        'T' + String(date.getHours()).padStart(2, '0') +
        ':' + String(date.getMinutes()).padStart(2, '0') +
        ':' + String(date.getSeconds()).padStart(2, '0') +
        '.' + (date.getMilliseconds() / 1000).toFixed(3).slice(2, 5) +
        'Z';
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/decorators.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/decorators.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   debounce: () => (/* binding */ debounce),
/* harmony export */   memoize: () => (/* binding */ memoize),
/* harmony export */   throttle: () => (/* binding */ throttle)
/* harmony export */ });
function createDecorator(mapFn) {
    return (target, key, descriptor) => {
        let fnKey = null;
        let fn = null;
        if (typeof descriptor.value === 'function') {
            fnKey = 'value';
            fn = descriptor.value;
        }
        else if (typeof descriptor.get === 'function') {
            fnKey = 'get';
            fn = descriptor.get;
        }
        if (!fn) {
            throw ( new Error('not supported'));
        }
        descriptor[fnKey] = mapFn(fn, key);
    };
}
function memoize(_target, key, descriptor) {
    let fnKey = null;
    let fn = null;
    if (typeof descriptor.value === 'function') {
        fnKey = 'value';
        fn = descriptor.value;
        if (fn.length !== 0) {
            console.warn('Memoize should only be used in functions with zero parameters');
        }
    }
    else if (typeof descriptor.get === 'function') {
        fnKey = 'get';
        fn = descriptor.get;
    }
    if (!fn) {
        throw ( new Error('not supported'));
    }
    const memoizeKey = `$memoize$${key}`;
    descriptor[fnKey] = function (...args) {
        if (!this.hasOwnProperty(memoizeKey)) {
            Object.defineProperty(this, memoizeKey, {
                configurable: false,
                enumerable: false,
                writable: false,
                value: fn.apply(this, args)
            });
        }
        return this[memoizeKey];
    };
}
function debounce(delay, reducer, initialValueProvider) {
    return ( createDecorator((fn, key) => {
        const timerKey = `$debounce$${key}`;
        const resultKey = `$debounce$result$${key}`;
        return function (...args) {
            if (!this[resultKey]) {
                this[resultKey] = undefined;
            }
            clearTimeout(this[timerKey]);
            this[timerKey] = setTimeout(() => {
                fn.apply(this, args);
                this[resultKey] = undefined;
            }, delay);
        };
    }));
}
function throttle(delay, reducer, initialValueProvider) {
    return ( createDecorator((fn, key) => {
        const timerKey = `$throttle$timer$${key}`;
        const resultKey = `$throttle$result$${key}`;
        const lastRunKey = `$throttle$lastRun$${key}`;
        const pendingKey = `$throttle$pending$${key}`;
        return function (...args) {
            if (!this[resultKey]) {
                this[resultKey] = initialValueProvider ? initialValueProvider() : undefined;
            }
            if (this[lastRunKey] === null || this[lastRunKey] === undefined) {
                this[lastRunKey] = -Number.MAX_VALUE;
            }
            if (reducer) {
                this[resultKey] = reducer(this[resultKey], ...args);
            }
            if (this[pendingKey]) {
                return;
            }
            const nextTime = this[lastRunKey] + delay;
            if (nextTime <= Date.now()) {
                this[lastRunKey] = Date.now();
                fn.apply(this, [this[resultKey]]);
                this[resultKey] = initialValueProvider ? initialValueProvider() : undefined;
            }
            else {
                this[pendingKey] = true;
                this[timerKey] = setTimeout(() => {
                    this[pendingKey] = false;
                    this[lastRunKey] = Date.now();
                    fn.apply(this, [this[resultKey]]);
                    this[resultKey] = initialValueProvider ? initialValueProvider() : undefined;
                }, nextTime - Date.now());
            }
        };
    }));
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/equals.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/equals.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   equalsIfDefined: () => (/* binding */ equalsIfDefined),
/* harmony export */   getStructuralKey: () => (/* binding */ getStructuralKey),
/* harmony export */   itemEquals: () => (/* binding */ itemEquals),
/* harmony export */   itemsEquals: () => (/* binding */ itemsEquals),
/* harmony export */   strictEquals: () => (/* binding */ strictEquals),
/* harmony export */   structuralEquals: () => (/* binding */ structuralEquals)
/* harmony export */ });
/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");

const strictEquals = (a, b) => a === b;
function itemsEquals(itemEquals = strictEquals) {
    return (a, b) => (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(a, b, itemEquals);
}
function itemEquals() {
    return (a, b) => a.equals(b);
}
function equalsIfDefined(equalsOrV1, v2, equals) {
    if (equals !== undefined) {
        const v1 = equalsOrV1;
        if (v1 === undefined || v1 === null || v2 === undefined || v2 === null) {
            return v2 === v1;
        }
        return equals(v1, v2);
    }
    else {
        const equals = equalsOrV1;
        return (v1, v2) => {
            if (v1 === undefined || v1 === null || v2 === undefined || v2 === null) {
                return v2 === v1;
            }
            return equals(v1, v2);
        };
    }
}
function structuralEquals(a, b) {
    if (a === b) {
        return true;
    }
    if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!structuralEquals(a[i], b[i])) {
                return false;
            }
        }
        return true;
    }
    if (a && typeof a === 'object' && b && typeof b === 'object') {
        if (Object.getPrototypeOf(a) === Object.prototype && Object.getPrototypeOf(b) === Object.prototype) {
            const aObj = a;
            const bObj = b;
            const keysA = ( Object.keys(aObj));
            const keysB = ( Object.keys(bObj));
            const keysBSet = ( new Set(keysB));
            if (keysA.length !== keysB.length) {
                return false;
            }
            for (const key of keysA) {
                if (!( keysBSet.has(key))) {
                    return false;
                }
                if (!structuralEquals(aObj[key], bObj[key])) {
                    return false;
                }
            }
            return true;
        }
    }
    return false;
}
function getStructuralKey(t) {
    return JSON.stringify(toNormalizedJsonStructure(t));
}
let objectId = 0;
const objIds = ( new WeakMap());
function toNormalizedJsonStructure(t) {
    if (Array.isArray(t)) {
        return ( t.map(toNormalizedJsonStructure));
    }
    if (t && typeof t === 'object') {
        if (Object.getPrototypeOf(t) === Object.prototype) {
            const tObj = t;
            const res = Object.create(null);
            for (const key of ( Object.keys(tObj)).sort()) {
                res[key] = toNormalizedJsonStructure(tObj[key]);
            }
            return res;
        }
        else {
            let objId = objIds.get(t);
            if (objId === undefined) {
                objId = objectId++;
                objIds.set(t, objId);
            }
            return objId + '----2b76a038c20c4bcc';
        }
    }
    return t;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js":
/*!***********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createErrorWithActions: () => (/* binding */ createErrorWithActions),
/* harmony export */   isErrorWithActions: () => (/* binding */ isErrorWithActions),
/* harmony export */   toErrorMessage: () => (/* binding */ toErrorMessage)
/* harmony export */ });
/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");



const _moduleId = "vs/base/common/errorMessage";
function exceptionToErrorMessage(exception, verbose) {
    if (verbose && (exception.stack || exception.stacktrace)) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            0,
            "{0}: {1}",
            detectSystemErrorMessage(exception),
            stackToString(exception.stack) || stackToString(exception.stacktrace)
        ));
    }
    return detectSystemErrorMessage(exception);
}
function stackToString(stack) {
    if (Array.isArray(stack)) {
        return stack.join('\n');
    }
    return stack;
}
function detectSystemErrorMessage(exception) {
    if (exception.code === 'ERR_UNC_HOST_NOT_ALLOWED') {
        return `${exception.message}. Please update the 'security.allowedUNCHosts' setting if you want to allow this host.`;
    }
    if (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 1, "A system error occurred ({0})", exception.message));
    }
    return exception.message || ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
        _moduleId,
        2,
        "An unknown error occurred. Please consult the log for more details."
    ));
}
function toErrorMessage(error = null, verbose = false) {
    if (!error) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            2,
            "An unknown error occurred. Please consult the log for more details."
        ));
    }
    if (Array.isArray(error)) {
        const errors = (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(error);
        const msg = toErrorMessage(errors[0], verbose);
        if (errors.length > 1) {
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 3, "{0} ({1} errors in total)", msg, errors.length));
        }
        return msg;
    }
    if ((0,_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(error)) {
        return error;
    }
    if (error.detail) {
        const detail = error.detail;
        if (detail.error) {
            return exceptionToErrorMessage(detail.error, verbose);
        }
        if (detail.exception) {
            return exceptionToErrorMessage(detail.exception, verbose);
        }
    }
    if (error.stack) {
        return exceptionToErrorMessage(error, verbose);
    }
    if (error.message) {
        return error.message;
    }
    return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
        _moduleId,
        2,
        "An unknown error occurred. Please consult the log for more details."
    ));
}
function isErrorWithActions(obj) {
    const candidate = obj;
    return candidate instanceof Error && Array.isArray(candidate.actions);
}
function createErrorWithActions(messageOrError, actions) {
    let error;
    if (typeof messageOrError === 'string') {
        error = ( (new Error(messageOrError)));
    }
    else {
        error = messageOrError;
    }
    error.actions = actions;
    return error;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/extpath.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/extpath.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDriveLetter: () => (/* binding */ getDriveLetter),
/* harmony export */   getRoot: () => (/* binding */ getRoot),
/* harmony export */   hasDriveLetter: () => (/* binding */ hasDriveLetter),
/* harmony export */   indexOfPath: () => (/* binding */ indexOfPath),
/* harmony export */   isEqual: () => (/* binding */ isEqual),
/* harmony export */   isEqualOrParent: () => (/* binding */ isEqualOrParent),
/* harmony export */   isPathSeparator: () => (/* binding */ isPathSeparator),
/* harmony export */   isUNC: () => (/* binding */ isUNC),
/* harmony export */   isValidBasename: () => (/* binding */ isValidBasename),
/* harmony export */   isWindowsDriveLetter: () => (/* binding */ isWindowsDriveLetter),
/* harmony export */   parseLineAndColumnAware: () => (/* binding */ parseLineAndColumnAware),
/* harmony export */   randomPath: () => (/* binding */ randomPath),
/* harmony export */   toPosixPath: () => (/* binding */ toPosixPath),
/* harmony export */   toSlashes: () => (/* binding */ toSlashes)
/* harmony export */ });
/* harmony import */ var _charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");





function isPathSeparator(code) {
    return code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Slash || code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Backslash;
}
function toSlashes(osPath) {
    return osPath.replace(/[\\/]/g, _path_js__WEBPACK_IMPORTED_MODULE_1__.posix.sep);
}
function toPosixPath(osPath) {
    if (osPath.indexOf('/') === -1) {
        osPath = toSlashes(osPath);
    }
    if (/^[a-zA-Z]:(\/|$)/.test(osPath)) {
        osPath = '/' + osPath;
    }
    return osPath;
}
function getRoot(path, sep = _path_js__WEBPACK_IMPORTED_MODULE_1__.posix.sep) {
    if (!path) {
        return '';
    }
    const len = path.length;
    const firstLetter = path.charCodeAt(0);
    if (isPathSeparator(firstLetter)) {
        if (isPathSeparator(path.charCodeAt(1))) {
            if (!isPathSeparator(path.charCodeAt(2))) {
                let pos = 3;
                const start = pos;
                for (; pos < len; pos++) {
                    if (isPathSeparator(path.charCodeAt(pos))) {
                        break;
                    }
                }
                if (start !== pos && !isPathSeparator(path.charCodeAt(pos + 1))) {
                    pos += 1;
                    for (; pos < len; pos++) {
                        if (isPathSeparator(path.charCodeAt(pos))) {
                            return path.slice(0, pos + 1)
                                .replace(/[\\/]/g, sep);
                        }
                    }
                }
            }
        }
        return sep;
    }
    else if (isWindowsDriveLetter(firstLetter)) {
        if (path.charCodeAt(1) === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Colon) {
            if (isPathSeparator(path.charCodeAt(2))) {
                return path.slice(0, 2) + sep;
            }
            else {
                return path.slice(0, 2);
            }
        }
    }
    let pos = path.indexOf('://');
    if (pos !== -1) {
        pos += 3;
        for (; pos < len; pos++) {
            if (isPathSeparator(path.charCodeAt(pos))) {
                return path.slice(0, pos + 1);
            }
        }
    }
    return '';
}
function isUNC(path) {
    if (!_platform_js__WEBPACK_IMPORTED_MODULE_2__.isWindows) {
        return false;
    }
    if (!path || path.length < 5) {
        return false;
    }
    let code = path.charCodeAt(0);
    if (code !== _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Backslash) {
        return false;
    }
    code = path.charCodeAt(1);
    if (code !== _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Backslash) {
        return false;
    }
    let pos = 2;
    const start = pos;
    for (; pos < path.length; pos++) {
        code = path.charCodeAt(pos);
        if (code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Backslash) {
            break;
        }
    }
    if (start === pos) {
        return false;
    }
    code = path.charCodeAt(pos + 1);
    if (isNaN(code) || code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Backslash) {
        return false;
    }
    return true;
}
const WINDOWS_INVALID_FILE_CHARS = /[\\/:\*\?"<>\|]/g;
const UNIX_INVALID_FILE_CHARS = /[/]/g;
const WINDOWS_FORBIDDEN_NAMES = /^(con|prn|aux|clock\$|nul|lpt[0-9]|com[0-9])(\.(.*?))?$/i;
function isValidBasename(name, isWindowsOS = _platform_js__WEBPACK_IMPORTED_MODULE_2__.isWindows) {
    const invalidFileChars = isWindowsOS ? WINDOWS_INVALID_FILE_CHARS : UNIX_INVALID_FILE_CHARS;
    if (!name || name.length === 0 || /^\s+$/.test(name)) {
        return false;
    }
    invalidFileChars.lastIndex = 0;
    if (invalidFileChars.test(name)) {
        return false;
    }
    if (isWindowsOS && WINDOWS_FORBIDDEN_NAMES.test(name)) {
        return false;
    }
    if (name === '.' || name === '..') {
        return false;
    }
    if (isWindowsOS && name[name.length - 1] === '.') {
        return false;
    }
    if (isWindowsOS && name.length !== name.trim().length) {
        return false;
    }
    if (name.length > 255) {
        return false;
    }
    return true;
}
function isEqual(pathA, pathB, ignoreCase) {
    const identityEquals = (pathA === pathB);
    if (!ignoreCase || identityEquals) {
        return identityEquals;
    }
    if (!pathA || !pathB) {
        return false;
    }
    return (0,_strings_js__WEBPACK_IMPORTED_MODULE_3__.equalsIgnoreCase)(pathA, pathB);
}
function isEqualOrParent(base, parentCandidate, ignoreCase, separator = _path_js__WEBPACK_IMPORTED_MODULE_1__.sep) {
    if (base === parentCandidate) {
        return true;
    }
    if (!base || !parentCandidate) {
        return false;
    }
    if (parentCandidate.length > base.length) {
        return false;
    }
    if (ignoreCase) {
        const beginsWith = (0,_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWithIgnoreCase)(base, parentCandidate);
        if (!beginsWith) {
            return false;
        }
        if (parentCandidate.length === base.length) {
            return true;
        }
        let sepOffset = parentCandidate.length;
        if (parentCandidate.charAt(parentCandidate.length - 1) === separator) {
            sepOffset--;
        }
        return base.charAt(sepOffset) === separator;
    }
    if (parentCandidate.charAt(parentCandidate.length - 1) !== separator) {
        parentCandidate += separator;
    }
    return base.indexOf(parentCandidate) === 0;
}
function isWindowsDriveLetter(char0) {
    return char0 >= _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.A && char0 <= _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Z || char0 >= _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.a && char0 <= _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.z;
}
function hasDriveLetter(path, isWindowsOS = _platform_js__WEBPACK_IMPORTED_MODULE_2__.isWindows) {
    if (isWindowsOS) {
        return isWindowsDriveLetter(path.charCodeAt(0)) && path.charCodeAt(1) === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Colon;
    }
    return false;
}
function getDriveLetter(path, isWindowsOS = _platform_js__WEBPACK_IMPORTED_MODULE_2__.isWindows) {
    return hasDriveLetter(path, isWindowsOS) ? path[0] : undefined;
}
function indexOfPath(path, candidate, ignoreCase) {
    if (candidate.length > path.length) {
        return -1;
    }
    if (path === candidate) {
        return 0;
    }
    if (ignoreCase) {
        path = path.toLowerCase();
        candidate = candidate.toLowerCase();
    }
    return path.indexOf(candidate);
}
function parseLineAndColumnAware(rawPath) {
    const segments = rawPath.split(':');
    let path = undefined;
    let line = undefined;
    let column = undefined;
    for (const segment of segments) {
        const segmentAsNumber = Number(segment);
        if (!(0,_types_js__WEBPACK_IMPORTED_MODULE_4__.isNumber)(segmentAsNumber)) {
            path = !!path ? [path, segment].join(':') : segment;
        }
        else if (line === undefined) {
            line = segmentAsNumber;
        }
        else if (column === undefined) {
            column = segmentAsNumber;
        }
    }
    if (!path) {
        throw ( new Error('Format for `--goto` should be: `FILE:LINE(:COLUMN)`'));
    }
    return {
        path,
        line: line !== undefined ? line : undefined,
        column: column !== undefined ? column : line !== undefined ? 1 : undefined
    };
}
const pathChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
const windowsSafePathFirstChars = 'BDEFGHIJKMOQRSTUVWXYZbdefghijkmoqrstuvwxyz0123456789';
function randomPath(parent, prefix, randomLength = 8) {
    let suffix = '';
    for (let i = 0; i < randomLength; i++) {
        let pathCharsTouse;
        if (i === 0 && _platform_js__WEBPACK_IMPORTED_MODULE_2__.isWindows && !prefix && (randomLength === 3 || randomLength === 4)) {
            pathCharsTouse = windowsSafePathFirstChars;
        }
        else {
            pathCharsTouse = pathChars;
        }
        suffix += pathCharsTouse.charAt(Math.floor(Math.random() * pathCharsTouse.length));
    }
    let randomFileName;
    {
        randomFileName = suffix;
    }
    return randomFileName;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/filters.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/filters.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FuzzyScore: () => (/* binding */ FuzzyScore),
/* harmony export */   FuzzyScoreOptions: () => (/* binding */ FuzzyScoreOptions),
/* harmony export */   anyScore: () => (/* binding */ anyScore),
/* harmony export */   createMatches: () => (/* binding */ createMatches),
/* harmony export */   fuzzyScore: () => (/* binding */ fuzzyScore),
/* harmony export */   fuzzyScoreGracefulAggressive: () => (/* binding */ fuzzyScoreGracefulAggressive),
/* harmony export */   isPatternInWord: () => (/* binding */ isPatternInWord),
/* harmony export */   isUpper: () => (/* binding */ isUpper),
/* harmony export */   matchesCamelCase: () => (/* binding */ matchesCamelCase),
/* harmony export */   matchesContiguousSubString: () => (/* binding */ matchesContiguousSubString),
/* harmony export */   matchesFuzzy: () => (/* binding */ matchesFuzzy),
/* harmony export */   matchesFuzzy2: () => (/* binding */ matchesFuzzy2),
/* harmony export */   matchesPrefix: () => (/* binding */ matchesPrefix),
/* harmony export */   matchesSubString: () => (/* binding */ matchesSubString),
/* harmony export */   matchesWords: () => (/* binding */ matchesWords),
/* harmony export */   or: () => (/* binding */ or)
/* harmony export */ });
/* harmony import */ var _charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _naturalLanguage_korean_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./naturalLanguage/korean.js */ "./node_modules/vscode/vscode/src/vs/base/common/naturalLanguage/korean.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");




function or(...filter) {
    return function (word, wordToMatchAgainst) {
        for (let i = 0, len = filter.length; i < len; i++) {
            const match = filter[i](word, wordToMatchAgainst);
            if (match) {
                return match;
            }
        }
        return null;
    };
}
_matchesPrefix.bind(undefined, false);
const matchesPrefix = _matchesPrefix.bind(undefined, true);
function _matchesPrefix(ignoreCase, word, wordToMatchAgainst) {
    if (!wordToMatchAgainst || wordToMatchAgainst.length < word.length) {
        return null;
    }
    let matches;
    if (ignoreCase) {
        matches = (0,_strings_js__WEBPACK_IMPORTED_MODULE_3__.startsWithIgnoreCase)(wordToMatchAgainst, word);
    }
    else {
        matches = wordToMatchAgainst.indexOf(word) === 0;
    }
    if (!matches) {
        return null;
    }
    return word.length > 0 ? [{ start: 0, end: word.length }] : [];
}
function matchesContiguousSubString(word, wordToMatchAgainst) {
    const index = wordToMatchAgainst.toLowerCase().indexOf(word.toLowerCase());
    if (index === -1) {
        return null;
    }
    return [{ start: index, end: index + word.length }];
}
function matchesSubString(word, wordToMatchAgainst) {
    return _matchesSubString(word.toLowerCase(), wordToMatchAgainst.toLowerCase(), 0, 0);
}
function _matchesSubString(word, wordToMatchAgainst, i, j) {
    if (i === word.length) {
        return [];
    }
    else if (j === wordToMatchAgainst.length) {
        return null;
    }
    else {
        if (word[i] === wordToMatchAgainst[j]) {
            let result = null;
            if (result = _matchesSubString(word, wordToMatchAgainst, i + 1, j + 1)) {
                return join({ start: j, end: j + 1 }, result);
            }
            return null;
        }
        return _matchesSubString(word, wordToMatchAgainst, i, j + 1);
    }
}
function isLower(code) {
    return _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.a <= code && code <= _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.z;
}
function isUpper(code) {
    return _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.A <= code && code <= _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Z;
}
function isNumber(code) {
    return _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Digit0 <= code && code <= _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Digit9;
}
function isWhitespace(code) {
    return (code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Space
        || code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Tab
        || code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed
        || code === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn);
}
const wordSeparators = ( new Set());
'()[]{}<>`\'"-/;:,.?!'
    .split('')
    .forEach(s => wordSeparators.add(s.charCodeAt(0)));
function isWordSeparator(code) {
    return isWhitespace(code) || ( wordSeparators.has(code));
}
function charactersMatch(codeA, codeB) {
    return (codeA === codeB) || (isWordSeparator(codeA) && isWordSeparator(codeB));
}
const alternateCharsCache = ( new Map());
function getAlternateCodes(code) {
    if (( alternateCharsCache.has(code))) {
        return alternateCharsCache.get(code);
    }
    let result;
    const codes = (0,_naturalLanguage_korean_js__WEBPACK_IMPORTED_MODULE_2__.getKoreanAltChars)(code);
    if (codes) {
        result = codes;
    }
    alternateCharsCache.set(code, result);
    return result;
}
function isAlphanumeric(code) {
    return isLower(code) || isUpper(code) || isNumber(code);
}
function join(head, tail) {
    if (tail.length === 0) {
        tail = [head];
    }
    else if (head.end === tail[0].start) {
        tail[0].start = head.start;
    }
    else {
        tail.unshift(head);
    }
    return tail;
}
function nextAnchor(camelCaseWord, start) {
    for (let i = start; i < camelCaseWord.length; i++) {
        const c = camelCaseWord.charCodeAt(i);
        if (isUpper(c) || isNumber(c) || (i > 0 && !isAlphanumeric(camelCaseWord.charCodeAt(i - 1)))) {
            return i;
        }
    }
    return camelCaseWord.length;
}
function _matchesCamelCase(word, camelCaseWord, i, j) {
    if (i === word.length) {
        return [];
    }
    else if (j === camelCaseWord.length) {
        return null;
    }
    else if (word[i] !== camelCaseWord[j].toLowerCase()) {
        return null;
    }
    else {
        let result = null;
        let nextUpperIndex = j + 1;
        result = _matchesCamelCase(word, camelCaseWord, i + 1, j + 1);
        while (!result && (nextUpperIndex = nextAnchor(camelCaseWord, nextUpperIndex)) < camelCaseWord.length) {
            result = _matchesCamelCase(word, camelCaseWord, i + 1, nextUpperIndex);
            nextUpperIndex++;
        }
        return result === null ? null : join({ start: j, end: j + 1 }, result);
    }
}
function analyzeCamelCaseWord(word) {
    let upper = 0, lower = 0, alpha = 0, numeric = 0, code = 0;
    for (let i = 0; i < word.length; i++) {
        code = word.charCodeAt(i);
        if (isUpper(code)) {
            upper++;
        }
        if (isLower(code)) {
            lower++;
        }
        if (isAlphanumeric(code)) {
            alpha++;
        }
        if (isNumber(code)) {
            numeric++;
        }
    }
    const upperPercent = upper / word.length;
    const lowerPercent = lower / word.length;
    const alphaPercent = alpha / word.length;
    const numericPercent = numeric / word.length;
    return { upperPercent, lowerPercent, alphaPercent, numericPercent };
}
function isUpperCaseWord(analysis) {
    const { upperPercent, lowerPercent } = analysis;
    return lowerPercent === 0 && upperPercent > 0.6;
}
function isCamelCaseWord(analysis) {
    const { upperPercent, lowerPercent, alphaPercent, numericPercent } = analysis;
    return lowerPercent > 0.2 && upperPercent < 0.8 && alphaPercent > 0.6 && numericPercent < 0.2;
}
function isCamelCasePattern(word) {
    let upper = 0, lower = 0, code = 0, whitespace = 0;
    for (let i = 0; i < word.length; i++) {
        code = word.charCodeAt(i);
        if (isUpper(code)) {
            upper++;
        }
        if (isLower(code)) {
            lower++;
        }
        if (isWhitespace(code)) {
            whitespace++;
        }
    }
    if ((upper === 0 || lower === 0) && whitespace === 0) {
        return word.length <= 30;
    }
    else {
        return upper <= 5;
    }
}
function matchesCamelCase(word, camelCaseWord) {
    if (!camelCaseWord) {
        return null;
    }
    camelCaseWord = camelCaseWord.trim();
    if (camelCaseWord.length === 0) {
        return null;
    }
    if (!isCamelCasePattern(word)) {
        return null;
    }
    if (camelCaseWord.length > 60) {
        camelCaseWord = camelCaseWord.substring(0, 60);
    }
    const analysis = analyzeCamelCaseWord(camelCaseWord);
    if (!isCamelCaseWord(analysis)) {
        if (!isUpperCaseWord(analysis)) {
            return null;
        }
        camelCaseWord = camelCaseWord.toLowerCase();
    }
    let result = null;
    let i = 0;
    word = word.toLowerCase();
    while (i < camelCaseWord.length && (result = _matchesCamelCase(word, camelCaseWord, 0, i)) === null) {
        i = nextAnchor(camelCaseWord, i + 1);
    }
    return result;
}
function matchesWords(word, target, contiguous = false) {
    if (!target || target.length === 0) {
        return null;
    }
    let result = null;
    let targetIndex = 0;
    word = word.toLowerCase();
    target = target.toLowerCase();
    while (targetIndex < target.length) {
        result = _matchesWords(word, target, 0, targetIndex, contiguous);
        if (result !== null) {
            break;
        }
        targetIndex = nextWord(target, targetIndex + 1);
    }
    return result;
}
function _matchesWords(word, target, wordIndex, targetIndex, contiguous) {
    let targetIndexOffset = 0;
    if (wordIndex === word.length) {
        return [];
    }
    else if (targetIndex === target.length) {
        return null;
    }
    else if (!charactersMatch(word.charCodeAt(wordIndex), target.charCodeAt(targetIndex))) {
        const altChars = getAlternateCodes(word.charCodeAt(wordIndex));
        if (!altChars) {
            return null;
        }
        for (let k = 0; k < altChars.length; k++) {
            if (!charactersMatch(altChars[k], target.charCodeAt(targetIndex + k))) {
                return null;
            }
        }
        targetIndexOffset += altChars.length - 1;
    }
    let result = null;
    let nextWordIndex = targetIndex + targetIndexOffset + 1;
    result = _matchesWords(word, target, wordIndex + 1, nextWordIndex, contiguous);
    if (!contiguous) {
        while (!result && (nextWordIndex = nextWord(target, nextWordIndex)) < target.length) {
            result = _matchesWords(word, target, wordIndex + 1, nextWordIndex, contiguous);
            nextWordIndex++;
        }
    }
    if (!result) {
        return null;
    }
    if (word.charCodeAt(wordIndex) !== target.charCodeAt(targetIndex)) {
        const altChars = getAlternateCodes(word.charCodeAt(wordIndex));
        if (!altChars) {
            return result;
        }
        for (let k = 0; k < altChars.length; k++) {
            if (altChars[k] !== target.charCodeAt(targetIndex + k)) {
                return result;
            }
        }
    }
    return join({ start: targetIndex, end: targetIndex + targetIndexOffset + 1 }, result);
}
function nextWord(word, start) {
    for (let i = start; i < word.length; i++) {
        if (isWordSeparator(word.charCodeAt(i)) ||
            (i > 0 && isWordSeparator(word.charCodeAt(i - 1)))) {
            return i;
        }
    }
    return word.length;
}
const fuzzyContiguousFilter = or(matchesPrefix, matchesCamelCase, matchesContiguousSubString);
const fuzzySeparateFilter = or(matchesPrefix, matchesCamelCase, matchesSubString);
const fuzzyRegExpCache = ( new _map_js__WEBPACK_IMPORTED_MODULE_1__.LRUCache(10000));
function matchesFuzzy(word, wordToMatchAgainst, enableSeparateSubstringMatching = false) {
    if (typeof word !== 'string' || typeof wordToMatchAgainst !== 'string') {
        return null;
    }
    let regexp = fuzzyRegExpCache.get(word);
    if (!regexp) {
        regexp = ( new RegExp((0,_strings_js__WEBPACK_IMPORTED_MODULE_3__.convertSimple2RegExpPattern)(word), 'i'));
        fuzzyRegExpCache.set(word, regexp);
    }
    const match = regexp.exec(wordToMatchAgainst);
    if (match) {
        return [{ start: match.index, end: match.index + match[0].length }];
    }
    return enableSeparateSubstringMatching ? fuzzySeparateFilter(word, wordToMatchAgainst) : fuzzyContiguousFilter(word, wordToMatchAgainst);
}
function matchesFuzzy2(pattern, word) {
    const score = fuzzyScore(pattern, pattern.toLowerCase(), 0, word, word.toLowerCase(), 0, { firstMatchCanBeWeak: true, boostFullMatch: true });
    return score ? createMatches(score) : null;
}
function anyScore(pattern, lowPattern, patternPos, word, lowWord, wordPos) {
    const max = Math.min(13, pattern.length);
    for (; patternPos < max; patternPos++) {
        const result = fuzzyScore(pattern, lowPattern, patternPos, word, lowWord, wordPos, { firstMatchCanBeWeak: true, boostFullMatch: true });
        if (result) {
            return result;
        }
    }
    return [0, wordPos];
}
function createMatches(score) {
    if (typeof score === 'undefined') {
        return [];
    }
    const res = [];
    const wordPos = score[1];
    for (let i = score.length - 1; i > 1; i--) {
        const pos = score[i] + wordPos;
        const last = res[res.length - 1];
        if (last && last.end === pos) {
            last.end = pos + 1;
        }
        else {
            res.push({ start: pos, end: pos + 1 });
        }
    }
    return res;
}
const _maxLen = 128;
function initTable() {
    const table = [];
    const row = [];
    for (let i = 0; i <= _maxLen; i++) {
        row[i] = 0;
    }
    for (let i = 0; i <= _maxLen; i++) {
        table.push(row.slice(0));
    }
    return table;
}
function initArr(maxLen) {
    const row = [];
    for (let i = 0; i <= maxLen; i++) {
        row[i] = 0;
    }
    return row;
}
const _minWordMatchPos = initArr(2 * _maxLen);
const _maxWordMatchPos = initArr(2 * _maxLen);
const _diag = initTable();
const _table = initTable();
const _arrows = initTable();
function isSeparatorAtPos(value, index) {
    if (index < 0 || index >= value.length) {
        return false;
    }
    const code = value.codePointAt(index);
    switch (code) {
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Underline:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Dash:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Period:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Space:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Slash:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Backslash:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.SingleQuote:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.DoubleQuote:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Colon:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.DollarSign:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LessThan:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.GreaterThan:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.OpenParen:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CloseParen:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.OpenSquareBracket:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CloseSquareBracket:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.OpenCurlyBrace:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CloseCurlyBrace:
            return true;
        case undefined:
            return false;
        default:
            if ((0,_strings_js__WEBPACK_IMPORTED_MODULE_3__.isEmojiImprecise)(code)) {
                return true;
            }
            return false;
    }
}
function isWhitespaceAtPos(value, index) {
    if (index < 0 || index >= value.length) {
        return false;
    }
    const code = value.charCodeAt(index);
    switch (code) {
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Space:
        case _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Tab:
            return true;
        default:
            return false;
    }
}
function isUpperCaseAtPos(pos, word, wordLow) {
    return word[pos] !== wordLow[pos];
}
function isPatternInWord(patternLow, patternPos, patternLen, wordLow, wordPos, wordLen, fillMinWordPosArr = false) {
    while (patternPos < patternLen && wordPos < wordLen) {
        if (patternLow[patternPos] === wordLow[wordPos]) {
            if (fillMinWordPosArr) {
                _minWordMatchPos[patternPos] = wordPos;
            }
            patternPos += 1;
        }
        wordPos += 1;
    }
    return patternPos === patternLen;
}
var Arrow;
( (function(Arrow) {
    Arrow[Arrow["Diag"] = 1] = "Diag";
    Arrow[Arrow["Left"] = 2] = "Left";
    Arrow[Arrow["LeftLeft"] = 3] = "LeftLeft";
})(Arrow || (Arrow = {})));
var FuzzyScore;
( (function(FuzzyScore) {
    FuzzyScore.Default = ([-100, 0]);
    function isDefault(score) {
        return !score || (score.length === 2 && score[0] === -100 && score[1] === 0);
    }
    FuzzyScore.isDefault = isDefault;
})(FuzzyScore || (FuzzyScore = {})));
class FuzzyScoreOptions {
    static { this.default = { boostFullMatch: true, firstMatchCanBeWeak: false }; }
    constructor(firstMatchCanBeWeak, boostFullMatch) {
        this.firstMatchCanBeWeak = firstMatchCanBeWeak;
        this.boostFullMatch = boostFullMatch;
    }
}
function fuzzyScore(pattern, patternLow, patternStart, word, wordLow, wordStart, options = FuzzyScoreOptions.default) {
    const patternLen = pattern.length > _maxLen ? _maxLen : pattern.length;
    const wordLen = word.length > _maxLen ? _maxLen : word.length;
    if (patternStart >= patternLen || wordStart >= wordLen || (patternLen - patternStart) > (wordLen - wordStart)) {
        return undefined;
    }
    if (!isPatternInWord(patternLow, patternStart, patternLen, wordLow, wordStart, wordLen, true)) {
        return undefined;
    }
    _fillInMaxWordMatchPos(patternLen, wordLen, patternStart, wordStart, patternLow, wordLow);
    let row = 1;
    let column = 1;
    let patternPos = patternStart;
    let wordPos = wordStart;
    const hasStrongFirstMatch = [false];
    for (row = 1, patternPos = patternStart; patternPos < patternLen; row++, patternPos++) {
        const minWordMatchPos = _minWordMatchPos[patternPos];
        const maxWordMatchPos = _maxWordMatchPos[patternPos];
        const nextMaxWordMatchPos = (patternPos + 1 < patternLen ? _maxWordMatchPos[patternPos + 1] : wordLen);
        for (column = minWordMatchPos - wordStart + 1, wordPos = minWordMatchPos; wordPos < nextMaxWordMatchPos; column++, wordPos++) {
            let score = Number.MIN_SAFE_INTEGER;
            let canComeDiag = false;
            if (wordPos <= maxWordMatchPos) {
                score = _doScore(pattern, patternLow, patternPos, patternStart, word, wordLow, wordPos, wordLen, wordStart, _diag[row - 1][column - 1] === 0, hasStrongFirstMatch);
            }
            let diagScore = 0;
            if (score !== Number.MAX_SAFE_INTEGER) {
                canComeDiag = true;
                diagScore = score + _table[row - 1][column - 1];
            }
            const canComeLeft = wordPos > minWordMatchPos;
            const leftScore = canComeLeft ? _table[row][column - 1] + (_diag[row][column - 1] > 0 ? -5 : 0) : 0;
            const canComeLeftLeft = wordPos > minWordMatchPos + 1 && _diag[row][column - 1] > 0;
            const leftLeftScore = canComeLeftLeft ? _table[row][column - 2] + (_diag[row][column - 2] > 0 ? -5 : 0) : 0;
            if (canComeLeftLeft && (!canComeLeft || leftLeftScore >= leftScore) && (!canComeDiag || leftLeftScore >= diagScore)) {
                _table[row][column] = leftLeftScore;
                _arrows[row][column] = Arrow.LeftLeft;
                _diag[row][column] = 0;
            }
            else if (canComeLeft && (!canComeDiag || leftScore >= diagScore)) {
                _table[row][column] = leftScore;
                _arrows[row][column] = Arrow.Left;
                _diag[row][column] = 0;
            }
            else if (canComeDiag) {
                _table[row][column] = diagScore;
                _arrows[row][column] = Arrow.Diag;
                _diag[row][column] = _diag[row - 1][column - 1] + 1;
            }
            else {
                throw ( new Error(`not possible`));
            }
        }
    }
    if (!hasStrongFirstMatch[0] && !options.firstMatchCanBeWeak) {
        return undefined;
    }
    row--;
    column--;
    const result = [_table[row][column], wordStart];
    let backwardsDiagLength = 0;
    let maxMatchColumn = 0;
    while (row >= 1) {
        let diagColumn = column;
        do {
            const arrow = _arrows[row][diagColumn];
            if (arrow === Arrow.LeftLeft) {
                diagColumn = diagColumn - 2;
            }
            else if (arrow === Arrow.Left) {
                diagColumn = diagColumn - 1;
            }
            else {
                break;
            }
        } while (diagColumn >= 1);
        if (backwardsDiagLength > 1
            && patternLow[patternStart + row - 1] === wordLow[wordStart + column - 1]
            && !isUpperCaseAtPos(diagColumn + wordStart - 1, word, wordLow)
            && backwardsDiagLength + 1 > _diag[row][diagColumn]
        ) {
            diagColumn = column;
        }
        if (diagColumn === column) {
            backwardsDiagLength++;
        }
        else {
            backwardsDiagLength = 1;
        }
        if (!maxMatchColumn) {
            maxMatchColumn = diagColumn;
        }
        row--;
        column = diagColumn - 1;
        result.push(column);
    }
    if (wordLen - wordStart === patternLen && options.boostFullMatch) {
        result[0] += 2;
    }
    const skippedCharsCount = maxMatchColumn - patternLen;
    result[0] -= skippedCharsCount;
    return result;
}
function _fillInMaxWordMatchPos(patternLen, wordLen, patternStart, wordStart, patternLow, wordLow) {
    let patternPos = patternLen - 1;
    let wordPos = wordLen - 1;
    while (patternPos >= patternStart && wordPos >= wordStart) {
        if (patternLow[patternPos] === wordLow[wordPos]) {
            _maxWordMatchPos[patternPos] = wordPos;
            patternPos--;
        }
        wordPos--;
    }
}
function _doScore(pattern, patternLow, patternPos, patternStart, word, wordLow, wordPos, wordLen, wordStart, newMatchStart, outFirstMatchStrong) {
    if (patternLow[patternPos] !== wordLow[wordPos]) {
        return Number.MIN_SAFE_INTEGER;
    }
    let score = 1;
    let isGapLocation = false;
    if (wordPos === (patternPos - patternStart)) {
        score = pattern[patternPos] === word[wordPos] ? 7 : 5;
    }
    else if (isUpperCaseAtPos(wordPos, word, wordLow) && (wordPos === 0 || !isUpperCaseAtPos(wordPos - 1, word, wordLow))) {
        score = pattern[patternPos] === word[wordPos] ? 7 : 5;
        isGapLocation = true;
    }
    else if (isSeparatorAtPos(wordLow, wordPos) && (wordPos === 0 || !isSeparatorAtPos(wordLow, wordPos - 1))) {
        score = 5;
    }
    else if (isSeparatorAtPos(wordLow, wordPos - 1) || isWhitespaceAtPos(wordLow, wordPos - 1)) {
        score = 5;
        isGapLocation = true;
    }
    if (score > 1 && patternPos === patternStart) {
        outFirstMatchStrong[0] = true;
    }
    if (!isGapLocation) {
        isGapLocation = isUpperCaseAtPos(wordPos, word, wordLow) || isSeparatorAtPos(wordLow, wordPos - 1) || isWhitespaceAtPos(wordLow, wordPos - 1);
    }
    if (patternPos === patternStart) {
        if (wordPos > wordStart) {
            score -= isGapLocation ? 3 : 5;
        }
    }
    else {
        if (newMatchStart) {
            score += isGapLocation ? 2 : 0;
        }
        else {
            score += isGapLocation ? 0 : 1;
        }
    }
    if (wordPos + 1 === wordLen) {
        score -= isGapLocation ? 3 : 5;
    }
    return score;
}
function fuzzyScoreGracefulAggressive(pattern, lowPattern, patternPos, word, lowWord, wordPos, options) {
    return fuzzyScoreWithPermutations(pattern, lowPattern, patternPos, word, lowWord, wordPos, true, options);
}
function fuzzyScoreWithPermutations(pattern, lowPattern, patternPos, word, lowWord, wordPos, aggressive, options) {
    let top = fuzzyScore(pattern, lowPattern, patternPos, word, lowWord, wordPos, options);
    if (top && !aggressive) {
        return top;
    }
    if (pattern.length >= 3) {
        const tries = Math.min(7, pattern.length - 1);
        for (let movingPatternPos = patternPos + 1; movingPatternPos < tries; movingPatternPos++) {
            const newPattern = nextTypoPermutation(pattern, movingPatternPos);
            if (newPattern) {
                const candidate = fuzzyScore(newPattern, newPattern.toLowerCase(), patternPos, word, lowWord, wordPos, options);
                if (candidate) {
                    candidate[0] -= 3;
                    if (!top || candidate[0] > top[0]) {
                        top = candidate;
                    }
                }
            }
        }
    }
    return top;
}
function nextTypoPermutation(pattern, patternPos) {
    if (patternPos + 1 >= pattern.length) {
        return undefined;
    }
    const swap1 = pattern[patternPos];
    const swap2 = pattern[patternPos + 1];
    if (swap1 === swap2) {
        return undefined;
    }
    return pattern.slice(0, patternPos)
        + swap2
        + swap1
        + pattern.slice(patternPos + 2);
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/glob.js":
/*!***************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/glob.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GLOBSTAR: () => (/* binding */ GLOBSTAR),
/* harmony export */   GLOB_SPLIT: () => (/* binding */ GLOB_SPLIT),
/* harmony export */   getEmptyExpression: () => (/* binding */ getEmptyExpression),
/* harmony export */   isRelativePattern: () => (/* binding */ isRelativePattern),
/* harmony export */   match: () => (/* binding */ match),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   splitGlobAware: () => (/* binding */ splitGlobAware)
/* harmony export */ });
/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _charCode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _extpath_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extpath.js */ "./node_modules/vscode/vscode/src/vs/base/common/extpath.js");
/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");








function getEmptyExpression() {
    return Object.create(null);
}
const GLOBSTAR = '**';
const GLOB_SPLIT = '/';
const PATH_REGEX = '[/\\\\]';
const NO_PATH_REGEX = '[^/\\\\]';
const ALL_FORWARD_SLASHES = /\//g;
function starsToRegExp(starCount, isLastPattern) {
    switch (starCount) {
        case 0:
            return '';
        case 1:
            return `${NO_PATH_REGEX}*?`;
        default:
            return `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}${isLastPattern ? `|${PATH_REGEX}${NO_PATH_REGEX}+` : ''})*?`;
    }
}
function splitGlobAware(pattern, splitChar) {
    if (!pattern) {
        return [];
    }
    const segments = [];
    let inBraces = false;
    let inBrackets = false;
    let curVal = '';
    for (const char of pattern) {
        switch (char) {
            case splitChar:
                if (!inBraces && !inBrackets) {
                    segments.push(curVal);
                    curVal = '';
                    continue;
                }
                break;
            case '{':
                inBraces = true;
                break;
            case '}':
                inBraces = false;
                break;
            case '[':
                inBrackets = true;
                break;
            case ']':
                inBrackets = false;
                break;
        }
        curVal += char;
    }
    if (curVal) {
        segments.push(curVal);
    }
    return segments;
}
function parseRegExp(pattern) {
    if (!pattern) {
        return '';
    }
    let regEx = '';
    const segments = splitGlobAware(pattern, GLOB_SPLIT);
    if (segments.every(segment => segment === GLOBSTAR)) {
        regEx = '.*';
    }
    else {
        let previousSegmentWasGlobStar = false;
        segments.forEach((segment, index) => {
            if (segment === GLOBSTAR) {
                if (previousSegmentWasGlobStar) {
                    return;
                }
                regEx += starsToRegExp(2, index === segments.length - 1);
            }
            else {
                let inBraces = false;
                let braceVal = '';
                let inBrackets = false;
                let bracketVal = '';
                for (const char of segment) {
                    if (char !== '}' && inBraces) {
                        braceVal += char;
                        continue;
                    }
                    if (inBrackets && (char !== ']' || !bracketVal) ) {
                        let res;
                        if (char === '-') {
                            res = char;
                        }
                        else if ((char === '^' || char === '!') && !bracketVal) {
                            res = '^';
                        }
                        else if (char === GLOB_SPLIT) {
                            res = '';
                        }
                        else {
                            res = (0,_strings_js__WEBPACK_IMPORTED_MODULE_7__.escapeRegExpCharacters)(char);
                        }
                        bracketVal += res;
                        continue;
                    }
                    switch (char) {
                        case '{':
                            inBraces = true;
                            continue;
                        case '[':
                            inBrackets = true;
                            continue;
                        case '}': {
                            const choices = splitGlobAware(braceVal, ',');
                            const braceRegExp = `(?:${( choices.map(choice => parseRegExp(choice))).join('|')})`;
                            regEx += braceRegExp;
                            inBraces = false;
                            braceVal = '';
                            break;
                        }
                        case ']': {
                            regEx += ('[' + bracketVal + ']');
                            inBrackets = false;
                            bracketVal = '';
                            break;
                        }
                        case '?':
                            regEx += NO_PATH_REGEX;
                            continue;
                        case '*':
                            regEx += starsToRegExp(1);
                            continue;
                        default:
                            regEx += (0,_strings_js__WEBPACK_IMPORTED_MODULE_7__.escapeRegExpCharacters)(char);
                    }
                }
                if (index < segments.length - 1 &&
                    ((
                segments[index + 1] !== GLOBSTAR || index + 2 < segments.length)
                    )) {
                    regEx += PATH_REGEX;
                }
            }
            previousSegmentWasGlobStar = (segment === GLOBSTAR);
        });
    }
    return regEx;
}
const T1 = /^\*\*\/\*\.[\w\.-]+$/;
const T2 = /^\*\*\/([\w\.-]+)\/?$/;
const T3 = /^{\*\*\/\*?[\w\.-]+\/?(,\*\*\/\*?[\w\.-]+\/?)*}$/;
const T3_2 = /^{\*\*\/\*?[\w\.-]+(\/(\*\*)?)?(,\*\*\/\*?[\w\.-]+(\/(\*\*)?)?)*}$/;
const T4 = /^\*\*((\/[\w\.-]+)+)\/?$/;
const T5 = /^([\w\.-]+(\/[\w\.-]+)*)\/?$/;
const CACHE = ( new _map_js__WEBPACK_IMPORTED_MODULE_4__.LRUCache(10000));
const FALSE = function () {
    return false;
};
const NULL = function () {
    return null;
};
function parsePattern(arg1, options) {
    if (!arg1) {
        return NULL;
    }
    let pattern;
    if (typeof arg1 !== 'string') {
        pattern = arg1.pattern;
    }
    else {
        pattern = arg1;
    }
    pattern = pattern.trim();
    const patternKey = `${pattern}_${!!options.trimForExclusions}`;
    let parsedPattern = CACHE.get(patternKey);
    if (parsedPattern) {
        return wrapRelativePattern(parsedPattern, arg1);
    }
    let match;
    if (T1.test(pattern)) {
        parsedPattern = trivia1(pattern.substr(4), pattern);
    }
    else if (match = T2.exec(trimForExclusions(pattern, options))) {
        parsedPattern = trivia2(match[1], pattern);
    }
    else if ((options.trimForExclusions ? T3_2 : T3).test(pattern)) {
        parsedPattern = trivia3(pattern, options);
    }
    else if (match = T4.exec(trimForExclusions(pattern, options))) {
        parsedPattern = trivia4and5(match[1].substr(1), pattern, true);
    }
    else if (match = T5.exec(trimForExclusions(pattern, options))) {
        parsedPattern = trivia4and5(match[1], pattern, false);
    }
    else {
        parsedPattern = toRegExp(pattern);
    }
    CACHE.set(patternKey, parsedPattern);
    return wrapRelativePattern(parsedPattern, arg1);
}
function wrapRelativePattern(parsedPattern, arg2) {
    if (typeof arg2 === 'string') {
        return parsedPattern;
    }
    const wrappedPattern = function (path, basename) {
        if (!(0,_extpath_js__WEBPACK_IMPORTED_MODULE_3__.isEqualOrParent)(path, arg2.base, !_platform_js__WEBPACK_IMPORTED_MODULE_6__.isLinux)) {
            return null;
        }
        return parsedPattern((0,_strings_js__WEBPACK_IMPORTED_MODULE_7__.ltrim)(path.substr(arg2.base.length), _path_js__WEBPACK_IMPORTED_MODULE_5__.sep), basename);
    };
    wrappedPattern.allBasenames = parsedPattern.allBasenames;
    wrappedPattern.allPaths = parsedPattern.allPaths;
    wrappedPattern.basenames = parsedPattern.basenames;
    wrappedPattern.patterns = parsedPattern.patterns;
    return wrappedPattern;
}
function trimForExclusions(pattern, options) {
    return options.trimForExclusions && pattern.endsWith('/**') ? pattern.substr(0, pattern.length - 2) : pattern;
}
function trivia1(base, pattern) {
    return function (path, basename) {
        return typeof path === 'string' && path.endsWith(base) ? pattern : null;
    };
}
function trivia2(base, pattern) {
    const slashBase = `/${base}`;
    const backslashBase = `\\${base}`;
    const parsedPattern = function (path, basename) {
        if (typeof path !== 'string') {
            return null;
        }
        if (basename) {
            return basename === base ? pattern : null;
        }
        return path === base || path.endsWith(slashBase) || path.endsWith(backslashBase) ? pattern : null;
    };
    const basenames = [base];
    parsedPattern.basenames = basenames;
    parsedPattern.patterns = [pattern];
    parsedPattern.allBasenames = basenames;
    return parsedPattern;
}
function trivia3(pattern, options) {
    const parsedPatterns = aggregateBasenameMatches(( pattern.slice(1, -1)
        .split(',')
        .map(pattern => parsePattern(pattern, options)))
        .filter(pattern => pattern !== NULL), pattern);
    const patternsLength = parsedPatterns.length;
    if (!patternsLength) {
        return NULL;
    }
    if (patternsLength === 1) {
        return parsedPatterns[0];
    }
    const parsedPattern = function (path, basename) {
        for (let i = 0, n = parsedPatterns.length; i < n; i++) {
            if (parsedPatterns[i](path, basename)) {
                return pattern;
            }
        }
        return null;
    };
    const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);
    if (withBasenames) {
        parsedPattern.allBasenames = withBasenames.allBasenames;
    }
    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);
    if (allPaths.length) {
        parsedPattern.allPaths = allPaths;
    }
    return parsedPattern;
}
function trivia4and5(targetPath, pattern, matchPathEnds) {
    const usingPosixSep = _path_js__WEBPACK_IMPORTED_MODULE_5__.sep === _path_js__WEBPACK_IMPORTED_MODULE_5__.posix.sep;
    const nativePath = usingPosixSep ? targetPath : targetPath.replace(ALL_FORWARD_SLASHES, _path_js__WEBPACK_IMPORTED_MODULE_5__.sep);
    const nativePathEnd = _path_js__WEBPACK_IMPORTED_MODULE_5__.sep + nativePath;
    const targetPathEnd = _path_js__WEBPACK_IMPORTED_MODULE_5__.posix.sep + targetPath;
    let parsedPattern;
    if (matchPathEnds) {
        parsedPattern = function (path, basename) {
            return typeof path === 'string' && ((path === nativePath || path.endsWith(nativePathEnd)) || !usingPosixSep && (path === targetPath || path.endsWith(targetPathEnd))) ? pattern : null;
        };
    }
    else {
        parsedPattern = function (path, basename) {
            return typeof path === 'string' && (path === nativePath || (!usingPosixSep && path === targetPath)) ? pattern : null;
        };
    }
    parsedPattern.allPaths = [(matchPathEnds ? '*/' : './') + targetPath];
    return parsedPattern;
}
function toRegExp(pattern) {
    try {
        const regExp = ( new RegExp(`^${parseRegExp(pattern)}$`));
        return function (path) {
            regExp.lastIndex = 0;
            return typeof path === 'string' && regExp.test(path) ? pattern : null;
        };
    }
    catch (error) {
        return NULL;
    }
}
function match(arg1, path, hasSibling) {
    if (!arg1 || typeof path !== 'string') {
        return false;
    }
    return parse(arg1)(path, undefined, hasSibling);
}
function parse(arg1, options = {}) {
    if (!arg1) {
        return FALSE;
    }
    if (typeof arg1 === 'string' || isRelativePattern(arg1)) {
        const parsedPattern = parsePattern(arg1, options);
        if (parsedPattern === NULL) {
            return FALSE;
        }
        const resultPattern = function (path, basename) {
            return !!parsedPattern(path, basename);
        };
        if (parsedPattern.allBasenames) {
            resultPattern.allBasenames = parsedPattern.allBasenames;
        }
        if (parsedPattern.allPaths) {
            resultPattern.allPaths = parsedPattern.allPaths;
        }
        return resultPattern;
    }
    return parsedExpression(arg1, options);
}
function isRelativePattern(obj) {
    const rp = obj;
    if (!rp) {
        return false;
    }
    return typeof rp.base === 'string' && typeof rp.pattern === 'string';
}
function parsedExpression(expression, options) {
    const parsedPatterns = aggregateBasenameMatches(( Object.getOwnPropertyNames(expression)
        .map(pattern => parseExpressionPattern(pattern, expression[pattern], options)))
        .filter(pattern => pattern !== NULL));
    const patternsLength = parsedPatterns.length;
    if (!patternsLength) {
        return NULL;
    }
    if (!( parsedPatterns.some(parsedPattern => !!parsedPattern.requiresSiblings))) {
        if (patternsLength === 1) {
            return parsedPatterns[0];
        }
        const resultExpression = function (path, basename) {
            let resultPromises = undefined;
            for (let i = 0, n = parsedPatterns.length; i < n; i++) {
                const result = parsedPatterns[i](path, basename);
                if (typeof result === 'string') {
                    return result;
                }
                if ((0,_async_js__WEBPACK_IMPORTED_MODULE_1__.isThenable)(result)) {
                    if (!resultPromises) {
                        resultPromises = [];
                    }
                    resultPromises.push(result);
                }
            }
            if (resultPromises) {
                return (async () => {
                    for (const resultPromise of resultPromises) {
                        const result = await resultPromise;
                        if (typeof result === 'string') {
                            return result;
                        }
                    }
                    return null;
                })();
            }
            return null;
        };
        const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);
        if (withBasenames) {
            resultExpression.allBasenames = withBasenames.allBasenames;
        }
        const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);
        if (allPaths.length) {
            resultExpression.allPaths = allPaths;
        }
        return resultExpression;
    }
    const resultExpression = function (path, base, hasSibling) {
        let name = undefined;
        let resultPromises = undefined;
        for (let i = 0, n = parsedPatterns.length; i < n; i++) {
            const parsedPattern = parsedPatterns[i];
            if (parsedPattern.requiresSiblings && hasSibling) {
                if (!base) {
                    base = (0,_path_js__WEBPACK_IMPORTED_MODULE_5__.basename)(path);
                }
                if (!name) {
                    name = base.substr(0, base.length - (0,_path_js__WEBPACK_IMPORTED_MODULE_5__.extname)(path).length);
                }
            }
            const result = parsedPattern(path, base, name, hasSibling);
            if (typeof result === 'string') {
                return result;
            }
            if ((0,_async_js__WEBPACK_IMPORTED_MODULE_1__.isThenable)(result)) {
                if (!resultPromises) {
                    resultPromises = [];
                }
                resultPromises.push(result);
            }
        }
        if (resultPromises) {
            return (async () => {
                for (const resultPromise of resultPromises) {
                    const result = await resultPromise;
                    if (typeof result === 'string') {
                        return result;
                    }
                }
                return null;
            })();
        }
        return null;
    };
    const withBasenames = parsedPatterns.find(pattern => !!pattern.allBasenames);
    if (withBasenames) {
        resultExpression.allBasenames = withBasenames.allBasenames;
    }
    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, []);
    if (allPaths.length) {
        resultExpression.allPaths = allPaths;
    }
    return resultExpression;
}
function parseExpressionPattern(pattern, value, options) {
    if (value === false) {
        return NULL;
    }
    const parsedPattern = parsePattern(pattern, options);
    if (parsedPattern === NULL) {
        return NULL;
    }
    if (typeof value === 'boolean') {
        return parsedPattern;
    }
    if (value) {
        const when = value.when;
        if (typeof when === 'string') {
            const result = (path, basename, name, hasSibling) => {
                if (!hasSibling || !parsedPattern(path, basename)) {
                    return null;
                }
                const clausePattern = when.replace('$(basename)', () => name);
                const matched = hasSibling(clausePattern);
                return (0,_async_js__WEBPACK_IMPORTED_MODULE_1__.isThenable)(matched) ?
                    matched.then(match => match ? pattern : null) :
                    matched ? pattern : null;
            };
            result.requiresSiblings = true;
            return result;
        }
    }
    return parsedPattern;
}
function aggregateBasenameMatches(parsedPatterns, result) {
    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!parsedPattern.basenames);
    if (basenamePatterns.length < 2) {
        return parsedPatterns;
    }
    const basenames = basenamePatterns.reduce((all, current) => {
        const basenames = current.basenames;
        return basenames ? all.concat(basenames) : all;
    }, []);
    let patterns;
    if (result) {
        patterns = [];
        for (let i = 0, n = basenames.length; i < n; i++) {
            patterns.push(result);
        }
    }
    else {
        patterns = basenamePatterns.reduce((all, current) => {
            const patterns = current.patterns;
            return patterns ? all.concat(patterns) : all;
        }, []);
    }
    const aggregate = function (path, basename) {
        if (typeof path !== 'string') {
            return null;
        }
        if (!basename) {
            let i;
            for (i = path.length; i > 0; i--) {
                const ch = path.charCodeAt(i - 1);
                if (ch === _charCode_js__WEBPACK_IMPORTED_MODULE_2__.CharCode.Slash || ch === _charCode_js__WEBPACK_IMPORTED_MODULE_2__.CharCode.Backslash) {
                    break;
                }
            }
            basename = path.substr(i);
        }
        const index = basenames.indexOf(basename);
        return index !== -1 ? patterns[index] : null;
    };
    aggregate.basenames = basenames;
    aggregate.patterns = patterns;
    aggregate.allBasenames = basenames;
    const aggregatedPatterns = parsedPatterns.filter(parsedPattern => !parsedPattern.basenames);
    aggregatedPatterns.push(aggregate);
    return aggregatedPatterns;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/htmlContent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/htmlContent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MarkdownString: () => (/* binding */ MarkdownString),
/* harmony export */   MarkdownStringTextNewlineStyle: () => (/* binding */ MarkdownStringTextNewlineStyle),
/* harmony export */   appendEscapedMarkdownCodeBlockFence: () => (/* binding */ appendEscapedMarkdownCodeBlockFence),
/* harmony export */   escapeDoubleQuotes: () => (/* binding */ escapeDoubleQuotes),
/* harmony export */   escapeMarkdownSyntaxTokens: () => (/* binding */ escapeMarkdownSyntaxTokens),
/* harmony export */   isEmptyMarkdownString: () => (/* binding */ isEmptyMarkdownString),
/* harmony export */   isMarkdownString: () => (/* binding */ isMarkdownString),
/* harmony export */   markdownStringEqual: () => (/* binding */ markdownStringEqual),
/* harmony export */   parseHrefAndDimensions: () => (/* binding */ parseHrefAndDimensions),
/* harmony export */   removeMarkdownEscapes: () => (/* binding */ removeMarkdownEscapes)
/* harmony export */ });
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _iconLabels_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iconLabels.js */ "./node_modules/vscode/vscode/src/vs/base/common/iconLabels.js");
/* harmony import */ var _resources_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");





var MarkdownStringTextNewlineStyle;
( (function(MarkdownStringTextNewlineStyle) {
    MarkdownStringTextNewlineStyle[MarkdownStringTextNewlineStyle["Paragraph"] = 0] = "Paragraph";
    MarkdownStringTextNewlineStyle[MarkdownStringTextNewlineStyle["Break"] = 1] = "Break";
})(MarkdownStringTextNewlineStyle || (MarkdownStringTextNewlineStyle = {})));
class MarkdownString {
    constructor(value = '', isTrustedOrOptions = false) {
        this.value = value;
        if (typeof this.value !== 'string') {
            throw (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.illegalArgument)('value');
        }
        if (typeof isTrustedOrOptions === 'boolean') {
            this.isTrusted = isTrustedOrOptions;
            this.supportThemeIcons = false;
            this.supportHtml = false;
        }
        else {
            this.isTrusted = isTrustedOrOptions.isTrusted ?? undefined;
            this.supportThemeIcons = isTrustedOrOptions.supportThemeIcons ?? false;
            this.supportHtml = isTrustedOrOptions.supportHtml ?? false;
        }
    }
    appendText(value, newlineStyle = MarkdownStringTextNewlineStyle.Paragraph) {
        this.value += escapeMarkdownSyntaxTokens(this.supportThemeIcons ? (0,_iconLabels_js__WEBPACK_IMPORTED_MODULE_1__.escapeIcons)(value) : value)
            .replace(/([ \t]+)/g, (_match, g1) => '&nbsp;'.repeat(g1.length))
            .replace(/\>/gm, '\\>')
            .replace(/\n/g, newlineStyle === MarkdownStringTextNewlineStyle.Break ? '\\\n' : '\n\n');
        return this;
    }
    appendMarkdown(value) {
        this.value += value;
        return this;
    }
    appendCodeblock(langId, code) {
        this.value += `\n${appendEscapedMarkdownCodeBlockFence(code, langId)}\n`;
        return this;
    }
    appendLink(target, label, title) {
        this.value += '[';
        this.value += this._escape(label, ']');
        this.value += '](';
        this.value += this._escape(String(target), ')');
        if (title) {
            this.value += ` "${this._escape(this._escape(title, '"'), ')')}"`;
        }
        this.value += ')';
        return this;
    }
    _escape(value, ch) {
        const r = ( new RegExp((0,_strings_js__WEBPACK_IMPORTED_MODULE_3__.escapeRegExpCharacters)(ch), 'g'));
        return value.replace(r, (match, offset) => {
            if (value.charAt(offset - 1) !== '\\') {
                return `\\${match}`;
            }
            else {
                return match;
            }
        });
    }
}
function isEmptyMarkdownString(oneOrMany) {
    if (isMarkdownString(oneOrMany)) {
        return !oneOrMany.value;
    }
    else if (Array.isArray(oneOrMany)) {
        return oneOrMany.every(isEmptyMarkdownString);
    }
    else {
        return true;
    }
}
function isMarkdownString(thing) {
    if (thing instanceof MarkdownString) {
        return true;
    }
    else if (thing && typeof thing === 'object') {
        return typeof thing.value === 'string'
            && (typeof thing.isTrusted === 'boolean' || typeof thing.isTrusted === 'object' || thing.isTrusted === undefined)
            && (typeof thing.supportThemeIcons === 'boolean' || thing.supportThemeIcons === undefined);
    }
    return false;
}
function markdownStringEqual(a, b) {
    if (a === b) {
        return true;
    }
    else if (!a || !b) {
        return false;
    }
    else {
        return a.value === b.value
            && a.isTrusted === b.isTrusted
            && a.supportThemeIcons === b.supportThemeIcons
            && a.supportHtml === b.supportHtml
            && (a.baseUri === b.baseUri || !!a.baseUri && !!b.baseUri && (0,_resources_js__WEBPACK_IMPORTED_MODULE_2__.isEqual)(( _uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.from(a.baseUri)), ( _uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.from(b.baseUri))));
    }
}
function escapeMarkdownSyntaxTokens(text) {
    return text.replace(/[\\`*_{}[\]()#+\-!~]/g, '\\$&');
}
function appendEscapedMarkdownCodeBlockFence(code, langId) {
    const longestFenceLength = code.match(/^`+/gm)?.reduce((a, b) => (a.length > b.length ? a : b)).length ??
        0;
    const desiredFenceLength = longestFenceLength >= 3 ? longestFenceLength + 1 : 3;
    return [
        `${'`'.repeat(desiredFenceLength)}${langId}`,
        code,
        `${'`'.repeat(desiredFenceLength)}`,
    ].join('\n');
}
function escapeDoubleQuotes(input) {
    return input.replace(/"/g, '&quot;');
}
function removeMarkdownEscapes(text) {
    if (!text) {
        return text;
    }
    return text.replace(/\\([\\`*_{}[\]()#+\-.!~])/g, '$1');
}
function parseHrefAndDimensions(href) {
    const dimensions = [];
    const splitted = ( href.split('|').map(s => s.trim()));
    href = splitted[0];
    const parameters = splitted[1];
    if (parameters) {
        const heightFromParams = /height=(\d+)/.exec(parameters);
        const widthFromParams = /width=(\d+)/.exec(parameters);
        const height = heightFromParams ? heightFromParams[1] : '';
        const width = widthFromParams ? widthFromParams[1] : '';
        const widthIsFinite = isFinite(parseInt(width));
        const heightIsFinite = isFinite(parseInt(height));
        if (widthIsFinite) {
            dimensions.push(`width="${width}"`);
        }
        if (heightIsFinite) {
            dimensions.push(`height="${height}"`);
        }
    }
    return { href, dimensions };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/iconLabels.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/iconLabels.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   escapeIcons: () => (/* binding */ escapeIcons),
/* harmony export */   getCodiconAriaLabel: () => (/* binding */ getCodiconAriaLabel),
/* harmony export */   markdownEscapeEscapedIcons: () => (/* binding */ markdownEscapeEscapedIcons),
/* harmony export */   matchesFuzzyIconAware: () => (/* binding */ matchesFuzzyIconAware),
/* harmony export */   parseLabelWithIcons: () => (/* binding */ parseLabelWithIcons),
/* harmony export */   stripIcons: () => (/* binding */ stripIcons)
/* harmony export */ });
/* harmony import */ var _filters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./filters.js */ "./node_modules/vscode/vscode/src/vs/base/common/filters.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _themables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");



const iconStartMarker = '$(';
const iconsRegex = ( new RegExp(
    `\\$\\(${_themables_js__WEBPACK_IMPORTED_MODULE_2__.ThemeIcon.iconNameExpression}(?:${_themables_js__WEBPACK_IMPORTED_MODULE_2__.ThemeIcon.iconModifierExpression})?\\)`,
    'g'
));
const escapeIconsRegex = ( new RegExp(`(\\\\)?${iconsRegex.source}`, 'g'));
function escapeIcons(text) {
    return text.replace(escapeIconsRegex, (match, escaped) => escaped ? match : `\\${match}`);
}
const markdownEscapedIconsRegex = ( new RegExp(`\\\\${iconsRegex.source}`, 'g'));
function markdownEscapeEscapedIcons(text) {
    return text.replace(markdownEscapedIconsRegex, match => `\\${match}`);
}
const stripIconsRegex = ( new RegExp(`(\\s)?(\\\\)?${iconsRegex.source}(\\s)?`, 'g'));
function stripIcons(text) {
    if (text.indexOf(iconStartMarker) === -1) {
        return text;
    }
    return text.replace(stripIconsRegex, (match, preWhitespace, escaped, postWhitespace) => escaped ? match : preWhitespace || postWhitespace || '');
}
function getCodiconAriaLabel(text) {
    if (!text) {
        return '';
    }
    return text.replace(/\$\((.*?)\)/g, (_match, codiconName) => ` ${codiconName} `).trim();
}
const _parseIconsRegex = ( new RegExp(`\\$\\(${_themables_js__WEBPACK_IMPORTED_MODULE_2__.ThemeIcon.iconNameCharacter}+\\)`, 'g'));
function parseLabelWithIcons(input) {
    _parseIconsRegex.lastIndex = 0;
    let text = '';
    const iconOffsets = [];
    let iconsOffset = 0;
    while (true) {
        const pos = _parseIconsRegex.lastIndex;
        const match = _parseIconsRegex.exec(input);
        const chars = input.substring(pos, match?.index);
        if (chars.length > 0) {
            text += chars;
            for (let i = 0; i < chars.length; i++) {
                iconOffsets.push(iconsOffset);
            }
        }
        if (!match) {
            break;
        }
        iconsOffset += match[0].length;
    }
    return { text, iconOffsets };
}
function matchesFuzzyIconAware(query, target, enableSeparateSubstringMatching = false) {
    const { text, iconOffsets } = target;
    if (!iconOffsets || iconOffsets.length === 0) {
        return (0,_filters_js__WEBPACK_IMPORTED_MODULE_0__.matchesFuzzy)(query, text, enableSeparateSubstringMatching);
    }
    const wordToMatchAgainstWithoutIconsTrimmed = (0,_strings_js__WEBPACK_IMPORTED_MODULE_1__.ltrim)(text, ' ');
    const leadingWhitespaceOffset = text.length - wordToMatchAgainstWithoutIconsTrimmed.length;
    const matches = (0,_filters_js__WEBPACK_IMPORTED_MODULE_0__.matchesFuzzy)(query, wordToMatchAgainstWithoutIconsTrimmed, enableSeparateSubstringMatching);
    if (matches) {
        for (const match of matches) {
            const iconOffset = iconOffsets[match.start + leadingWhitespaceOffset]  + leadingWhitespaceOffset ;
            match.start += iconOffset;
            match.end += iconOffset;
        }
    }
    return matches;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/idGenerator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/idGenerator.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IdGenerator: () => (/* binding */ IdGenerator),
/* harmony export */   defaultGenerator: () => (/* binding */ defaultGenerator)
/* harmony export */ });
class IdGenerator {
    constructor(prefix) {
        this._prefix = prefix;
        this._lastId = 0;
    }
    nextId() {
        return this._prefix + (++this._lastId);
    }
}
const defaultGenerator = ( new IdGenerator('id#'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/json.js":
/*!***************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/json.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ParseErrorCode: () => (/* binding */ ParseErrorCode),
/* harmony export */   ParseOptions: () => (/* binding */ ParseOptions),
/* harmony export */   ScanError: () => (/* binding */ ScanError),
/* harmony export */   SyntaxKind: () => (/* binding */ SyntaxKind),
/* harmony export */   createScanner: () => (/* binding */ createScanner),
/* harmony export */   findNodeAtLocation: () => (/* binding */ findNodeAtLocation),
/* harmony export */   getLocation: () => (/* binding */ getLocation),
/* harmony export */   getNodeType: () => (/* binding */ getNodeType),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseTree: () => (/* binding */ parseTree),
/* harmony export */   visit: () => (/* binding */ visit)
/* harmony export */ });
var ScanError;
( (function(ScanError) {
    ScanError[ScanError["None"] = 0] = "None";
    ScanError[ScanError["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
    ScanError[ScanError["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
    ScanError[ScanError["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
    ScanError[ScanError["InvalidUnicode"] = 4] = "InvalidUnicode";
    ScanError[ScanError["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
    ScanError[ScanError["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {})));
var SyntaxKind;
( (function(SyntaxKind) {
    SyntaxKind[SyntaxKind["OpenBraceToken"] = 1] = "OpenBraceToken";
    SyntaxKind[SyntaxKind["CloseBraceToken"] = 2] = "CloseBraceToken";
    SyntaxKind[SyntaxKind["OpenBracketToken"] = 3] = "OpenBracketToken";
    SyntaxKind[SyntaxKind["CloseBracketToken"] = 4] = "CloseBracketToken";
    SyntaxKind[SyntaxKind["CommaToken"] = 5] = "CommaToken";
    SyntaxKind[SyntaxKind["ColonToken"] = 6] = "ColonToken";
    SyntaxKind[SyntaxKind["NullKeyword"] = 7] = "NullKeyword";
    SyntaxKind[SyntaxKind["TrueKeyword"] = 8] = "TrueKeyword";
    SyntaxKind[SyntaxKind["FalseKeyword"] = 9] = "FalseKeyword";
    SyntaxKind[SyntaxKind["StringLiteral"] = 10] = "StringLiteral";
    SyntaxKind[SyntaxKind["NumericLiteral"] = 11] = "NumericLiteral";
    SyntaxKind[SyntaxKind["LineCommentTrivia"] = 12] = "LineCommentTrivia";
    SyntaxKind[SyntaxKind["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
    SyntaxKind[SyntaxKind["LineBreakTrivia"] = 14] = "LineBreakTrivia";
    SyntaxKind[SyntaxKind["Trivia"] = 15] = "Trivia";
    SyntaxKind[SyntaxKind["Unknown"] = 16] = "Unknown";
    SyntaxKind[SyntaxKind["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {})));
var ParseErrorCode;
( (function(ParseErrorCode) {
    ParseErrorCode[ParseErrorCode["InvalidSymbol"] = 1] = "InvalidSymbol";
    ParseErrorCode[ParseErrorCode["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
    ParseErrorCode[ParseErrorCode["PropertyNameExpected"] = 3] = "PropertyNameExpected";
    ParseErrorCode[ParseErrorCode["ValueExpected"] = 4] = "ValueExpected";
    ParseErrorCode[ParseErrorCode["ColonExpected"] = 5] = "ColonExpected";
    ParseErrorCode[ParseErrorCode["CommaExpected"] = 6] = "CommaExpected";
    ParseErrorCode[ParseErrorCode["CloseBraceExpected"] = 7] = "CloseBraceExpected";
    ParseErrorCode[ParseErrorCode["CloseBracketExpected"] = 8] = "CloseBracketExpected";
    ParseErrorCode[ParseErrorCode["EndOfFileExpected"] = 9] = "EndOfFileExpected";
    ParseErrorCode[ParseErrorCode["InvalidCommentToken"] = 10] = "InvalidCommentToken";
    ParseErrorCode[ParseErrorCode["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
    ParseErrorCode[ParseErrorCode["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
    ParseErrorCode[ParseErrorCode["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
    ParseErrorCode[ParseErrorCode["InvalidUnicode"] = 14] = "InvalidUnicode";
    ParseErrorCode[ParseErrorCode["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
    ParseErrorCode[ParseErrorCode["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {})));
var ParseOptions;
( (function(ParseOptions) {
    ParseOptions.DEFAULT = {
        allowTrailingComma: true
    };
})(ParseOptions || (ParseOptions = {})));
function createScanner(text, ignoreTrivia = false) {
    let pos = 0;
    const len = text.length;
    let value = '';
    let tokenOffset = 0;
    let token = SyntaxKind.Unknown;
    let scanError = ScanError.None;
    function scanHexDigits(count) {
        let digits = 0;
        let hexValue = 0;
        while (digits < count) {
            const ch = text.charCodeAt(pos);
            if (ch >= CharacterCodes._0 && ch <= CharacterCodes._9) {
                hexValue = hexValue * 16 + ch - CharacterCodes._0;
            }
            else if (ch >= CharacterCodes.A && ch <= CharacterCodes.F) {
                hexValue = hexValue * 16 + ch - CharacterCodes.A + 10;
            }
            else if (ch >= CharacterCodes.a && ch <= CharacterCodes.f) {
                hexValue = hexValue * 16 + ch - CharacterCodes.a + 10;
            }
            else {
                break;
            }
            pos++;
            digits++;
        }
        if (digits < count) {
            hexValue = -1;
        }
        return hexValue;
    }
    function setPosition(newPosition) {
        pos = newPosition;
        value = '';
        tokenOffset = 0;
        token = SyntaxKind.Unknown;
        scanError = ScanError.None;
    }
    function scanNumber() {
        const start = pos;
        if (text.charCodeAt(pos) === CharacterCodes._0) {
            pos++;
        }
        else {
            pos++;
            while (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
            }
        }
        if (pos < text.length && text.charCodeAt(pos) === CharacterCodes.dot) {
            pos++;
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while (pos < text.length && isDigit(text.charCodeAt(pos))) {
                    pos++;
                }
            }
            else {
                scanError = ScanError.UnexpectedEndOfNumber;
                return text.substring(start, pos);
            }
        }
        let end = pos;
        if (pos < text.length && (text.charCodeAt(pos) === CharacterCodes.E || text.charCodeAt(pos) === CharacterCodes.e)) {
            pos++;
            if (pos < text.length && text.charCodeAt(pos) === CharacterCodes.plus || text.charCodeAt(pos) === CharacterCodes.minus) {
                pos++;
            }
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while (pos < text.length && isDigit(text.charCodeAt(pos))) {
                    pos++;
                }
                end = pos;
            }
            else {
                scanError = ScanError.UnexpectedEndOfNumber;
            }
        }
        return text.substring(start, end);
    }
    function scanString() {
        let result = '', start = pos;
        while (true) {
            if (pos >= len) {
                result += text.substring(start, pos);
                scanError = ScanError.UnexpectedEndOfString;
                break;
            }
            const ch = text.charCodeAt(pos);
            if (ch === CharacterCodes.doubleQuote) {
                result += text.substring(start, pos);
                pos++;
                break;
            }
            if (ch === CharacterCodes.backslash) {
                result += text.substring(start, pos);
                pos++;
                if (pos >= len) {
                    scanError = ScanError.UnexpectedEndOfString;
                    break;
                }
                const ch2 = text.charCodeAt(pos++);
                switch (ch2) {
                    case CharacterCodes.doubleQuote:
                        result += '\"';
                        break;
                    case CharacterCodes.backslash:
                        result += '\\';
                        break;
                    case CharacterCodes.slash:
                        result += '/';
                        break;
                    case CharacterCodes.b:
                        result += '\b';
                        break;
                    case CharacterCodes.f:
                        result += '\f';
                        break;
                    case CharacterCodes.n:
                        result += '\n';
                        break;
                    case CharacterCodes.r:
                        result += '\r';
                        break;
                    case CharacterCodes.t:
                        result += '\t';
                        break;
                    case CharacterCodes.u: {
                        const ch3 = scanHexDigits(4);
                        if (ch3 >= 0) {
                            result += String.fromCharCode(ch3);
                        }
                        else {
                            scanError = ScanError.InvalidUnicode;
                        }
                        break;
                    }
                    default:
                        scanError = ScanError.InvalidEscapeCharacter;
                }
                start = pos;
                continue;
            }
            if (ch >= 0 && ch <= 0x1F) {
                if (isLineBreak(ch)) {
                    result += text.substring(start, pos);
                    scanError = ScanError.UnexpectedEndOfString;
                    break;
                }
                else {
                    scanError = ScanError.InvalidCharacter;
                }
            }
            pos++;
        }
        return result;
    }
    function scanNext() {
        value = '';
        scanError = ScanError.None;
        tokenOffset = pos;
        if (pos >= len) {
            tokenOffset = len;
            return token = SyntaxKind.EOF;
        }
        let code = text.charCodeAt(pos);
        if (isWhitespace(code)) {
            do {
                pos++;
                value += String.fromCharCode(code);
                code = text.charCodeAt(pos);
            } while (isWhitespace(code));
            return token = SyntaxKind.Trivia;
        }
        if (isLineBreak(code)) {
            pos++;
            value += String.fromCharCode(code);
            if (code === CharacterCodes.carriageReturn && text.charCodeAt(pos) === CharacterCodes.lineFeed) {
                pos++;
                value += '\n';
            }
            return token = SyntaxKind.LineBreakTrivia;
        }
        switch (code) {
            case CharacterCodes.openBrace:
                pos++;
                return token = SyntaxKind.OpenBraceToken;
            case CharacterCodes.closeBrace:
                pos++;
                return token = SyntaxKind.CloseBraceToken;
            case CharacterCodes.openBracket:
                pos++;
                return token = SyntaxKind.OpenBracketToken;
            case CharacterCodes.closeBracket:
                pos++;
                return token = SyntaxKind.CloseBracketToken;
            case CharacterCodes.colon:
                pos++;
                return token = SyntaxKind.ColonToken;
            case CharacterCodes.comma:
                pos++;
                return token = SyntaxKind.CommaToken;
            case CharacterCodes.doubleQuote:
                pos++;
                value = scanString();
                return token = SyntaxKind.StringLiteral;
            case CharacterCodes.slash: {
                const start = pos - 1;
                if (text.charCodeAt(pos + 1) === CharacterCodes.slash) {
                    pos += 2;
                    while (pos < len) {
                        if (isLineBreak(text.charCodeAt(pos))) {
                            break;
                        }
                        pos++;
                    }
                    value = text.substring(start, pos);
                    return token = SyntaxKind.LineCommentTrivia;
                }
                if (text.charCodeAt(pos + 1) === CharacterCodes.asterisk) {
                    pos += 2;
                    const safeLength = len - 1;
                    let commentClosed = false;
                    while (pos < safeLength) {
                        const ch = text.charCodeAt(pos);
                        if (ch === CharacterCodes.asterisk && text.charCodeAt(pos + 1) === CharacterCodes.slash) {
                            pos += 2;
                            commentClosed = true;
                            break;
                        }
                        pos++;
                    }
                    if (!commentClosed) {
                        pos++;
                        scanError = ScanError.UnexpectedEndOfComment;
                    }
                    value = text.substring(start, pos);
                    return token = SyntaxKind.BlockCommentTrivia;
                }
                value += String.fromCharCode(code);
                pos++;
                return token = SyntaxKind.Unknown;
            }
            case CharacterCodes.minus:
                value += String.fromCharCode(code);
                pos++;
                if (pos === len || !isDigit(text.charCodeAt(pos))) {
                    return token = SyntaxKind.Unknown;
                }
            case CharacterCodes._0:
            case CharacterCodes._1:
            case CharacterCodes._2:
            case CharacterCodes._3:
            case CharacterCodes._4:
            case CharacterCodes._5:
            case CharacterCodes._6:
            case CharacterCodes._7:
            case CharacterCodes._8:
            case CharacterCodes._9:
                value += scanNumber();
                return token = SyntaxKind.NumericLiteral;
            default:
                while (pos < len && isUnknownContentCharacter(code)) {
                    pos++;
                    code = text.charCodeAt(pos);
                }
                if (tokenOffset !== pos) {
                    value = text.substring(tokenOffset, pos);
                    switch (value) {
                        case 'true': return token = SyntaxKind.TrueKeyword;
                        case 'false': return token = SyntaxKind.FalseKeyword;
                        case 'null': return token = SyntaxKind.NullKeyword;
                    }
                    return token = SyntaxKind.Unknown;
                }
                value += String.fromCharCode(code);
                pos++;
                return token = SyntaxKind.Unknown;
        }
    }
    function isUnknownContentCharacter(code) {
        if (isWhitespace(code) || isLineBreak(code)) {
            return false;
        }
        switch (code) {
            case CharacterCodes.closeBrace:
            case CharacterCodes.closeBracket:
            case CharacterCodes.openBrace:
            case CharacterCodes.openBracket:
            case CharacterCodes.doubleQuote:
            case CharacterCodes.colon:
            case CharacterCodes.comma:
            case CharacterCodes.slash:
                return false;
        }
        return true;
    }
    function scanNextNonTrivia() {
        let result;
        do {
            result = scanNext();
        } while (result >= SyntaxKind.LineCommentTrivia && result <= SyntaxKind.Trivia);
        return result;
    }
    return {
        setPosition: setPosition,
        getPosition: () => pos,
        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
        getToken: () => token,
        getTokenValue: () => value,
        getTokenOffset: () => tokenOffset,
        getTokenLength: () => pos - tokenOffset,
        getTokenError: () => scanError
    };
}
function isWhitespace(ch) {
    return ch === CharacterCodes.space || ch === CharacterCodes.tab || ch === CharacterCodes.verticalTab || ch === CharacterCodes.formFeed ||
        ch === CharacterCodes.nonBreakingSpace || ch === CharacterCodes.ogham || ch >= CharacterCodes.enQuad && ch <= CharacterCodes.zeroWidthSpace ||
        ch === CharacterCodes.narrowNoBreakSpace || ch === CharacterCodes.mathematicalSpace || ch === CharacterCodes.ideographicSpace || ch === CharacterCodes.byteOrderMark;
}
function isLineBreak(ch) {
    return ch === CharacterCodes.lineFeed || ch === CharacterCodes.carriageReturn || ch === CharacterCodes.lineSeparator || ch === CharacterCodes.paragraphSeparator;
}
function isDigit(ch) {
    return ch >= CharacterCodes._0 && ch <= CharacterCodes._9;
}
var CharacterCodes;
( (function(CharacterCodes) {
    CharacterCodes[CharacterCodes["nullCharacter"] = 0] = "nullCharacter";
    CharacterCodes[CharacterCodes["maxAsciiCharacter"] = 127] = "maxAsciiCharacter";
    CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";
    CharacterCodes[CharacterCodes["carriageReturn"] = 13] = "carriageReturn";
    CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";
    CharacterCodes[CharacterCodes["paragraphSeparator"] = 8233] = "paragraphSeparator";
    CharacterCodes[CharacterCodes["nextLine"] = 133] = "nextLine";
    CharacterCodes[CharacterCodes["space"] = 32] = "space";
    CharacterCodes[CharacterCodes["nonBreakingSpace"] = 160] = "nonBreakingSpace";
    CharacterCodes[CharacterCodes["enQuad"] = 8192] = "enQuad";
    CharacterCodes[CharacterCodes["emQuad"] = 8193] = "emQuad";
    CharacterCodes[CharacterCodes["enSpace"] = 8194] = "enSpace";
    CharacterCodes[CharacterCodes["emSpace"] = 8195] = "emSpace";
    CharacterCodes[CharacterCodes["threePerEmSpace"] = 8196] = "threePerEmSpace";
    CharacterCodes[CharacterCodes["fourPerEmSpace"] = 8197] = "fourPerEmSpace";
    CharacterCodes[CharacterCodes["sixPerEmSpace"] = 8198] = "sixPerEmSpace";
    CharacterCodes[CharacterCodes["figureSpace"] = 8199] = "figureSpace";
    CharacterCodes[CharacterCodes["punctuationSpace"] = 8200] = "punctuationSpace";
    CharacterCodes[CharacterCodes["thinSpace"] = 8201] = "thinSpace";
    CharacterCodes[CharacterCodes["hairSpace"] = 8202] = "hairSpace";
    CharacterCodes[CharacterCodes["zeroWidthSpace"] = 8203] = "zeroWidthSpace";
    CharacterCodes[CharacterCodes["narrowNoBreakSpace"] = 8239] = "narrowNoBreakSpace";
    CharacterCodes[CharacterCodes["ideographicSpace"] = 12288] = "ideographicSpace";
    CharacterCodes[CharacterCodes["mathematicalSpace"] = 8287] = "mathematicalSpace";
    CharacterCodes[CharacterCodes["ogham"] = 5760] = "ogham";
    CharacterCodes[CharacterCodes["_"] = 95] = "_";
    CharacterCodes[CharacterCodes["$"] = 36] = "$";
    CharacterCodes[CharacterCodes["_0"] = 48] = "_0";
    CharacterCodes[CharacterCodes["_1"] = 49] = "_1";
    CharacterCodes[CharacterCodes["_2"] = 50] = "_2";
    CharacterCodes[CharacterCodes["_3"] = 51] = "_3";
    CharacterCodes[CharacterCodes["_4"] = 52] = "_4";
    CharacterCodes[CharacterCodes["_5"] = 53] = "_5";
    CharacterCodes[CharacterCodes["_6"] = 54] = "_6";
    CharacterCodes[CharacterCodes["_7"] = 55] = "_7";
    CharacterCodes[CharacterCodes["_8"] = 56] = "_8";
    CharacterCodes[CharacterCodes["_9"] = 57] = "_9";
    CharacterCodes[CharacterCodes["a"] = 97] = "a";
    CharacterCodes[CharacterCodes["b"] = 98] = "b";
    CharacterCodes[CharacterCodes["c"] = 99] = "c";
    CharacterCodes[CharacterCodes["d"] = 100] = "d";
    CharacterCodes[CharacterCodes["e"] = 101] = "e";
    CharacterCodes[CharacterCodes["f"] = 102] = "f";
    CharacterCodes[CharacterCodes["g"] = 103] = "g";
    CharacterCodes[CharacterCodes["h"] = 104] = "h";
    CharacterCodes[CharacterCodes["i"] = 105] = "i";
    CharacterCodes[CharacterCodes["j"] = 106] = "j";
    CharacterCodes[CharacterCodes["k"] = 107] = "k";
    CharacterCodes[CharacterCodes["l"] = 108] = "l";
    CharacterCodes[CharacterCodes["m"] = 109] = "m";
    CharacterCodes[CharacterCodes["n"] = 110] = "n";
    CharacterCodes[CharacterCodes["o"] = 111] = "o";
    CharacterCodes[CharacterCodes["p"] = 112] = "p";
    CharacterCodes[CharacterCodes["q"] = 113] = "q";
    CharacterCodes[CharacterCodes["r"] = 114] = "r";
    CharacterCodes[CharacterCodes["s"] = 115] = "s";
    CharacterCodes[CharacterCodes["t"] = 116] = "t";
    CharacterCodes[CharacterCodes["u"] = 117] = "u";
    CharacterCodes[CharacterCodes["v"] = 118] = "v";
    CharacterCodes[CharacterCodes["w"] = 119] = "w";
    CharacterCodes[CharacterCodes["x"] = 120] = "x";
    CharacterCodes[CharacterCodes["y"] = 121] = "y";
    CharacterCodes[CharacterCodes["z"] = 122] = "z";
    CharacterCodes[CharacterCodes["A"] = 65] = "A";
    CharacterCodes[CharacterCodes["B"] = 66] = "B";
    CharacterCodes[CharacterCodes["C"] = 67] = "C";
    CharacterCodes[CharacterCodes["D"] = 68] = "D";
    CharacterCodes[CharacterCodes["E"] = 69] = "E";
    CharacterCodes[CharacterCodes["F"] = 70] = "F";
    CharacterCodes[CharacterCodes["G"] = 71] = "G";
    CharacterCodes[CharacterCodes["H"] = 72] = "H";
    CharacterCodes[CharacterCodes["I"] = 73] = "I";
    CharacterCodes[CharacterCodes["J"] = 74] = "J";
    CharacterCodes[CharacterCodes["K"] = 75] = "K";
    CharacterCodes[CharacterCodes["L"] = 76] = "L";
    CharacterCodes[CharacterCodes["M"] = 77] = "M";
    CharacterCodes[CharacterCodes["N"] = 78] = "N";
    CharacterCodes[CharacterCodes["O"] = 79] = "O";
    CharacterCodes[CharacterCodes["P"] = 80] = "P";
    CharacterCodes[CharacterCodes["Q"] = 81] = "Q";
    CharacterCodes[CharacterCodes["R"] = 82] = "R";
    CharacterCodes[CharacterCodes["S"] = 83] = "S";
    CharacterCodes[CharacterCodes["T"] = 84] = "T";
    CharacterCodes[CharacterCodes["U"] = 85] = "U";
    CharacterCodes[CharacterCodes["V"] = 86] = "V";
    CharacterCodes[CharacterCodes["W"] = 87] = "W";
    CharacterCodes[CharacterCodes["X"] = 88] = "X";
    CharacterCodes[CharacterCodes["Y"] = 89] = "Y";
    CharacterCodes[CharacterCodes["Z"] = 90] = "Z";
    CharacterCodes[CharacterCodes["ampersand"] = 38] = "ampersand";
    CharacterCodes[CharacterCodes["asterisk"] = 42] = "asterisk";
    CharacterCodes[CharacterCodes["at"] = 64] = "at";
    CharacterCodes[CharacterCodes["backslash"] = 92] = "backslash";
    CharacterCodes[CharacterCodes["bar"] = 124] = "bar";
    CharacterCodes[CharacterCodes["caret"] = 94] = "caret";
    CharacterCodes[CharacterCodes["closeBrace"] = 125] = "closeBrace";
    CharacterCodes[CharacterCodes["closeBracket"] = 93] = "closeBracket";
    CharacterCodes[CharacterCodes["closeParen"] = 41] = "closeParen";
    CharacterCodes[CharacterCodes["colon"] = 58] = "colon";
    CharacterCodes[CharacterCodes["comma"] = 44] = "comma";
    CharacterCodes[CharacterCodes["dot"] = 46] = "dot";
    CharacterCodes[CharacterCodes["doubleQuote"] = 34] = "doubleQuote";
    CharacterCodes[CharacterCodes["equals"] = 61] = "equals";
    CharacterCodes[CharacterCodes["exclamation"] = 33] = "exclamation";
    CharacterCodes[CharacterCodes["greaterThan"] = 62] = "greaterThan";
    CharacterCodes[CharacterCodes["lessThan"] = 60] = "lessThan";
    CharacterCodes[CharacterCodes["minus"] = 45] = "minus";
    CharacterCodes[CharacterCodes["openBrace"] = 123] = "openBrace";
    CharacterCodes[CharacterCodes["openBracket"] = 91] = "openBracket";
    CharacterCodes[CharacterCodes["openParen"] = 40] = "openParen";
    CharacterCodes[CharacterCodes["percent"] = 37] = "percent";
    CharacterCodes[CharacterCodes["plus"] = 43] = "plus";
    CharacterCodes[CharacterCodes["question"] = 63] = "question";
    CharacterCodes[CharacterCodes["semicolon"] = 59] = "semicolon";
    CharacterCodes[CharacterCodes["singleQuote"] = 39] = "singleQuote";
    CharacterCodes[CharacterCodes["slash"] = 47] = "slash";
    CharacterCodes[CharacterCodes["tilde"] = 126] = "tilde";
    CharacterCodes[CharacterCodes["backspace"] = 8] = "backspace";
    CharacterCodes[CharacterCodes["formFeed"] = 12] = "formFeed";
    CharacterCodes[CharacterCodes["byteOrderMark"] = 65279] = "byteOrderMark";
    CharacterCodes[CharacterCodes["tab"] = 9] = "tab";
    CharacterCodes[CharacterCodes["verticalTab"] = 11] = "verticalTab";
})(CharacterCodes || (CharacterCodes = {})));
function getLocation(text, position) {
    const segments = [];
    const earlyReturnException = ( new Object());
    let previousNode = undefined;
    const previousNodeInst = {
        value: {},
        offset: 0,
        length: 0,
        type: 'object',
        parent: undefined
    };
    let isAtPropertyKey = false;
    function setPreviousNode(value, offset, length, type) {
        previousNodeInst.value = value;
        previousNodeInst.offset = offset;
        previousNodeInst.length = length;
        previousNodeInst.type = type;
        previousNodeInst.colonOffset = undefined;
        previousNode = previousNodeInst;
    }
    try {
        visit(text, {
            onObjectBegin: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                isAtPropertyKey = position > offset;
                segments.push('');
            },
            onObjectProperty: (name, offset, length) => {
                if (position < offset) {
                    throw earlyReturnException;
                }
                setPreviousNode(name, offset, length, 'property');
                segments[segments.length - 1] = name;
                if (position <= offset + length) {
                    throw earlyReturnException;
                }
            },
            onObjectEnd: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                segments.pop();
            },
            onArrayBegin: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                segments.push(0);
            },
            onArrayEnd: (offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                previousNode = undefined;
                segments.pop();
            },
            onLiteralValue: (value, offset, length) => {
                if (position < offset) {
                    throw earlyReturnException;
                }
                setPreviousNode(value, offset, length, getNodeType(value));
                if (position <= offset + length) {
                    throw earlyReturnException;
                }
            },
            onSeparator: (sep, offset, length) => {
                if (position <= offset) {
                    throw earlyReturnException;
                }
                if (sep === ':' && previousNode && previousNode.type === 'property') {
                    previousNode.colonOffset = offset;
                    isAtPropertyKey = false;
                    previousNode = undefined;
                }
                else if (sep === ',') {
                    const last = segments[segments.length - 1];
                    if (typeof last === 'number') {
                        segments[segments.length - 1] = last + 1;
                    }
                    else {
                        isAtPropertyKey = true;
                        segments[segments.length - 1] = '';
                    }
                    previousNode = undefined;
                }
            }
        });
    }
    catch (e) {
        if (e !== earlyReturnException) {
            throw e;
        }
    }
    return {
        path: segments,
        previousNode,
        isAtPropertyKey,
        matches: (pattern) => {
            let k = 0;
            for (let i = 0; k < pattern.length && i < segments.length; i++) {
                if (pattern[k] === segments[i] || pattern[k] === '*') {
                    k++;
                }
                else if (pattern[k] !== '**') {
                    return false;
                }
            }
            return k === pattern.length;
        }
    };
}
function parse(text, errors = [], options = ParseOptions.DEFAULT) {
    let currentProperty = null;
    let currentParent = [];
    const previousParents = [];
    function onValue(value) {
        if (Array.isArray(currentParent)) {
            currentParent.push(value);
        }
        else if (currentProperty !== null) {
            currentParent[currentProperty] = value;
        }
    }
    const visitor = {
        onObjectBegin: () => {
            const object = {};
            onValue(object);
            previousParents.push(currentParent);
            currentParent = object;
            currentProperty = null;
        },
        onObjectProperty: (name) => {
            currentProperty = name;
        },
        onObjectEnd: () => {
            currentParent = previousParents.pop();
        },
        onArrayBegin: () => {
            const array = [];
            onValue(array);
            previousParents.push(currentParent);
            currentParent = array;
            currentProperty = null;
        },
        onArrayEnd: () => {
            currentParent = previousParents.pop();
        },
        onLiteralValue: onValue,
        onError: (error, offset, length) => {
            errors.push({ error, offset, length });
        }
    };
    visit(text, visitor, options);
    return currentParent[0];
}
function parseTree(text, errors = [], options = ParseOptions.DEFAULT) {
    let currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined };
    function ensurePropertyComplete(endOffset) {
        if (currentParent.type === 'property') {
            currentParent.length = endOffset - currentParent.offset;
            currentParent = currentParent.parent;
        }
    }
    function onValue(valueNode) {
        currentParent.children.push(valueNode);
        return valueNode;
    }
    const visitor = {
        onObjectBegin: (offset) => {
            currentParent = onValue({ type: 'object', offset, length: -1, parent: currentParent, children: [] });
        },
        onObjectProperty: (name, offset, length) => {
            currentParent = onValue({ type: 'property', offset, length: -1, parent: currentParent, children: [] });
            currentParent.children.push({ type: 'string', value: name, offset, length, parent: currentParent });
        },
        onObjectEnd: (offset, length) => {
            currentParent.length = offset + length - currentParent.offset;
            currentParent = currentParent.parent;
            ensurePropertyComplete(offset + length);
        },
        onArrayBegin: (offset, length) => {
            currentParent = onValue({ type: 'array', offset, length: -1, parent: currentParent, children: [] });
        },
        onArrayEnd: (offset, length) => {
            currentParent.length = offset + length - currentParent.offset;
            currentParent = currentParent.parent;
            ensurePropertyComplete(offset + length);
        },
        onLiteralValue: (value, offset, length) => {
            onValue({ type: getNodeType(value), offset, length, parent: currentParent, value });
            ensurePropertyComplete(offset + length);
        },
        onSeparator: (sep, offset, length) => {
            if (currentParent.type === 'property') {
                if (sep === ':') {
                    currentParent.colonOffset = offset;
                }
                else if (sep === ',') {
                    ensurePropertyComplete(offset);
                }
            }
        },
        onError: (error, offset, length) => {
            errors.push({ error, offset, length });
        }
    };
    visit(text, visitor, options);
    const result = currentParent.children[0];
    if (result) {
        delete result.parent;
    }
    return result;
}
function findNodeAtLocation(root, path) {
    if (!root) {
        return undefined;
    }
    let node = root;
    for (const segment of path) {
        if (typeof segment === 'string') {
            if (node.type !== 'object' || !Array.isArray(node.children)) {
                return undefined;
            }
            let found = false;
            for (const propertyNode of node.children) {
                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment) {
                    node = propertyNode.children[1];
                    found = true;
                    break;
                }
            }
            if (!found) {
                return undefined;
            }
        }
        else {
            const index = segment;
            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {
                return undefined;
            }
            node = node.children[index];
        }
    }
    return node;
}
function visit(text, visitor, options = ParseOptions.DEFAULT) {
    const _scanner = createScanner(text, false);
    function toNoArgVisit(visitFunction) {
        return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength()) : () => true;
    }
    function toOneArgVisit(visitFunction) {
        return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength()) : () => true;
    }
    const onObjectBegin = toNoArgVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisit(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisit(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisit(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
    const disallowComments = options && options.disallowComments;
    const allowTrailingComma = options && options.allowTrailingComma;
    function scanNext() {
        while (true) {
            const token = _scanner.scan();
            switch (_scanner.getTokenError()) {
                case ScanError.InvalidUnicode:
                    handleError(ParseErrorCode.InvalidUnicode);
                    break;
                case ScanError.InvalidEscapeCharacter:
                    handleError(ParseErrorCode.InvalidEscapeCharacter);
                    break;
                case ScanError.UnexpectedEndOfNumber:
                    handleError(ParseErrorCode.UnexpectedEndOfNumber);
                    break;
                case ScanError.UnexpectedEndOfComment:
                    if (!disallowComments) {
                        handleError(ParseErrorCode.UnexpectedEndOfComment);
                    }
                    break;
                case ScanError.UnexpectedEndOfString:
                    handleError(ParseErrorCode.UnexpectedEndOfString);
                    break;
                case ScanError.InvalidCharacter:
                    handleError(ParseErrorCode.InvalidCharacter);
                    break;
            }
            switch (token) {
                case SyntaxKind.LineCommentTrivia:
                case SyntaxKind.BlockCommentTrivia:
                    if (disallowComments) {
                        handleError(ParseErrorCode.InvalidCommentToken);
                    }
                    else {
                        onComment();
                    }
                    break;
                case SyntaxKind.Unknown:
                    handleError(ParseErrorCode.InvalidSymbol);
                    break;
                case SyntaxKind.Trivia:
                case SyntaxKind.LineBreakTrivia:
                    break;
                default:
                    return token;
            }
        }
    }
    function handleError(error, skipUntilAfter = [], skipUntil = []) {
        onError(error);
        if (skipUntilAfter.length + skipUntil.length > 0) {
            let token = _scanner.getToken();
            while (token !== SyntaxKind.EOF) {
                if (skipUntilAfter.indexOf(token) !== -1) {
                    scanNext();
                    break;
                }
                else if (skipUntil.indexOf(token) !== -1) {
                    break;
                }
                token = scanNext();
            }
        }
    }
    function parseString(isValue) {
        const value = _scanner.getTokenValue();
        if (isValue) {
            onLiteralValue(value);
        }
        else {
            onObjectProperty(value);
        }
        scanNext();
        return true;
    }
    function parseLiteral() {
        switch (_scanner.getToken()) {
            case SyntaxKind.NumericLiteral: {
                let value = 0;
                try {
                    value = JSON.parse(_scanner.getTokenValue());
                    if (typeof value !== 'number') {
                        handleError(ParseErrorCode.InvalidNumberFormat);
                        value = 0;
                    }
                }
                catch (e) {
                    handleError(ParseErrorCode.InvalidNumberFormat);
                }
                onLiteralValue(value);
                break;
            }
            case SyntaxKind.NullKeyword:
                onLiteralValue(null);
                break;
            case SyntaxKind.TrueKeyword:
                onLiteralValue(true);
                break;
            case SyntaxKind.FalseKeyword:
                onLiteralValue(false);
                break;
            default:
                return false;
        }
        scanNext();
        return true;
    }
    function parseProperty() {
        if (_scanner.getToken() !== SyntaxKind.StringLiteral) {
            handleError(ParseErrorCode.PropertyNameExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);
            return false;
        }
        parseString(false);
        if (_scanner.getToken() === SyntaxKind.ColonToken) {
            onSeparator(':');
            scanNext();
            if (!parseValue()) {
                handleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);
            }
        }
        else {
            handleError(ParseErrorCode.ColonExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);
        }
        return true;
    }
    function parseObject() {
        onObjectBegin();
        scanNext();
        let needsComma = false;
        while (_scanner.getToken() !== SyntaxKind.CloseBraceToken && _scanner.getToken() !== SyntaxKind.EOF) {
            if (_scanner.getToken() === SyntaxKind.CommaToken) {
                if (!needsComma) {
                    handleError(ParseErrorCode.ValueExpected, [], []);
                }
                onSeparator(',');
                scanNext();
                if (_scanner.getToken() === SyntaxKind.CloseBraceToken && allowTrailingComma) {
                    break;
                }
            }
            else if (needsComma) {
                handleError(ParseErrorCode.CommaExpected, [], []);
            }
            if (!parseProperty()) {
                handleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBraceToken, SyntaxKind.CommaToken]);
            }
            needsComma = true;
        }
        onObjectEnd();
        if (_scanner.getToken() !== SyntaxKind.CloseBraceToken) {
            handleError(ParseErrorCode.CloseBraceExpected, [SyntaxKind.CloseBraceToken], []);
        }
        else {
            scanNext();
        }
        return true;
    }
    function parseArray() {
        onArrayBegin();
        scanNext();
        let needsComma = false;
        while (_scanner.getToken() !== SyntaxKind.CloseBracketToken && _scanner.getToken() !== SyntaxKind.EOF) {
            if (_scanner.getToken() === SyntaxKind.CommaToken) {
                if (!needsComma) {
                    handleError(ParseErrorCode.ValueExpected, [], []);
                }
                onSeparator(',');
                scanNext();
                if (_scanner.getToken() === SyntaxKind.CloseBracketToken && allowTrailingComma) {
                    break;
                }
            }
            else if (needsComma) {
                handleError(ParseErrorCode.CommaExpected, [], []);
            }
            if (!parseValue()) {
                handleError(ParseErrorCode.ValueExpected, [], [SyntaxKind.CloseBracketToken, SyntaxKind.CommaToken]);
            }
            needsComma = true;
        }
        onArrayEnd();
        if (_scanner.getToken() !== SyntaxKind.CloseBracketToken) {
            handleError(ParseErrorCode.CloseBracketExpected, [SyntaxKind.CloseBracketToken], []);
        }
        else {
            scanNext();
        }
        return true;
    }
    function parseValue() {
        switch (_scanner.getToken()) {
            case SyntaxKind.OpenBracketToken:
                return parseArray();
            case SyntaxKind.OpenBraceToken:
                return parseObject();
            case SyntaxKind.StringLiteral:
                return parseString(true);
            default:
                return parseLiteral();
        }
    }
    scanNext();
    if (_scanner.getToken() === SyntaxKind.EOF) {
        if (options.allowEmptyContent) {
            return true;
        }
        handleError(ParseErrorCode.ValueExpected, [], []);
        return false;
    }
    if (!parseValue()) {
        handleError(ParseErrorCode.ValueExpected, [], []);
        return false;
    }
    if (_scanner.getToken() !== SyntaxKind.EOF) {
        handleError(ParseErrorCode.EndOfFileExpected, [], []);
    }
    return true;
}
function getNodeType(value) {
    switch (typeof value) {
        case 'boolean': return 'boolean';
        case 'number': return 'number';
        case 'string': return 'string';
        case 'object': {
            if (!value) {
                return 'null';
            }
            else if (Array.isArray(value)) {
                return 'array';
            }
            return 'object';
        }
        default: return 'null';
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/labels.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/labels.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getPathLabel: () => (/* binding */ getPathLabel),
/* harmony export */   mnemonicButtonLabel: () => (/* binding */ mnemonicButtonLabel),
/* harmony export */   mnemonicMenuLabel: () => (/* binding */ mnemonicMenuLabel),
/* harmony export */   normalizeDriveLetter: () => (/* binding */ normalizeDriveLetter),
/* harmony export */   shorten: () => (/* binding */ shorten),
/* harmony export */   splitRecentLabel: () => (/* binding */ splitRecentLabel),
/* harmony export */   template: () => (/* binding */ template),
/* harmony export */   tildify: () => (/* binding */ tildify),
/* harmony export */   unmnemonicLabel: () => (/* binding */ unmnemonicLabel),
/* harmony export */   untildify: () => (/* binding */ untildify)
/* harmony export */ });
/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _extpath_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extpath.js */ "./node_modules/vscode/vscode/src/vs/base/common/extpath.js");
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _resources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");






function getPathLabel(resource, formatting) {
    const { os, tildify: tildifier, relative: relatifier } = formatting;
    if (relatifier) {
        const relativePath = getRelativePathLabel(resource, relatifier, os);
        if (typeof relativePath === 'string') {
            return relativePath;
        }
    }
    let absolutePath = resource.fsPath;
    if (os === _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Windows && !_platform_js__WEBPACK_IMPORTED_MODULE_3__.isWindows) {
        absolutePath = absolutePath.replace(/\//g, '\\');
    }
    else if (os !== _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Windows && _platform_js__WEBPACK_IMPORTED_MODULE_3__.isWindows) {
        absolutePath = absolutePath.replace(/\\/g, '/');
    }
    if (os !== _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Windows && tildifier?.userHome) {
        const userHome = tildifier.userHome.fsPath;
        let userHomeCandidate;
        if (resource.scheme !== tildifier.userHome.scheme && resource.path[0] === _path_js__WEBPACK_IMPORTED_MODULE_2__.posix.sep && resource.path[1] !== _path_js__WEBPACK_IMPORTED_MODULE_2__.posix.sep) {
            userHomeCandidate = tildifier.userHome.with({ path: resource.path }).fsPath;
        }
        else {
            userHomeCandidate = absolutePath;
        }
        absolutePath = tildify(userHomeCandidate, userHome, os);
    }
    const pathLib = os === _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Windows ? _path_js__WEBPACK_IMPORTED_MODULE_2__.win32 : _path_js__WEBPACK_IMPORTED_MODULE_2__.posix;
    return pathLib.normalize(normalizeDriveLetter(absolutePath, os === _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Windows));
}
function getRelativePathLabel(resource, relativePathProvider, os) {
    const pathLib = os === _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Windows ? _path_js__WEBPACK_IMPORTED_MODULE_2__.win32 : _path_js__WEBPACK_IMPORTED_MODULE_2__.posix;
    const extUriLib = os === _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Linux ? _resources_js__WEBPACK_IMPORTED_MODULE_4__.extUri : _resources_js__WEBPACK_IMPORTED_MODULE_4__.extUriIgnorePathCase;
    const workspace = relativePathProvider.getWorkspace();
    const firstFolder = (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.firstOrDefault)(workspace.folders);
    if (!firstFolder) {
        return undefined;
    }
    if (resource.scheme !== firstFolder.uri.scheme && resource.path[0] === _path_js__WEBPACK_IMPORTED_MODULE_2__.posix.sep && resource.path[1] !== _path_js__WEBPACK_IMPORTED_MODULE_2__.posix.sep) {
        resource = firstFolder.uri.with({ path: resource.path });
    }
    const folder = relativePathProvider.getWorkspaceFolder(resource);
    if (!folder) {
        return undefined;
    }
    let relativePathLabel = undefined;
    if (extUriLib.isEqual(folder.uri, resource)) {
        relativePathLabel = '';
    }
    else {
        relativePathLabel = extUriLib.relativePath(folder.uri, resource) ?? '';
    }
    if (relativePathLabel) {
        relativePathLabel = pathLib.normalize(relativePathLabel);
    }
    if (workspace.folders.length > 1 && !relativePathProvider.noPrefix) {
        const rootName = folder.name ? folder.name : extUriLib.basenameOrAuthority(folder.uri);
        relativePathLabel = relativePathLabel ? `${rootName} • ${relativePathLabel}` : rootName;
    }
    return relativePathLabel;
}
function normalizeDriveLetter(path, isWindowsOS = _platform_js__WEBPACK_IMPORTED_MODULE_3__.isWindows) {
    if ((0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.hasDriveLetter)(path, isWindowsOS)) {
        return path.charAt(0).toUpperCase() + path.slice(1);
    }
    return path;
}
let normalizedUserHomeCached = Object.create(null);
function tildify(path, userHome, os = _platform_js__WEBPACK_IMPORTED_MODULE_3__.OS) {
    if (os === _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Windows || !path || !userHome) {
        return path;
    }
    let normalizedUserHome = normalizedUserHomeCached.original === userHome ? normalizedUserHomeCached.normalized : undefined;
    if (!normalizedUserHome) {
        normalizedUserHome = userHome;
        if (_platform_js__WEBPACK_IMPORTED_MODULE_3__.isWindows) {
            normalizedUserHome = (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.toSlashes)(normalizedUserHome);
        }
        normalizedUserHome = `${(0,_strings_js__WEBPACK_IMPORTED_MODULE_5__.rtrim)(normalizedUserHome, _path_js__WEBPACK_IMPORTED_MODULE_2__.posix.sep)}${_path_js__WEBPACK_IMPORTED_MODULE_2__.posix.sep}`;
        normalizedUserHomeCached = { original: userHome, normalized: normalizedUserHome };
    }
    let normalizedPath = path;
    if (_platform_js__WEBPACK_IMPORTED_MODULE_3__.isWindows) {
        normalizedPath = (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.toSlashes)(normalizedPath);
    }
    if (os === _platform_js__WEBPACK_IMPORTED_MODULE_3__.OperatingSystem.Linux ? normalizedPath.startsWith(normalizedUserHome) : (0,_strings_js__WEBPACK_IMPORTED_MODULE_5__.startsWithIgnoreCase)(normalizedPath, normalizedUserHome)) {
        return `~/${normalizedPath.substr(normalizedUserHome.length)}`;
    }
    return path;
}
function untildify(path, userHome) {
    return path.replace(/^~($|\/|\\)/, `${userHome}$1`);
}
const ellipsis = '\u2026';
const unc = '\\\\';
const home = '~';
function shorten(paths, pathSeparator = _path_js__WEBPACK_IMPORTED_MODULE_2__.sep) {
    const shortenedPaths = ( new Array(paths.length));
    let match = false;
    for (let pathIndex = 0; pathIndex < paths.length; pathIndex++) {
        const originalPath = paths[pathIndex];
        if (originalPath === '') {
            shortenedPaths[pathIndex] = `.${pathSeparator}`;
            continue;
        }
        if (!originalPath) {
            shortenedPaths[pathIndex] = originalPath;
            continue;
        }
        match = true;
        let prefix = '';
        let trimmedPath = originalPath;
        if (trimmedPath.indexOf(unc) === 0) {
            prefix = trimmedPath.substr(0, trimmedPath.indexOf(unc) + unc.length);
            trimmedPath = trimmedPath.substr(trimmedPath.indexOf(unc) + unc.length);
        }
        else if (trimmedPath.indexOf(pathSeparator) === 0) {
            prefix = trimmedPath.substr(0, trimmedPath.indexOf(pathSeparator) + pathSeparator.length);
            trimmedPath = trimmedPath.substr(trimmedPath.indexOf(pathSeparator) + pathSeparator.length);
        }
        else if (trimmedPath.indexOf(home) === 0) {
            prefix = trimmedPath.substr(0, trimmedPath.indexOf(home) + home.length);
            trimmedPath = trimmedPath.substr(trimmedPath.indexOf(home) + home.length);
        }
        const segments = trimmedPath.split(pathSeparator);
        for (let subpathLength = 1; match && subpathLength <= segments.length; subpathLength++) {
            for (let start = segments.length - subpathLength; match && start >= 0; start--) {
                match = false;
                let subpath = segments.slice(start, start + subpathLength).join(pathSeparator);
                for (let otherPathIndex = 0; !match && otherPathIndex < paths.length; otherPathIndex++) {
                    if (otherPathIndex !== pathIndex && paths[otherPathIndex] && paths[otherPathIndex].indexOf(subpath) > -1) {
                        const isSubpathEnding = (start + subpathLength === segments.length);
                        const subpathWithSep = (start > 0 && paths[otherPathIndex].indexOf(pathSeparator) > -1) ? pathSeparator + subpath : subpath;
                        const isOtherPathEnding = paths[otherPathIndex].endsWith(subpathWithSep);
                        match = !isSubpathEnding || isOtherPathEnding;
                    }
                }
                if (!match) {
                    let result = '';
                    if (segments[0].endsWith(':') || prefix !== '') {
                        if (start === 1) {
                            start = 0;
                            subpathLength++;
                            subpath = segments[0] + pathSeparator + subpath;
                        }
                        if (start > 0) {
                            result = segments[0] + pathSeparator;
                        }
                        result = prefix + result;
                    }
                    if (start > 0) {
                        result = result + ellipsis + pathSeparator;
                    }
                    result = result + subpath;
                    if (start + subpathLength < segments.length) {
                        result = result + pathSeparator + ellipsis;
                    }
                    shortenedPaths[pathIndex] = result;
                }
            }
        }
        if (match) {
            shortenedPaths[pathIndex] = originalPath;
        }
    }
    return shortenedPaths;
}
var Type;
( (function(Type) {
    Type[Type["TEXT"] = 0] = "TEXT";
    Type[Type["VARIABLE"] = 1] = "VARIABLE";
    Type[Type["SEPARATOR"] = 2] = "SEPARATOR";
})(Type || (Type = {})));
function template(template, values = Object.create(null)) {
    const segments = [];
    let inVariable = false;
    let curVal = '';
    for (const char of template) {
        if (char === '$' || (inVariable && char === '{')) {
            if (curVal) {
                segments.push({ value: curVal, type: Type.TEXT });
            }
            curVal = '';
            inVariable = true;
        }
        else if (char === '}' && inVariable) {
            const resolved = values[curVal];
            if (typeof resolved === 'string') {
                if (resolved.length) {
                    segments.push({ value: resolved, type: Type.VARIABLE });
                }
            }
            else if (resolved) {
                const prevSegment = segments[segments.length - 1];
                if (!prevSegment || prevSegment.type !== Type.SEPARATOR) {
                    segments.push({ value: resolved.label, type: Type.SEPARATOR });
                }
            }
            curVal = '';
            inVariable = false;
        }
        else {
            curVal += char;
        }
    }
    if (curVal && !inVariable) {
        segments.push({ value: curVal, type: Type.TEXT });
    }
    return ( segments.filter((segment, index) => {
        if (segment.type === Type.SEPARATOR) {
            const left = segments[index - 1];
            const right = segments[index + 1];
            return [left, right].every(segment => segment && (segment.type === Type.VARIABLE || segment.type === Type.TEXT) && segment.value.length > 0);
        }
        return true;
    }).map(segment => segment.value)).join('');
}
function mnemonicMenuLabel(label, forceDisableMnemonics) {
    if (_platform_js__WEBPACK_IMPORTED_MODULE_3__.isMacintosh || forceDisableMnemonics) {
        return label.replace(/\(&&\w\)|&&/g, '').replace(/&/g, _platform_js__WEBPACK_IMPORTED_MODULE_3__.isMacintosh ? '&' : '&&');
    }
    return label.replace(/&&|&/g, m => m === '&' ? '&&' : '&');
}
function mnemonicButtonLabel(label, forceDisableMnemonics) {
    if (_platform_js__WEBPACK_IMPORTED_MODULE_3__.isMacintosh || forceDisableMnemonics) {
        return label.replace(/\(&&\w\)|&&/g, '');
    }
    if (_platform_js__WEBPACK_IMPORTED_MODULE_3__.isWindows) {
        return label.replace(/&&|&/g, m => m === '&' ? '&&' : '&');
    }
    return label.replace(/&&/g, '_');
}
function unmnemonicLabel(label) {
    return label.replace(/&/g, '&&');
}
function splitRecentLabel(recentLabel) {
    if (recentLabel.endsWith(']')) {
        const lastIndexOfSquareBracket = recentLabel.lastIndexOf(' [', recentLabel.length - 2);
        if (lastIndexOfSquareBracket !== -1) {
            const split = splitName(recentLabel.substring(0, lastIndexOfSquareBracket));
            const remoteNameWithSpace = recentLabel.substring(lastIndexOfSquareBracket);
            return { name: split.name + remoteNameWithSpace, parentPath: split.parentPath };
        }
    }
    return splitName(recentLabel);
}
function splitName(fullPath) {
    const p = fullPath.indexOf('/') !== -1 ? _path_js__WEBPACK_IMPORTED_MODULE_2__.posix : _path_js__WEBPACK_IMPORTED_MODULE_2__.win32;
    const name = p.basename(fullPath);
    const parentPath = p.dirname(fullPath);
    if (name.length) {
        return { name, parentPath };
    }
    return { name: parentPath, parentPath: '' };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/marshalling.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/marshalling.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   revive: () => (/* binding */ revive),
/* harmony export */   stringify: () => (/* binding */ stringify)
/* harmony export */ });
/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _marshallingIds_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");



function stringify(obj) {
    return JSON.stringify(obj, replacer);
}
function parse(text) {
    let data = JSON.parse(text);
    data = revive(data);
    return data;
}
function replacer(key, value) {
    if (value instanceof RegExp) {
        return {
            $mid: _marshallingIds_js__WEBPACK_IMPORTED_MODULE_2__.MarshalledId.Regexp,
            source: value.source,
            flags: value.flags,
        };
    }
    return value;
}
function revive(obj, depth = 0) {
    if (!obj || depth > 200) {
        return obj;
    }
    if (typeof obj === 'object') {
        switch (obj.$mid) {
            case _marshallingIds_js__WEBPACK_IMPORTED_MODULE_2__.MarshalledId.Uri: return _uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(obj);
            case _marshallingIds_js__WEBPACK_IMPORTED_MODULE_2__.MarshalledId.Regexp: return ( new RegExp(obj.source, obj.flags));
            case _marshallingIds_js__WEBPACK_IMPORTED_MODULE_2__.MarshalledId.Date: return ( new Date(obj.source));
        }
        if (obj instanceof _buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer
            || obj instanceof Uint8Array) {
            return obj;
        }
        if (Array.isArray(obj)) {
            for (let i = 0; i < obj.length; ++i) {
                obj[i] = revive(obj[i], depth + 1);
            }
        }
        else {
            for (const key in obj) {
                if (Object.hasOwnProperty.call(obj, key)) {
                    obj[key] = revive(obj[key], depth + 1);
                }
            }
        }
    }
    return obj;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/mime.js":
/*!***************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/mime.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Mimes: () => (/* binding */ Mimes),
/* harmony export */   getExtensionForMimeType: () => (/* binding */ getExtensionForMimeType),
/* harmony export */   getMediaMime: () => (/* binding */ getMediaMime),
/* harmony export */   getMediaOrTextMime: () => (/* binding */ getMediaOrTextMime),
/* harmony export */   normalizeMimeType: () => (/* binding */ normalizeMimeType)
/* harmony export */ });
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");

const Mimes = ( Object.freeze({
    text: 'text/plain',
    binary: 'application/octet-stream',
    unknown: 'application/unknown',
    markdown: 'text/markdown',
    latex: 'text/latex',
    uriList: 'text/uri-list',
}));
const mapExtToTextMimes = {
    '.css': 'text/css',
    '.csv': 'text/csv',
    '.htm': 'text/html',
    '.html': 'text/html',
    '.ics': 'text/calendar',
    '.js': 'text/javascript',
    '.mjs': 'text/javascript',
    '.txt': 'text/plain',
    '.xml': 'text/xml'
};
const mapExtToMediaMimes = {
    '.aac': 'audio/x-aac',
    '.avi': 'video/x-msvideo',
    '.bmp': 'image/bmp',
    '.flv': 'video/x-flv',
    '.gif': 'image/gif',
    '.ico': 'image/x-icon',
    '.jpe': 'image/jpg',
    '.jpeg': 'image/jpg',
    '.jpg': 'image/jpg',
    '.m1v': 'video/mpeg',
    '.m2a': 'audio/mpeg',
    '.m2v': 'video/mpeg',
    '.m3a': 'audio/mpeg',
    '.mid': 'audio/midi',
    '.midi': 'audio/midi',
    '.mk3d': 'video/x-matroska',
    '.mks': 'video/x-matroska',
    '.mkv': 'video/x-matroska',
    '.mov': 'video/quicktime',
    '.movie': 'video/x-sgi-movie',
    '.mp2': 'audio/mpeg',
    '.mp2a': 'audio/mpeg',
    '.mp3': 'audio/mpeg',
    '.mp4': 'video/mp4',
    '.mp4a': 'audio/mp4',
    '.mp4v': 'video/mp4',
    '.mpe': 'video/mpeg',
    '.mpeg': 'video/mpeg',
    '.mpg': 'video/mpeg',
    '.mpg4': 'video/mp4',
    '.mpga': 'audio/mpeg',
    '.oga': 'audio/ogg',
    '.ogg': 'audio/ogg',
    '.opus': 'audio/opus',
    '.ogv': 'video/ogg',
    '.png': 'image/png',
    '.psd': 'image/vnd.adobe.photoshop',
    '.qt': 'video/quicktime',
    '.spx': 'audio/ogg',
    '.svg': 'image/svg+xml',
    '.tga': 'image/x-tga',
    '.tif': 'image/tiff',
    '.tiff': 'image/tiff',
    '.wav': 'audio/x-wav',
    '.webm': 'video/webm',
    '.webp': 'image/webp',
    '.wma': 'audio/x-ms-wma',
    '.wmv': 'video/x-ms-wmv',
    '.woff': 'application/font-woff',
};
function getMediaOrTextMime(path) {
    const ext = (0,_path_js__WEBPACK_IMPORTED_MODULE_0__.extname)(path);
    const textMime = mapExtToTextMimes[ext.toLowerCase()];
    if (textMime !== undefined) {
        return textMime;
    }
    else {
        return getMediaMime(path);
    }
}
function getMediaMime(path) {
    const ext = (0,_path_js__WEBPACK_IMPORTED_MODULE_0__.extname)(path);
    return mapExtToMediaMimes[ext.toLowerCase()];
}
function getExtensionForMimeType(mimeType) {
    for (const extension in mapExtToMediaMimes) {
        if (mapExtToMediaMimes[extension] === mimeType) {
            return extension;
        }
    }
    return undefined;
}
const _simplePattern = /^(.+)\/(.+?)(;.+)?$/;
function normalizeMimeType(mimeType, strict) {
    const match = _simplePattern.exec(mimeType);
    if (!match) {
        return strict
            ? undefined
            : mimeType;
    }
    return `${match[1].toLowerCase()}/${match[2].toLowerCase()}${match[3] ?? ''}`;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/naturalLanguage/korean.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/naturalLanguage/korean.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getKoreanAltChars: () => (/* binding */ getKoreanAltChars)
/* harmony export */ });
function getKoreanAltChars(code) {
    const result = disassembleKorean(code);
    if (result && result.length > 0) {
        return ( new Uint32Array(result));
    }
    return undefined;
}
let codeBufferLength = 0;
const codeBuffer = ( new Uint32Array(10));
function disassembleKorean(code) {
    codeBufferLength = 0;
    getCodesFromArray(code, modernConsonants, HangulRangeStartCode.InitialConsonant);
    if (codeBufferLength > 0) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    getCodesFromArray(code, modernVowels, HangulRangeStartCode.Vowel);
    if (codeBufferLength > 0) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    getCodesFromArray(code, modernFinalConsonants, HangulRangeStartCode.FinalConsonant);
    if (codeBufferLength > 0) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    getCodesFromArray(code, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);
    if (codeBufferLength) {
        return codeBuffer.subarray(0, codeBufferLength);
    }
    if (code >= 0xAC00 && code <= 0xD7A3) {
        const hangulIndex = code - 0xAC00;
        const vowelAndFinalConsonantProduct = hangulIndex % 588;
        const initialConsonantIndex = Math.floor(hangulIndex / 588);
        const vowelIndex = Math.floor(vowelAndFinalConsonantProduct / 28);
        const finalConsonantIndex = vowelAndFinalConsonantProduct % 28 - 1;
        if (initialConsonantIndex < modernConsonants.length) {
            getCodesFromArray(initialConsonantIndex, modernConsonants, 0);
        }
        else if (HangulRangeStartCode.InitialConsonant + initialConsonantIndex - HangulRangeStartCode.CompatibilityJamo < compatibilityJamo.length) {
            getCodesFromArray(HangulRangeStartCode.InitialConsonant + initialConsonantIndex, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);
        }
        if (vowelIndex < modernVowels.length) {
            getCodesFromArray(vowelIndex, modernVowels, 0);
        }
        else if (HangulRangeStartCode.Vowel + vowelIndex - HangulRangeStartCode.CompatibilityJamo < compatibilityJamo.length) {
            getCodesFromArray(HangulRangeStartCode.Vowel + vowelIndex - HangulRangeStartCode.CompatibilityJamo, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);
        }
        if (finalConsonantIndex >= 0) {
            if (finalConsonantIndex < modernFinalConsonants.length) {
                getCodesFromArray(finalConsonantIndex, modernFinalConsonants, 0);
            }
            else if (HangulRangeStartCode.FinalConsonant + finalConsonantIndex - HangulRangeStartCode.CompatibilityJamo < compatibilityJamo.length) {
                getCodesFromArray(HangulRangeStartCode.FinalConsonant + finalConsonantIndex - HangulRangeStartCode.CompatibilityJamo, compatibilityJamo, HangulRangeStartCode.CompatibilityJamo);
            }
        }
        if (codeBufferLength > 0) {
            return codeBuffer.subarray(0, codeBufferLength);
        }
    }
    return undefined;
}
function getCodesFromArray(code, array, arrayStartIndex) {
    if (code >= arrayStartIndex && code < arrayStartIndex + array.length) {
        addCodesToBuffer(array[code - arrayStartIndex]);
    }
}
function addCodesToBuffer(codes) {
    if (codes === AsciiCode.NUL) {
        return;
    }
    codeBuffer[codeBufferLength++] = codes & 0xFF;
    if (codes >> 8) {
        codeBuffer[codeBufferLength++] = (codes >> 8) & 0xFF;
    }
    if (codes >> 16) {
        codeBuffer[codeBufferLength++] = (codes >> 16) & 0xFF;
    }
}
var HangulRangeStartCode;
( (function(HangulRangeStartCode) {
    HangulRangeStartCode[HangulRangeStartCode["InitialConsonant"] = 4352] = "InitialConsonant";
    HangulRangeStartCode[HangulRangeStartCode["Vowel"] = 4449] = "Vowel";
    HangulRangeStartCode[HangulRangeStartCode["FinalConsonant"] = 4520] = "FinalConsonant";
    HangulRangeStartCode[HangulRangeStartCode["CompatibilityJamo"] = 12593] = "CompatibilityJamo";
})(HangulRangeStartCode || (HangulRangeStartCode = {})));
var AsciiCode;
( (function(AsciiCode) {
    AsciiCode[AsciiCode["NUL"] = 0] = "NUL";
    AsciiCode[AsciiCode["A"] = 65] = "A";
    AsciiCode[AsciiCode["B"] = 66] = "B";
    AsciiCode[AsciiCode["C"] = 67] = "C";
    AsciiCode[AsciiCode["D"] = 68] = "D";
    AsciiCode[AsciiCode["E"] = 69] = "E";
    AsciiCode[AsciiCode["F"] = 70] = "F";
    AsciiCode[AsciiCode["G"] = 71] = "G";
    AsciiCode[AsciiCode["H"] = 72] = "H";
    AsciiCode[AsciiCode["I"] = 73] = "I";
    AsciiCode[AsciiCode["J"] = 74] = "J";
    AsciiCode[AsciiCode["K"] = 75] = "K";
    AsciiCode[AsciiCode["L"] = 76] = "L";
    AsciiCode[AsciiCode["M"] = 77] = "M";
    AsciiCode[AsciiCode["N"] = 78] = "N";
    AsciiCode[AsciiCode["O"] = 79] = "O";
    AsciiCode[AsciiCode["P"] = 80] = "P";
    AsciiCode[AsciiCode["Q"] = 81] = "Q";
    AsciiCode[AsciiCode["R"] = 82] = "R";
    AsciiCode[AsciiCode["S"] = 83] = "S";
    AsciiCode[AsciiCode["T"] = 84] = "T";
    AsciiCode[AsciiCode["U"] = 85] = "U";
    AsciiCode[AsciiCode["V"] = 86] = "V";
    AsciiCode[AsciiCode["W"] = 87] = "W";
    AsciiCode[AsciiCode["X"] = 88] = "X";
    AsciiCode[AsciiCode["Y"] = 89] = "Y";
    AsciiCode[AsciiCode["Z"] = 90] = "Z";
    AsciiCode[AsciiCode["a"] = 97] = "a";
    AsciiCode[AsciiCode["b"] = 98] = "b";
    AsciiCode[AsciiCode["c"] = 99] = "c";
    AsciiCode[AsciiCode["d"] = 100] = "d";
    AsciiCode[AsciiCode["e"] = 101] = "e";
    AsciiCode[AsciiCode["f"] = 102] = "f";
    AsciiCode[AsciiCode["g"] = 103] = "g";
    AsciiCode[AsciiCode["h"] = 104] = "h";
    AsciiCode[AsciiCode["i"] = 105] = "i";
    AsciiCode[AsciiCode["j"] = 106] = "j";
    AsciiCode[AsciiCode["k"] = 107] = "k";
    AsciiCode[AsciiCode["l"] = 108] = "l";
    AsciiCode[AsciiCode["m"] = 109] = "m";
    AsciiCode[AsciiCode["n"] = 110] = "n";
    AsciiCode[AsciiCode["o"] = 111] = "o";
    AsciiCode[AsciiCode["p"] = 112] = "p";
    AsciiCode[AsciiCode["q"] = 113] = "q";
    AsciiCode[AsciiCode["r"] = 114] = "r";
    AsciiCode[AsciiCode["s"] = 115] = "s";
    AsciiCode[AsciiCode["t"] = 116] = "t";
    AsciiCode[AsciiCode["u"] = 117] = "u";
    AsciiCode[AsciiCode["v"] = 118] = "v";
    AsciiCode[AsciiCode["w"] = 119] = "w";
    AsciiCode[AsciiCode["x"] = 120] = "x";
    AsciiCode[AsciiCode["y"] = 121] = "y";
    AsciiCode[AsciiCode["z"] = 122] = "z";
})(AsciiCode || (AsciiCode = {})));
var AsciiCodeCombo;
( (function(AsciiCodeCombo) {
    AsciiCodeCombo[AsciiCodeCombo["fa"] = 24934] = "fa";
    AsciiCodeCombo[AsciiCodeCombo["fg"] = 26470] = "fg";
    AsciiCodeCombo[AsciiCodeCombo["fq"] = 29030] = "fq";
    AsciiCodeCombo[AsciiCodeCombo["fr"] = 29286] = "fr";
    AsciiCodeCombo[AsciiCodeCombo["ft"] = 29798] = "ft";
    AsciiCodeCombo[AsciiCodeCombo["fv"] = 30310] = "fv";
    AsciiCodeCombo[AsciiCodeCombo["fx"] = 30822] = "fx";
    AsciiCodeCombo[AsciiCodeCombo["hk"] = 27496] = "hk";
    AsciiCodeCombo[AsciiCodeCombo["hl"] = 27752] = "hl";
    AsciiCodeCombo[AsciiCodeCombo["ho"] = 28520] = "ho";
    AsciiCodeCombo[AsciiCodeCombo["ml"] = 27757] = "ml";
    AsciiCodeCombo[AsciiCodeCombo["nj"] = 27246] = "nj";
    AsciiCodeCombo[AsciiCodeCombo["nl"] = 27758] = "nl";
    AsciiCodeCombo[AsciiCodeCombo["np"] = 28782] = "np";
    AsciiCodeCombo[AsciiCodeCombo["qt"] = 29809] = "qt";
    AsciiCodeCombo[AsciiCodeCombo["rt"] = 29810] = "rt";
    AsciiCodeCombo[AsciiCodeCombo["sg"] = 26483] = "sg";
    AsciiCodeCombo[AsciiCodeCombo["sw"] = 30579] = "sw";
})(AsciiCodeCombo || (AsciiCodeCombo = {})));
const modernConsonants = ( new Uint8Array([
    AsciiCode.r,
    AsciiCode.R,
    AsciiCode.s,
    AsciiCode.e,
    AsciiCode.E,
    AsciiCode.f,
    AsciiCode.a,
    AsciiCode.q,
    AsciiCode.Q,
    AsciiCode.t,
    AsciiCode.T,
    AsciiCode.d,
    AsciiCode.w,
    AsciiCode.W,
    AsciiCode.c,
    AsciiCode.z,
    AsciiCode.x,
    AsciiCode.v,
    AsciiCode.g,
]));
const modernVowels = ( new Uint16Array([
    AsciiCode.k,
    AsciiCode.o,
    AsciiCode.i,
    AsciiCode.O,
    AsciiCode.j,
    AsciiCode.p,
    AsciiCode.u,
    AsciiCode.P,
    AsciiCode.h,
    AsciiCodeCombo.hk,
    AsciiCodeCombo.ho,
    AsciiCodeCombo.hl,
    AsciiCode.y,
    AsciiCode.n,
    AsciiCodeCombo.nj,
    AsciiCodeCombo.np,
    AsciiCodeCombo.nl,
    AsciiCode.b,
    AsciiCode.m,
    AsciiCodeCombo.ml,
    AsciiCode.l,
]));
const modernFinalConsonants = ( new Uint16Array([
    AsciiCode.r,
    AsciiCode.R,
    AsciiCodeCombo.rt,
    AsciiCode.s,
    AsciiCodeCombo.sw,
    AsciiCodeCombo.sg,
    AsciiCode.e,
    AsciiCode.f,
    AsciiCodeCombo.fr,
    AsciiCodeCombo.fa,
    AsciiCodeCombo.fq,
    AsciiCodeCombo.ft,
    AsciiCodeCombo.fx,
    AsciiCodeCombo.fv,
    AsciiCodeCombo.fg,
    AsciiCode.a,
    AsciiCode.q,
    AsciiCodeCombo.qt,
    AsciiCode.t,
    AsciiCode.T,
    AsciiCode.d,
    AsciiCode.w,
    AsciiCode.c,
    AsciiCode.z,
    AsciiCode.x,
    AsciiCode.v,
    AsciiCode.g,
]));
const compatibilityJamo = ( new Uint16Array([
    AsciiCode.r,
    AsciiCode.R,
    AsciiCodeCombo.rt,
    AsciiCode.s,
    AsciiCodeCombo.sw,
    AsciiCodeCombo.sg,
    AsciiCode.e,
    AsciiCode.E,
    AsciiCode.f,
    AsciiCodeCombo.fr,
    AsciiCodeCombo.fa,
    AsciiCodeCombo.fq,
    AsciiCodeCombo.ft,
    AsciiCodeCombo.fx,
    AsciiCodeCombo.fv,
    AsciiCodeCombo.fg,
    AsciiCode.a,
    AsciiCode.q,
    AsciiCode.Q,
    AsciiCodeCombo.qt,
    AsciiCode.t,
    AsciiCode.T,
    AsciiCode.d,
    AsciiCode.w,
    AsciiCode.W,
    AsciiCode.c,
    AsciiCode.z,
    AsciiCode.x,
    AsciiCode.v,
    AsciiCode.g,
    AsciiCode.k,
    AsciiCode.o,
    AsciiCode.i,
    AsciiCode.O,
    AsciiCode.j,
    AsciiCode.p,
    AsciiCode.u,
    AsciiCode.P,
    AsciiCode.h,
    AsciiCodeCombo.hk,
    AsciiCodeCombo.ho,
    AsciiCodeCombo.hl,
    AsciiCode.y,
    AsciiCode.n,
    AsciiCodeCombo.nj,
    AsciiCodeCombo.np,
    AsciiCodeCombo.nl,
    AsciiCode.b,
    AsciiCode.m,
    AsciiCodeCombo.ml,
    AsciiCode.l,
]));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/network.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/network.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   COI: () => (/* binding */ COI),
/* harmony export */   FileAccess: () => (/* binding */ FileAccess),
/* harmony export */   RemoteAuthorities: () => (/* binding */ RemoteAuthorities),
/* harmony export */   Schemas: () => (/* binding */ Schemas),
/* harmony export */   VSCODE_AUTHORITY: () => (/* binding */ VSCODE_AUTHORITY),
/* harmony export */   connectionTokenQueryName: () => (/* binding */ connectionTokenQueryName),
/* harmony export */   getServerRootPath: () => (/* binding */ getServerRootPath),
/* harmony export */   matchesScheme: () => (/* binding */ matchesScheme),
/* harmony export */   matchesSomeScheme: () => (/* binding */ matchesSomeScheme),
/* harmony export */   nodeModulesAsarPath: () => (/* binding */ nodeModulesAsarPath),
/* harmony export */   nodeModulesAsarUnpackedPath: () => (/* binding */ nodeModulesAsarUnpackedPath),
/* harmony export */   nodeModulesPath: () => (/* binding */ nodeModulesPath)
/* harmony export */ });
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");







var Schemas;
( (function(Schemas) {
    Schemas.inMemory = 'inmemory';
    Schemas.vscode = 'vscode';
    Schemas.internal = 'private';
    Schemas.walkThrough = 'walkThrough';
    Schemas.walkThroughSnippet = 'walkThroughSnippet';
    Schemas.http = 'http';
    Schemas.https = 'https';
    Schemas.file = 'file';
    Schemas.mailto = 'mailto';
    Schemas.untitled = 'untitled';
    Schemas.data = 'data';
    Schemas.command = 'command';
    Schemas.vscodeRemote = 'vscode-remote';
    Schemas.vscodeRemoteResource = 'vscode-remote-resource';
    Schemas.vscodeManagedRemoteResource = 'vscode-managed-remote-resource';
    Schemas.vscodeUserData = 'vscode-userdata';
    Schemas.vscodeCustomEditor = 'vscode-custom-editor';
    Schemas.vscodeNotebookCell = 'vscode-notebook-cell';
    Schemas.vscodeNotebookCellMetadata = 'vscode-notebook-cell-metadata';
    Schemas.vscodeNotebookCellOutput = 'vscode-notebook-cell-output';
    Schemas.vscodeInteractiveInput = 'vscode-interactive-input';
    Schemas.vscodeSettings = 'vscode-settings';
    Schemas.vscodeWorkspaceTrust = 'vscode-workspace-trust';
    Schemas.vscodeTerminal = 'vscode-terminal';
    Schemas.vscodeChatCodeBlock = 'vscode-chat-code-block';
    Schemas.vscodeCopilotBackingChatCodeBlock = 'vscode-copilot-chat-code-block';
    Schemas.vscodeChatCodeCompareBlock = 'vscode-chat-code-compare-block';
    Schemas.vscodeChatSesssion = 'vscode-chat-editor';
    Schemas.webviewPanel = 'webview-panel';
    Schemas.vscodeWebview = 'vscode-webview';
    Schemas.extension = 'extension';
    Schemas.vscodeFileResource = 'vscode-file';
    Schemas.tmp = 'tmp';
    Schemas.vsls = 'vsls';
    Schemas.vscodeSourceControl = 'vscode-scm';
    Schemas.commentsInput = 'comment';
    Schemas.codeSetting = 'code-setting';
})(Schemas || (Schemas = {})));
function matchesScheme(target, scheme) {
    if (_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(target)) {
        return (0,_strings_js__WEBPACK_IMPORTED_MODULE_4__.equalsIgnoreCase)(target.scheme, scheme);
    }
    else {
        return (0,_strings_js__WEBPACK_IMPORTED_MODULE_4__.startsWithIgnoreCase)(target, scheme + ':');
    }
}
function matchesSomeScheme(target, ...schemes) {
    return ( schemes.some(scheme => matchesScheme(target, scheme)));
}
const connectionTokenQueryName = 'tkn';
class RemoteAuthoritiesImpl {
    constructor() {
        this._hosts = Object.create(null);
        this._ports = Object.create(null);
        this._connectionTokens = Object.create(null);
        this._preferredWebSchema = 'http';
        this._delegate = null;
        this._serverRootPath = '/';
    }
    setPreferredWebSchema(schema) {
        this._preferredWebSchema = schema;
    }
    setDelegate(delegate) {
        this._delegate = delegate;
    }
    setServerRootPath(product, serverBasePath) {
        this._serverRootPath = getServerRootPath(product, serverBasePath);
    }
    getServerRootPath() {
        return this._serverRootPath;
    }
    get _remoteResourcesPath() {
        return _path_js__WEBPACK_IMPORTED_MODULE_6__.posix.join(this._serverRootPath, Schemas.vscodeRemoteResource);
    }
    set(authority, host, port) {
        this._hosts[authority] = host;
        this._ports[authority] = port;
    }
    setConnectionToken(authority, connectionToken) {
        this._connectionTokens[authority] = connectionToken;
    }
    getPreferredWebSchema() {
        return this._preferredWebSchema;
    }
    rewrite(uri) {
        if (this._delegate) {
            try {
                return this._delegate(uri);
            }
            catch (err) {
                (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(err);
                return uri;
            }
        }
        const authority = uri.authority;
        let host = this._hosts[authority];
        if (host && host.indexOf(':') !== -1 && host.indexOf('[') === -1) {
            host = `[${host}]`;
        }
        const port = this._ports[authority];
        const connectionToken = this._connectionTokens[authority];
        let query = `path=${encodeURIComponent(uri.path)}`;
        if (typeof connectionToken === 'string') {
            query += `&${connectionTokenQueryName}=${encodeURIComponent(connectionToken)}`;
        }
        return ( _uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.from({
            scheme: _platform_js__WEBPACK_IMPORTED_MODULE_3__.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,
            authority: `${host}:${port}`,
            path: this._remoteResourcesPath,
            query
        }));
    }
}
const RemoteAuthorities = ( new RemoteAuthoritiesImpl());
function getServerRootPath(product, basePath) {
    return _path_js__WEBPACK_IMPORTED_MODULE_6__.posix.join(basePath ?? '/', `${product.quality ?? 'oss'}-${product.commit ?? 'dev'}`);
}
const nodeModulesPath = 'vs/../../node_modules';
const nodeModulesAsarPath = 'vs/../../node_modules.asar';
const nodeModulesAsarUnpackedPath = 'vs/../../node_modules.asar.unpacked';
const VSCODE_AUTHORITY = 'vscode-app';
class FileAccessImpl {
    constructor() {
        this.staticBrowserUris = ( new _map_js__WEBPACK_IMPORTED_MODULE_2__.ResourceMap());
        this.appResourcePathUrls = ( new Map());
        this.moduleContentProvider = ( new Map());
    }
    static { this.FALLBACK_AUTHORITY = VSCODE_AUTHORITY; }
    registerModuleContentProvider(moduleId, contentLoader) {
        this.moduleContentProvider.set(moduleId, contentLoader);
    }
    toModuleContent(moduleId) {
        return this.moduleContentProvider.get(moduleId)();
    }
    registerAppResourcePathUrl(moduleId, url) {
        this.appResourcePathUrls.set(moduleId, url);
    }
    toUrl(moduleId) {
        let url = this.appResourcePathUrls.get(moduleId);
        if (typeof url === 'function') {
            url = url();
        }
        return ( ( new URL(url ?? moduleId, globalThis.location?.href ?? "file:///Users/oroncal/workspace/infrastructure/intino-lowcode-platform/monaco/node_modules/vscode/vscode/src/vs/base/common/network.js")).toString());
    }
    asBrowserUri(resourcePath) {
        const uri = this.toUri(resourcePath, { toUrl: this.toUrl.bind(this) });
        return this.uriToBrowserUri(uri);
    }
    uriToBrowserUri(uri) {
        if (uri.scheme === Schemas.vscodeRemote) {
            return RemoteAuthorities.rewrite(uri);
        }
        if (
        uri.scheme === Schemas.file &&
            (
            (
            _platform_js__WEBPACK_IMPORTED_MODULE_3__.isNative || (_platform_js__WEBPACK_IMPORTED_MODULE_3__.webWorkerOrigin === `${Schemas.vscodeFileResource}://${FileAccessImpl.FALLBACK_AUTHORITY}`)))) {
            return uri.with({
                scheme: Schemas.vscodeFileResource,
                authority: uri.authority || FileAccessImpl.FALLBACK_AUTHORITY,
                query: null,
                fragment: null
            });
        }
        return this.staticBrowserUris.get(uri) ?? uri;
    }
    asFileUri(resourcePath) {
        const uri = this.toUri(resourcePath, { toUrl: this.toUrl.bind(this) });
        return this.uriToFileUri(uri);
    }
    uriToFileUri(uri) {
        if (uri.scheme === Schemas.vscodeFileResource) {
            return uri.with({
                scheme: Schemas.file,
                authority: uri.authority !== FileAccessImpl.FALLBACK_AUTHORITY ? uri.authority : null,
                query: null,
                fragment: null
            });
        }
        return uri;
    }
    toUri(uriOrModule, moduleIdToUrl) {
        if (_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(uriOrModule)) {
            return uriOrModule;
        }
        return ( _uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.parse(moduleIdToUrl.toUrl(uriOrModule)));
    }
    registerStaticBrowserUri(uri, browserUri) {
        this.staticBrowserUris.set(uri, browserUri);
        return (0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            if (this.staticBrowserUris.get(uri) === browserUri) {
                this.staticBrowserUris.delete(uri);
            }
        });
    }
    getRegisteredBrowserUris() {
        return ( this.staticBrowserUris.keys());
    }
}
const FileAccess = ( new FileAccessImpl());
var COI;
( (function(COI) {
    const coiHeaders = ( new Map([
        ['1', { 'Cross-Origin-Opener-Policy': 'same-origin' }],
        ['2', { 'Cross-Origin-Embedder-Policy': 'require-corp' }],
        ['3', { 'Cross-Origin-Opener-Policy': 'same-origin', 'Cross-Origin-Embedder-Policy': 'require-corp' }],
    ]));
    COI.CoopAndCoep = ( Object.freeze(coiHeaders.get('3')));
    const coiSearchParamName = 'vscode-coi';
    function getHeadersFromQuery(url) {
        let params;
        if (typeof url === 'string') {
            params = ( new URL(url)).searchParams;
        }
        else if (url instanceof URL) {
            params = url.searchParams;
        }
        else if (_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(url)) {
            params = ( new URL(( url.toString(true)))).searchParams;
        }
        const value = params?.get(coiSearchParamName);
        if (!value) {
            return undefined;
        }
        return coiHeaders.get(value);
    }
    COI.getHeadersFromQuery = getHeadersFromQuery;
    function addSearchParam(urlOrSearch, coop, coep) {
        if (!globalThis.crossOriginIsolated) {
            return;
        }
        const value = coop && coep ? '3' : coep ? '2' : '1';
        if (urlOrSearch instanceof URLSearchParams) {
            urlOrSearch.set(coiSearchParamName, value);
        }
        else {
            urlOrSearch[coiSearchParamName] = value;
        }
    }
    COI.addSearchParam = addSearchParam;
})(COI || (COI = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/numbers.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/numbers.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Counter: () => (/* binding */ Counter),
/* harmony export */   MovingAverage: () => (/* binding */ MovingAverage),
/* harmony export */   SlidingWindowAverage: () => (/* binding */ SlidingWindowAverage),
/* harmony export */   clamp: () => (/* binding */ clamp),
/* harmony export */   isPointWithinTriangle: () => (/* binding */ isPointWithinTriangle),
/* harmony export */   rot: () => (/* binding */ rot)
/* harmony export */ });
function clamp(value, min, max) {
    return Math.min(Math.max(value, min), max);
}
function rot(index, modulo) {
    return (modulo + (index % modulo)) % modulo;
}
class Counter {
    constructor() {
        this._next = 0;
    }
    getNext() {
        return this._next++;
    }
}
class MovingAverage {
    constructor() {
        this._n = 1;
        this._val = 0;
    }
    update(value) {
        this._val = this._val + (value - this._val) / this._n;
        this._n += 1;
        return this._val;
    }
    get value() {
        return this._val;
    }
}
class SlidingWindowAverage {
    constructor(size) {
        this._n = 0;
        this._val = 0;
        this._values = [];
        this._index = 0;
        this._sum = 0;
        this._values = ( new Array(size));
        this._values.fill(0, 0, size);
    }
    update(value) {
        const oldValue = this._values[this._index];
        this._values[this._index] = value;
        this._index = (this._index + 1) % this._values.length;
        this._sum -= oldValue;
        this._sum += value;
        if (this._n < this._values.length) {
            this._n += 1;
        }
        this._val = this._sum / this._n;
        return this._val;
    }
    get value() {
        return this._val;
    }
}
function isPointWithinTriangle(x, y, ax, ay, bx, by, cx, cy) {
    const v0x = cx - ax;
    const v0y = cy - ay;
    const v1x = bx - ax;
    const v1y = by - ay;
    const v2x = x - ax;
    const v2y = y - ay;
    const dot00 = v0x * v0x + v0y * v0y;
    const dot01 = v0x * v1x + v0y * v1y;
    const dot02 = v0x * v2x + v0y * v2y;
    const dot11 = v1x * v1x + v1y * v1y;
    const dot12 = v1x * v2x + v1y * v2y;
    const invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return u >= 0 && v >= 0 && u + v < 1;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/base.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/observableInternal/base.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseObservable: () => (/* binding */ BaseObservable),
/* harmony export */   ConvenientObservable: () => (/* binding */ ConvenientObservable),
/* harmony export */   DisposableObservableValue: () => (/* binding */ DisposableObservableValue),
/* harmony export */   ObservableValue: () => (/* binding */ ObservableValue),
/* harmony export */   TransactionImpl: () => (/* binding */ TransactionImpl),
/* harmony export */   _setDerivedOpts: () => (/* binding */ _setDerivedOpts),
/* harmony export */   _setKeepObserved: () => (/* binding */ _setKeepObserved),
/* harmony export */   _setRecomputeInitiallyAndOnChange: () => (/* binding */ _setRecomputeInitiallyAndOnChange),
/* harmony export */   asyncTransaction: () => (/* binding */ asyncTransaction),
/* harmony export */   disposableObservableValue: () => (/* binding */ disposableObservableValue),
/* harmony export */   globalTransaction: () => (/* binding */ globalTransaction),
/* harmony export */   observableValue: () => (/* binding */ observableValue),
/* harmony export */   subtransaction: () => (/* binding */ subtransaction),
/* harmony export */   transaction: () => (/* binding */ transaction)
/* harmony export */ });
/* harmony import */ var _equals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../equals.js */ "./node_modules/vscode/vscode/src/vs/base/common/equals.js");
/* harmony import */ var _debugName_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debugName.js */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/debugName.js");
/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./logging.js */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/logging.js");



let _recomputeInitiallyAndOnChange;
function _setRecomputeInitiallyAndOnChange(recomputeInitiallyAndOnChange) {
    _recomputeInitiallyAndOnChange = recomputeInitiallyAndOnChange;
}
let _keepObserved;
function _setKeepObserved(keepObserved) {
    _keepObserved = keepObserved;
}
let _derived;
function _setDerivedOpts(derived) {
    _derived = derived;
}
class ConvenientObservable {
    get TChange() { return null; }
    reportChanges() {
        this.get();
    }
    read(reader) {
        if (reader) {
            return reader.readObservable(this);
        }
        else {
            return this.get();
        }
    }
    map(fnOrOwner, fnOrUndefined) {
        const owner = fnOrUndefined === undefined ? undefined : fnOrOwner;
        const fn = fnOrUndefined === undefined ? fnOrOwner : fnOrUndefined;
        return _derived({
            owner,
            debugName: () => {
                const name = (0,_debugName_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(fn);
                if (name !== undefined) {
                    return name;
                }
                const regexp = /^\s*\(?\s*([a-zA-Z_$][a-zA-Z_$0-9]*)\s*\)?\s*=>\s*\1(?:\??)\.([a-zA-Z_$][a-zA-Z_$0-9]*)\s*$/;
                const match = regexp.exec(( fn.toString()));
                if (match) {
                    return `${this.debugName}.${match[2]}`;
                }
                if (!owner) {
                    return `${this.debugName} (mapped)`;
                }
                return undefined;
            },
            debugReferenceFn: fn,
        }, (reader) => fn(this.read(reader), reader));
    }
    recomputeInitiallyAndOnChange(store, handleValue) {
        store.add(_recomputeInitiallyAndOnChange(this, handleValue));
        return this;
    }
    keepObserved(store) {
        store.add(_keepObserved(this));
        return this;
    }
    get debugValue() {
        return this.get();
    }
}
class BaseObservable extends ConvenientObservable {
    constructor() {
        super(...arguments);
        this.observers = ( new Set());
    }
    addObserver(observer) {
        const len = this.observers.size;
        this.observers.add(observer);
        if (len === 0) {
            this.onFirstObserverAdded();
        }
    }
    removeObserver(observer) {
        const deleted = this.observers.delete(observer);
        if (deleted && this.observers.size === 0) {
            this.onLastObserverRemoved();
        }
    }
    onFirstObserverAdded() { }
    onLastObserverRemoved() { }
}
function transaction(fn, getDebugName) {
    const tx = ( new TransactionImpl(fn, getDebugName));
    try {
        fn(tx);
    }
    finally {
        tx.finish();
    }
}
let _globalTransaction = undefined;
function globalTransaction(fn) {
    if (_globalTransaction) {
        fn(_globalTransaction);
    }
    else {
        const tx = ( new TransactionImpl(fn, undefined));
        _globalTransaction = tx;
        try {
            fn(tx);
        }
        finally {
            tx.finish();
            _globalTransaction = undefined;
        }
    }
}
async function asyncTransaction(fn, getDebugName) {
    const tx = ( new TransactionImpl(fn, getDebugName));
    try {
        await fn(tx);
    }
    finally {
        tx.finish();
    }
}
function subtransaction(tx, fn, getDebugName) {
    if (!tx) {
        transaction(fn, getDebugName);
    }
    else {
        fn(tx);
    }
}
class TransactionImpl {
    constructor(_fn, _getDebugName) {
        this._fn = _fn;
        this._getDebugName = _getDebugName;
        this.updatingObservers = [];
    }
    getDebugName() {
        if (this._getDebugName) {
            return this._getDebugName();
        }
        return (0,_debugName_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(this._fn);
    }
    updateObserver(observer, observable) {
        this.updatingObservers.push({ observer, observable });
        observer.beginUpdate(observable);
    }
    finish() {
        const updatingObservers = this.updatingObservers;
        for (let i = 0; i < updatingObservers.length; i++) {
            const { observer, observable } = updatingObservers[i];
            observer.endUpdate(observable);
        }
        this.updatingObservers = null;
    }
}
function observableValue(nameOrOwner, initialValue) {
    let debugNameData;
    if (typeof nameOrOwner === 'string') {
        debugNameData = ( new _debugName_js__WEBPACK_IMPORTED_MODULE_1__.DebugNameData(undefined, nameOrOwner, undefined));
    }
    else {
        debugNameData = ( new _debugName_js__WEBPACK_IMPORTED_MODULE_1__.DebugNameData(nameOrOwner, undefined, undefined));
    }
    return ( new ObservableValue(debugNameData, initialValue, _equals_js__WEBPACK_IMPORTED_MODULE_0__.strictEquals));
}
class ObservableValue extends BaseObservable {
    get debugName() {
        return this._debugNameData.getDebugName(this) ?? 'ObservableValue';
    }
    constructor(_debugNameData, initialValue, _equalityComparator) {
        super();
        this._debugNameData = _debugNameData;
        this._equalityComparator = _equalityComparator;
        this._value = initialValue;
    }
    get() {
        return this._value;
    }
    set(value, tx, change) {
        if (change === undefined && this._equalityComparator(this._value, value)) {
            return;
        }
        let _tx;
        if (!tx) {
            tx = _tx = ( new TransactionImpl(() => { }, () => `Setting ${this.debugName}`));
        }
        try {
            const oldValue = this._value;
            this._setValue(value);
            (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.getLogger)()?.handleObservableChanged(this, { oldValue, newValue: value, change, didChange: true, hadValue: true });
            for (const observer of this.observers) {
                tx.updateObserver(observer, this);
                observer.handleChange(this, change);
            }
        }
        finally {
            if (_tx) {
                _tx.finish();
            }
        }
    }
    toString() {
        return `${this.debugName}: ${this._value}`;
    }
    _setValue(newValue) {
        this._value = newValue;
    }
}
function disposableObservableValue(nameOrOwner, initialValue) {
    let debugNameData;
    if (typeof nameOrOwner === 'string') {
        debugNameData = ( new _debugName_js__WEBPACK_IMPORTED_MODULE_1__.DebugNameData(undefined, nameOrOwner, undefined));
    }
    else {
        debugNameData = ( new _debugName_js__WEBPACK_IMPORTED_MODULE_1__.DebugNameData(nameOrOwner, undefined, undefined));
    }
    return ( new DisposableObservableValue(debugNameData, initialValue, _equals_js__WEBPACK_IMPORTED_MODULE_0__.strictEquals));
}
class DisposableObservableValue extends ObservableValue {
    _setValue(newValue) {
        if (this._value === newValue) {
            return;
        }
        if (this._value) {
            this._value.dispose();
        }
        this._value = newValue;
    }
    dispose() {
        this._value?.dispose();
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/debugName.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/observableInternal/debugName.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DebugNameData: () => (/* binding */ DebugNameData),
/* harmony export */   getDebugName: () => (/* binding */ getDebugName),
/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName)
/* harmony export */ });
class DebugNameData {
    constructor(owner, debugNameSource, referenceFn) {
        this.owner = owner;
        this.debugNameSource = debugNameSource;
        this.referenceFn = referenceFn;
    }
    getDebugName(target) {
        return getDebugName(target, this);
    }
}
const countPerName = ( new Map());
const cachedDebugName = ( new WeakMap());
function getDebugName(target, data) {
    const cached = cachedDebugName.get(target);
    if (cached) {
        return cached;
    }
    const dbgName = computeDebugName(target, data);
    if (dbgName) {
        let count = countPerName.get(dbgName) ?? 0;
        count++;
        countPerName.set(dbgName, count);
        const result = count === 1 ? dbgName : `${dbgName}#${count}`;
        cachedDebugName.set(target, result);
        return result;
    }
    return undefined;
}
function computeDebugName(self, data) {
    const cached = cachedDebugName.get(self);
    if (cached) {
        return cached;
    }
    const ownerStr = data.owner ? formatOwner(data.owner) + `.` : '';
    let result;
    const debugNameSource = data.debugNameSource;
    if (debugNameSource !== undefined) {
        if (typeof debugNameSource === 'function') {
            result = debugNameSource();
            if (result !== undefined) {
                return ownerStr + result;
            }
        }
        else {
            return ownerStr + debugNameSource;
        }
    }
    const referenceFn = data.referenceFn;
    if (referenceFn !== undefined) {
        result = getFunctionName(referenceFn);
        if (result !== undefined) {
            return ownerStr + result;
        }
    }
    if (data.owner !== undefined) {
        const key = findKey(data.owner, self);
        if (key !== undefined) {
            return ownerStr + key;
        }
    }
    return undefined;
}
function findKey(obj, value) {
    for (const key in obj) {
        if (obj[key] === value) {
            return key;
        }
    }
    return undefined;
}
const countPerClassName = ( new Map());
const ownerId = ( new WeakMap());
function formatOwner(owner) {
    const id = ownerId.get(owner);
    if (id) {
        return id;
    }
    const className = getClassName(owner);
    let count = countPerClassName.get(className) ?? 0;
    count++;
    countPerClassName.set(className, count);
    const result = count === 1 ? className : `${className}#${count}`;
    ownerId.set(owner, result);
    return result;
}
function getClassName(obj) {
    const ctor = obj.constructor;
    if (ctor) {
        return ctor.name;
    }
    return 'Object';
}
function getFunctionName(fn) {
    const fnSrc = ( fn.toString());
    const regexp = /\/\*\*\s*@description\s*([^*]*)\*\//;
    const match = regexp.exec(fnSrc);
    const result = match ? match[1] : undefined;
    return result?.trim();
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/logging.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/observableInternal/logging.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLogger: () => (/* binding */ getLogger)
/* harmony export */ });
let globalObservableLogger;
function getLogger() {
    return globalObservableLogger;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/performance.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/performance.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getMarks: () => (/* binding */ getMarks),
/* harmony export */   mark: () => (/* binding */ mark)
/* harmony export */ });
const mark = (name) => {
	performance.mark(name);
};
const getMarks = () => {
	let timeOrigin = performance.timeOrigin;
	if (typeof timeOrigin !== 'number') {
		timeOrigin = performance.timing.navigationStart || performance.timing.redirectStart || performance.timing.fetchStart;
	}
	const result = [{ name: 'code/timeOrigin', startTime: Math.round(timeOrigin) }];
	for (const entry of performance.getEntriesByType('mark')) {
		result.push({
			name: entry.name,
			startTime: Math.round(timeOrigin + entry.startTime)
		});
	}
	return result;
};



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/prefixTree.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/prefixTree.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WellDefinedPrefixTree: () => (/* binding */ WellDefinedPrefixTree)
/* harmony export */ });
/* harmony import */ var _iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");

const unset = Symbol('unset');
class WellDefinedPrefixTree {
    constructor() {
        this.root = ( new Node());
        this._size = 0;
    }
    get size() {
        return this._size;
    }
    get nodes() {
        return this.root.children?.values() || _iterator_js__WEBPACK_IMPORTED_MODULE_0__.Iterable.empty();
    }
    insert(key, value, onNode) {
        this.opNode(key, n => n._value = value, onNode);
    }
    mutate(key, mutate) {
        this.opNode(key, n => n._value = mutate(n._value === unset ? undefined : n._value));
    }
    mutatePath(key, mutate) {
        this.opNode(key, () => { }, n => mutate(n));
    }
    delete(key) {
        const path = this.getPathToKey(key);
        if (!path) {
            return;
        }
        let i = path.length - 1;
        const value = path[i].node._value;
        if (value === unset) {
            return;
        }
        this._size--;
        path[i].node._value = unset;
        for (; i > 0; i--) {
            const { node, part } = path[i];
            if (node.children?.size || node._value !== unset) {
                break;
            }
            path[i - 1].node.children.delete(part);
        }
        return value;
    }
    *deleteRecursive(key) {
        const path = this.getPathToKey(key);
        if (!path) {
            return;
        }
        const subtree = path[path.length - 1].node;
        for (let i = path.length - 1; i > 0; i--) {
            const parent = path[i - 1];
            parent.node.children.delete(path[i].part);
            if (parent.node.children.size > 0 || parent.node._value !== unset) {
                break;
            }
        }
        for (const node of bfsIterate(subtree)) {
            if (node._value !== unset) {
                this._size--;
                yield node._value;
            }
        }
    }
    find(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return undefined;
            }
            node = next;
        }
        return node._value === unset ? undefined : node._value;
    }
    hasKeyOrParent(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            if (next._value !== unset) {
                return true;
            }
            node = next;
        }
        return false;
    }
    hasKeyOrChildren(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            node = next;
        }
        return true;
    }
    hasKey(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            node = next;
        }
        return node._value !== unset;
    }
    getPathToKey(key) {
        const path = [{ part: '', node: this.root }];
        let i = 0;
        for (const part of key) {
            const node = path[i].node.children?.get(part);
            if (!node) {
                return;
            }
            path.push({ part, node });
            i++;
        }
        return path;
    }
    opNode(key, fn, onDescend) {
        let node = this.root;
        for (const part of key) {
            if (!node.children) {
                const next = ( new Node());
                node.children = ( new Map([[part, next]]));
                node = next;
            }
            else if (!( node.children.has(part))) {
                const next = ( new Node());
                node.children.set(part, next);
                node = next;
            }
            else {
                node = node.children.get(part);
            }
            onDescend?.(node);
        }
        const sizeBefore = node._value === unset ? 0 : 1;
        fn(node);
        const sizeAfter = node._value === unset ? 0 : 1;
        this._size += sizeAfter - sizeBefore;
    }
    *values() {
        for (const { _value } of bfsIterate(this.root)) {
            if (_value !== unset) {
                yield _value;
            }
        }
    }
}
function* bfsIterate(root) {
    const stack = [root];
    while (stack.length > 0) {
        const node = stack.pop();
        yield node;
        if (node.children) {
            for (const child of ( node.children.values())) {
                stack.push(child);
            }
        }
    }
}
class Node {
    constructor() {
        this._value = unset;
    }
    get value() {
        return this._value === unset ? undefined : this._value;
    }
    set value(value) {
        this._value = value === undefined ? unset : value;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/resources.js":
/*!********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/resources.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataUri: () => (/* binding */ DataUri),
/* harmony export */   ExtUri: () => (/* binding */ ExtUri),
/* harmony export */   addTrailingPathSeparator: () => (/* binding */ addTrailingPathSeparator),
/* harmony export */   basename: () => (/* binding */ basename),
/* harmony export */   basenameOrAuthority: () => (/* binding */ basenameOrAuthority),
/* harmony export */   dirname: () => (/* binding */ dirname),
/* harmony export */   distinctParents: () => (/* binding */ distinctParents),
/* harmony export */   extUri: () => (/* binding */ extUri),
/* harmony export */   extUriBiasedIgnorePathCase: () => (/* binding */ extUriBiasedIgnorePathCase),
/* harmony export */   extUriIgnorePathCase: () => (/* binding */ extUriIgnorePathCase),
/* harmony export */   extname: () => (/* binding */ extname),
/* harmony export */   hasTrailingPathSeparator: () => (/* binding */ hasTrailingPathSeparator),
/* harmony export */   isAbsolutePath: () => (/* binding */ isAbsolutePath),
/* harmony export */   isEqual: () => (/* binding */ isEqual),
/* harmony export */   isEqualAuthority: () => (/* binding */ isEqualAuthority),
/* harmony export */   isEqualOrParent: () => (/* binding */ isEqualOrParent),
/* harmony export */   joinPath: () => (/* binding */ joinPath),
/* harmony export */   normalizePath: () => (/* binding */ normalizePath),
/* harmony export */   originalFSPath: () => (/* binding */ originalFSPath),
/* harmony export */   relativePath: () => (/* binding */ relativePath),
/* harmony export */   removeTrailingPathSeparator: () => (/* binding */ removeTrailingPathSeparator),
/* harmony export */   resolvePath: () => (/* binding */ resolvePath),
/* harmony export */   toLocalResource: () => (/* binding */ toLocalResource)
/* harmony export */ });
/* harmony import */ var _charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _extpath_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extpath.js */ "./node_modules/vscode/vscode/src/vs/base/common/extpath.js");
/* harmony import */ var _network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _path_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");







function originalFSPath(uri) {
    return (0,_uri_js__WEBPACK_IMPORTED_MODULE_6__.uriToFsPath)(uri, true);
}
class ExtUri {
    constructor(_ignorePathCasing) {
        this._ignorePathCasing = _ignorePathCasing;
    }
    compare(uri1, uri2, ignoreFragment = false) {
        if (uri1 === uri2) {
            return 0;
        }
        return (0,_strings_js__WEBPACK_IMPORTED_MODULE_5__.compare)(this.getComparisonKey(uri1, ignoreFragment), this.getComparisonKey(uri2, ignoreFragment));
    }
    isEqual(uri1, uri2, ignoreFragment = false) {
        if (uri1 === uri2) {
            return true;
        }
        if (!uri1 || !uri2) {
            return false;
        }
        return this.getComparisonKey(uri1, ignoreFragment) === this.getComparisonKey(uri2, ignoreFragment);
    }
    getComparisonKey(uri, ignoreFragment = false) {
        return ( uri.with({
            path: this._ignorePathCasing(uri) ? uri.path.toLowerCase() : undefined,
            fragment: ignoreFragment ? null : undefined
        }).toString());
    }
    ignorePathCasing(uri) {
        return this._ignorePathCasing(uri);
    }
    isEqualOrParent(base, parentCandidate, ignoreFragment = false) {
        if (base.scheme === parentCandidate.scheme) {
            if (base.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file) {
                return (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.isEqualOrParent)(originalFSPath(base), originalFSPath(parentCandidate), this._ignorePathCasing(base)) && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);
            }
            if (isEqualAuthority(base.authority, parentCandidate.authority)) {
                return (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.isEqualOrParent)(base.path, parentCandidate.path, this._ignorePathCasing(base), '/') && base.query === parentCandidate.query && (ignoreFragment || base.fragment === parentCandidate.fragment);
            }
        }
        return false;
    }
    joinPath(resource, ...pathFragment) {
        return _uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.joinPath(resource, ...pathFragment);
    }
    basenameOrAuthority(resource) {
        return basename(resource) || resource.authority;
    }
    basename(resource) {
        return _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.basename(resource.path);
    }
    extname(resource) {
        return _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.extname(resource.path);
    }
    dirname(resource) {
        if (resource.path.length === 0) {
            return resource;
        }
        let dirname;
        if (resource.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file) {
            dirname = _uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.file((0,_path_js__WEBPACK_IMPORTED_MODULE_3__.dirname)(originalFSPath(resource))).path;
        }
        else {
            dirname = _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.dirname(resource.path);
            if (resource.authority && dirname.length && dirname.charCodeAt(0) !== _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Slash) {
                console.error(`dirname("${resource.toString})) resulted in a relative path`);
                dirname = '/';
            }
        }
        return resource.with({
            path: dirname
        });
    }
    normalizePath(resource) {
        if (!resource.path.length) {
            return resource;
        }
        let normalizedPath;
        if (resource.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file) {
            normalizedPath = _uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.file((0,_path_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(originalFSPath(resource))).path;
        }
        else {
            normalizedPath = _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.normalize(resource.path);
        }
        return resource.with({
            path: normalizedPath
        });
    }
    relativePath(from, to) {
        if (from.scheme !== to.scheme || !isEqualAuthority(from.authority, to.authority)) {
            return undefined;
        }
        if (from.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file) {
            const relativePath = (0,_path_js__WEBPACK_IMPORTED_MODULE_3__.relative)(originalFSPath(from), originalFSPath(to));
            return _platform_js__WEBPACK_IMPORTED_MODULE_4__.isWindows ? (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.toSlashes)(relativePath) : relativePath;
        }
        let fromPath = from.path || '/';
        const toPath = to.path || '/';
        if (this._ignorePathCasing(from)) {
            let i = 0;
            for (const len = Math.min(fromPath.length, toPath.length); i < len; i++) {
                if (fromPath.charCodeAt(i) !== toPath.charCodeAt(i)) {
                    if (fromPath.charAt(i).toLowerCase() !== toPath.charAt(i).toLowerCase()) {
                        break;
                    }
                }
            }
            fromPath = toPath.substr(0, i) + fromPath.substr(i);
        }
        return _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.relative(fromPath, toPath);
    }
    resolvePath(base, path) {
        if (base.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file) {
            const newURI = _uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.file((0,_path_js__WEBPACK_IMPORTED_MODULE_3__.resolve)(originalFSPath(base), path));
            return base.with({
                authority: newURI.authority,
                path: newURI.path
            });
        }
        path = (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.toPosixPath)(path);
        return base.with({
            path: _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.resolve(base.path, path)
        });
    }
    isAbsolutePath(resource) {
        return !!resource.path && resource.path[0] === '/';
    }
    isEqualAuthority(a1, a2) {
        return a1 === a2 || (a1 !== undefined && a2 !== undefined && (0,_strings_js__WEBPACK_IMPORTED_MODULE_5__.equalsIgnoreCase)(a1, a2));
    }
    hasTrailingPathSeparator(resource, sep$1 = _path_js__WEBPACK_IMPORTED_MODULE_3__.sep) {
        if (resource.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file) {
            const fsp = originalFSPath(resource);
            return fsp.length > (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.getRoot)(fsp).length && fsp[fsp.length - 1] === sep$1;
        }
        else {
            const p = resource.path;
            return (p.length > 1 && p.charCodeAt(p.length - 1) === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Slash) && !(/^[a-zA-Z]:(\/$|\\$)/.test(resource.fsPath));
        }
    }
    removeTrailingPathSeparator(resource, sep$1 = _path_js__WEBPACK_IMPORTED_MODULE_3__.sep) {
        if (hasTrailingPathSeparator(resource, sep$1)) {
            return resource.with({ path: resource.path.substr(0, resource.path.length - 1) });
        }
        return resource;
    }
    addTrailingPathSeparator(resource, sep$1 = _path_js__WEBPACK_IMPORTED_MODULE_3__.sep) {
        let isRootSep = false;
        if (resource.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file) {
            const fsp = originalFSPath(resource);
            isRootSep = ((fsp !== undefined) && (fsp.length === (0,_extpath_js__WEBPACK_IMPORTED_MODULE_1__.getRoot)(fsp).length) && (fsp[fsp.length - 1] === sep$1));
        }
        else {
            sep$1 = '/';
            const p = resource.path;
            isRootSep = p.length === 1 && p.charCodeAt(p.length - 1) === _charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Slash;
        }
        if (!isRootSep && !hasTrailingPathSeparator(resource, sep$1)) {
            return resource.with({ path: resource.path + '/' });
        }
        return resource;
    }
}
const extUri = ( new ExtUri(() => false));
const extUriBiasedIgnorePathCase = ( new ExtUri(uri => {
    return uri.scheme === _network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.file ? !_platform_js__WEBPACK_IMPORTED_MODULE_4__.isLinux : true;
}));
const extUriIgnorePathCase = ( new ExtUri(_ => true));
const isEqual = extUri.isEqual.bind(extUri);
const isEqualOrParent = extUri.isEqualOrParent.bind(extUri);
extUri.getComparisonKey.bind(extUri);
const basenameOrAuthority = extUri.basenameOrAuthority.bind(extUri);
const basename = extUri.basename.bind(extUri);
const extname = extUri.extname.bind(extUri);
const dirname = extUri.dirname.bind(extUri);
const joinPath = extUri.joinPath.bind(extUri);
const normalizePath = extUri.normalizePath.bind(extUri);
const relativePath = extUri.relativePath.bind(extUri);
const resolvePath = extUri.resolvePath.bind(extUri);
const isAbsolutePath = extUri.isAbsolutePath.bind(extUri);
const isEqualAuthority = extUri.isEqualAuthority.bind(extUri);
const hasTrailingPathSeparator = extUri.hasTrailingPathSeparator.bind(extUri);
const removeTrailingPathSeparator = extUri.removeTrailingPathSeparator.bind(extUri);
const addTrailingPathSeparator = extUri.addTrailingPathSeparator.bind(extUri);
function distinctParents(items, resourceAccessor) {
    const distinctParents = [];
    for (let i = 0; i < items.length; i++) {
        const candidateResource = resourceAccessor(items[i]);
        if (( items.some((otherItem, index) => {
            if (index === i) {
                return false;
            }
            return isEqualOrParent(candidateResource, resourceAccessor(otherItem));
        }))) {
            continue;
        }
        distinctParents.push(items[i]);
    }
    return distinctParents;
}
var DataUri;
( (function(DataUri) {
    DataUri.META_DATA_LABEL = 'label';
    DataUri.META_DATA_DESCRIPTION = 'description';
    DataUri.META_DATA_SIZE = 'size';
    DataUri.META_DATA_MIME = 'mime';
    function parseMetaData(dataUri) {
        const metadata = ( new Map());
        const meta = dataUri.path.substring(dataUri.path.indexOf(';') + 1, dataUri.path.lastIndexOf(';'));
        meta.split(';').forEach(property => {
            const [key, value] = property.split(':');
            if (key && value) {
                metadata.set(key, value);
            }
        });
        const mime = dataUri.path.substring(0, dataUri.path.indexOf(';'));
        if (mime) {
            metadata.set(DataUri.META_DATA_MIME, mime);
        }
        return metadata;
    }
    DataUri.parseMetaData = parseMetaData;
})(DataUri || (DataUri = {})));
function toLocalResource(resource, authority, localScheme) {
    if (authority) {
        let path = resource.path;
        if (path && path[0] !== _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.sep) {
            path = _path_js__WEBPACK_IMPORTED_MODULE_3__.posix.sep + path;
        }
        return resource.with({ scheme: localScheme, authority, path });
    }
    return resource.with({ scheme: localScheme });
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/scrollable.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/scrollable.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScrollState: () => (/* binding */ ScrollState),
/* harmony export */   Scrollable: () => (/* binding */ Scrollable),
/* harmony export */   ScrollbarVisibility: () => (/* binding */ ScrollbarVisibility),
/* harmony export */   SmoothScrollingOperation: () => (/* binding */ SmoothScrollingOperation),
/* harmony export */   SmoothScrollingUpdate: () => (/* binding */ SmoothScrollingUpdate)
/* harmony export */ });
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");


var ScrollbarVisibility;
( (function(ScrollbarVisibility) {
    ScrollbarVisibility[ScrollbarVisibility["Auto"] = 1] = "Auto";
    ScrollbarVisibility[ScrollbarVisibility["Hidden"] = 2] = "Hidden";
    ScrollbarVisibility[ScrollbarVisibility["Visible"] = 3] = "Visible";
})(ScrollbarVisibility || (ScrollbarVisibility = {})));
class ScrollState {
    constructor(_forceIntegerValues, width, scrollWidth, scrollLeft, height, scrollHeight, scrollTop) {
        this._forceIntegerValues = _forceIntegerValues;
        this._scrollStateBrand = undefined;
        if (this._forceIntegerValues) {
            width = width | 0;
            scrollWidth = scrollWidth | 0;
            scrollLeft = scrollLeft | 0;
            height = height | 0;
            scrollHeight = scrollHeight | 0;
            scrollTop = scrollTop | 0;
        }
        this.rawScrollLeft = scrollLeft;
        this.rawScrollTop = scrollTop;
        if (width < 0) {
            width = 0;
        }
        if (scrollLeft + width > scrollWidth) {
            scrollLeft = scrollWidth - width;
        }
        if (scrollLeft < 0) {
            scrollLeft = 0;
        }
        if (height < 0) {
            height = 0;
        }
        if (scrollTop + height > scrollHeight) {
            scrollTop = scrollHeight - height;
        }
        if (scrollTop < 0) {
            scrollTop = 0;
        }
        this.width = width;
        this.scrollWidth = scrollWidth;
        this.scrollLeft = scrollLeft;
        this.height = height;
        this.scrollHeight = scrollHeight;
        this.scrollTop = scrollTop;
    }
    equals(other) {
        return (this.rawScrollLeft === other.rawScrollLeft
            && this.rawScrollTop === other.rawScrollTop
            && this.width === other.width
            && this.scrollWidth === other.scrollWidth
            && this.scrollLeft === other.scrollLeft
            && this.height === other.height
            && this.scrollHeight === other.scrollHeight
            && this.scrollTop === other.scrollTop);
    }
    withScrollDimensions(update, useRawScrollPositions) {
        return ( new ScrollState(
            this._forceIntegerValues,
            (typeof update.width !== 'undefined' ? update.width : this.width),
            (typeof update.scrollWidth !== 'undefined' ? update.scrollWidth : this.scrollWidth),
            useRawScrollPositions ? this.rawScrollLeft : this.scrollLeft,
            (typeof update.height !== 'undefined' ? update.height : this.height),
            (typeof update.scrollHeight !== 'undefined' ? update.scrollHeight : this.scrollHeight),
            useRawScrollPositions ? this.rawScrollTop : this.scrollTop
        ));
    }
    withScrollPosition(update) {
        return ( new ScrollState(
            this._forceIntegerValues,
            this.width,
            this.scrollWidth,
            (typeof update.scrollLeft !== 'undefined' ? update.scrollLeft : this.rawScrollLeft),
            this.height,
            this.scrollHeight,
            (typeof update.scrollTop !== 'undefined' ? update.scrollTop : this.rawScrollTop)
        ));
    }
    createScrollEvent(previous, inSmoothScrolling) {
        const widthChanged = (this.width !== previous.width);
        const scrollWidthChanged = (this.scrollWidth !== previous.scrollWidth);
        const scrollLeftChanged = (this.scrollLeft !== previous.scrollLeft);
        const heightChanged = (this.height !== previous.height);
        const scrollHeightChanged = (this.scrollHeight !== previous.scrollHeight);
        const scrollTopChanged = (this.scrollTop !== previous.scrollTop);
        return {
            inSmoothScrolling: inSmoothScrolling,
            oldWidth: previous.width,
            oldScrollWidth: previous.scrollWidth,
            oldScrollLeft: previous.scrollLeft,
            width: this.width,
            scrollWidth: this.scrollWidth,
            scrollLeft: this.scrollLeft,
            oldHeight: previous.height,
            oldScrollHeight: previous.scrollHeight,
            oldScrollTop: previous.scrollTop,
            height: this.height,
            scrollHeight: this.scrollHeight,
            scrollTop: this.scrollTop,
            widthChanged: widthChanged,
            scrollWidthChanged: scrollWidthChanged,
            scrollLeftChanged: scrollLeftChanged,
            heightChanged: heightChanged,
            scrollHeightChanged: scrollHeightChanged,
            scrollTopChanged: scrollTopChanged,
        };
    }
}
class Scrollable extends _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    constructor(options) {
        super();
        this._scrollableBrand = undefined;
        this._onScroll = this._register(( new _event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this.onScroll = this._onScroll.event;
        this._smoothScrollDuration = options.smoothScrollDuration;
        this._scheduleAtNextAnimationFrame = options.scheduleAtNextAnimationFrame;
        this._state = ( new ScrollState(options.forceIntegerValues, 0, 0, 0, 0, 0, 0));
        this._smoothScrolling = null;
    }
    dispose() {
        if (this._smoothScrolling) {
            this._smoothScrolling.dispose();
            this._smoothScrolling = null;
        }
        super.dispose();
    }
    setSmoothScrollDuration(smoothScrollDuration) {
        this._smoothScrollDuration = smoothScrollDuration;
    }
    validateScrollPosition(scrollPosition) {
        return this._state.withScrollPosition(scrollPosition);
    }
    getScrollDimensions() {
        return this._state;
    }
    setScrollDimensions(dimensions, useRawScrollPositions) {
        const newState = this._state.withScrollDimensions(dimensions, useRawScrollPositions);
        this._setState(newState, Boolean(this._smoothScrolling));
        this._smoothScrolling?.acceptScrollDimensions(this._state);
    }
    getFutureScrollPosition() {
        if (this._smoothScrolling) {
            return this._smoothScrolling.to;
        }
        return this._state;
    }
    getCurrentScrollPosition() {
        return this._state;
    }
    setScrollPositionNow(update) {
        const newState = this._state.withScrollPosition(update);
        if (this._smoothScrolling) {
            this._smoothScrolling.dispose();
            this._smoothScrolling = null;
        }
        this._setState(newState, false);
    }
    setScrollPositionSmooth(update, reuseAnimation) {
        if (this._smoothScrollDuration === 0) {
            return this.setScrollPositionNow(update);
        }
        if (this._smoothScrolling) {
            update = {
                scrollLeft: (typeof update.scrollLeft === 'undefined' ? this._smoothScrolling.to.scrollLeft : update.scrollLeft),
                scrollTop: (typeof update.scrollTop === 'undefined' ? this._smoothScrolling.to.scrollTop : update.scrollTop)
            };
            const validTarget = this._state.withScrollPosition(update);
            if (this._smoothScrolling.to.scrollLeft === validTarget.scrollLeft && this._smoothScrolling.to.scrollTop === validTarget.scrollTop) {
                return;
            }
            let newSmoothScrolling;
            if (reuseAnimation) {
                newSmoothScrolling = ( new SmoothScrollingOperation(
                    this._smoothScrolling.from,
                    validTarget,
                    this._smoothScrolling.startTime,
                    this._smoothScrolling.duration
                ));
            }
            else {
                newSmoothScrolling = this._smoothScrolling.combine(this._state, validTarget, this._smoothScrollDuration);
            }
            this._smoothScrolling.dispose();
            this._smoothScrolling = newSmoothScrolling;
        }
        else {
            const validTarget = this._state.withScrollPosition(update);
            this._smoothScrolling = SmoothScrollingOperation.start(this._state, validTarget, this._smoothScrollDuration);
        }
        this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {
            if (!this._smoothScrolling) {
                return;
            }
            this._smoothScrolling.animationFrameDisposable = null;
            this._performSmoothScrolling();
        });
    }
    hasPendingScrollAnimation() {
        return Boolean(this._smoothScrolling);
    }
    _performSmoothScrolling() {
        if (!this._smoothScrolling) {
            return;
        }
        const update = this._smoothScrolling.tick();
        const newState = this._state.withScrollPosition(update);
        this._setState(newState, true);
        if (!this._smoothScrolling) {
            return;
        }
        if (update.isDone) {
            this._smoothScrolling.dispose();
            this._smoothScrolling = null;
            return;
        }
        this._smoothScrolling.animationFrameDisposable = this._scheduleAtNextAnimationFrame(() => {
            if (!this._smoothScrolling) {
                return;
            }
            this._smoothScrolling.animationFrameDisposable = null;
            this._performSmoothScrolling();
        });
    }
    _setState(newState, inSmoothScrolling) {
        const oldState = this._state;
        if (oldState.equals(newState)) {
            return;
        }
        this._state = newState;
        this._onScroll.fire(this._state.createScrollEvent(oldState, inSmoothScrolling));
    }
}
class SmoothScrollingUpdate {
    constructor(scrollLeft, scrollTop, isDone) {
        this.scrollLeft = scrollLeft;
        this.scrollTop = scrollTop;
        this.isDone = isDone;
    }
}
function createEaseOutCubic(from, to) {
    const delta = to - from;
    return function (completion) {
        return from + delta * easeOutCubic(completion);
    };
}
function createComposed(a, b, cut) {
    return function (completion) {
        if (completion < cut) {
            return a(completion / cut);
        }
        return b((completion - cut) / (1 - cut));
    };
}
class SmoothScrollingOperation {
    constructor(from, to, startTime, duration) {
        this.from = from;
        this.to = to;
        this.duration = duration;
        this.startTime = startTime;
        this.animationFrameDisposable = null;
        this._initAnimations();
    }
    _initAnimations() {
        this.scrollLeft = this._initAnimation(this.from.scrollLeft, this.to.scrollLeft, this.to.width);
        this.scrollTop = this._initAnimation(this.from.scrollTop, this.to.scrollTop, this.to.height);
    }
    _initAnimation(from, to, viewportSize) {
        const delta = Math.abs(from - to);
        if (delta > 2.5 * viewportSize) {
            let stop1, stop2;
            if (from < to) {
                stop1 = from + 0.75 * viewportSize;
                stop2 = to - 0.75 * viewportSize;
            }
            else {
                stop1 = from - 0.75 * viewportSize;
                stop2 = to + 0.75 * viewportSize;
            }
            return createComposed(createEaseOutCubic(from, stop1), createEaseOutCubic(stop2, to), 0.33);
        }
        return createEaseOutCubic(from, to);
    }
    dispose() {
        if (this.animationFrameDisposable !== null) {
            this.animationFrameDisposable.dispose();
            this.animationFrameDisposable = null;
        }
    }
    acceptScrollDimensions(state) {
        this.to = state.withScrollPosition(this.to);
        this._initAnimations();
    }
    tick() {
        return this._tick(Date.now());
    }
    _tick(now) {
        const completion = (now - this.startTime) / this.duration;
        if (completion < 1) {
            const newScrollLeft = this.scrollLeft(completion);
            const newScrollTop = this.scrollTop(completion);
            return ( new SmoothScrollingUpdate(newScrollLeft, newScrollTop, false));
        }
        return ( new SmoothScrollingUpdate(this.to.scrollLeft, this.to.scrollTop, true));
    }
    combine(from, to, duration) {
        return SmoothScrollingOperation.start(from, to, duration);
    }
    static start(from, to, duration) {
        duration = duration + 10;
        const startTime = Date.now() - 10;
        return ( new SmoothScrollingOperation(from, to, startTime, duration));
    }
}
function easeInCubic(t) {
    return Math.pow(t, 3);
}
function easeOutCubic(t) {
    return 1 - easeInCubic(1 - t);
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/severity.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/severity.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Severity$1)
/* harmony export */ });
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");

var Severity;
( (function(Severity) {
    Severity[Severity["Ignore"] = 0] = "Ignore";
    Severity[Severity["Info"] = 1] = "Info";
    Severity[Severity["Warning"] = 2] = "Warning";
    Severity[Severity["Error"] = 3] = "Error";
})(Severity || (Severity = {})));
( (function(Severity) {
    const _error = 'error';
    const _warning = 'warning';
    const _warn = 'warn';
    const _info = 'info';
    const _ignore = 'ignore';
    function fromValue(value) {
        if (!value) {
            return Severity.Ignore;
        }
        if ((0,_strings_js__WEBPACK_IMPORTED_MODULE_0__.equalsIgnoreCase)(_error, value)) {
            return Severity.Error;
        }
        if ((0,_strings_js__WEBPACK_IMPORTED_MODULE_0__.equalsIgnoreCase)(_warning, value) || (0,_strings_js__WEBPACK_IMPORTED_MODULE_0__.equalsIgnoreCase)(_warn, value)) {
            return Severity.Warning;
        }
        if ((0,_strings_js__WEBPACK_IMPORTED_MODULE_0__.equalsIgnoreCase)(_info, value)) {
            return Severity.Info;
        }
        return Severity.Ignore;
    }
    Severity.fromValue = fromValue;
    function toString(severity) {
        switch (severity) {
            case Severity.Error: return _error;
            case Severity.Warning: return _warning;
            case Severity.Info: return _info;
            default: return _ignore;
        }
    }
    Severity.toString = toString;
})(Severity || (Severity = {})));
var Severity$1 = Severity;



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/stream.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   consumeReadable: () => (/* binding */ consumeReadable),
/* harmony export */   consumeStream: () => (/* binding */ consumeStream),
/* harmony export */   emptyStream: () => (/* binding */ emptyStream),
/* harmony export */   isReadableBufferedStream: () => (/* binding */ isReadableBufferedStream),
/* harmony export */   isReadableStream: () => (/* binding */ isReadableStream),
/* harmony export */   listenStream: () => (/* binding */ listenStream),
/* harmony export */   newWriteableStream: () => (/* binding */ newWriteableStream),
/* harmony export */   peekReadable: () => (/* binding */ peekReadable),
/* harmony export */   peekStream: () => (/* binding */ peekStream),
/* harmony export */   prefixedReadable: () => (/* binding */ prefixedReadable),
/* harmony export */   prefixedStream: () => (/* binding */ prefixedStream),
/* harmony export */   toReadable: () => (/* binding */ toReadable),
/* harmony export */   toStream: () => (/* binding */ toStream),
/* harmony export */   transform: () => (/* binding */ transform)
/* harmony export */ });
/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");


function isReadableStream(obj) {
    const candidate = obj;
    if (!candidate) {
        return false;
    }
    return [candidate.on, candidate.pause, candidate.resume, candidate.destroy].every(fn => typeof fn === 'function');
}
function isReadableBufferedStream(obj) {
    const candidate = obj;
    if (!candidate) {
        return false;
    }
    return isReadableStream(candidate.stream) && Array.isArray(candidate.buffer) && typeof candidate.ended === 'boolean';
}
function newWriteableStream(reducer, options) {
    return ( new WriteableStreamImpl(reducer, options));
}
class WriteableStreamImpl {
    constructor(reducer, options) {
        this.reducer = reducer;
        this.options = options;
        this.state = {
            flowing: false,
            ended: false,
            destroyed: false
        };
        this.buffer = {
            data: [],
            error: []
        };
        this.listeners = {
            data: [],
            error: [],
            end: []
        };
        this.pendingWritePromises = [];
    }
    pause() {
        if (this.state.destroyed) {
            return;
        }
        this.state.flowing = false;
    }
    resume() {
        if (this.state.destroyed) {
            return;
        }
        if (!this.state.flowing) {
            this.state.flowing = true;
            this.flowData();
            this.flowErrors();
            this.flowEnd();
        }
    }
    write(data) {
        if (this.state.destroyed) {
            return;
        }
        if (this.state.flowing) {
            this.emitData(data);
        }
        else {
            this.buffer.data.push(data);
            if (typeof this.options?.highWaterMark === 'number' && this.buffer.data.length > this.options.highWaterMark) {
                return ( new Promise(resolve => this.pendingWritePromises.push(resolve)));
            }
        }
    }
    error(error) {
        if (this.state.destroyed) {
            return;
        }
        if (this.state.flowing) {
            this.emitError(error);
        }
        else {
            this.buffer.error.push(error);
        }
    }
    end(result) {
        if (this.state.destroyed) {
            return;
        }
        if (typeof result !== 'undefined') {
            this.write(result);
        }
        if (this.state.flowing) {
            this.emitEnd();
            this.destroy();
        }
        else {
            this.state.ended = true;
        }
    }
    emitData(data) {
        this.listeners.data.slice(0).forEach(listener => listener(data));
    }
    emitError(error) {
        if (this.listeners.error.length === 0) {
            (0,_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(error);
        }
        else {
            this.listeners.error.slice(0).forEach(listener => listener(error));
        }
    }
    emitEnd() {
        this.listeners.end.slice(0).forEach(listener => listener());
    }
    on(event, callback) {
        if (this.state.destroyed) {
            return;
        }
        switch (event) {
            case 'data':
                this.listeners.data.push(callback);
                this.resume();
                break;
            case 'end':
                this.listeners.end.push(callback);
                if (this.state.flowing && this.flowEnd()) {
                    this.destroy();
                }
                break;
            case 'error':
                this.listeners.error.push(callback);
                if (this.state.flowing) {
                    this.flowErrors();
                }
                break;
        }
    }
    removeListener(event, callback) {
        if (this.state.destroyed) {
            return;
        }
        let listeners = undefined;
        switch (event) {
            case 'data':
                listeners = this.listeners.data;
                break;
            case 'end':
                listeners = this.listeners.end;
                break;
            case 'error':
                listeners = this.listeners.error;
                break;
        }
        if (listeners) {
            const index = listeners.indexOf(callback);
            if (index >= 0) {
                listeners.splice(index, 1);
            }
        }
    }
    flowData() {
        if (this.buffer.data.length > 0) {
            const fullDataBuffer = this.reducer(this.buffer.data);
            this.emitData(fullDataBuffer);
            this.buffer.data.length = 0;
            const pendingWritePromises = [...this.pendingWritePromises];
            this.pendingWritePromises.length = 0;
            pendingWritePromises.forEach(pendingWritePromise => pendingWritePromise());
        }
    }
    flowErrors() {
        if (this.listeners.error.length > 0) {
            for (const error of this.buffer.error) {
                this.emitError(error);
            }
            this.buffer.error.length = 0;
        }
    }
    flowEnd() {
        if (this.state.ended) {
            this.emitEnd();
            return this.listeners.end.length > 0;
        }
        return false;
    }
    destroy() {
        if (!this.state.destroyed) {
            this.state.destroyed = true;
            this.state.ended = true;
            this.buffer.data.length = 0;
            this.buffer.error.length = 0;
            this.listeners.data.length = 0;
            this.listeners.error.length = 0;
            this.listeners.end.length = 0;
            this.pendingWritePromises.length = 0;
        }
    }
}
function consumeReadable(readable, reducer) {
    const chunks = [];
    let chunk;
    while ((chunk = readable.read()) !== null) {
        chunks.push(chunk);
    }
    return reducer(chunks);
}
function peekReadable(readable, reducer, maxChunks) {
    const chunks = [];
    let chunk = undefined;
    while ((chunk = readable.read()) !== null && chunks.length < maxChunks) {
        chunks.push(chunk);
    }
    if (chunk === null && chunks.length > 0) {
        return reducer(chunks);
    }
    return {
        read: () => {
            if (chunks.length > 0) {
                return chunks.shift();
            }
            if (typeof chunk !== 'undefined') {
                const lastReadChunk = chunk;
                chunk = undefined;
                return lastReadChunk;
            }
            return readable.read();
        }
    };
}
function consumeStream(stream, reducer) {
    return ( new Promise((resolve, reject) => {
        const chunks = [];
        listenStream(stream, {
            onData: chunk => {
                if (reducer) {
                    chunks.push(chunk);
                }
            },
            onError: error => {
                if (reducer) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            },
            onEnd: () => {
                if (reducer) {
                    resolve(reducer(chunks));
                }
                else {
                    resolve(undefined);
                }
            }
        });
    }));
}
function listenStream(stream, listener, token) {
    stream.on('error', error => {
        if (!token?.isCancellationRequested) {
            listener.onError(error);
        }
    });
    stream.on('end', () => {
        if (!token?.isCancellationRequested) {
            listener.onEnd();
        }
    });
    stream.on('data', data => {
        if (!token?.isCancellationRequested) {
            listener.onData(data);
        }
    });
}
function peekStream(stream, maxChunks) {
    return ( new Promise((resolve, reject) => {
        const streamListeners = ( new _lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
        const buffer = [];
        const dataListener = (chunk) => {
            buffer.push(chunk);
            if (buffer.length > maxChunks) {
                streamListeners.dispose();
                stream.pause();
                return resolve({ stream, buffer, ended: false });
            }
        };
        const errorListener = (error) => {
            streamListeners.dispose();
            return reject(error);
        };
        const endListener = () => {
            streamListeners.dispose();
            return resolve({ stream, buffer, ended: true });
        };
        streamListeners.add((0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => stream.removeListener('error', errorListener)));
        stream.on('error', errorListener);
        streamListeners.add((0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => stream.removeListener('end', endListener)));
        stream.on('end', endListener);
        streamListeners.add((0,_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => stream.removeListener('data', dataListener)));
        stream.on('data', dataListener);
    }));
}
function toStream(t, reducer) {
    const stream = newWriteableStream(reducer);
    stream.end(t);
    return stream;
}
function emptyStream() {
    const stream = newWriteableStream(() => { throw ( new Error('not supported')); });
    stream.end();
    return stream;
}
function toReadable(t) {
    let consumed = false;
    return {
        read: () => {
            if (consumed) {
                return null;
            }
            consumed = true;
            return t;
        }
    };
}
function transform(stream, transformer, reducer) {
    const target = newWriteableStream(reducer);
    listenStream(stream, {
        onData: data => target.write(transformer.data(data)),
        onError: error => target.error(transformer.error ? transformer.error(error) : error),
        onEnd: () => target.end()
    });
    return target;
}
function prefixedReadable(prefix, readable, reducer) {
    let prefixHandled = false;
    return {
        read: () => {
            const chunk = readable.read();
            if (!prefixHandled) {
                prefixHandled = true;
                if (chunk !== null) {
                    return reducer([prefix, chunk]);
                }
                return prefix;
            }
            return chunk;
        }
    };
}
function prefixedStream(prefix, stream, reducer) {
    let prefixHandled = false;
    const target = newWriteableStream(reducer);
    listenStream(stream, {
        onData: data => {
            if (!prefixHandled) {
                prefixHandled = true;
                return target.write(reducer([prefix, data]));
            }
            return target.write(data);
        },
        onError: error => target.error(error),
        onEnd: () => {
            if (!prefixHandled) {
                prefixHandled = true;
                target.write(prefix);
            }
            target.end();
        }
    });
    return target;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/symbols.js":
/*!******************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/symbols.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MicrotaskDelay: () => (/* binding */ MicrotaskDelay)
/* harmony export */ });
const MicrotaskDelay = Symbol('MicrotaskDelay');



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/ternarySearchTree.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/ternarySearchTree.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConfigKeysIterator: () => (/* binding */ ConfigKeysIterator),
/* harmony export */   PathIterator: () => (/* binding */ PathIterator),
/* harmony export */   StringIterator: () => (/* binding */ StringIterator),
/* harmony export */   TernarySearchTree: () => (/* binding */ TernarySearchTree),
/* harmony export */   UriIterator: () => (/* binding */ UriIterator)
/* harmony export */ });
/* harmony import */ var _arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _charCode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");



class StringIterator {
    constructor() {
        this._value = '';
        this._pos = 0;
    }
    reset(key) {
        this._value = key;
        this._pos = 0;
        return this;
    }
    next() {
        this._pos += 1;
        return this;
    }
    hasNext() {
        return this._pos < this._value.length - 1;
    }
    cmp(a) {
        const aCode = a.charCodeAt(0);
        const thisCode = this._value.charCodeAt(this._pos);
        return aCode - thisCode;
    }
    value() {
        return this._value[this._pos];
    }
}
class ConfigKeysIterator {
    constructor(_caseSensitive = true) {
        this._caseSensitive = _caseSensitive;
    }
    reset(key) {
        this._value = key;
        this._from = 0;
        this._to = 0;
        return this.next();
    }
    hasNext() {
        return this._to < this._value.length;
    }
    next() {
        this._from = this._to;
        let justSeps = true;
        for (; this._to < this._value.length; this._to++) {
            const ch = this._value.charCodeAt(this._to);
            if (ch === _charCode_js__WEBPACK_IMPORTED_MODULE_1__.CharCode.Period) {
                if (justSeps) {
                    this._from++;
                }
                else {
                    break;
                }
            }
            else {
                justSeps = false;
            }
        }
        return this;
    }
    cmp(a) {
        return this._caseSensitive
            ? (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compareSubstring)(a, this._value, 0, a.length, this._from, this._to)
            : (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compareSubstringIgnoreCase)(a, this._value, 0, a.length, this._from, this._to);
    }
    value() {
        return this._value.substring(this._from, this._to);
    }
}
class PathIterator {
    constructor(_splitOnBackslash = true, _caseSensitive = true) {
        this._splitOnBackslash = _splitOnBackslash;
        this._caseSensitive = _caseSensitive;
    }
    reset(key) {
        this._from = 0;
        this._to = 0;
        this._value = key;
        this._valueLen = key.length;
        for (let pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {
            const ch = this._value.charCodeAt(pos);
            if (!(ch === _charCode_js__WEBPACK_IMPORTED_MODULE_1__.CharCode.Slash || this._splitOnBackslash && ch === _charCode_js__WEBPACK_IMPORTED_MODULE_1__.CharCode.Backslash)) {
                break;
            }
        }
        return this.next();
    }
    hasNext() {
        return this._to < this._valueLen;
    }
    next() {
        this._from = this._to;
        let justSeps = true;
        for (; this._to < this._valueLen; this._to++) {
            const ch = this._value.charCodeAt(this._to);
            if (ch === _charCode_js__WEBPACK_IMPORTED_MODULE_1__.CharCode.Slash || this._splitOnBackslash && ch === _charCode_js__WEBPACK_IMPORTED_MODULE_1__.CharCode.Backslash) {
                if (justSeps) {
                    this._from++;
                }
                else {
                    break;
                }
            }
            else {
                justSeps = false;
            }
        }
        return this;
    }
    cmp(a) {
        return this._caseSensitive
            ? (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compareSubstring)(a, this._value, 0, a.length, this._from, this._to)
            : (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compareSubstringIgnoreCase)(a, this._value, 0, a.length, this._from, this._to);
    }
    value() {
        return this._value.substring(this._from, this._to);
    }
}
var UriIteratorState;
( (function(UriIteratorState) {
    UriIteratorState[UriIteratorState["Scheme"] = 1] = "Scheme";
    UriIteratorState[UriIteratorState["Authority"] = 2] = "Authority";
    UriIteratorState[UriIteratorState["Path"] = 3] = "Path";
    UriIteratorState[UriIteratorState["Query"] = 4] = "Query";
    UriIteratorState[UriIteratorState["Fragment"] = 5] = "Fragment";
})(UriIteratorState || (UriIteratorState = {})));
class UriIterator {
    constructor(_ignorePathCasing, _ignoreQueryAndFragment) {
        this._ignorePathCasing = _ignorePathCasing;
        this._ignoreQueryAndFragment = _ignoreQueryAndFragment;
        this._states = [];
        this._stateIdx = 0;
    }
    reset(key) {
        this._value = key;
        this._states = [];
        if (this._value.scheme) {
            this._states.push(UriIteratorState.Scheme);
        }
        if (this._value.authority) {
            this._states.push(UriIteratorState.Authority);
        }
        if (this._value.path) {
            this._pathIterator = ( new PathIterator(false, !this._ignorePathCasing(key)));
            this._pathIterator.reset(key.path);
            if (this._pathIterator.value()) {
                this._states.push(UriIteratorState.Path);
            }
        }
        if (!this._ignoreQueryAndFragment(key)) {
            if (this._value.query) {
                this._states.push(UriIteratorState.Query);
            }
            if (this._value.fragment) {
                this._states.push(UriIteratorState.Fragment);
            }
        }
        this._stateIdx = 0;
        return this;
    }
    next() {
        if (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext()) {
            this._pathIterator.next();
        }
        else {
            this._stateIdx += 1;
        }
        return this;
    }
    hasNext() {
        return (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext())
            || this._stateIdx < this._states.length - 1;
    }
    cmp(a) {
        if (this._states[this._stateIdx] === UriIteratorState.Scheme) {
            return (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compareIgnoreCase)(a, this._value.scheme);
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Authority) {
            return (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compareIgnoreCase)(a, this._value.authority);
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Path) {
            return this._pathIterator.cmp(a);
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Query) {
            return (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compare)(a, this._value.query);
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {
            return (0,_strings_js__WEBPACK_IMPORTED_MODULE_2__.compare)(a, this._value.fragment);
        }
        throw ( new Error());
    }
    value() {
        if (this._states[this._stateIdx] === UriIteratorState.Scheme) {
            return this._value.scheme;
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Authority) {
            return this._value.authority;
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Path) {
            return this._pathIterator.value();
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Query) {
            return this._value.query;
        }
        else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {
            return this._value.fragment;
        }
        throw ( new Error());
    }
}
class TernarySearchTreeNode {
    constructor() {
        this.height = 1;
    }
    isEmpty() {
        return !this.left && !this.mid && !this.right && !this.value;
    }
    rotateLeft() {
        const tmp = this.right;
        this.right = tmp.left;
        tmp.left = this;
        this.updateHeight();
        tmp.updateHeight();
        return tmp;
    }
    rotateRight() {
        const tmp = this.left;
        this.left = tmp.right;
        tmp.right = this;
        this.updateHeight();
        tmp.updateHeight();
        return tmp;
    }
    updateHeight() {
        this.height = 1 + Math.max(this.heightLeft, this.heightRight);
    }
    balanceFactor() {
        return this.heightRight - this.heightLeft;
    }
    get heightLeft() {
        return this.left?.height ?? 0;
    }
    get heightRight() {
        return this.right?.height ?? 0;
    }
}
var Dir;
( (function(Dir) {
    Dir[Dir["Left"] = -1] = "Left";
    Dir[Dir["Mid"] = 0] = "Mid";
    Dir[Dir["Right"] = 1] = "Right";
})(Dir || (Dir = {})));
class TernarySearchTree {
    static forUris(ignorePathCasing = () => false, ignoreQueryAndFragment = () => false) {
        return ( new TernarySearchTree(( new UriIterator(ignorePathCasing, ignoreQueryAndFragment))));
    }
    static forPaths(ignorePathCasing = false) {
        return ( new TernarySearchTree(( new PathIterator(undefined, !ignorePathCasing))));
    }
    static forStrings() {
        return ( new TernarySearchTree(( new StringIterator())));
    }
    static forConfigKeys() {
        return ( new TernarySearchTree(( new ConfigKeysIterator())));
    }
    constructor(segments) {
        this._iter = segments;
    }
    clear() {
        this._root = undefined;
    }
    fill(values, keys) {
        if (keys) {
            const arr = keys.slice(0);
            (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.shuffle)(arr);
            for (const k of arr) {
                this.set(k, values);
            }
        }
        else {
            const arr = values.slice(0);
            (0,_arrays_js__WEBPACK_IMPORTED_MODULE_0__.shuffle)(arr);
            for (const entry of arr) {
                this.set(entry[0], entry[1]);
            }
        }
    }
    set(key, element) {
        const iter = this._iter.reset(key);
        let node;
        if (!this._root) {
            this._root = ( new TernarySearchTreeNode());
            this._root.segment = iter.value();
        }
        const stack = [];
        node = this._root;
        while (true) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                if (!node.left) {
                    node.left = ( new TernarySearchTreeNode());
                    node.left.segment = iter.value();
                }
                stack.push([Dir.Left, node]);
                node = node.left;
            }
            else if (val < 0) {
                if (!node.right) {
                    node.right = ( new TernarySearchTreeNode());
                    node.right.segment = iter.value();
                }
                stack.push([Dir.Right, node]);
                node = node.right;
            }
            else if (iter.hasNext()) {
                iter.next();
                if (!node.mid) {
                    node.mid = ( new TernarySearchTreeNode());
                    node.mid.segment = iter.value();
                }
                stack.push([Dir.Mid, node]);
                node = node.mid;
            }
            else {
                break;
            }
        }
        const oldElement = node.value;
        node.value = element;
        node.key = key;
        for (let i = stack.length - 1; i >= 0; i--) {
            const node = stack[i][1];
            node.updateHeight();
            const bf = node.balanceFactor();
            if (bf < -1 || bf > 1) {
                const d1 = stack[i][0];
                const d2 = stack[i + 1][0];
                if (d1 === Dir.Right && d2 === Dir.Right) {
                    stack[i][1] = node.rotateLeft();
                }
                else if (d1 === Dir.Left && d2 === Dir.Left) {
                    stack[i][1] = node.rotateRight();
                }
                else if (d1 === Dir.Right && d2 === Dir.Left) {
                    node.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();
                    stack[i][1] = node.rotateLeft();
                }
                else if (d1 === Dir.Left && d2 === Dir.Right) {
                    node.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();
                    stack[i][1] = node.rotateRight();
                }
                else {
                    throw ( new Error());
                }
                if (i > 0) {
                    switch (stack[i - 1][0]) {
                        case Dir.Left:
                            stack[i - 1][1].left = stack[i][1];
                            break;
                        case Dir.Right:
                            stack[i - 1][1].right = stack[i][1];
                            break;
                        case Dir.Mid:
                            stack[i - 1][1].mid = stack[i][1];
                            break;
                    }
                }
                else {
                    this._root = stack[0][1];
                }
            }
        }
        return oldElement;
    }
    get(key) {
        return this._getNode(key)?.value;
    }
    _getNode(key) {
        const iter = this._iter.reset(key);
        let node = this._root;
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                node = node.left;
            }
            else if (val < 0) {
                node = node.right;
            }
            else if (iter.hasNext()) {
                iter.next();
                node = node.mid;
            }
            else {
                break;
            }
        }
        return node;
    }
    has(key) {
        const node = this._getNode(key);
        return !(node?.value === undefined && node?.mid === undefined);
    }
    delete(key) {
        return this._delete(key, false);
    }
    deleteSuperstr(key) {
        return this._delete(key, true);
    }
    _delete(key, superStr) {
        const iter = this._iter.reset(key);
        const stack = [];
        let node = this._root;
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                stack.push([Dir.Left, node]);
                node = node.left;
            }
            else if (val < 0) {
                stack.push([Dir.Right, node]);
                node = node.right;
            }
            else if (iter.hasNext()) {
                iter.next();
                stack.push([Dir.Mid, node]);
                node = node.mid;
            }
            else {
                break;
            }
        }
        if (!node) {
            return;
        }
        if (superStr) {
            node.left = undefined;
            node.mid = undefined;
            node.right = undefined;
            node.height = 1;
        }
        else {
            node.key = undefined;
            node.value = undefined;
        }
        if (!node.mid && !node.value) {
            if (node.left && node.right) {
                const min = this._min(node.right);
                if (min.key) {
                    const { key, value, segment } = min;
                    this._delete(min.key, false);
                    node.key = key;
                    node.value = value;
                    node.segment = segment;
                }
            }
            else {
                const newChild = node.left ?? node.right;
                if (stack.length > 0) {
                    const [dir, parent] = stack[stack.length - 1];
                    switch (dir) {
                        case Dir.Left:
                            parent.left = newChild;
                            break;
                        case Dir.Mid:
                            parent.mid = newChild;
                            break;
                        case Dir.Right:
                            parent.right = newChild;
                            break;
                    }
                }
                else {
                    this._root = newChild;
                }
            }
        }
        for (let i = stack.length - 1; i >= 0; i--) {
            const node = stack[i][1];
            node.updateHeight();
            const bf = node.balanceFactor();
            if (bf > 1) {
                if (node.right.balanceFactor() >= 0) {
                    stack[i][1] = node.rotateLeft();
                }
                else {
                    node.right = node.right.rotateRight();
                    stack[i][1] = node.rotateLeft();
                }
            }
            else if (bf < -1) {
                if (node.left.balanceFactor() <= 0) {
                    stack[i][1] = node.rotateRight();
                }
                else {
                    node.left = node.left.rotateLeft();
                    stack[i][1] = node.rotateRight();
                }
            }
            if (i > 0) {
                switch (stack[i - 1][0]) {
                    case Dir.Left:
                        stack[i - 1][1].left = stack[i][1];
                        break;
                    case Dir.Right:
                        stack[i - 1][1].right = stack[i][1];
                        break;
                    case Dir.Mid:
                        stack[i - 1][1].mid = stack[i][1];
                        break;
                }
            }
            else {
                this._root = stack[0][1];
            }
        }
    }
    _min(node) {
        while (node.left) {
            node = node.left;
        }
        return node;
    }
    findSubstr(key) {
        const iter = this._iter.reset(key);
        let node = this._root;
        let candidate = undefined;
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                node = node.left;
            }
            else if (val < 0) {
                node = node.right;
            }
            else if (iter.hasNext()) {
                iter.next();
                candidate = node.value || candidate;
                node = node.mid;
            }
            else {
                break;
            }
        }
        return node && node.value || candidate;
    }
    findSuperstr(key) {
        return this._findSuperstrOrElement(key, false);
    }
    _findSuperstrOrElement(key, allowValue) {
        const iter = this._iter.reset(key);
        let node = this._root;
        while (node) {
            const val = iter.cmp(node.segment);
            if (val > 0) {
                node = node.left;
            }
            else if (val < 0) {
                node = node.right;
            }
            else if (iter.hasNext()) {
                iter.next();
                node = node.mid;
            }
            else {
                if (!node.mid) {
                    if (allowValue) {
                        return node.value;
                    }
                    else {
                        return undefined;
                    }
                }
                else {
                    return this._entries(node.mid);
                }
            }
        }
        return undefined;
    }
    hasElementOrSubtree(key) {
        return this._findSuperstrOrElement(key, true) !== undefined;
    }
    forEach(callback) {
        for (const [key, value] of this) {
            callback(value, key);
        }
    }
    *[Symbol.iterator]() {
        yield* this._entries(this._root);
    }
    _entries(node) {
        const result = [];
        this._dfsEntries(node, result);
        return result[Symbol.iterator]();
    }
    _dfsEntries(node, bucket) {
        if (!node) {
            return;
        }
        if (node.left) {
            this._dfsEntries(node.left, bucket);
        }
        if (node.value) {
            bucket.push([node.key, node.value]);
        }
        if (node.mid) {
            this._dfsEntries(node.mid, bucket);
        }
        if (node.right) {
            this._dfsEntries(node.right, bucket);
        }
    }
    _isBalanced() {
        const nodeIsBalanced = (node) => {
            if (!node) {
                return true;
            }
            const bf = node.balanceFactor();
            if (bf < -1 || bf > 1) {
                return false;
            }
            return nodeIsBalanced(node.left) && nodeIsBalanced(node.right);
        };
        return nodeIsBalanced(this._root);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/themables.js":
/*!********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/themables.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ThemeColor: () => (/* binding */ ThemeColor),
/* harmony export */   ThemeIcon: () => (/* binding */ ThemeIcon),
/* harmony export */   themeColorFromId: () => (/* binding */ themeColorFromId)
/* harmony export */ });
/* harmony import */ var _codicons_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codicons.js */ "./node_modules/vscode/vscode/src/vs/base/common/codicons.js");

var ThemeColor;
( (function(ThemeColor) {
    function isThemeColor(obj) {
        return obj && typeof obj === 'object' && typeof obj.id === 'string';
    }
    ThemeColor.isThemeColor = isThemeColor;
})(ThemeColor || (ThemeColor = {})));
function themeColorFromId(id) {
    return { id };
}
var ThemeIcon;
( (function(ThemeIcon) {
    ThemeIcon.iconNameSegment = '[A-Za-z0-9]+';
    ThemeIcon.iconNameExpression = '[A-Za-z0-9-]+';
    ThemeIcon.iconModifierExpression = '~[A-Za-z]+';
    ThemeIcon.iconNameCharacter = '[A-Za-z0-9~-]';
    const ThemeIconIdRegex = ( new RegExp(
        `^(${ThemeIcon.iconNameExpression})(${ThemeIcon.iconModifierExpression})?$`
    ));
    function asClassNameArray(icon) {
        const match = ThemeIconIdRegex.exec(icon.id);
        if (!match) {
            return asClassNameArray(_codicons_js__WEBPACK_IMPORTED_MODULE_0__.Codicon.error);
        }
        const [, id, modifier] = match;
        const classNames = ['codicon', 'codicon-' + id];
        if (modifier) {
            classNames.push('codicon-modifier-' + modifier.substring(1));
        }
        return classNames;
    }
    ThemeIcon.asClassNameArray = asClassNameArray;
    function asClassName(icon) {
        return asClassNameArray(icon).join(' ');
    }
    ThemeIcon.asClassName = asClassName;
    function asCSSSelector(icon) {
        return '.' + asClassNameArray(icon).join('.');
    }
    ThemeIcon.asCSSSelector = asCSSSelector;
    function isThemeIcon(obj) {
        return obj && typeof obj === 'object' && typeof obj.id === 'string' && (typeof obj.color === 'undefined' || ThemeColor.isThemeColor(obj.color));
    }
    ThemeIcon.isThemeIcon = isThemeIcon;
    const _regexFromString = ( new RegExp(
        `^\\$\\((${ThemeIcon.iconNameExpression}(?:${ThemeIcon.iconModifierExpression})?)\\)$`
    ));
    function fromString(str) {
        const match = _regexFromString.exec(str);
        if (!match) {
            return undefined;
        }
        const [, name] = match;
        return { id: name };
    }
    ThemeIcon.fromString = fromString;
    function fromId(id) {
        return { id };
    }
    ThemeIcon.fromId = fromId;
    function modify(icon, modifier) {
        let id = icon.id;
        const tildeIndex = id.lastIndexOf('~');
        if (tildeIndex !== -1) {
            id = id.substring(0, tildeIndex);
        }
        if (modifier) {
            id = `${id}~${modifier}`;
        }
        return { id };
    }
    ThemeIcon.modify = modify;
    function getModifier(icon) {
        const tildeIndex = icon.id.lastIndexOf('~');
        if (tildeIndex !== -1) {
            return icon.id.substring(tildeIndex + 1);
        }
        return undefined;
    }
    ThemeIcon.getModifier = getModifier;
    function isEqual(ti1, ti2) {
        return ti1.id === ti2.id && ti1.color?.id === ti2.color?.id;
    }
    ThemeIcon.isEqual = isEqual;
})(ThemeIcon || (ThemeIcon = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/uriIpc.js":
/*!*****************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/uriIpc.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DefaultURITransformer: () => (/* binding */ DefaultURITransformer),
/* harmony export */   transformAndReviveIncomingURIs: () => (/* binding */ transformAndReviveIncomingURIs),
/* harmony export */   transformIncomingURIs: () => (/* binding */ transformIncomingURIs)
/* harmony export */ });
/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _marshallingIds_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");



const DefaultURITransformer = new class {
    transformIncoming(uri) {
        return uri;
    }
    transformOutgoing(uri) {
        return uri;
    }
    transformOutgoingURI(uri) {
        return uri;
    }
    transformOutgoingScheme(scheme) {
        return scheme;
    }
};
function _transformIncomingURIs(obj, transformer, revive, depth) {
    if (!obj || depth > 200) {
        return null;
    }
    if (typeof obj === 'object') {
        if (obj.$mid === _marshallingIds_js__WEBPACK_IMPORTED_MODULE_1__.MarshalledId.Uri) {
            return revive ? _uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(transformer.transformIncoming(obj)) : transformer.transformIncoming(obj);
        }
        if (obj instanceof _buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer) {
            return null;
        }
        for (const key in obj) {
            if (Object.hasOwnProperty.call(obj, key)) {
                const r = _transformIncomingURIs(obj[key], transformer, revive, depth + 1);
                if (r !== null) {
                    obj[key] = r;
                }
            }
        }
    }
    return null;
}
function transformIncomingURIs(obj, transformer) {
    const result = _transformIncomingURIs(obj, transformer, false, 0);
    if (result === null) {
        return obj;
    }
    return result;
}
function transformAndReviveIncomingURIs(obj, transformer) {
    const result = _transformIncomingURIs(obj, transformer, true, 0);
    if (result === null) {
        return obj;
    }
    return result;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js":
/*!***************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/common/uuid.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   generateUuid: () => (/* binding */ generateUuid),
/* harmony export */   isUUID: () => (/* binding */ isUUID)
/* harmony export */ });
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
const generateUuid = ( (function() {
    if (typeof crypto === 'object' && typeof crypto.randomUUID === 'function') {
        return crypto.randomUUID.bind(crypto);
    }
    let getRandomValues;
    if (typeof crypto === 'object' && typeof crypto.getRandomValues === 'function') {
        getRandomValues = crypto.getRandomValues.bind(crypto);
    }
    else {
        getRandomValues = function (bucket) {
            for (let i = 0; i < bucket.length; i++) {
                bucket[i] = Math.floor(Math.random() * 256);
            }
            return bucket;
        };
    }
    const _data = ( new Uint8Array(16));
    const _hex = [];
    for (let i = 0; i < 256; i++) {
        _hex.push(( i.toString(16)).padStart(2, '0'));
    }
    return function generateUuid() {
        getRandomValues(_data);
        _data[6] = (_data[6] & 0x0f) | 0x40;
        _data[8] = (_data[8] & 0x3f) | 0x80;
        let i = 0;
        let result = '';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += '-';
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        result += _hex[_data[i++]];
        return result;
    };
})());



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/base/parts/storage/common/storage.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/base/parts/storage/common/storage.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InMemoryStorageDatabase: () => (/* binding */ InMemoryStorageDatabase),
/* harmony export */   Storage: () => (/* binding */ Storage),
/* harmony export */   StorageHint: () => (/* binding */ StorageHint),
/* harmony export */   StorageState: () => (/* binding */ StorageState),
/* harmony export */   isStorageItemsChangeEvent: () => (/* binding */ isStorageItemsChangeEvent)
/* harmony export */ });
/* harmony import */ var _common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _common_marshalling_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/marshalling.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshalling.js");
/* harmony import */ var _common_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");





var StorageHint;
( (function(StorageHint) {
    StorageHint[StorageHint["STORAGE_DOES_NOT_EXIST"] = 0] = "STORAGE_DOES_NOT_EXIST";
    StorageHint[StorageHint["STORAGE_IN_MEMORY"] = 1] = "STORAGE_IN_MEMORY";
})(StorageHint || (StorageHint = {})));
function isStorageItemsChangeEvent(thing) {
    const candidate = thing;
    return candidate?.changed instanceof Map || candidate?.deleted instanceof Set;
}
var StorageState;
( (function(StorageState) {
    StorageState[StorageState["None"] = 0] = "None";
    StorageState[StorageState["Initialized"] = 1] = "Initialized";
    StorageState[StorageState["Closed"] = 2] = "Closed";
})(StorageState || (StorageState = {})));
class Storage extends _common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    static { this.DEFAULT_FLUSH_DELAY = 100; }
    constructor(database, options = Object.create(null)) {
        super();
        this.database = database;
        this.options = options;
        this._onDidChangeStorage = this._register(( new _common_event_js__WEBPACK_IMPORTED_MODULE_1__.PauseableEmitter()));
        this.onDidChangeStorage = this._onDidChangeStorage.event;
        this.state = StorageState.None;
        this.cache = ( new Map());
        this.flushDelayer = this._register(( new _common_async_js__WEBPACK_IMPORTED_MODULE_0__.ThrottledDelayer(Storage.DEFAULT_FLUSH_DELAY)));
        this.pendingDeletes = ( new Set());
        this.pendingInserts = ( new Map());
        this.pendingClose = undefined;
        this.whenFlushedCallbacks = [];
        this.registerListeners();
    }
    registerListeners() {
        this._register(this.database.onDidChangeItemsExternal(e => this.onDidChangeItemsExternal(e)));
    }
    onDidChangeItemsExternal(e) {
        this._onDidChangeStorage.pause();
        try {
            e.changed?.forEach((value, key) => this.acceptExternal(key, value));
            e.deleted?.forEach(key => this.acceptExternal(key, undefined));
        }
        finally {
            this._onDidChangeStorage.resume();
        }
    }
    acceptExternal(key, value) {
        if (this.state === StorageState.Closed) {
            return;
        }
        let changed = false;
        if ((0,_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isUndefinedOrNull)(value)) {
            changed = this.cache.delete(key);
        }
        else {
            const currentValue = this.cache.get(key);
            if (currentValue !== value) {
                this.cache.set(key, value);
                changed = true;
            }
        }
        if (changed) {
            this._onDidChangeStorage.fire({ key, external: true });
        }
    }
    get items() {
        return this.cache;
    }
    get size() {
        return this.cache.size;
    }
    async init() {
        if (this.state !== StorageState.None) {
            return;
        }
        this.state = StorageState.Initialized;
        if (this.options.hint === StorageHint.STORAGE_DOES_NOT_EXIST) {
            return;
        }
        this.cache = await this.database.getItems();
    }
    get(key, fallbackValue) {
        const value = this.cache.get(key);
        if ((0,_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isUndefinedOrNull)(value)) {
            return fallbackValue;
        }
        return value;
    }
    getBoolean(key, fallbackValue) {
        const value = this.get(key);
        if ((0,_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isUndefinedOrNull)(value)) {
            return fallbackValue;
        }
        return value === 'true';
    }
    getNumber(key, fallbackValue) {
        const value = this.get(key);
        if ((0,_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isUndefinedOrNull)(value)) {
            return fallbackValue;
        }
        return parseInt(value, 10);
    }
    getObject(key, fallbackValue) {
        const value = this.get(key);
        if ((0,_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isUndefinedOrNull)(value)) {
            return fallbackValue;
        }
        return (0,_common_marshalling_js__WEBPACK_IMPORTED_MODULE_3__.parse)(value);
    }
    async set(key, value, external = false) {
        if (this.state === StorageState.Closed) {
            return;
        }
        if ((0,_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isUndefinedOrNull)(value)) {
            return this.delete(key, external);
        }
        const valueStr = (0,_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isObject)(value) || Array.isArray(value) ? (0,_common_marshalling_js__WEBPACK_IMPORTED_MODULE_3__.stringify)(value) : String(value);
        const currentValue = this.cache.get(key);
        if (currentValue === valueStr) {
            return;
        }
        this.cache.set(key, valueStr);
        this.pendingInserts.set(key, valueStr);
        this.pendingDeletes.delete(key);
        this._onDidChangeStorage.fire({ key, external });
        return this.doFlush();
    }
    async delete(key, external = false) {
        if (this.state === StorageState.Closed) {
            return;
        }
        const wasDeleted = this.cache.delete(key);
        if (!wasDeleted) {
            return;
        }
        if (!( this.pendingDeletes.has(key))) {
            this.pendingDeletes.add(key);
        }
        this.pendingInserts.delete(key);
        this._onDidChangeStorage.fire({ key, external });
        return this.doFlush();
    }
    async optimize() {
        if (this.state === StorageState.Closed) {
            return;
        }
        await this.flush(0);
        return this.database.optimize();
    }
    async close() {
        if (!this.pendingClose) {
            this.pendingClose = this.doClose();
        }
        return this.pendingClose;
    }
    async doClose() {
        this.state = StorageState.Closed;
        try {
            await this.doFlush(0 );
        }
        catch (error) {
        }
        await this.database.close(() => this.cache);
    }
    get hasPending() {
        return this.pendingInserts.size > 0 || this.pendingDeletes.size > 0;
    }
    async flushPending() {
        if (!this.hasPending) {
            return;
        }
        const updateRequest = { insert: this.pendingInserts, delete: this.pendingDeletes };
        this.pendingDeletes = ( new Set());
        this.pendingInserts = ( new Map());
        return this.database.updateItems(updateRequest).finally(() => {
            if (!this.hasPending) {
                while (this.whenFlushedCallbacks.length) {
                    this.whenFlushedCallbacks.pop()?.();
                }
            }
        });
    }
    async flush(delay) {
        if (this.state === StorageState.Closed ||
            this.pendingClose
        ) {
            return;
        }
        return this.doFlush(delay);
    }
    async doFlush(delay) {
        if (this.options.hint === StorageHint.STORAGE_IN_MEMORY) {
            return this.flushPending();
        }
        return this.flushDelayer.trigger(() => this.flushPending(), delay);
    }
    async whenFlushed() {
        if (!this.hasPending) {
            return;
        }
        return ( new Promise(resolve => this.whenFlushedCallbacks.push(resolve)));
    }
    isInMemory() {
        return this.options.hint === StorageHint.STORAGE_IN_MEMORY;
    }
}
class InMemoryStorageDatabase {
    constructor() {
        this.onDidChangeItemsExternal = _common_event_js__WEBPACK_IMPORTED_MODULE_1__.Event.None;
        this.items = ( new Map());
    }
    async getItems() {
        return this.items;
    }
    async updateItems(request) {
        request.insert?.forEach((value, key) => this.items.set(key, value));
        request.delete?.forEach(key => this.items.delete(key));
    }
    async optimize() { }
    async close() { }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/config/editorOptions.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/config/editorOptions.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApplyUpdateResult: () => (/* binding */ ApplyUpdateResult),
/* harmony export */   ComputeOptionsMemory: () => (/* binding */ ComputeOptionsMemory),
/* harmony export */   ConfigurationChangedEvent: () => (/* binding */ ConfigurationChangedEvent),
/* harmony export */   EDITOR_FONT_DEFAULTS: () => (/* binding */ EDITOR_FONT_DEFAULTS),
/* harmony export */   EditorAutoIndentStrategy: () => (/* binding */ EditorAutoIndentStrategy),
/* harmony export */   EditorFontLigatures: () => (/* binding */ EditorFontLigatures),
/* harmony export */   EditorFontVariations: () => (/* binding */ EditorFontVariations),
/* harmony export */   EditorLayoutInfoComputer: () => (/* binding */ EditorLayoutInfoComputer),
/* harmony export */   EditorOption: () => (/* binding */ EditorOption),
/* harmony export */   EditorOptions: () => (/* binding */ EditorOptions),
/* harmony export */   MINIMAP_GUTTER_WIDTH: () => (/* binding */ MINIMAP_GUTTER_WIDTH),
/* harmony export */   RenderLineNumbersType: () => (/* binding */ RenderLineNumbersType),
/* harmony export */   RenderMinimap: () => (/* binding */ RenderMinimap),
/* harmony export */   ShowLightbulbIconMode: () => (/* binding */ ShowLightbulbIconMode),
/* harmony export */   TextEditorCursorBlinkingStyle: () => (/* binding */ TextEditorCursorBlinkingStyle),
/* harmony export */   TextEditorCursorStyle: () => (/* binding */ TextEditorCursorStyle),
/* harmony export */   WrappingIndent: () => (/* binding */ WrappingIndent),
/* harmony export */   boolean: () => (/* binding */ boolean),
/* harmony export */   clampedFloat: () => (/* binding */ clampedFloat),
/* harmony export */   clampedInt: () => (/* binding */ clampedInt),
/* harmony export */   cursorStyleToString: () => (/* binding */ cursorStyleToString),
/* harmony export */   editorOptionsRegistry: () => (/* binding */ editorOptionsRegistry),
/* harmony export */   filterValidationDecorations: () => (/* binding */ filterValidationDecorations),
/* harmony export */   inUntrustedWorkspace: () => (/* binding */ inUntrustedWorkspace),
/* harmony export */   stringSet: () => (/* binding */ stringSet),
/* harmony export */   unicodeHighlightConfigKeys: () => (/* binding */ unicodeHighlightConfigKeys)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_scrollable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/scrollable.js */ "./node_modules/vscode/vscode/src/vs/base/common/scrollable.js");
/* harmony import */ var _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uint.js */ "./node_modules/vscode/vscode/src/vs/base/common/uint.js");
/* harmony import */ var _core_textModelDefaults_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../core/textModelDefaults.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/textModelDefaults.js");
/* harmony import */ var _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../core/wordHelper.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/wordHelper.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../platform/accessibility/common/accessibility.js */ "./node_modules/vscode/vscode/src/vs/platform/accessibility/common/accessibility.js");









const _moduleId = "vs/editor/common/config/editorOptions";
var EditorAutoIndentStrategy;
( ((function(EditorAutoIndentStrategy) {
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["None"] = 0] = "None";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Keep"] = 1] = "Keep";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Brackets"] = 2] = "Brackets";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Advanced"] = 3] = "Advanced";
    EditorAutoIndentStrategy[EditorAutoIndentStrategy["Full"] = 4] = "Full";
})(EditorAutoIndentStrategy || (EditorAutoIndentStrategy = {}))));
const MINIMAP_GUTTER_WIDTH = 8;
class ConfigurationChangedEvent {
    constructor(values) {
        this._values = values;
    }
    hasChanged(id) {
        return this._values[id];
    }
}
class ComputeOptionsMemory {
    constructor() {
        this.stableMinimapLayoutInput = null;
        this.stableFitMaxMinimapScale = 0;
        this.stableFitRemainingWidth = 0;
    }
}
class BaseEditorOption {
    constructor(id, name, defaultValue, schema) {
        this.id = id;
        this.name = name;
        this.defaultValue = defaultValue;
        this.schema = schema;
    }
    applyUpdate(value, update) {
        return applyUpdate(value, update);
    }
    compute(env, options, value) {
        return value;
    }
}
class ApplyUpdateResult {
    constructor(newValue, didChange) {
        this.newValue = newValue;
        this.didChange = didChange;
    }
}
function applyUpdate(value, update) {
    if (typeof value !== 'object' || typeof update !== 'object' || !value || !update) {
        return (
             (new ApplyUpdateResult(update, value !== update))
        );
    }
    if (Array.isArray(value) || Array.isArray(update)) {
        const arrayEquals = Array.isArray(value) && Array.isArray(update) && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(value, update);
        return (
             (new ApplyUpdateResult(update, !arrayEquals))
        );
    }
    let didChange = false;
    for (const key in update) {
        if (update.hasOwnProperty(key)) {
            const result = applyUpdate(value[key], update[key]);
            if (result.didChange) {
                value[key] = result.newValue;
                didChange = true;
            }
        }
    }
    return (
         (new ApplyUpdateResult(value, didChange))
    );
}
class ComputedEditorOption {
    constructor(id) {
        this.schema = undefined;
        this.id = id;
        this.name = '_never_';
        this.defaultValue = undefined;
    }
    applyUpdate(value, update) {
        return applyUpdate(value, update);
    }
    validate(input) {
        return this.defaultValue;
    }
}
class SimpleEditorOption {
    constructor(id, name, defaultValue, schema) {
        this.id = id;
        this.name = name;
        this.defaultValue = defaultValue;
        this.schema = schema;
    }
    applyUpdate(value, update) {
        return applyUpdate(value, update);
    }
    validate(input) {
        if (typeof input === 'undefined') {
            return this.defaultValue;
        }
        return input;
    }
    compute(env, options, value) {
        return value;
    }
}
function boolean(value, defaultValue) {
    if (typeof value === 'undefined') {
        return defaultValue;
    }
    if (value === 'false') {
        return false;
    }
    return Boolean(value);
}
class EditorBooleanOption extends SimpleEditorOption {
    constructor(id, name, defaultValue, schema = undefined) {
        if (typeof schema !== 'undefined') {
            schema.type = 'boolean';
            schema.default = defaultValue;
        }
        super(id, name, defaultValue, schema);
    }
    validate(input) {
        return boolean(input, this.defaultValue);
    }
}
function clampedInt(value, defaultValue, minimum, maximum) {
    if (typeof value === 'undefined') {
        return defaultValue;
    }
    let r = parseInt(value, 10);
    if (isNaN(r)) {
        return defaultValue;
    }
    r = Math.max(minimum, r);
    r = Math.min(maximum, r);
    return r | 0;
}
class EditorIntOption extends SimpleEditorOption {
    static clampedInt(value, defaultValue, minimum, maximum) {
        return clampedInt(value, defaultValue, minimum, maximum);
    }
    constructor(id, name, defaultValue, minimum, maximum, schema = undefined) {
        if (typeof schema !== 'undefined') {
            schema.type = 'integer';
            schema.default = defaultValue;
            schema.minimum = minimum;
            schema.maximum = maximum;
        }
        super(id, name, defaultValue, schema);
        this.minimum = minimum;
        this.maximum = maximum;
    }
    validate(input) {
        return EditorIntOption.clampedInt(input, this.defaultValue, this.minimum, this.maximum);
    }
}
function clampedFloat(value, defaultValue, minimum, maximum) {
    if (typeof value === 'undefined') {
        return defaultValue;
    }
    const r = EditorFloatOption.float(value, defaultValue);
    return EditorFloatOption.clamp(r, minimum, maximum);
}
class EditorFloatOption extends SimpleEditorOption {
    static clamp(n, min, max) {
        if (n < min) {
            return min;
        }
        if (n > max) {
            return max;
        }
        return n;
    }
    static float(value, defaultValue) {
        if (typeof value === 'number') {
            return value;
        }
        if (typeof value === 'undefined') {
            return defaultValue;
        }
        const r = parseFloat(value);
        return (isNaN(r) ? defaultValue : r);
    }
    constructor(id, name, defaultValue, validationFn, schema) {
        if (typeof schema !== 'undefined') {
            schema.type = 'number';
            schema.default = defaultValue;
        }
        super(id, name, defaultValue, schema);
        this.validationFn = validationFn;
    }
    validate(input) {
        return this.validationFn(EditorFloatOption.float(input, this.defaultValue));
    }
}
class EditorStringOption extends SimpleEditorOption {
    static string(value, defaultValue) {
        if (typeof value !== 'string') {
            return defaultValue;
        }
        return value;
    }
    constructor(id, name, defaultValue, schema = undefined) {
        if (typeof schema !== 'undefined') {
            schema.type = 'string';
            schema.default = defaultValue;
        }
        super(id, name, defaultValue, schema);
    }
    validate(input) {
        return EditorStringOption.string(input, this.defaultValue);
    }
}
function stringSet(value, defaultValue, allowedValues, renamedValues) {
    if (typeof value !== 'string') {
        return defaultValue;
    }
    if (renamedValues && value in renamedValues) {
        return renamedValues[value];
    }
    if (allowedValues.indexOf(value) === -1) {
        return defaultValue;
    }
    return value;
}
class EditorStringEnumOption extends SimpleEditorOption {
    constructor(id, name, defaultValue, allowedValues, schema = undefined) {
        if (typeof schema !== 'undefined') {
            schema.type = 'string';
            schema.enum = allowedValues;
            schema.default = defaultValue;
        }
        super(id, name, defaultValue, schema);
        this._allowedValues = allowedValues;
    }
    validate(input) {
        return stringSet(input, this.defaultValue, this._allowedValues);
    }
}
class EditorEnumOption extends BaseEditorOption {
    constructor(id, name, defaultValue, defaultStringValue, allowedValues, convert, schema = undefined) {
        if (typeof schema !== 'undefined') {
            schema.type = 'string';
            schema.enum = allowedValues;
            schema.default = defaultStringValue;
        }
        super(id, name, defaultValue, schema);
        this._allowedValues = allowedValues;
        this._convert = convert;
    }
    validate(input) {
        if (typeof input !== 'string') {
            return this.defaultValue;
        }
        if (this._allowedValues.indexOf(input) === -1) {
            return this.defaultValue;
        }
        return this._convert(input);
    }
}
function _autoIndentFromString(autoIndent) {
    switch (autoIndent) {
        case 'none': return EditorAutoIndentStrategy.None;
        case 'keep': return EditorAutoIndentStrategy.Keep;
        case 'brackets': return EditorAutoIndentStrategy.Brackets;
        case 'advanced': return EditorAutoIndentStrategy.Advanced;
        case 'full': return EditorAutoIndentStrategy.Full;
    }
}
class EditorAccessibilitySupport extends BaseEditorOption {
    constructor() {
        super(EditorOption.accessibilitySupport, 'accessibilitySupport', _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__.AccessibilitySupport.Unknown, {
            type: 'string',
            enum: ['auto', 'on', 'off'],
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    0,
                    "Use platform APIs to detect when a Screen Reader is attached."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 1, "Optimize for usage with a Screen Reader.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 2, "Assume a screen reader is not attached.")),
            ],
            default: 'auto',
            tags: ['accessibility'],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                3,
                "Controls if the UI should run in a mode where it is optimized for screen readers."
            ))
        });
    }
    validate(input) {
        switch (input) {
            case 'auto': return _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__.AccessibilitySupport.Unknown;
            case 'off': return _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__.AccessibilitySupport.Disabled;
            case 'on': return _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__.AccessibilitySupport.Enabled;
        }
        return this.defaultValue;
    }
    compute(env, options, value) {
        if (value === _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__.AccessibilitySupport.Unknown) {
            return env.accessibilitySupport;
        }
        return value;
    }
}
class EditorComments extends BaseEditorOption {
    constructor() {
        const defaults = {
            insertSpace: true,
            ignoreEmptyLines: true,
        };
        super(EditorOption.comments, 'comments', defaults, {
            'editor.comments.insertSpace': {
                type: 'boolean',
                default: defaults.insertSpace,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    4,
                    "Controls whether a space character is inserted when commenting."
                ))
            },
            'editor.comments.ignoreEmptyLines': {
                type: 'boolean',
                default: defaults.ignoreEmptyLines,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    5,
                    'Controls if empty lines should be ignored with toggle, add or remove actions for line comments.'
                ))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            insertSpace: boolean(input.insertSpace, this.defaultValue.insertSpace),
            ignoreEmptyLines: boolean(input.ignoreEmptyLines, this.defaultValue.ignoreEmptyLines),
        };
    }
}
var TextEditorCursorBlinkingStyle;
( ((function(TextEditorCursorBlinkingStyle) {
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Hidden"] = 0] = "Hidden";
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Blink"] = 1] = "Blink";
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Smooth"] = 2] = "Smooth";
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Phase"] = 3] = "Phase";
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Expand"] = 4] = "Expand";
    TextEditorCursorBlinkingStyle[TextEditorCursorBlinkingStyle["Solid"] = 5] = "Solid";
})(TextEditorCursorBlinkingStyle || (TextEditorCursorBlinkingStyle = {}))));
function _cursorBlinkingStyleFromString(cursorBlinkingStyle) {
    switch (cursorBlinkingStyle) {
        case 'blink': return TextEditorCursorBlinkingStyle.Blink;
        case 'smooth': return TextEditorCursorBlinkingStyle.Smooth;
        case 'phase': return TextEditorCursorBlinkingStyle.Phase;
        case 'expand': return TextEditorCursorBlinkingStyle.Expand;
        case 'solid': return TextEditorCursorBlinkingStyle.Solid;
    }
}
var TextEditorCursorStyle;
( ((function(TextEditorCursorStyle) {
    TextEditorCursorStyle[TextEditorCursorStyle["Line"] = 1] = "Line";
    TextEditorCursorStyle[TextEditorCursorStyle["Block"] = 2] = "Block";
    TextEditorCursorStyle[TextEditorCursorStyle["Underline"] = 3] = "Underline";
    TextEditorCursorStyle[TextEditorCursorStyle["LineThin"] = 4] = "LineThin";
    TextEditorCursorStyle[TextEditorCursorStyle["BlockOutline"] = 5] = "BlockOutline";
    TextEditorCursorStyle[TextEditorCursorStyle["UnderlineThin"] = 6] = "UnderlineThin";
})(TextEditorCursorStyle || (TextEditorCursorStyle = {}))));
function cursorStyleToString(cursorStyle) {
    switch (cursorStyle) {
        case TextEditorCursorStyle.Line: return 'line';
        case TextEditorCursorStyle.Block: return 'block';
        case TextEditorCursorStyle.Underline: return 'underline';
        case TextEditorCursorStyle.LineThin: return 'line-thin';
        case TextEditorCursorStyle.BlockOutline: return 'block-outline';
        case TextEditorCursorStyle.UnderlineThin: return 'underline-thin';
    }
}
function _cursorStyleFromString(cursorStyle) {
    switch (cursorStyle) {
        case 'line': return TextEditorCursorStyle.Line;
        case 'block': return TextEditorCursorStyle.Block;
        case 'underline': return TextEditorCursorStyle.Underline;
        case 'line-thin': return TextEditorCursorStyle.LineThin;
        case 'block-outline': return TextEditorCursorStyle.BlockOutline;
        case 'underline-thin': return TextEditorCursorStyle.UnderlineThin;
    }
}
class EditorClassName extends ComputedEditorOption {
    constructor() {
        super(EditorOption.editorClassName);
    }
    compute(env, options, _) {
        const classNames = ['monaco-editor'];
        if (options.get(EditorOption.extraEditorClassName)) {
            classNames.push(options.get(EditorOption.extraEditorClassName));
        }
        if (env.extraEditorClassName) {
            classNames.push(env.extraEditorClassName);
        }
        if (options.get(EditorOption.mouseStyle) === 'default') {
            classNames.push('mouse-default');
        }
        else if (options.get(EditorOption.mouseStyle) === 'copy') {
            classNames.push('mouse-copy');
        }
        if (options.get(EditorOption.showUnused)) {
            classNames.push('showUnused');
        }
        if (options.get(EditorOption.showDeprecated)) {
            classNames.push('showDeprecated');
        }
        return classNames.join(' ');
    }
}
class EditorEmptySelectionClipboard extends EditorBooleanOption {
    constructor() {
        super(EditorOption.emptySelectionClipboard, 'emptySelectionClipboard', true, { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            6,
            "Controls whether copying without a selection copies the current line."
        )) });
    }
    compute(env, options, value) {
        return value && env.emptySelectionClipboard;
    }
}
class EditorFind extends BaseEditorOption {
    constructor() {
        const defaults = {
            cursorMoveOnType: true,
            seedSearchStringFromSelection: 'always',
            autoFindInSelection: 'never',
            globalFindClipboard: false,
            addExtraSpaceOnTop: true,
            loop: true
        };
        super(EditorOption.find, 'find', defaults, {
            'editor.find.cursorMoveOnType': {
                type: 'boolean',
                default: defaults.cursorMoveOnType,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    7,
                    "Controls whether the cursor should jump to find matches while typing."
                ))
            },
            'editor.find.seedSearchStringFromSelection': {
                type: 'string',
                enum: ['never', 'always', 'selection'],
                default: defaults.seedSearchStringFromSelection,
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 8, 'Never seed search string from the editor selection.')),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        9,
                        'Always seed search string from the editor selection, including word at cursor position.'
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 10, 'Only seed search string from the editor selection.'))
                ],
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    11,
                    "Controls whether the search string in the Find Widget is seeded from the editor selection."
                ))
            },
            'editor.find.autoFindInSelection': {
                type: 'string',
                enum: ['never', 'always', 'multiline'],
                default: defaults.autoFindInSelection,
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 12, 'Never turn on Find in Selection automatically (default).')),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 13, 'Always turn on Find in Selection automatically.')),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        14,
                        'Turn on Find in Selection automatically when multiple lines of content are selected.'
                    ))
                ],
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    15,
                    "Controls the condition for turning on Find in Selection automatically."
                ))
            },
            'editor.find.globalFindClipboard': {
                type: 'boolean',
                default: defaults.globalFindClipboard,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    16,
                    "Controls whether the Find Widget should read or modify the shared find clipboard on macOS."
                )),
                included: _base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isMacintosh
            },
            'editor.find.addExtraSpaceOnTop': {
                type: 'boolean',
                default: defaults.addExtraSpaceOnTop,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    17,
                    "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible."
                ))
            },
            'editor.find.loop': {
                type: 'boolean',
                default: defaults.loop,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    18,
                    "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found."
                ))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            cursorMoveOnType: boolean(input.cursorMoveOnType, this.defaultValue.cursorMoveOnType),
            seedSearchStringFromSelection: typeof _input.seedSearchStringFromSelection === 'boolean'
                ? (_input.seedSearchStringFromSelection ? 'always' : 'never')
                : stringSet(input.seedSearchStringFromSelection, this.defaultValue.seedSearchStringFromSelection, ['never', 'always', 'selection']),
            autoFindInSelection: typeof _input.autoFindInSelection === 'boolean'
                ? (_input.autoFindInSelection ? 'always' : 'never')
                : stringSet(input.autoFindInSelection, this.defaultValue.autoFindInSelection, ['never', 'always', 'multiline']),
            globalFindClipboard: boolean(input.globalFindClipboard, this.defaultValue.globalFindClipboard),
            addExtraSpaceOnTop: boolean(input.addExtraSpaceOnTop, this.defaultValue.addExtraSpaceOnTop),
            loop: boolean(input.loop, this.defaultValue.loop),
        };
    }
}
class EditorFontLigatures extends BaseEditorOption {
    static { this.OFF = '"liga" off, "calt" off'; }
    static { this.ON = '"liga" on, "calt" on'; }
    constructor() {
        super(EditorOption.fontLigatures, 'fontLigatures', EditorFontLigatures.OFF, {
            anyOf: [
                {
                    type: 'boolean',
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        19,
                        "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."
                    )),
                },
                {
                    type: 'string',
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        20,
                        "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures."
                    ))
                }
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                21,
                "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property."
            )),
            default: false
        });
    }
    validate(input) {
        if (typeof input === 'undefined') {
            return this.defaultValue;
        }
        if (typeof input === 'string') {
            if (input === 'false' || input.length === 0) {
                return EditorFontLigatures.OFF;
            }
            if (input === 'true') {
                return EditorFontLigatures.ON;
            }
            return input;
        }
        if (Boolean(input)) {
            return EditorFontLigatures.ON;
        }
        return EditorFontLigatures.OFF;
    }
}
class EditorFontVariations extends BaseEditorOption {
    static { this.OFF = 'normal'; }
    static { this.TRANSLATE = 'translate'; }
    constructor() {
        super(EditorOption.fontVariations, 'fontVariations', EditorFontVariations.OFF, {
            anyOf: [
                {
                    type: 'boolean',
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        22,
                        "Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property."
                    )),
                },
                {
                    type: 'string',
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        23,
                        "Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings."
                    ))
                }
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                24,
                "Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property."
            )),
            default: false
        });
    }
    validate(input) {
        if (typeof input === 'undefined') {
            return this.defaultValue;
        }
        if (typeof input === 'string') {
            if (input === 'false') {
                return EditorFontVariations.OFF;
            }
            if (input === 'true') {
                return EditorFontVariations.TRANSLATE;
            }
            return input;
        }
        if (Boolean(input)) {
            return EditorFontVariations.TRANSLATE;
        }
        return EditorFontVariations.OFF;
    }
    compute(env, options, value) {
        return env.fontInfo.fontVariationSettings;
    }
}
class EditorFontInfo extends ComputedEditorOption {
    constructor() {
        super(EditorOption.fontInfo);
    }
    compute(env, options, _) {
        return env.fontInfo;
    }
}
class EditorFontSize extends SimpleEditorOption {
    constructor() {
        super(EditorOption.fontSize, 'fontSize', EDITOR_FONT_DEFAULTS.fontSize, {
            type: 'number',
            minimum: 6,
            maximum: 100,
            default: EDITOR_FONT_DEFAULTS.fontSize,
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 25, "Controls the font size in pixels."))
        });
    }
    validate(input) {
        const r = EditorFloatOption.float(input, this.defaultValue);
        if (r === 0) {
            return EDITOR_FONT_DEFAULTS.fontSize;
        }
        return EditorFloatOption.clamp(r, 6, 100);
    }
    compute(env, options, value) {
        return env.fontInfo.fontSize;
    }
}
class EditorFontWeight extends BaseEditorOption {
    static { this.SUGGESTION_VALUES = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']; }
    static { this.MINIMUM_VALUE = 1; }
    static { this.MAXIMUM_VALUE = 1000; }
    constructor() {
        super(EditorOption.fontWeight, 'fontWeight', EDITOR_FONT_DEFAULTS.fontWeight, {
            anyOf: [
                {
                    type: 'number',
                    minimum: EditorFontWeight.MINIMUM_VALUE,
                    maximum: EditorFontWeight.MAXIMUM_VALUE,
                    errorMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        26,
                        "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
                    ))
                },
                {
                    type: 'string',
                    pattern: '^(normal|bold|1000|[1-9][0-9]{0,2})$'
                },
                {
                    enum: EditorFontWeight.SUGGESTION_VALUES
                }
            ],
            default: EDITOR_FONT_DEFAULTS.fontWeight,
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                27,
                "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000."
            ))
        });
    }
    validate(input) {
        if (input === 'normal' || input === 'bold') {
            return input;
        }
        return String(EditorIntOption.clampedInt(input, EDITOR_FONT_DEFAULTS.fontWeight, EditorFontWeight.MINIMUM_VALUE, EditorFontWeight.MAXIMUM_VALUE));
    }
}
class EditorGoToLocation extends BaseEditorOption {
    constructor() {
        const defaults = {
            multiple: 'peek',
            multipleDefinitions: 'peek',
            multipleTypeDefinitions: 'peek',
            multipleDeclarations: 'peek',
            multipleImplementations: 'peek',
            multipleReferences: 'peek',
            alternativeDefinitionCommand: 'editor.action.goToReferences',
            alternativeTypeDefinitionCommand: 'editor.action.goToReferences',
            alternativeDeclarationCommand: 'editor.action.goToReferences',
            alternativeImplementationCommand: '',
            alternativeReferenceCommand: '',
        };
        const jsonSubset = {
            type: 'string',
            enum: ['peek', 'gotoAndPeek', 'goto'],
            default: defaults.multiple,
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 28, 'Show Peek view of the results (default)')),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 29, 'Go to the primary result and show a Peek view')),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    30,
                    'Go to the primary result and enable Peek-less navigation to others'
                ))
            ]
        };
        const alternativeCommandOptions = ['', 'editor.action.referenceSearch.trigger', 'editor.action.goToReferences', 'editor.action.peekImplementation', 'editor.action.goToImplementation', 'editor.action.peekTypeDefinition', 'editor.action.goToTypeDefinition', 'editor.action.peekDeclaration', 'editor.action.revealDeclaration', 'editor.action.peekDefinition', 'editor.action.revealDefinitionAside', 'editor.action.revealDefinition'];
        super(EditorOption.gotoLocation, 'gotoLocation', defaults, {
            'editor.gotoLocation.multiple': {
                deprecationMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    31,
                    "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead."
                )),
            },
            'editor.gotoLocation.multipleDefinitions': {
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    32,
                    "Controls the behavior the 'Go to Definition'-command when multiple target locations exist."
                )),
                ...jsonSubset,
            },
            'editor.gotoLocation.multipleTypeDefinitions': {
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    33,
                    "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist."
                )),
                ...jsonSubset,
            },
            'editor.gotoLocation.multipleDeclarations': {
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    34,
                    "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist."
                )),
                ...jsonSubset,
            },
            'editor.gotoLocation.multipleImplementations': {
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    35,
                    "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist."
                )),
                ...jsonSubset,
            },
            'editor.gotoLocation.multipleReferences': {
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    36,
                    "Controls the behavior the 'Go to References'-command when multiple target locations exist."
                )),
                ...jsonSubset,
            },
            'editor.gotoLocation.alternativeDefinitionCommand': {
                type: 'string',
                default: defaults.alternativeDefinitionCommand,
                enum: alternativeCommandOptions,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    37,
                    "Alternative command id that is being executed when the result of 'Go to Definition' is the current location."
                ))
            },
            'editor.gotoLocation.alternativeTypeDefinitionCommand': {
                type: 'string',
                default: defaults.alternativeTypeDefinitionCommand,
                enum: alternativeCommandOptions,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    38,
                    "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location."
                ))
            },
            'editor.gotoLocation.alternativeDeclarationCommand': {
                type: 'string',
                default: defaults.alternativeDeclarationCommand,
                enum: alternativeCommandOptions,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    39,
                    "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location."
                ))
            },
            'editor.gotoLocation.alternativeImplementationCommand': {
                type: 'string',
                default: defaults.alternativeImplementationCommand,
                enum: alternativeCommandOptions,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    40,
                    "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location."
                ))
            },
            'editor.gotoLocation.alternativeReferenceCommand': {
                type: 'string',
                default: defaults.alternativeReferenceCommand,
                enum: alternativeCommandOptions,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    41,
                    "Alternative command id that is being executed when the result of 'Go to Reference' is the current location."
                ))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            multiple: stringSet(input.multiple, this.defaultValue.multiple, ['peek', 'gotoAndPeek', 'goto']),
            multipleDefinitions: input.multipleDefinitions ?? stringSet(input.multipleDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),
            multipleTypeDefinitions: input.multipleTypeDefinitions ?? stringSet(input.multipleTypeDefinitions, 'peek', ['peek', 'gotoAndPeek', 'goto']),
            multipleDeclarations: input.multipleDeclarations ?? stringSet(input.multipleDeclarations, 'peek', ['peek', 'gotoAndPeek', 'goto']),
            multipleImplementations: input.multipleImplementations ?? stringSet(input.multipleImplementations, 'peek', ['peek', 'gotoAndPeek', 'goto']),
            multipleReferences: input.multipleReferences ?? stringSet(input.multipleReferences, 'peek', ['peek', 'gotoAndPeek', 'goto']),
            alternativeDefinitionCommand: EditorStringOption.string(input.alternativeDefinitionCommand, this.defaultValue.alternativeDefinitionCommand),
            alternativeTypeDefinitionCommand: EditorStringOption.string(input.alternativeTypeDefinitionCommand, this.defaultValue.alternativeTypeDefinitionCommand),
            alternativeDeclarationCommand: EditorStringOption.string(input.alternativeDeclarationCommand, this.defaultValue.alternativeDeclarationCommand),
            alternativeImplementationCommand: EditorStringOption.string(input.alternativeImplementationCommand, this.defaultValue.alternativeImplementationCommand),
            alternativeReferenceCommand: EditorStringOption.string(input.alternativeReferenceCommand, this.defaultValue.alternativeReferenceCommand),
        };
    }
}
class EditorHover extends BaseEditorOption {
    constructor() {
        const defaults = {
            enabled: true,
            delay: 300,
            hidingDelay: 300,
            sticky: true,
            above: true,
        };
        super(EditorOption.hover, 'hover', defaults, {
            'editor.hover.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 42, "Controls whether the hover is shown."))
            },
            'editor.hover.delay': {
                type: 'number',
                default: defaults.delay,
                minimum: 0,
                maximum: 10000,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    43,
                    "Controls the delay in milliseconds after which the hover is shown."
                ))
            },
            'editor.hover.sticky': {
                type: 'boolean',
                default: defaults.sticky,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    44,
                    "Controls whether the hover should remain visible when mouse is moved over it."
                ))
            },
            'editor.hover.hidingDelay': {
                type: 'integer',
                minimum: 0,
                default: defaults.hidingDelay,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    45,
                    "Controls the delay in milliseconds after which the hover is hidden. Requires `editor.hover.sticky` to be enabled."
                ))
            },
            'editor.hover.above': {
                type: 'boolean',
                default: defaults.above,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 46, "Prefer showing hovers above the line, if there's space."))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            delay: EditorIntOption.clampedInt(input.delay, this.defaultValue.delay, 0, 10000),
            sticky: boolean(input.sticky, this.defaultValue.sticky),
            hidingDelay: EditorIntOption.clampedInt(input.hidingDelay, this.defaultValue.hidingDelay, 0, 600000),
            above: boolean(input.above, this.defaultValue.above),
        };
    }
}
var RenderMinimap;
( ((function(RenderMinimap) {
    RenderMinimap[RenderMinimap["None"] = 0] = "None";
    RenderMinimap[RenderMinimap["Text"] = 1] = "Text";
    RenderMinimap[RenderMinimap["Blocks"] = 2] = "Blocks";
})(RenderMinimap || (RenderMinimap = {}))));
class EditorLayoutInfoComputer extends ComputedEditorOption {
    constructor() {
        super(EditorOption.layoutInfo);
    }
    compute(env, options, _) {
        return EditorLayoutInfoComputer.computeLayout(options, {
            memory: env.memory,
            outerWidth: env.outerWidth,
            outerHeight: env.outerHeight,
            isDominatedByLongLines: env.isDominatedByLongLines,
            lineHeight: env.fontInfo.lineHeight,
            viewLineCount: env.viewLineCount,
            lineNumbersDigitCount: env.lineNumbersDigitCount,
            typicalHalfwidthCharacterWidth: env.fontInfo.typicalHalfwidthCharacterWidth,
            maxDigitWidth: env.fontInfo.maxDigitWidth,
            pixelRatio: env.pixelRatio,
            glyphMarginDecorationLaneCount: env.glyphMarginDecorationLaneCount
        });
    }
    static computeContainedMinimapLineCount(input) {
        const typicalViewportLineCount = input.height / input.lineHeight;
        const extraLinesBeforeFirstLine = Math.floor(input.paddingTop / input.lineHeight);
        let extraLinesBeyondLastLine = Math.floor(input.paddingBottom / input.lineHeight);
        if (input.scrollBeyondLastLine) {
            extraLinesBeyondLastLine = Math.max(extraLinesBeyondLastLine, typicalViewportLineCount - 1);
        }
        const desiredRatio = (extraLinesBeforeFirstLine + input.viewLineCount + extraLinesBeyondLastLine) / (input.pixelRatio * input.height);
        const minimapLineCount = Math.floor(input.viewLineCount / desiredRatio);
        return { typicalViewportLineCount, extraLinesBeforeFirstLine, extraLinesBeyondLastLine, desiredRatio, minimapLineCount };
    }
    static _computeMinimapLayout(input, memory) {
        const outerWidth = input.outerWidth;
        const outerHeight = input.outerHeight;
        const pixelRatio = input.pixelRatio;
        if (!input.minimap.enabled) {
            return {
                renderMinimap: RenderMinimap.None,
                minimapLeft: 0,
                minimapWidth: 0,
                minimapHeightIsEditorHeight: false,
                minimapIsSampling: false,
                minimapScale: 1,
                minimapLineHeight: 1,
                minimapCanvasInnerWidth: 0,
                minimapCanvasInnerHeight: Math.floor(pixelRatio * outerHeight),
                minimapCanvasOuterWidth: 0,
                minimapCanvasOuterHeight: outerHeight,
            };
        }
        const stableMinimapLayoutInput = memory.stableMinimapLayoutInput;
        const couldUseMemory = (stableMinimapLayoutInput
            && input.outerHeight === stableMinimapLayoutInput.outerHeight
            && input.lineHeight === stableMinimapLayoutInput.lineHeight
            && input.typicalHalfwidthCharacterWidth === stableMinimapLayoutInput.typicalHalfwidthCharacterWidth
            && input.pixelRatio === stableMinimapLayoutInput.pixelRatio
            && input.scrollBeyondLastLine === stableMinimapLayoutInput.scrollBeyondLastLine
            && input.paddingTop === stableMinimapLayoutInput.paddingTop
            && input.paddingBottom === stableMinimapLayoutInput.paddingBottom
            && input.minimap.enabled === stableMinimapLayoutInput.minimap.enabled
            && input.minimap.side === stableMinimapLayoutInput.minimap.side
            && input.minimap.size === stableMinimapLayoutInput.minimap.size
            && input.minimap.showSlider === stableMinimapLayoutInput.minimap.showSlider
            && input.minimap.renderCharacters === stableMinimapLayoutInput.minimap.renderCharacters
            && input.minimap.maxColumn === stableMinimapLayoutInput.minimap.maxColumn
            && input.minimap.scale === stableMinimapLayoutInput.minimap.scale
            && input.verticalScrollbarWidth === stableMinimapLayoutInput.verticalScrollbarWidth
            && input.isViewportWrapping === stableMinimapLayoutInput.isViewportWrapping);
        const lineHeight = input.lineHeight;
        const typicalHalfwidthCharacterWidth = input.typicalHalfwidthCharacterWidth;
        const scrollBeyondLastLine = input.scrollBeyondLastLine;
        const minimapRenderCharacters = input.minimap.renderCharacters;
        let minimapScale = (pixelRatio >= 2 ? Math.round(input.minimap.scale * 2) : input.minimap.scale);
        const minimapMaxColumn = input.minimap.maxColumn;
        const minimapSize = input.minimap.size;
        const minimapSide = input.minimap.side;
        const verticalScrollbarWidth = input.verticalScrollbarWidth;
        const viewLineCount = input.viewLineCount;
        const remainingWidth = input.remainingWidth;
        const isViewportWrapping = input.isViewportWrapping;
        const baseCharHeight = minimapRenderCharacters ? 2 : 3;
        let minimapCanvasInnerHeight = Math.floor(pixelRatio * outerHeight);
        const minimapCanvasOuterHeight = minimapCanvasInnerHeight / pixelRatio;
        let minimapHeightIsEditorHeight = false;
        let minimapIsSampling = false;
        let minimapLineHeight = baseCharHeight * minimapScale;
        let minimapCharWidth = minimapScale / pixelRatio;
        let minimapWidthMultiplier = 1;
        if (minimapSize === 'fill' || minimapSize === 'fit') {
            const { typicalViewportLineCount, extraLinesBeforeFirstLine, extraLinesBeyondLastLine, desiredRatio, minimapLineCount } = EditorLayoutInfoComputer.computeContainedMinimapLineCount({
                viewLineCount: viewLineCount,
                scrollBeyondLastLine: scrollBeyondLastLine,
                paddingTop: input.paddingTop,
                paddingBottom: input.paddingBottom,
                height: outerHeight,
                lineHeight: lineHeight,
                pixelRatio: pixelRatio
            });
            const ratio = viewLineCount / minimapLineCount;
            if (ratio > 1) {
                minimapHeightIsEditorHeight = true;
                minimapIsSampling = true;
                minimapScale = 1;
                minimapLineHeight = 1;
                minimapCharWidth = minimapScale / pixelRatio;
            }
            else {
                let fitBecomesFill = false;
                let maxMinimapScale = minimapScale + 1;
                if (minimapSize === 'fit') {
                    const effectiveMinimapHeight = Math.ceil((extraLinesBeforeFirstLine + viewLineCount + extraLinesBeyondLastLine) * minimapLineHeight);
                    if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {
                        fitBecomesFill = true;
                        maxMinimapScale = memory.stableFitMaxMinimapScale;
                    }
                    else {
                        fitBecomesFill = (effectiveMinimapHeight > minimapCanvasInnerHeight);
                    }
                }
                if (minimapSize === 'fill' || fitBecomesFill) {
                    minimapHeightIsEditorHeight = true;
                    const configuredMinimapScale = minimapScale;
                    minimapLineHeight = Math.min(lineHeight * pixelRatio, Math.max(1, Math.floor(1 / desiredRatio)));
                    if (isViewportWrapping && couldUseMemory && remainingWidth <= memory.stableFitRemainingWidth) {
                        maxMinimapScale = memory.stableFitMaxMinimapScale;
                    }
                    minimapScale = Math.min(maxMinimapScale, Math.max(1, Math.floor(minimapLineHeight / baseCharHeight)));
                    if (minimapScale > configuredMinimapScale) {
                        minimapWidthMultiplier = Math.min(2, minimapScale / configuredMinimapScale);
                    }
                    minimapCharWidth = minimapScale / pixelRatio / minimapWidthMultiplier;
                    minimapCanvasInnerHeight = Math.ceil((Math.max(typicalViewportLineCount, extraLinesBeforeFirstLine + viewLineCount + extraLinesBeyondLastLine)) * minimapLineHeight);
                    if (isViewportWrapping) {
                        memory.stableMinimapLayoutInput = input;
                        memory.stableFitRemainingWidth = remainingWidth;
                        memory.stableFitMaxMinimapScale = minimapScale;
                    }
                    else {
                        memory.stableMinimapLayoutInput = null;
                        memory.stableFitRemainingWidth = 0;
                    }
                }
            }
        }
        const minimapMaxWidth = Math.floor(minimapMaxColumn * minimapCharWidth);
        const minimapWidth = Math.min(minimapMaxWidth, Math.max(0, Math.floor(((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth))) + MINIMAP_GUTTER_WIDTH);
        let minimapCanvasInnerWidth = Math.floor(pixelRatio * minimapWidth);
        const minimapCanvasOuterWidth = minimapCanvasInnerWidth / pixelRatio;
        minimapCanvasInnerWidth = Math.floor(minimapCanvasInnerWidth * minimapWidthMultiplier);
        const renderMinimap = (minimapRenderCharacters ? RenderMinimap.Text : RenderMinimap.Blocks);
        const minimapLeft = (minimapSide === 'left' ? 0 : (outerWidth - minimapWidth - verticalScrollbarWidth));
        return {
            renderMinimap,
            minimapLeft,
            minimapWidth,
            minimapHeightIsEditorHeight,
            minimapIsSampling,
            minimapScale,
            minimapLineHeight,
            minimapCanvasInnerWidth,
            minimapCanvasInnerHeight,
            minimapCanvasOuterWidth,
            minimapCanvasOuterHeight,
        };
    }
    static computeLayout(options, env) {
        const outerWidth = env.outerWidth | 0;
        const outerHeight = env.outerHeight | 0;
        const lineHeight = env.lineHeight | 0;
        const lineNumbersDigitCount = env.lineNumbersDigitCount | 0;
        const typicalHalfwidthCharacterWidth = env.typicalHalfwidthCharacterWidth;
        const maxDigitWidth = env.maxDigitWidth;
        const pixelRatio = env.pixelRatio;
        const viewLineCount = env.viewLineCount;
        const wordWrapOverride2 = options.get(EditorOption.wordWrapOverride2);
        const wordWrapOverride1 = (wordWrapOverride2 === 'inherit' ? options.get(EditorOption.wordWrapOverride1) : wordWrapOverride2);
        const wordWrap = (wordWrapOverride1 === 'inherit' ? options.get(EditorOption.wordWrap) : wordWrapOverride1);
        const wordWrapColumn = options.get(EditorOption.wordWrapColumn);
        const isDominatedByLongLines = env.isDominatedByLongLines;
        const showGlyphMargin = options.get(EditorOption.glyphMargin);
        const showLineNumbers = (options.get(EditorOption.lineNumbers).renderType !== RenderLineNumbersType.Off);
        const lineNumbersMinChars = options.get(EditorOption.lineNumbersMinChars);
        const scrollBeyondLastLine = options.get(EditorOption.scrollBeyondLastLine);
        const padding = options.get(EditorOption.padding);
        const minimap = options.get(EditorOption.minimap);
        const scrollbar = options.get(EditorOption.scrollbar);
        const verticalScrollbarWidth = scrollbar.verticalScrollbarSize;
        const verticalScrollbarHasArrows = scrollbar.verticalHasArrows;
        const scrollbarArrowSize = scrollbar.arrowSize;
        const horizontalScrollbarHeight = scrollbar.horizontalScrollbarSize;
        const folding = options.get(EditorOption.folding);
        const showFoldingDecoration = options.get(EditorOption.showFoldingControls) !== 'never';
        let lineDecorationsWidth = options.get(EditorOption.lineDecorationsWidth);
        if (folding && showFoldingDecoration) {
            lineDecorationsWidth += 16;
        }
        let lineNumbersWidth = 0;
        if (showLineNumbers) {
            const digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);
            lineNumbersWidth = Math.round(digitCount * maxDigitWidth);
        }
        let glyphMarginWidth = 0;
        if (showGlyphMargin) {
            glyphMarginWidth = lineHeight * env.glyphMarginDecorationLaneCount;
        }
        let glyphMarginLeft = 0;
        let lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;
        let decorationsLeft = lineNumbersLeft + lineNumbersWidth;
        let contentLeft = decorationsLeft + lineDecorationsWidth;
        const remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;
        let isWordWrapMinified = false;
        let isViewportWrapping = false;
        let wrappingColumn = -1;
        if (wordWrapOverride1 === 'inherit' && isDominatedByLongLines) {
            isWordWrapMinified = true;
            isViewportWrapping = true;
        }
        else if (wordWrap === 'on' || wordWrap === 'bounded') {
            isViewportWrapping = true;
        }
        else if (wordWrap === 'wordWrapColumn') {
            wrappingColumn = wordWrapColumn;
        }
        const minimapLayout = EditorLayoutInfoComputer._computeMinimapLayout({
            outerWidth: outerWidth,
            outerHeight: outerHeight,
            lineHeight: lineHeight,
            typicalHalfwidthCharacterWidth: typicalHalfwidthCharacterWidth,
            pixelRatio: pixelRatio,
            scrollBeyondLastLine: scrollBeyondLastLine,
            paddingTop: padding.top,
            paddingBottom: padding.bottom,
            minimap: minimap,
            verticalScrollbarWidth: verticalScrollbarWidth,
            viewLineCount: viewLineCount,
            remainingWidth: remainingWidth,
            isViewportWrapping: isViewportWrapping,
        }, env.memory || ( (new ComputeOptionsMemory())));
        if (minimapLayout.renderMinimap !== RenderMinimap.None && minimapLayout.minimapLeft === 0) {
            glyphMarginLeft += minimapLayout.minimapWidth;
            lineNumbersLeft += minimapLayout.minimapWidth;
            decorationsLeft += minimapLayout.minimapWidth;
            contentLeft += minimapLayout.minimapWidth;
        }
        const contentWidth = remainingWidth - minimapLayout.minimapWidth;
        const viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth));
        const verticalArrowSize = (verticalScrollbarHasArrows ? scrollbarArrowSize : 0);
        if (isViewportWrapping) {
            wrappingColumn = Math.max(1, viewportColumn);
            if (wordWrap === 'bounded') {
                wrappingColumn = Math.min(wrappingColumn, wordWrapColumn);
            }
        }
        return {
            width: outerWidth,
            height: outerHeight,
            glyphMarginLeft: glyphMarginLeft,
            glyphMarginWidth: glyphMarginWidth,
            glyphMarginDecorationLaneCount: env.glyphMarginDecorationLaneCount,
            lineNumbersLeft: lineNumbersLeft,
            lineNumbersWidth: lineNumbersWidth,
            decorationsLeft: decorationsLeft,
            decorationsWidth: lineDecorationsWidth,
            contentLeft: contentLeft,
            contentWidth: contentWidth,
            minimap: minimapLayout,
            viewportColumn: viewportColumn,
            isWordWrapMinified: isWordWrapMinified,
            isViewportWrapping: isViewportWrapping,
            wrappingColumn: wrappingColumn,
            verticalScrollbarWidth: verticalScrollbarWidth,
            horizontalScrollbarHeight: horizontalScrollbarHeight,
            overviewRuler: {
                top: verticalArrowSize,
                width: verticalScrollbarWidth,
                height: (outerHeight - 2 * verticalArrowSize),
                right: 0
            }
        };
    }
}
class WrappingStrategy extends BaseEditorOption {
    constructor() {
        super(EditorOption.wrappingStrategy, 'wrappingStrategy', 'simple', {
            'editor.wrappingStrategy': {
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        47,
                        "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        48,
                        "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases."
                    ))
                ],
                type: 'string',
                enum: ['simple', 'advanced'],
                default: 'simple',
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    49,
                    "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience."
                ))
            }
        });
    }
    validate(input) {
        return stringSet(input, 'simple', ['simple', 'advanced']);
    }
    compute(env, options, value) {
        const accessibilitySupport = options.get(EditorOption.accessibilitySupport);
        if (accessibilitySupport === _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__.AccessibilitySupport.Enabled) {
            return 'advanced';
        }
        return value;
    }
}
var ShowLightbulbIconMode;
( ((function(ShowLightbulbIconMode) {
    ShowLightbulbIconMode["Off"] = "off";
    ShowLightbulbIconMode["OnCode"] = "onCode";
    ShowLightbulbIconMode["On"] = "on";
})(ShowLightbulbIconMode || (ShowLightbulbIconMode = {}))));
class EditorLightbulb extends BaseEditorOption {
    constructor() {
        const defaults = { enabled: ShowLightbulbIconMode.On };
        super(EditorOption.lightbulb, 'lightbulb', defaults, {
            'editor.lightbulb.enabled': {
                type: 'string',
                tags: ['experimental'],
                enum: [ShowLightbulbIconMode.Off, ShowLightbulbIconMode.OnCode, ShowLightbulbIconMode.On],
                default: defaults.enabled,
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 50, 'Disable the code action menu.')),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        51,
                        'Show the code action menu when the cursor is on lines with code.'
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        52,
                        'Show the code action menu when the cursor is on lines with code or on empty lines.'
                    )),
                ],
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 53, "Enables the Code Action lightbulb in the editor."))
            }
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: stringSet(input.enabled, this.defaultValue.enabled, [ShowLightbulbIconMode.Off, ShowLightbulbIconMode.OnCode, ShowLightbulbIconMode.On])
        };
    }
}
class EditorStickyScroll extends BaseEditorOption {
    constructor() {
        const defaults = { enabled: true, maxLineCount: 5, defaultModel: 'outlineModel', scrollWithEditor: true };
        super(EditorOption.stickyScroll, 'stickyScroll', defaults, {
            'editor.stickyScroll.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    54,
                    "Shows the nested current scopes during the scroll at the top of the editor."
                )),
                tags: ['experimental']
            },
            'editor.stickyScroll.maxLineCount': {
                type: 'number',
                default: defaults.maxLineCount,
                minimum: 1,
                maximum: 20,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 55, "Defines the maximum number of sticky lines to show."))
            },
            'editor.stickyScroll.defaultModel': {
                type: 'string',
                enum: ['outlineModel', 'foldingProviderModel', 'indentationModel'],
                default: defaults.defaultModel,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    56,
                    "Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases."
                ))
            },
            'editor.stickyScroll.scrollWithEditor': {
                type: 'boolean',
                default: defaults.scrollWithEditor,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    57,
                    "Enable scrolling of Sticky Scroll with the editor's horizontal scrollbar."
                ))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            maxLineCount: EditorIntOption.clampedInt(input.maxLineCount, this.defaultValue.maxLineCount, 1, 20),
            defaultModel: stringSet(input.defaultModel, this.defaultValue.defaultModel, ['outlineModel', 'foldingProviderModel', 'indentationModel']),
            scrollWithEditor: boolean(input.scrollWithEditor, this.defaultValue.scrollWithEditor)
        };
    }
}
class EditorInlayHints extends BaseEditorOption {
    constructor() {
        const defaults = { enabled: 'on', fontSize: 0, fontFamily: '', padding: false };
        super(EditorOption.inlayHints, 'inlayHints', defaults, {
            'editor.inlayHints.enabled': {
                type: 'string',
                default: defaults.enabled,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 58, "Enables the inlay hints in the editor.")),
                enum: ['on', 'onUnlessPressed', 'offUnlessPressed', 'off'],
                markdownEnumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 59, "Inlay hints are enabled")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        60,
                        "Inlay hints are showing by default and hide when holding {0}",
                        _base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        61,
                        "Inlay hints are hidden by default and show when holding {0}",
                        _base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isMacintosh ? `Ctrl+Option` : `Ctrl+Alt`
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 62, "Inlay hints are disabled")),
                ],
            },
            'editor.inlayHints.fontSize': {
                type: 'number',
                default: defaults.fontSize,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    63,
                    "Controls font size of inlay hints in the editor. As default the {0} is used when the configured value is less than {1} or greater than the editor font size.",
                    '`#editor.fontSize#`',
                    '`5`'
                ))
            },
            'editor.inlayHints.fontFamily': {
                type: 'string',
                default: defaults.fontFamily,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    64,
                    "Controls font family of inlay hints in the editor. When set to empty, the {0} is used.",
                    '`#editor.fontFamily#`'
                ))
            },
            'editor.inlayHints.padding': {
                type: 'boolean',
                default: defaults.padding,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 65, "Enables the padding around the inlay hints in the editor."))
            }
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        if (typeof input.enabled === 'boolean') {
            input.enabled = input.enabled ? 'on' : 'off';
        }
        return {
            enabled: stringSet(input.enabled, this.defaultValue.enabled, ['on', 'off', 'offUnlessPressed', 'onUnlessPressed']),
            fontSize: EditorIntOption.clampedInt(input.fontSize, this.defaultValue.fontSize, 0, 100),
            fontFamily: EditorStringOption.string(input.fontFamily, this.defaultValue.fontFamily),
            padding: boolean(input.padding, this.defaultValue.padding)
        };
    }
}
class EditorLineDecorationsWidth extends BaseEditorOption {
    constructor() {
        super(EditorOption.lineDecorationsWidth, 'lineDecorationsWidth', 10);
    }
    validate(input) {
        if (typeof input === 'string' && /^\d+(\.\d+)?ch$/.test(input)) {
            const multiple = parseFloat(input.substring(0, input.length - 2));
            return -multiple;
        }
        else {
            return EditorIntOption.clampedInt(input, this.defaultValue, 0, 1000);
        }
    }
    compute(env, options, value) {
        if (value < 0) {
            return EditorIntOption.clampedInt(-value * env.fontInfo.typicalHalfwidthCharacterWidth, this.defaultValue, 0, 1000);
        }
        else {
            return value;
        }
    }
}
class EditorLineHeight extends EditorFloatOption {
    constructor() {
        super(EditorOption.lineHeight, 'lineHeight', EDITOR_FONT_DEFAULTS.lineHeight, x => EditorFloatOption.clamp(x, 0, 150), { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            66,
            "Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values."
        )) });
    }
    compute(env, options, value) {
        return env.fontInfo.lineHeight;
    }
}
class EditorMinimap extends BaseEditorOption {
    constructor() {
        const defaults = {
            enabled: true,
            size: 'proportional',
            side: 'right',
            showSlider: 'mouseover',
            autohide: false,
            renderCharacters: true,
            maxColumn: 120,
            scale: 1,
            showRegionSectionHeaders: true,
            showMarkSectionHeaders: true,
            sectionHeaderFontSize: 9,
            sectionHeaderLetterSpacing: 1,
        };
        super(EditorOption.minimap, 'minimap', defaults, {
            'editor.minimap.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 67, "Controls whether the minimap is shown."))
            },
            'editor.minimap.autohide': {
                type: 'boolean',
                default: defaults.autohide,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 68, "Controls whether the minimap is hidden automatically."))
            },
            'editor.minimap.size': {
                type: 'string',
                enum: ['proportional', 'fill', 'fit'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        69,
                        "The minimap has the same size as the editor contents (and might scroll)."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        70,
                        "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling)."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        71,
                        "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."
                    )),
                ],
                default: defaults.size,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 72, "Controls the size of the minimap."))
            },
            'editor.minimap.side': {
                type: 'string',
                enum: ['left', 'right'],
                default: defaults.side,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 73, "Controls the side where to render the minimap."))
            },
            'editor.minimap.showSlider': {
                type: 'string',
                enum: ['always', 'mouseover'],
                default: defaults.showSlider,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 74, "Controls when the minimap slider is shown."))
            },
            'editor.minimap.scale': {
                type: 'number',
                default: defaults.scale,
                minimum: 1,
                maximum: 3,
                enum: [1, 2, 3],
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 75, "Scale of content drawn in the minimap: 1, 2 or 3."))
            },
            'editor.minimap.renderCharacters': {
                type: 'boolean',
                default: defaults.renderCharacters,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    76,
                    "Render the actual characters on a line as opposed to color blocks."
                ))
            },
            'editor.minimap.maxColumn': {
                type: 'number',
                default: defaults.maxColumn,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    77,
                    "Limit the width of the minimap to render at most a certain number of columns."
                ))
            },
            'editor.minimap.showRegionSectionHeaders': {
                type: 'boolean',
                default: defaults.showRegionSectionHeaders,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    78,
                    "Controls whether named regions are shown as section headers in the minimap."
                ))
            },
            'editor.minimap.showMarkSectionHeaders': {
                type: 'boolean',
                default: defaults.showMarkSectionHeaders,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    79,
                    "Controls whether MARK: comments are shown as section headers in the minimap."
                ))
            },
            'editor.minimap.sectionHeaderFontSize': {
                type: 'number',
                default: defaults.sectionHeaderFontSize,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 80, "Controls the font size of section headers in the minimap."))
            },
            'editor.minimap.sectionHeaderLetterSpacing': {
                type: 'number',
                default: defaults.sectionHeaderLetterSpacing,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    81,
                    "Controls the amount of space (in pixels) between characters of section header. This helps the readability of the header in small font sizes."
                ))
            }
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            autohide: boolean(input.autohide, this.defaultValue.autohide),
            size: stringSet(input.size, this.defaultValue.size, ['proportional', 'fill', 'fit']),
            side: stringSet(input.side, this.defaultValue.side, ['right', 'left']),
            showSlider: stringSet(input.showSlider, this.defaultValue.showSlider, ['always', 'mouseover']),
            renderCharacters: boolean(input.renderCharacters, this.defaultValue.renderCharacters),
            scale: EditorIntOption.clampedInt(input.scale, 1, 1, 3),
            maxColumn: EditorIntOption.clampedInt(input.maxColumn, this.defaultValue.maxColumn, 1, 10000),
            showRegionSectionHeaders: boolean(input.showRegionSectionHeaders, this.defaultValue.showRegionSectionHeaders),
            showMarkSectionHeaders: boolean(input.showMarkSectionHeaders, this.defaultValue.showMarkSectionHeaders),
            sectionHeaderFontSize: EditorFloatOption.clamp(input.sectionHeaderFontSize ?? this.defaultValue.sectionHeaderFontSize, 4, 32),
            sectionHeaderLetterSpacing: EditorFloatOption.clamp(input.sectionHeaderLetterSpacing ?? this.defaultValue.sectionHeaderLetterSpacing, 0, 5),
        };
    }
}
function _multiCursorModifierFromString(multiCursorModifier) {
    if (multiCursorModifier === 'ctrlCmd') {
        return (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isMacintosh ? 'metaKey' : 'ctrlKey');
    }
    return 'altKey';
}
class EditorPadding extends BaseEditorOption {
    constructor() {
        super(EditorOption.padding, 'padding', { top: 0, bottom: 0 }, {
            'editor.padding.top': {
                type: 'number',
                default: 0,
                minimum: 0,
                maximum: 1000,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    82,
                    "Controls the amount of space between the top edge of the editor and the first line."
                ))
            },
            'editor.padding.bottom': {
                type: 'number',
                default: 0,
                minimum: 0,
                maximum: 1000,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    83,
                    "Controls the amount of space between the bottom edge of the editor and the last line."
                ))
            }
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            top: EditorIntOption.clampedInt(input.top, 0, 0, 1000),
            bottom: EditorIntOption.clampedInt(input.bottom, 0, 0, 1000)
        };
    }
}
class EditorParameterHints extends BaseEditorOption {
    constructor() {
        const defaults = {
            enabled: true,
            cycle: true
        };
        super(EditorOption.parameterHints, 'parameterHints', defaults, {
            'editor.parameterHints.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    84,
                    "Enables a pop-up that shows parameter documentation and type information as you type."
                ))
            },
            'editor.parameterHints.cycle': {
                type: 'boolean',
                default: defaults.cycle,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    85,
                    "Controls whether the parameter hints menu cycles or closes when reaching the end of the list."
                ))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            cycle: boolean(input.cycle, this.defaultValue.cycle)
        };
    }
}
class EditorPixelRatio extends ComputedEditorOption {
    constructor() {
        super(EditorOption.pixelRatio);
    }
    compute(env, options, _) {
        return env.pixelRatio;
    }
}
class PlaceholderOption extends BaseEditorOption {
    constructor() {
        super(EditorOption.placeholder, 'placeholder', undefined);
    }
    validate(input) {
        if (typeof input === 'undefined') {
            return this.defaultValue;
        }
        if (typeof input === 'string') {
            return input;
        }
        return this.defaultValue;
    }
}
class EditorQuickSuggestions extends BaseEditorOption {
    constructor() {
        const defaults = {
            other: 'on',
            comments: 'off',
            strings: 'off'
        };
        const types = [
            { type: 'boolean' },
            {
                type: 'string',
                enum: ['on', 'inline', 'off'],
                enumDescriptions: [( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 86, "Quick suggestions show inside the suggest widget")), ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 87, "Quick suggestions show as ghost text")), ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 88, "Quick suggestions are disabled"))]
            }
        ];
        super(EditorOption.quickSuggestions, 'quickSuggestions', defaults, {
            type: 'object',
            additionalProperties: false,
            properties: {
                strings: {
                    anyOf: types,
                    default: defaults.strings,
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 89, "Enable quick suggestions inside strings."))
                },
                comments: {
                    anyOf: types,
                    default: defaults.comments,
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 90, "Enable quick suggestions inside comments."))
                },
                other: {
                    anyOf: types,
                    default: defaults.other,
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 91, "Enable quick suggestions outside of strings and comments."))
                },
            },
            default: defaults,
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                92,
                "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the {0}-setting which controls if suggestions are triggered by special characters.",
                '`#editor.suggestOnTriggerCharacters#`'
            ))
        });
        this.defaultValue = defaults;
    }
    validate(input) {
        if (typeof input === 'boolean') {
            const value = input ? 'on' : 'off';
            return { comments: value, strings: value, other: value };
        }
        if (!input || typeof input !== 'object') {
            return this.defaultValue;
        }
        const { other, comments, strings } = input;
        const allowedValues = ['on', 'inline', 'off'];
        let validatedOther;
        let validatedComments;
        let validatedStrings;
        if (typeof other === 'boolean') {
            validatedOther = other ? 'on' : 'off';
        }
        else {
            validatedOther = stringSet(other, this.defaultValue.other, allowedValues);
        }
        if (typeof comments === 'boolean') {
            validatedComments = comments ? 'on' : 'off';
        }
        else {
            validatedComments = stringSet(comments, this.defaultValue.comments, allowedValues);
        }
        if (typeof strings === 'boolean') {
            validatedStrings = strings ? 'on' : 'off';
        }
        else {
            validatedStrings = stringSet(strings, this.defaultValue.strings, allowedValues);
        }
        return {
            other: validatedOther,
            comments: validatedComments,
            strings: validatedStrings
        };
    }
}
var RenderLineNumbersType;
( ((function(RenderLineNumbersType) {
    RenderLineNumbersType[RenderLineNumbersType["Off"] = 0] = "Off";
    RenderLineNumbersType[RenderLineNumbersType["On"] = 1] = "On";
    RenderLineNumbersType[RenderLineNumbersType["Relative"] = 2] = "Relative";
    RenderLineNumbersType[RenderLineNumbersType["Interval"] = 3] = "Interval";
    RenderLineNumbersType[RenderLineNumbersType["Custom"] = 4] = "Custom";
})(RenderLineNumbersType || (RenderLineNumbersType = {}))));
class EditorRenderLineNumbersOption extends BaseEditorOption {
    constructor() {
        super(EditorOption.lineNumbers, 'lineNumbers', { renderType: RenderLineNumbersType.On, renderFn: null }, {
            type: 'string',
            enum: ['off', 'on', 'relative', 'interval'],
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 93, "Line numbers are not rendered.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 94, "Line numbers are rendered as absolute number.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    95,
                    "Line numbers are rendered as distance in lines to cursor position."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 96, "Line numbers are rendered every 10 lines."))
            ],
            default: 'on',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 97, "Controls the display of line numbers."))
        });
    }
    validate(lineNumbers) {
        let renderType = this.defaultValue.renderType;
        let renderFn = this.defaultValue.renderFn;
        if (typeof lineNumbers !== 'undefined') {
            if (typeof lineNumbers === 'function') {
                renderType = RenderLineNumbersType.Custom;
                renderFn = lineNumbers;
            }
            else if (lineNumbers === 'interval') {
                renderType = RenderLineNumbersType.Interval;
            }
            else if (lineNumbers === 'relative') {
                renderType = RenderLineNumbersType.Relative;
            }
            else if (lineNumbers === 'on') {
                renderType = RenderLineNumbersType.On;
            }
            else {
                renderType = RenderLineNumbersType.Off;
            }
        }
        return {
            renderType,
            renderFn
        };
    }
}
function filterValidationDecorations(options) {
    const renderValidationDecorations = options.get(EditorOption.renderValidationDecorations);
    if (renderValidationDecorations === 'editable') {
        return options.get(EditorOption.readOnly);
    }
    return renderValidationDecorations === 'on' ? false : true;
}
class EditorRulers extends BaseEditorOption {
    constructor() {
        const defaults = [];
        const columnSchema = { type: 'number', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            98,
            "Number of monospace characters at which this editor ruler will render."
        )) };
        super(EditorOption.rulers, 'rulers', defaults, {
            type: 'array',
            items: {
                anyOf: [
                    columnSchema,
                    {
                        type: [
                            'object'
                        ],
                        properties: {
                            column: columnSchema,
                            color: {
                                type: 'string',
                                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 99, "Color of this editor ruler.")),
                                format: 'color-hex'
                            }
                        }
                    }
                ]
            },
            default: defaults,
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                100,
                "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty."
            ))
        });
    }
    validate(input) {
        if (Array.isArray(input)) {
            const rulers = [];
            for (const _element of input) {
                if (typeof _element === 'number') {
                    rulers.push({
                        column: EditorIntOption.clampedInt(_element, 0, 0, 10000),
                        color: null
                    });
                }
                else if (_element && typeof _element === 'object') {
                    const element = _element;
                    rulers.push({
                        column: EditorIntOption.clampedInt(element.column, 0, 0, 10000),
                        color: element.color
                    });
                }
            }
            rulers.sort((a, b) => a.column - b.column);
            return rulers;
        }
        return this.defaultValue;
    }
}
class ReadonlyMessage extends BaseEditorOption {
    constructor() {
        const defaults = undefined;
        super(EditorOption.readOnlyMessage, 'readOnlyMessage', defaults);
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        return _input;
    }
}
function _scrollbarVisibilityFromString(visibility, defaultValue) {
    if (typeof visibility !== 'string') {
        return defaultValue;
    }
    switch (visibility) {
        case 'hidden': return _base_common_scrollable_js__WEBPACK_IMPORTED_MODULE_3__.ScrollbarVisibility.Hidden;
        case 'visible': return _base_common_scrollable_js__WEBPACK_IMPORTED_MODULE_3__.ScrollbarVisibility.Visible;
        default: return _base_common_scrollable_js__WEBPACK_IMPORTED_MODULE_3__.ScrollbarVisibility.Auto;
    }
}
class EditorScrollbar extends BaseEditorOption {
    constructor() {
        const defaults = {
            vertical: _base_common_scrollable_js__WEBPACK_IMPORTED_MODULE_3__.ScrollbarVisibility.Auto,
            horizontal: _base_common_scrollable_js__WEBPACK_IMPORTED_MODULE_3__.ScrollbarVisibility.Auto,
            arrowSize: 11,
            useShadows: true,
            verticalHasArrows: false,
            horizontalHasArrows: false,
            horizontalScrollbarSize: 12,
            horizontalSliderSize: 12,
            verticalScrollbarSize: 14,
            verticalSliderSize: 14,
            handleMouseWheel: true,
            alwaysConsumeMouseWheel: true,
            scrollByPage: false,
            ignoreHorizontalScrollbarInContentHeight: false,
        };
        super(EditorOption.scrollbar, 'scrollbar', defaults, {
            'editor.scrollbar.vertical': {
                type: 'string',
                enum: ['auto', 'visible', 'hidden'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        101,
                        "The vertical scrollbar will be visible only when necessary."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 102, "The vertical scrollbar will always be visible.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 103, "The vertical scrollbar will always be hidden.")),
                ],
                default: 'auto',
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 104, "Controls the visibility of the vertical scrollbar."))
            },
            'editor.scrollbar.horizontal': {
                type: 'string',
                enum: ['auto', 'visible', 'hidden'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        105,
                        "The horizontal scrollbar will be visible only when necessary."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 106, "The horizontal scrollbar will always be visible.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 107, "The horizontal scrollbar will always be hidden.")),
                ],
                default: 'auto',
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 108, "Controls the visibility of the horizontal scrollbar."))
            },
            'editor.scrollbar.verticalScrollbarSize': {
                type: 'number',
                default: defaults.verticalScrollbarSize,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 109, "The width of the vertical scrollbar."))
            },
            'editor.scrollbar.horizontalScrollbarSize': {
                type: 'number',
                default: defaults.horizontalScrollbarSize,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 110, "The height of the horizontal scrollbar."))
            },
            'editor.scrollbar.scrollByPage': {
                type: 'boolean',
                default: defaults.scrollByPage,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    111,
                    "Controls whether clicks scroll by page or jump to click position."
                ))
            },
            'editor.scrollbar.ignoreHorizontalScrollbarInContentHeight': {
                type: 'boolean',
                default: defaults.ignoreHorizontalScrollbarInContentHeight,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    112,
                    "When set, the horizontal scrollbar will not increase the size of the editor's content."
                ))
            }
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        const horizontalScrollbarSize = EditorIntOption.clampedInt(input.horizontalScrollbarSize, this.defaultValue.horizontalScrollbarSize, 0, 1000);
        const verticalScrollbarSize = EditorIntOption.clampedInt(input.verticalScrollbarSize, this.defaultValue.verticalScrollbarSize, 0, 1000);
        return {
            arrowSize: EditorIntOption.clampedInt(input.arrowSize, this.defaultValue.arrowSize, 0, 1000),
            vertical: _scrollbarVisibilityFromString(input.vertical, this.defaultValue.vertical),
            horizontal: _scrollbarVisibilityFromString(input.horizontal, this.defaultValue.horizontal),
            useShadows: boolean(input.useShadows, this.defaultValue.useShadows),
            verticalHasArrows: boolean(input.verticalHasArrows, this.defaultValue.verticalHasArrows),
            horizontalHasArrows: boolean(input.horizontalHasArrows, this.defaultValue.horizontalHasArrows),
            handleMouseWheel: boolean(input.handleMouseWheel, this.defaultValue.handleMouseWheel),
            alwaysConsumeMouseWheel: boolean(input.alwaysConsumeMouseWheel, this.defaultValue.alwaysConsumeMouseWheel),
            horizontalScrollbarSize: horizontalScrollbarSize,
            horizontalSliderSize: EditorIntOption.clampedInt(input.horizontalSliderSize, horizontalScrollbarSize, 0, 1000),
            verticalScrollbarSize: verticalScrollbarSize,
            verticalSliderSize: EditorIntOption.clampedInt(input.verticalSliderSize, verticalScrollbarSize, 0, 1000),
            scrollByPage: boolean(input.scrollByPage, this.defaultValue.scrollByPage),
            ignoreHorizontalScrollbarInContentHeight: boolean(input.ignoreHorizontalScrollbarInContentHeight, this.defaultValue.ignoreHorizontalScrollbarInContentHeight),
        };
    }
}
const inUntrustedWorkspace = 'inUntrustedWorkspace';
const unicodeHighlightConfigKeys = {
    allowedCharacters: 'editor.unicodeHighlight.allowedCharacters',
    invisibleCharacters: 'editor.unicodeHighlight.invisibleCharacters',
    nonBasicASCII: 'editor.unicodeHighlight.nonBasicASCII',
    ambiguousCharacters: 'editor.unicodeHighlight.ambiguousCharacters',
    includeComments: 'editor.unicodeHighlight.includeComments',
    includeStrings: 'editor.unicodeHighlight.includeStrings',
    allowedLocales: 'editor.unicodeHighlight.allowedLocales',
};
class UnicodeHighlight extends BaseEditorOption {
    constructor() {
        const defaults = {
            nonBasicASCII: inUntrustedWorkspace,
            invisibleCharacters: true,
            ambiguousCharacters: true,
            includeComments: inUntrustedWorkspace,
            includeStrings: true,
            allowedCharacters: {},
            allowedLocales: { _os: true, _vscode: true },
        };
        super(EditorOption.unicodeHighlighting, 'unicodeHighlight', defaults, {
            [unicodeHighlightConfigKeys.nonBasicASCII]: {
                restricted: true,
                type: ['boolean', 'string'],
                enum: [true, false, inUntrustedWorkspace],
                default: defaults.nonBasicASCII,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    113,
                    "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII."
                ))
            },
            [unicodeHighlightConfigKeys.invisibleCharacters]: {
                restricted: true,
                type: 'boolean',
                default: defaults.invisibleCharacters,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    114,
                    "Controls whether characters that just reserve space or have no width at all are highlighted."
                ))
            },
            [unicodeHighlightConfigKeys.ambiguousCharacters]: {
                restricted: true,
                type: 'boolean',
                default: defaults.ambiguousCharacters,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    115,
                    "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale."
                ))
            },
            [unicodeHighlightConfigKeys.includeComments]: {
                restricted: true,
                type: ['boolean', 'string'],
                enum: [true, false, inUntrustedWorkspace],
                default: defaults.includeComments,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    116,
                    "Controls whether characters in comments should also be subject to Unicode highlighting."
                ))
            },
            [unicodeHighlightConfigKeys.includeStrings]: {
                restricted: true,
                type: ['boolean', 'string'],
                enum: [true, false, inUntrustedWorkspace],
                default: defaults.includeStrings,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    117,
                    "Controls whether characters in strings should also be subject to Unicode highlighting."
                ))
            },
            [unicodeHighlightConfigKeys.allowedCharacters]: {
                restricted: true,
                type: 'object',
                default: defaults.allowedCharacters,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    118,
                    "Defines allowed characters that are not being highlighted."
                )),
                additionalProperties: {
                    type: 'boolean'
                }
            },
            [unicodeHighlightConfigKeys.allowedLocales]: {
                restricted: true,
                type: 'object',
                additionalProperties: {
                    type: 'boolean'
                },
                default: defaults.allowedLocales,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    119,
                    "Unicode characters that are common in allowed locales are not being highlighted."
                ))
            },
        });
    }
    applyUpdate(value, update) {
        let didChange = false;
        if (update.allowedCharacters && value) {
            if (!(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.equals)(value.allowedCharacters, update.allowedCharacters)) {
                value = { ...value, allowedCharacters: update.allowedCharacters };
                didChange = true;
            }
        }
        if (update.allowedLocales && value) {
            if (!(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.equals)(value.allowedLocales, update.allowedLocales)) {
                value = { ...value, allowedLocales: update.allowedLocales };
                didChange = true;
            }
        }
        const result = super.applyUpdate(value, update);
        if (didChange) {
            return (
                 (new ApplyUpdateResult(result.newValue, true))
            );
        }
        return result;
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            nonBasicASCII: primitiveSet(input.nonBasicASCII, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),
            invisibleCharacters: boolean(input.invisibleCharacters, this.defaultValue.invisibleCharacters),
            ambiguousCharacters: boolean(input.ambiguousCharacters, this.defaultValue.ambiguousCharacters),
            includeComments: primitiveSet(input.includeComments, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),
            includeStrings: primitiveSet(input.includeStrings, inUntrustedWorkspace, [true, false, inUntrustedWorkspace]),
            allowedCharacters: this.validateBooleanMap(_input.allowedCharacters, this.defaultValue.allowedCharacters),
            allowedLocales: this.validateBooleanMap(_input.allowedLocales, this.defaultValue.allowedLocales),
        };
    }
    validateBooleanMap(map, defaultValue) {
        if ((typeof map !== 'object') || !map) {
            return defaultValue;
        }
        const result = {};
        for (const [key, value] of Object.entries(map)) {
            if (value === true) {
                result[key] = true;
            }
        }
        return result;
    }
}
class InlineEditorSuggest extends BaseEditorOption {
    constructor() {
        const defaults = {
            enabled: true,
            mode: 'subwordSmart',
            showToolbar: 'onHover',
            suppressSuggestions: false,
            keepOnBlur: false,
            fontFamily: 'default'
        };
        super(EditorOption.inlineSuggest, 'inlineSuggest', defaults, {
            'editor.inlineSuggest.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    120,
                    "Controls whether to automatically show inline suggestions in the editor."
                ))
            },
            'editor.inlineSuggest.showToolbar': {
                type: 'string',
                default: defaults.showToolbar,
                enum: ['always', 'onHover', 'never'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        121,
                        "Show the inline suggestion toolbar whenever an inline suggestion is shown."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        122,
                        "Show the inline suggestion toolbar when hovering over an inline suggestion."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 123, "Never show the inline suggestion toolbar.")),
                ],
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 124, "Controls when to show the inline suggestion toolbar.")),
            },
            'editor.inlineSuggest.suppressSuggestions': {
                type: 'boolean',
                default: defaults.suppressSuggestions,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    125,
                    "Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available."
                ))
            },
            'editor.inlineSuggest.fontFamily': {
                type: 'string',
                default: defaults.fontFamily,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 126, "Controls the font family of the inline suggestions."))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            mode: stringSet(input.mode, this.defaultValue.mode, ['prefix', 'subword', 'subwordSmart']),
            showToolbar: stringSet(input.showToolbar, this.defaultValue.showToolbar, ['always', 'onHover', 'never']),
            suppressSuggestions: boolean(input.suppressSuggestions, this.defaultValue.suppressSuggestions),
            keepOnBlur: boolean(input.keepOnBlur, this.defaultValue.keepOnBlur),
            fontFamily: EditorStringOption.string(input.fontFamily, this.defaultValue.fontFamily)
        };
    }
}
class InlineEditorEdit extends BaseEditorOption {
    constructor() {
        const defaults = {
            enabled: false,
            showToolbar: 'onHover',
            fontFamily: 'default',
            keepOnBlur: false,
            backgroundColoring: false,
        };
        super(EditorOption.inlineEdit, 'experimentalInlineEdit', defaults, {
            'editor.experimentalInlineEdit.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 127, "Controls whether to show inline edits in the editor."))
            },
            'editor.experimentalInlineEdit.showToolbar': {
                type: 'string',
                default: defaults.showToolbar,
                enum: ['always', 'onHover', 'never'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        128,
                        "Show the inline edit toolbar whenever an inline suggestion is shown."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        129,
                        "Show the inline edit toolbar when hovering over an inline suggestion."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 130, "Never show the inline edit toolbar.")),
                ],
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 131, "Controls when to show the inline edit toolbar.")),
            },
            'editor.experimentalInlineEdit.fontFamily': {
                type: 'string',
                default: defaults.fontFamily,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 132, "Controls the font family of the inline edit."))
            },
            'editor.experimentalInlineEdit.backgroundColoring': {
                type: 'boolean',
                default: defaults.backgroundColoring,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    133,
                    "Controls whether to color the background of inline edits."
                ))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            showToolbar: stringSet(input.showToolbar, this.defaultValue.showToolbar, ['always', 'onHover', 'never']),
            fontFamily: EditorStringOption.string(input.fontFamily, this.defaultValue.fontFamily),
            keepOnBlur: boolean(input.keepOnBlur, this.defaultValue.keepOnBlur),
            backgroundColoring: boolean(input.backgroundColoring, this.defaultValue.backgroundColoring)
        };
    }
}
class BracketPairColorization extends BaseEditorOption {
    constructor() {
        const defaults = {
            enabled: _core_textModelDefaults_js__WEBPACK_IMPORTED_MODULE_5__.EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions.enabled,
            independentColorPoolPerBracketType: _core_textModelDefaults_js__WEBPACK_IMPORTED_MODULE_5__.EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions.independentColorPoolPerBracketType,
        };
        super(EditorOption.bracketPairColorization, 'bracketPairColorization', defaults, {
            'editor.bracketPairColorization.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    134,
                    "Controls whether bracket pair colorization is enabled or not. Use {0} to override the bracket highlight colors.",
                    '`#workbench.colorCustomizations#`'
                ))
            },
            'editor.bracketPairColorization.independentColorPoolPerBracketType': {
                type: 'boolean',
                default: defaults.independentColorPoolPerBracketType,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    135,
                    "Controls whether each bracket type has its own independent color pool."
                ))
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            independentColorPoolPerBracketType: boolean(input.independentColorPoolPerBracketType, this.defaultValue.independentColorPoolPerBracketType),
        };
    }
}
class GuideOptions extends BaseEditorOption {
    constructor() {
        const defaults = {
            bracketPairs: false,
            bracketPairsHorizontal: 'active',
            highlightActiveBracketPair: true,
            indentation: true,
            highlightActiveIndentation: true
        };
        super(EditorOption.guides, 'guides', defaults, {
            'editor.guides.bracketPairs': {
                type: ['boolean', 'string'],
                enum: [true, 'active', false],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 136, "Enables bracket pair guides.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        137,
                        "Enables bracket pair guides only for the active bracket pair."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 138, "Disables bracket pair guides.")),
                ],
                default: defaults.bracketPairs,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 139, "Controls whether bracket pair guides are enabled or not."))
            },
            'editor.guides.bracketPairsHorizontal': {
                type: ['boolean', 'string'],
                enum: [true, 'active', false],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        140,
                        "Enables horizontal guides as addition to vertical bracket pair guides."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        141,
                        "Enables horizontal guides only for the active bracket pair."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 142, "Disables horizontal bracket pair guides.")),
                ],
                default: defaults.bracketPairsHorizontal,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    143,
                    "Controls whether horizontal bracket pair guides are enabled or not."
                ))
            },
            'editor.guides.highlightActiveBracketPair': {
                type: 'boolean',
                default: defaults.highlightActiveBracketPair,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    144,
                    "Controls whether the editor should highlight the active bracket pair."
                ))
            },
            'editor.guides.indentation': {
                type: 'boolean',
                default: defaults.indentation,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 145, "Controls whether the editor should render indent guides."))
            },
            'editor.guides.highlightActiveIndentation': {
                type: ['boolean', 'string'],
                enum: [true, 'always', false],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 146, "Highlights the active indent guide.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        147,
                        "Highlights the active indent guide even if bracket guides are highlighted."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 148, "Do not highlight the active indent guide.")),
                ],
                default: defaults.highlightActiveIndentation,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    149,
                    "Controls whether the editor should highlight the active indent guide."
                ))
            }
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            bracketPairs: primitiveSet(input.bracketPairs, this.defaultValue.bracketPairs, [true, false, 'active']),
            bracketPairsHorizontal: primitiveSet(input.bracketPairsHorizontal, this.defaultValue.bracketPairsHorizontal, [true, false, 'active']),
            highlightActiveBracketPair: boolean(input.highlightActiveBracketPair, this.defaultValue.highlightActiveBracketPair),
            indentation: boolean(input.indentation, this.defaultValue.indentation),
            highlightActiveIndentation: primitiveSet(input.highlightActiveIndentation, this.defaultValue.highlightActiveIndentation, [true, false, 'always']),
        };
    }
}
function primitiveSet(value, defaultValue, allowedValues) {
    const idx = allowedValues.indexOf(value);
    if (idx === -1) {
        return defaultValue;
    }
    return allowedValues[idx];
}
class EditorSuggest extends BaseEditorOption {
    constructor() {
        const defaults = {
            insertMode: 'insert',
            filterGraceful: true,
            snippetsPreventQuickSuggestions: false,
            localityBonus: false,
            shareSuggestSelections: false,
            selectionMode: 'always',
            showIcons: true,
            showStatusBar: false,
            preview: false,
            previewMode: 'subwordSmart',
            showInlineDetails: true,
            showMethods: true,
            showFunctions: true,
            showConstructors: true,
            showDeprecated: true,
            matchOnWordStartOnly: true,
            showFields: true,
            showVariables: true,
            showClasses: true,
            showStructs: true,
            showInterfaces: true,
            showModules: true,
            showProperties: true,
            showEvents: true,
            showOperators: true,
            showUnits: true,
            showValues: true,
            showConstants: true,
            showEnums: true,
            showEnumMembers: true,
            showKeywords: true,
            showWords: true,
            showColors: true,
            showFiles: true,
            showReferences: true,
            showFolders: true,
            showTypeParameters: true,
            showSnippets: true,
            showUsers: true,
            showIssues: true,
        };
        super(EditorOption.suggest, 'suggest', defaults, {
            'editor.suggest.insertMode': {
                type: 'string',
                enum: ['insert', 'replace'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        150,
                        "Insert suggestion without overwriting text right of the cursor."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        151,
                        "Insert suggestion and overwrite text right of the cursor."
                    )),
                ],
                default: defaults.insertMode,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    152,
                    "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature."
                ))
            },
            'editor.suggest.filterGraceful': {
                type: 'boolean',
                default: defaults.filterGraceful,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    153,
                    "Controls whether filtering and sorting suggestions accounts for small typos."
                ))
            },
            'editor.suggest.localityBonus': {
                type: 'boolean',
                default: defaults.localityBonus,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    154,
                    "Controls whether sorting favors words that appear close to the cursor."
                ))
            },
            'editor.suggest.shareSuggestSelections': {
                type: 'boolean',
                default: defaults.shareSuggestSelections,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    155,
                    "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`)."
                ))
            },
            'editor.suggest.selectionMode': {
                type: 'string',
                enum: ['always', 'never', 'whenTriggerCharacter', 'whenQuickSuggestion'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        156,
                        "Always select a suggestion when automatically triggering IntelliSense."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        157,
                        "Never select a suggestion when automatically triggering IntelliSense."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        158,
                        "Select a suggestion only when triggering IntelliSense from a trigger character."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        159,
                        "Select a suggestion only when triggering IntelliSense as you type."
                    )),
                ],
                default: defaults.selectionMode,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    160,
                    "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions ({0} and {1}) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.",
                    '`#editor.quickSuggestions#`',
                    '`#editor.suggestOnTriggerCharacters#`'
                ))
            },
            'editor.suggest.snippetsPreventQuickSuggestions': {
                type: 'boolean',
                default: defaults.snippetsPreventQuickSuggestions,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    161,
                    "Controls whether an active snippet prevents quick suggestions."
                ))
            },
            'editor.suggest.showIcons': {
                type: 'boolean',
                default: defaults.showIcons,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 162, "Controls whether to show or hide icons in suggestions."))
            },
            'editor.suggest.showStatusBar': {
                type: 'boolean',
                default: defaults.showStatusBar,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    163,
                    "Controls the visibility of the status bar at the bottom of the suggest widget."
                ))
            },
            'editor.suggest.preview': {
                type: 'boolean',
                default: defaults.preview,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    164,
                    "Controls whether to preview the suggestion outcome in the editor."
                ))
            },
            'editor.suggest.showInlineDetails': {
                type: 'boolean',
                default: defaults.showInlineDetails,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    165,
                    "Controls whether suggest details show inline with the label or only in the details widget."
                ))
            },
            'editor.suggest.maxVisibleSuggestions': {
                type: 'number',
                deprecationMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    166,
                    "This setting is deprecated. The suggest widget can now be resized."
                )),
            },
            'editor.suggest.filteredTypes': {
                type: 'object',
                deprecationMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    167,
                    "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead."
                ))
            },
            'editor.suggest.showMethods': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 168, "When enabled IntelliSense shows `method`-suggestions."))
            },
            'editor.suggest.showFunctions': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 169, "When enabled IntelliSense shows `function`-suggestions."))
            },
            'editor.suggest.showConstructors': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    170,
                    "When enabled IntelliSense shows `constructor`-suggestions."
                ))
            },
            'editor.suggest.showDeprecated': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    171,
                    "When enabled IntelliSense shows `deprecated`-suggestions."
                ))
            },
            'editor.suggest.matchOnWordStartOnly': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    172,
                    "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality."
                ))
            },
            'editor.suggest.showFields': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 173, "When enabled IntelliSense shows `field`-suggestions."))
            },
            'editor.suggest.showVariables': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 174, "When enabled IntelliSense shows `variable`-suggestions."))
            },
            'editor.suggest.showClasses': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 175, "When enabled IntelliSense shows `class`-suggestions."))
            },
            'editor.suggest.showStructs': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 176, "When enabled IntelliSense shows `struct`-suggestions."))
            },
            'editor.suggest.showInterfaces': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 177, "When enabled IntelliSense shows `interface`-suggestions."))
            },
            'editor.suggest.showModules': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 178, "When enabled IntelliSense shows `module`-suggestions."))
            },
            'editor.suggest.showProperties': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 179, "When enabled IntelliSense shows `property`-suggestions."))
            },
            'editor.suggest.showEvents': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 180, "When enabled IntelliSense shows `event`-suggestions."))
            },
            'editor.suggest.showOperators': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 181, "When enabled IntelliSense shows `operator`-suggestions."))
            },
            'editor.suggest.showUnits': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 182, "When enabled IntelliSense shows `unit`-suggestions."))
            },
            'editor.suggest.showValues': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 183, "When enabled IntelliSense shows `value`-suggestions."))
            },
            'editor.suggest.showConstants': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 184, "When enabled IntelliSense shows `constant`-suggestions."))
            },
            'editor.suggest.showEnums': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 185, "When enabled IntelliSense shows `enum`-suggestions."))
            },
            'editor.suggest.showEnumMembers': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    186,
                    "When enabled IntelliSense shows `enumMember`-suggestions."
                ))
            },
            'editor.suggest.showKeywords': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 187, "When enabled IntelliSense shows `keyword`-suggestions."))
            },
            'editor.suggest.showWords': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 188, "When enabled IntelliSense shows `text`-suggestions."))
            },
            'editor.suggest.showColors': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 189, "When enabled IntelliSense shows `color`-suggestions."))
            },
            'editor.suggest.showFiles': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 190, "When enabled IntelliSense shows `file`-suggestions."))
            },
            'editor.suggest.showReferences': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 191, "When enabled IntelliSense shows `reference`-suggestions."))
            },
            'editor.suggest.showCustomcolors': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    192,
                    "When enabled IntelliSense shows `customcolor`-suggestions."
                ))
            },
            'editor.suggest.showFolders': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 193, "When enabled IntelliSense shows `folder`-suggestions."))
            },
            'editor.suggest.showTypeParameters': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    194,
                    "When enabled IntelliSense shows `typeParameter`-suggestions."
                ))
            },
            'editor.suggest.showSnippets': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 195, "When enabled IntelliSense shows `snippet`-suggestions."))
            },
            'editor.suggest.showUsers': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 196, "When enabled IntelliSense shows `user`-suggestions."))
            },
            'editor.suggest.showIssues': {
                type: 'boolean',
                default: true,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 197, "When enabled IntelliSense shows `issues`-suggestions."))
            }
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            insertMode: stringSet(input.insertMode, this.defaultValue.insertMode, ['insert', 'replace']),
            filterGraceful: boolean(input.filterGraceful, this.defaultValue.filterGraceful),
            snippetsPreventQuickSuggestions: boolean(input.snippetsPreventQuickSuggestions, this.defaultValue.filterGraceful),
            localityBonus: boolean(input.localityBonus, this.defaultValue.localityBonus),
            shareSuggestSelections: boolean(input.shareSuggestSelections, this.defaultValue.shareSuggestSelections),
            selectionMode: stringSet(input.selectionMode, this.defaultValue.selectionMode, ['always', 'never', 'whenQuickSuggestion', 'whenTriggerCharacter']),
            showIcons: boolean(input.showIcons, this.defaultValue.showIcons),
            showStatusBar: boolean(input.showStatusBar, this.defaultValue.showStatusBar),
            preview: boolean(input.preview, this.defaultValue.preview),
            previewMode: stringSet(input.previewMode, this.defaultValue.previewMode, ['prefix', 'subword', 'subwordSmart']),
            showInlineDetails: boolean(input.showInlineDetails, this.defaultValue.showInlineDetails),
            showMethods: boolean(input.showMethods, this.defaultValue.showMethods),
            showFunctions: boolean(input.showFunctions, this.defaultValue.showFunctions),
            showConstructors: boolean(input.showConstructors, this.defaultValue.showConstructors),
            showDeprecated: boolean(input.showDeprecated, this.defaultValue.showDeprecated),
            matchOnWordStartOnly: boolean(input.matchOnWordStartOnly, this.defaultValue.matchOnWordStartOnly),
            showFields: boolean(input.showFields, this.defaultValue.showFields),
            showVariables: boolean(input.showVariables, this.defaultValue.showVariables),
            showClasses: boolean(input.showClasses, this.defaultValue.showClasses),
            showStructs: boolean(input.showStructs, this.defaultValue.showStructs),
            showInterfaces: boolean(input.showInterfaces, this.defaultValue.showInterfaces),
            showModules: boolean(input.showModules, this.defaultValue.showModules),
            showProperties: boolean(input.showProperties, this.defaultValue.showProperties),
            showEvents: boolean(input.showEvents, this.defaultValue.showEvents),
            showOperators: boolean(input.showOperators, this.defaultValue.showOperators),
            showUnits: boolean(input.showUnits, this.defaultValue.showUnits),
            showValues: boolean(input.showValues, this.defaultValue.showValues),
            showConstants: boolean(input.showConstants, this.defaultValue.showConstants),
            showEnums: boolean(input.showEnums, this.defaultValue.showEnums),
            showEnumMembers: boolean(input.showEnumMembers, this.defaultValue.showEnumMembers),
            showKeywords: boolean(input.showKeywords, this.defaultValue.showKeywords),
            showWords: boolean(input.showWords, this.defaultValue.showWords),
            showColors: boolean(input.showColors, this.defaultValue.showColors),
            showFiles: boolean(input.showFiles, this.defaultValue.showFiles),
            showReferences: boolean(input.showReferences, this.defaultValue.showReferences),
            showFolders: boolean(input.showFolders, this.defaultValue.showFolders),
            showTypeParameters: boolean(input.showTypeParameters, this.defaultValue.showTypeParameters),
            showSnippets: boolean(input.showSnippets, this.defaultValue.showSnippets),
            showUsers: boolean(input.showUsers, this.defaultValue.showUsers),
            showIssues: boolean(input.showIssues, this.defaultValue.showIssues),
        };
    }
}
class SmartSelect extends BaseEditorOption {
    constructor() {
        super(EditorOption.smartSelect, 'smartSelect', {
            selectLeadingAndTrailingWhitespace: true,
            selectSubwords: true,
        }, {
            'editor.smartSelect.selectLeadingAndTrailingWhitespace': {
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    198,
                    "Whether leading and trailing whitespace should always be selected."
                )),
                default: true,
                type: 'boolean'
            },
            'editor.smartSelect.selectSubwords': {
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    199,
                    "Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected."
                )),
                default: true,
                type: 'boolean'
            }
        });
    }
    validate(input) {
        if (!input || typeof input !== 'object') {
            return this.defaultValue;
        }
        return {
            selectLeadingAndTrailingWhitespace: boolean(input.selectLeadingAndTrailingWhitespace, this.defaultValue.selectLeadingAndTrailingWhitespace),
            selectSubwords: boolean(input.selectSubwords, this.defaultValue.selectSubwords),
        };
    }
}
class WordSegmenterLocales extends BaseEditorOption {
    constructor() {
        const defaults = [];
        super(EditorOption.wordSegmenterLocales, 'wordSegmenterLocales', defaults, {
            anyOf: [
                {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        200,
                        "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.)."
                    )),
                    type: 'string',
                }, {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        200,
                        "Locales to be used for word segmentation when doing word related navigations or operations. Specify the BCP 47 language tag of the word you wish to recognize (e.g., ja, zh-CN, zh-Hant-TW, etc.)."
                    )),
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                }
            ]
        });
    }
    validate(input) {
        if (typeof input === 'string') {
            input = [input];
        }
        if (Array.isArray(input)) {
            const validLocales = [];
            for (const locale of input) {
                if (typeof locale === 'string') {
                    try {
                        if (Intl.Segmenter.supportedLocalesOf(locale).length > 0) {
                            validLocales.push(locale);
                        }
                    }
                    catch {
                    }
                }
            }
            return validLocales;
        }
        return this.defaultValue;
    }
}
var WrappingIndent;
( ((function(WrappingIndent) {
    WrappingIndent[WrappingIndent["None"] = 0] = "None";
    WrappingIndent[WrappingIndent["Same"] = 1] = "Same";
    WrappingIndent[WrappingIndent["Indent"] = 2] = "Indent";
    WrappingIndent[WrappingIndent["DeepIndent"] = 3] = "DeepIndent";
})(WrappingIndent || (WrappingIndent = {}))));
class WrappingIndentOption extends BaseEditorOption {
    constructor() {
        super(EditorOption.wrappingIndent, 'wrappingIndent', WrappingIndent.Same, {
            'editor.wrappingIndent': {
                type: 'string',
                enum: ['none', 'same', 'indent', 'deepIndent'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 201, "No indentation. Wrapped lines begin at column 1.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 202, "Wrapped lines get the same indentation as the parent.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 203, "Wrapped lines get +1 indentation toward the parent.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 204, "Wrapped lines get +2 indentation toward the parent.")),
                ],
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 205, "Controls the indentation of wrapped lines.")),
                default: 'same'
            }
        });
    }
    validate(input) {
        switch (input) {
            case 'none': return WrappingIndent.None;
            case 'same': return WrappingIndent.Same;
            case 'indent': return WrappingIndent.Indent;
            case 'deepIndent': return WrappingIndent.DeepIndent;
        }
        return WrappingIndent.Same;
    }
    compute(env, options, value) {
        const accessibilitySupport = options.get(EditorOption.accessibilitySupport);
        if (accessibilitySupport === _platform_accessibility_common_accessibility_js__WEBPACK_IMPORTED_MODULE_8__.AccessibilitySupport.Enabled) {
            return WrappingIndent.None;
        }
        return value;
    }
}
class EditorWrappingInfoComputer extends ComputedEditorOption {
    constructor() {
        super(EditorOption.wrappingInfo);
    }
    compute(env, options, _) {
        const layoutInfo = options.get(EditorOption.layoutInfo);
        return {
            isDominatedByLongLines: env.isDominatedByLongLines,
            isWordWrapMinified: layoutInfo.isWordWrapMinified,
            isViewportWrapping: layoutInfo.isViewportWrapping,
            wrappingColumn: layoutInfo.wrappingColumn,
        };
    }
}
class EditorDropIntoEditor extends BaseEditorOption {
    constructor() {
        const defaults = { enabled: true, showDropSelector: 'afterDrop' };
        super(EditorOption.dropIntoEditor, 'dropIntoEditor', defaults, {
            'editor.dropIntoEditor.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    206,
                    "Controls whether you can drag and drop a file into a text editor by holding down the `Shift` key (instead of opening the file in an editor)."
                )),
            },
            'editor.dropIntoEditor.showDropSelector': {
                type: 'string',
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    207,
                    "Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped."
                )),
                enum: [
                    'afterDrop',
                    'never'
                ],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        208,
                        "Show the drop selector widget after a file is dropped into the editor."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        209,
                        "Never show the drop selector widget. Instead the default drop provider is always used."
                    )),
                ],
                default: 'afterDrop',
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            showDropSelector: stringSet(input.showDropSelector, this.defaultValue.showDropSelector, ['afterDrop', 'never']),
        };
    }
}
class EditorPasteAs extends BaseEditorOption {
    constructor() {
        const defaults = { enabled: true, showPasteSelector: 'afterPaste' };
        super(EditorOption.pasteAs, 'pasteAs', defaults, {
            'editor.pasteAs.enabled': {
                type: 'boolean',
                default: defaults.enabled,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    210,
                    "Controls whether you can paste content in different ways."
                )),
            },
            'editor.pasteAs.showPasteSelector': {
                type: 'string',
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    211,
                    "Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted."
                )),
                enum: [
                    'afterPaste',
                    'never'
                ],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        212,
                        "Show the paste selector widget after content is pasted into the editor."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                        _moduleId,
                        213,
                        "Never show the paste selector widget. Instead the default pasting behavior is always used."
                    )),
                ],
                default: 'afterPaste',
            },
        });
    }
    validate(_input) {
        if (!_input || typeof _input !== 'object') {
            return this.defaultValue;
        }
        const input = _input;
        return {
            enabled: boolean(input.enabled, this.defaultValue.enabled),
            showPasteSelector: stringSet(input.showPasteSelector, this.defaultValue.showPasteSelector, ['afterPaste', 'never']),
        };
    }
}
const DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \'Courier New\', monospace';
const DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \'Courier New\', monospace';
const DEFAULT_LINUX_FONT_FAMILY = '\'Droid Sans Mono\', \'monospace\', monospace';
const EDITOR_FONT_DEFAULTS = {
    fontFamily: (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY)),
    fontWeight: 'normal',
    fontSize: (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isMacintosh ? 12 : 14),
    lineHeight: 0,
    letterSpacing: 0,
};
const editorOptionsRegistry = [];
function register(option) {
    editorOptionsRegistry[option.id] = option;
    return option;
}
var EditorOption;
( ((function(EditorOption) {
    EditorOption[EditorOption["acceptSuggestionOnCommitCharacter"] = 0] = "acceptSuggestionOnCommitCharacter";
    EditorOption[EditorOption["acceptSuggestionOnEnter"] = 1] = "acceptSuggestionOnEnter";
    EditorOption[EditorOption["accessibilitySupport"] = 2] = "accessibilitySupport";
    EditorOption[EditorOption["accessibilityPageSize"] = 3] = "accessibilityPageSize";
    EditorOption[EditorOption["ariaLabel"] = 4] = "ariaLabel";
    EditorOption[EditorOption["ariaRequired"] = 5] = "ariaRequired";
    EditorOption[EditorOption["autoClosingBrackets"] = 6] = "autoClosingBrackets";
    EditorOption[EditorOption["autoClosingComments"] = 7] = "autoClosingComments";
    EditorOption[EditorOption["screenReaderAnnounceInlineSuggestion"] = 8] = "screenReaderAnnounceInlineSuggestion";
    EditorOption[EditorOption["autoClosingDelete"] = 9] = "autoClosingDelete";
    EditorOption[EditorOption["autoClosingOvertype"] = 10] = "autoClosingOvertype";
    EditorOption[EditorOption["autoClosingQuotes"] = 11] = "autoClosingQuotes";
    EditorOption[EditorOption["autoIndent"] = 12] = "autoIndent";
    EditorOption[EditorOption["automaticLayout"] = 13] = "automaticLayout";
    EditorOption[EditorOption["autoSurround"] = 14] = "autoSurround";
    EditorOption[EditorOption["bracketPairColorization"] = 15] = "bracketPairColorization";
    EditorOption[EditorOption["guides"] = 16] = "guides";
    EditorOption[EditorOption["codeLens"] = 17] = "codeLens";
    EditorOption[EditorOption["codeLensFontFamily"] = 18] = "codeLensFontFamily";
    EditorOption[EditorOption["codeLensFontSize"] = 19] = "codeLensFontSize";
    EditorOption[EditorOption["colorDecorators"] = 20] = "colorDecorators";
    EditorOption[EditorOption["colorDecoratorsLimit"] = 21] = "colorDecoratorsLimit";
    EditorOption[EditorOption["columnSelection"] = 22] = "columnSelection";
    EditorOption[EditorOption["comments"] = 23] = "comments";
    EditorOption[EditorOption["contextmenu"] = 24] = "contextmenu";
    EditorOption[EditorOption["copyWithSyntaxHighlighting"] = 25] = "copyWithSyntaxHighlighting";
    EditorOption[EditorOption["cursorBlinking"] = 26] = "cursorBlinking";
    EditorOption[EditorOption["cursorSmoothCaretAnimation"] = 27] = "cursorSmoothCaretAnimation";
    EditorOption[EditorOption["cursorStyle"] = 28] = "cursorStyle";
    EditorOption[EditorOption["cursorSurroundingLines"] = 29] = "cursorSurroundingLines";
    EditorOption[EditorOption["cursorSurroundingLinesStyle"] = 30] = "cursorSurroundingLinesStyle";
    EditorOption[EditorOption["cursorWidth"] = 31] = "cursorWidth";
    EditorOption[EditorOption["disableLayerHinting"] = 32] = "disableLayerHinting";
    EditorOption[EditorOption["disableMonospaceOptimizations"] = 33] = "disableMonospaceOptimizations";
    EditorOption[EditorOption["domReadOnly"] = 34] = "domReadOnly";
    EditorOption[EditorOption["dragAndDrop"] = 35] = "dragAndDrop";
    EditorOption[EditorOption["dropIntoEditor"] = 36] = "dropIntoEditor";
    EditorOption[EditorOption["emptySelectionClipboard"] = 37] = "emptySelectionClipboard";
    EditorOption[EditorOption["experimentalWhitespaceRendering"] = 38] = "experimentalWhitespaceRendering";
    EditorOption[EditorOption["extraEditorClassName"] = 39] = "extraEditorClassName";
    EditorOption[EditorOption["fastScrollSensitivity"] = 40] = "fastScrollSensitivity";
    EditorOption[EditorOption["find"] = 41] = "find";
    EditorOption[EditorOption["fixedOverflowWidgets"] = 42] = "fixedOverflowWidgets";
    EditorOption[EditorOption["folding"] = 43] = "folding";
    EditorOption[EditorOption["foldingStrategy"] = 44] = "foldingStrategy";
    EditorOption[EditorOption["foldingHighlight"] = 45] = "foldingHighlight";
    EditorOption[EditorOption["foldingImportsByDefault"] = 46] = "foldingImportsByDefault";
    EditorOption[EditorOption["foldingMaximumRegions"] = 47] = "foldingMaximumRegions";
    EditorOption[EditorOption["unfoldOnClickAfterEndOfLine"] = 48] = "unfoldOnClickAfterEndOfLine";
    EditorOption[EditorOption["fontFamily"] = 49] = "fontFamily";
    EditorOption[EditorOption["fontInfo"] = 50] = "fontInfo";
    EditorOption[EditorOption["fontLigatures"] = 51] = "fontLigatures";
    EditorOption[EditorOption["fontSize"] = 52] = "fontSize";
    EditorOption[EditorOption["fontWeight"] = 53] = "fontWeight";
    EditorOption[EditorOption["fontVariations"] = 54] = "fontVariations";
    EditorOption[EditorOption["formatOnPaste"] = 55] = "formatOnPaste";
    EditorOption[EditorOption["formatOnType"] = 56] = "formatOnType";
    EditorOption[EditorOption["glyphMargin"] = 57] = "glyphMargin";
    EditorOption[EditorOption["gotoLocation"] = 58] = "gotoLocation";
    EditorOption[EditorOption["hideCursorInOverviewRuler"] = 59] = "hideCursorInOverviewRuler";
    EditorOption[EditorOption["hover"] = 60] = "hover";
    EditorOption[EditorOption["inDiffEditor"] = 61] = "inDiffEditor";
    EditorOption[EditorOption["inlineSuggest"] = 62] = "inlineSuggest";
    EditorOption[EditorOption["inlineEdit"] = 63] = "inlineEdit";
    EditorOption[EditorOption["letterSpacing"] = 64] = "letterSpacing";
    EditorOption[EditorOption["lightbulb"] = 65] = "lightbulb";
    EditorOption[EditorOption["lineDecorationsWidth"] = 66] = "lineDecorationsWidth";
    EditorOption[EditorOption["lineHeight"] = 67] = "lineHeight";
    EditorOption[EditorOption["lineNumbers"] = 68] = "lineNumbers";
    EditorOption[EditorOption["lineNumbersMinChars"] = 69] = "lineNumbersMinChars";
    EditorOption[EditorOption["linkedEditing"] = 70] = "linkedEditing";
    EditorOption[EditorOption["links"] = 71] = "links";
    EditorOption[EditorOption["matchBrackets"] = 72] = "matchBrackets";
    EditorOption[EditorOption["minimap"] = 73] = "minimap";
    EditorOption[EditorOption["mouseStyle"] = 74] = "mouseStyle";
    EditorOption[EditorOption["mouseWheelScrollSensitivity"] = 75] = "mouseWheelScrollSensitivity";
    EditorOption[EditorOption["mouseWheelZoom"] = 76] = "mouseWheelZoom";
    EditorOption[EditorOption["multiCursorMergeOverlapping"] = 77] = "multiCursorMergeOverlapping";
    EditorOption[EditorOption["multiCursorModifier"] = 78] = "multiCursorModifier";
    EditorOption[EditorOption["multiCursorPaste"] = 79] = "multiCursorPaste";
    EditorOption[EditorOption["multiCursorLimit"] = 80] = "multiCursorLimit";
    EditorOption[EditorOption["occurrencesHighlight"] = 81] = "occurrencesHighlight";
    EditorOption[EditorOption["overviewRulerBorder"] = 82] = "overviewRulerBorder";
    EditorOption[EditorOption["overviewRulerLanes"] = 83] = "overviewRulerLanes";
    EditorOption[EditorOption["padding"] = 84] = "padding";
    EditorOption[EditorOption["pasteAs"] = 85] = "pasteAs";
    EditorOption[EditorOption["parameterHints"] = 86] = "parameterHints";
    EditorOption[EditorOption["peekWidgetDefaultFocus"] = 87] = "peekWidgetDefaultFocus";
    EditorOption[EditorOption["placeholder"] = 88] = "placeholder";
    EditorOption[EditorOption["definitionLinkOpensInPeek"] = 89] = "definitionLinkOpensInPeek";
    EditorOption[EditorOption["quickSuggestions"] = 90] = "quickSuggestions";
    EditorOption[EditorOption["quickSuggestionsDelay"] = 91] = "quickSuggestionsDelay";
    EditorOption[EditorOption["readOnly"] = 92] = "readOnly";
    EditorOption[EditorOption["readOnlyMessage"] = 93] = "readOnlyMessage";
    EditorOption[EditorOption["renameOnType"] = 94] = "renameOnType";
    EditorOption[EditorOption["renderControlCharacters"] = 95] = "renderControlCharacters";
    EditorOption[EditorOption["renderFinalNewline"] = 96] = "renderFinalNewline";
    EditorOption[EditorOption["renderLineHighlight"] = 97] = "renderLineHighlight";
    EditorOption[EditorOption["renderLineHighlightOnlyWhenFocus"] = 98] = "renderLineHighlightOnlyWhenFocus";
    EditorOption[EditorOption["renderValidationDecorations"] = 99] = "renderValidationDecorations";
    EditorOption[EditorOption["renderWhitespace"] = 100] = "renderWhitespace";
    EditorOption[EditorOption["revealHorizontalRightPadding"] = 101] = "revealHorizontalRightPadding";
    EditorOption[EditorOption["roundedSelection"] = 102] = "roundedSelection";
    EditorOption[EditorOption["rulers"] = 103] = "rulers";
    EditorOption[EditorOption["scrollbar"] = 104] = "scrollbar";
    EditorOption[EditorOption["scrollBeyondLastColumn"] = 105] = "scrollBeyondLastColumn";
    EditorOption[EditorOption["scrollBeyondLastLine"] = 106] = "scrollBeyondLastLine";
    EditorOption[EditorOption["scrollPredominantAxis"] = 107] = "scrollPredominantAxis";
    EditorOption[EditorOption["selectionClipboard"] = 108] = "selectionClipboard";
    EditorOption[EditorOption["selectionHighlight"] = 109] = "selectionHighlight";
    EditorOption[EditorOption["selectOnLineNumbers"] = 110] = "selectOnLineNumbers";
    EditorOption[EditorOption["showFoldingControls"] = 111] = "showFoldingControls";
    EditorOption[EditorOption["showUnused"] = 112] = "showUnused";
    EditorOption[EditorOption["snippetSuggestions"] = 113] = "snippetSuggestions";
    EditorOption[EditorOption["smartSelect"] = 114] = "smartSelect";
    EditorOption[EditorOption["smoothScrolling"] = 115] = "smoothScrolling";
    EditorOption[EditorOption["stickyScroll"] = 116] = "stickyScroll";
    EditorOption[EditorOption["stickyTabStops"] = 117] = "stickyTabStops";
    EditorOption[EditorOption["stopRenderingLineAfter"] = 118] = "stopRenderingLineAfter";
    EditorOption[EditorOption["suggest"] = 119] = "suggest";
    EditorOption[EditorOption["suggestFontSize"] = 120] = "suggestFontSize";
    EditorOption[EditorOption["suggestLineHeight"] = 121] = "suggestLineHeight";
    EditorOption[EditorOption["suggestOnTriggerCharacters"] = 122] = "suggestOnTriggerCharacters";
    EditorOption[EditorOption["suggestSelection"] = 123] = "suggestSelection";
    EditorOption[EditorOption["tabCompletion"] = 124] = "tabCompletion";
    EditorOption[EditorOption["tabIndex"] = 125] = "tabIndex";
    EditorOption[EditorOption["unicodeHighlighting"] = 126] = "unicodeHighlighting";
    EditorOption[EditorOption["unusualLineTerminators"] = 127] = "unusualLineTerminators";
    EditorOption[EditorOption["useShadowDOM"] = 128] = "useShadowDOM";
    EditorOption[EditorOption["useTabStops"] = 129] = "useTabStops";
    EditorOption[EditorOption["wordBreak"] = 130] = "wordBreak";
    EditorOption[EditorOption["wordSegmenterLocales"] = 131] = "wordSegmenterLocales";
    EditorOption[EditorOption["wordSeparators"] = 132] = "wordSeparators";
    EditorOption[EditorOption["wordWrap"] = 133] = "wordWrap";
    EditorOption[EditorOption["wordWrapBreakAfterCharacters"] = 134] = "wordWrapBreakAfterCharacters";
    EditorOption[EditorOption["wordWrapBreakBeforeCharacters"] = 135] = "wordWrapBreakBeforeCharacters";
    EditorOption[EditorOption["wordWrapColumn"] = 136] = "wordWrapColumn";
    EditorOption[EditorOption["wordWrapOverride1"] = 137] = "wordWrapOverride1";
    EditorOption[EditorOption["wordWrapOverride2"] = 138] = "wordWrapOverride2";
    EditorOption[EditorOption["wrappingIndent"] = 139] = "wrappingIndent";
    EditorOption[EditorOption["wrappingStrategy"] = 140] = "wrappingStrategy";
    EditorOption[EditorOption["showDeprecated"] = 141] = "showDeprecated";
    EditorOption[EditorOption["inlayHints"] = 142] = "inlayHints";
    EditorOption[EditorOption["editorClassName"] = 143] = "editorClassName";
    EditorOption[EditorOption["pixelRatio"] = 144] = "pixelRatio";
    EditorOption[EditorOption["tabFocusMode"] = 145] = "tabFocusMode";
    EditorOption[EditorOption["layoutInfo"] = 146] = "layoutInfo";
    EditorOption[EditorOption["wrappingInfo"] = 147] = "wrappingInfo";
    EditorOption[EditorOption["defaultColorDecorators"] = 148] = "defaultColorDecorators";
    EditorOption[EditorOption["colorDecoratorsActivatedOn"] = 149] = "colorDecoratorsActivatedOn";
    EditorOption[EditorOption["inlineCompletionsAccessibilityVerbose"] = 150] = "inlineCompletionsAccessibilityVerbose";
})(EditorOption || (EditorOption = {}))));
const EditorOptions = {
    acceptSuggestionOnCommitCharacter: register(( (new EditorBooleanOption(
        EditorOption.acceptSuggestionOnCommitCharacter,
        'acceptSuggestionOnCommitCharacter',
        true,
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            214,
            "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character."
        )) }
    )))),
    acceptSuggestionOnEnter: register(( (new EditorStringEnumOption(
        EditorOption.acceptSuggestionOnEnter,
        'acceptSuggestionOnEnter',
        'on',
        ['on', 'smart', 'off'],
        {
            markdownEnumDescriptions: [
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    215,
                    "Only accept a suggestion with `Enter` when it makes a textual change."
                )),
                ''
            ],
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                216,
                "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions."
            ))
        }
    )))),
    accessibilitySupport: register(( (new EditorAccessibilitySupport()))),
    accessibilityPageSize: register(( (new EditorIntOption(
        EditorOption.accessibilityPageSize,
        'accessibilityPageSize',
        10,
        1,
        _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER,
        {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                217,
                "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default."
            )),
            tags: ['accessibility']
        }
    )))),
    ariaLabel: register(( (new EditorStringOption(EditorOption.ariaLabel, 'ariaLabel', ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 218, "Editor content")))))),
    ariaRequired: register(( (new EditorBooleanOption(EditorOption.ariaRequired, 'ariaRequired', false, undefined)))),
    screenReaderAnnounceInlineSuggestion: register(( (new EditorBooleanOption(
        EditorOption.screenReaderAnnounceInlineSuggestion,
        'screenReaderAnnounceInlineSuggestion',
        true,
        {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                219,
                "Control whether inline suggestions are announced by a screen reader."
            )),
            tags: ['accessibility']
        }
    )))),
    autoClosingBrackets: register(( (new EditorStringEnumOption(
        EditorOption.autoClosingBrackets,
        'autoClosingBrackets',
        'languageDefined',
        ['always', 'languageDefined', 'beforeWhitespace', 'never'],
        {
            enumDescriptions: [
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    220,
                    "Use language configurations to determine when to autoclose brackets."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    221,
                    "Autoclose brackets only when the cursor is to the left of whitespace."
                )),
                '',
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                222,
                "Controls whether the editor should automatically close brackets after the user adds an opening bracket."
            ))
        }
    )))),
    autoClosingComments: register(( (new EditorStringEnumOption(
        EditorOption.autoClosingComments,
        'autoClosingComments',
        'languageDefined',
        ['always', 'languageDefined', 'beforeWhitespace', 'never'],
        {
            enumDescriptions: [
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    223,
                    "Use language configurations to determine when to autoclose comments."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    224,
                    "Autoclose comments only when the cursor is to the left of whitespace."
                )),
                '',
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                225,
                "Controls whether the editor should automatically close comments after the user adds an opening comment."
            ))
        }
    )))),
    autoClosingDelete: register(( (new EditorStringEnumOption(
        EditorOption.autoClosingDelete,
        'autoClosingDelete',
        'auto',
        ['always', 'auto', 'never'],
        {
            enumDescriptions: [
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    226,
                    "Remove adjacent closing quotes or brackets only if they were automatically inserted."
                )),
                '',
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                227,
                "Controls whether the editor should remove adjacent closing quotes or brackets when deleting."
            ))
        }
    )))),
    autoClosingOvertype: register(( (new EditorStringEnumOption(
        EditorOption.autoClosingOvertype,
        'autoClosingOvertype',
        'auto',
        ['always', 'auto', 'never'],
        {
            enumDescriptions: [
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    228,
                    "Type over closing quotes or brackets only if they were automatically inserted."
                )),
                '',
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                229,
                "Controls whether the editor should type over closing quotes or brackets."
            ))
        }
    )))),
    autoClosingQuotes: register(( (new EditorStringEnumOption(
        EditorOption.autoClosingQuotes,
        'autoClosingQuotes',
        'languageDefined',
        ['always', 'languageDefined', 'beforeWhitespace', 'never'],
        {
            enumDescriptions: [
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    230,
                    "Use language configurations to determine when to autoclose quotes."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    231,
                    "Autoclose quotes only when the cursor is to the left of whitespace."
                )),
                '',
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                232,
                "Controls whether the editor should automatically close quotes after the user adds an opening quote."
            ))
        }
    )))),
    autoIndent: register(( (new EditorEnumOption(
        EditorOption.autoIndent,
        'autoIndent',
        EditorAutoIndentStrategy.Full,
        'full',
        ['none', 'keep', 'brackets', 'advanced', 'full'],
        _autoIndentFromString,
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 233, "The editor will not insert indentation automatically.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 234, "The editor will keep the current line's indentation.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    235,
                    "The editor will keep the current line's indentation and honor language defined brackets."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    236,
                    "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    237,
                    "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."
                )),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                238,
                "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines."
            ))
        }
    )))),
    automaticLayout: register(( (new EditorBooleanOption(EditorOption.automaticLayout, 'automaticLayout', false)))),
    autoSurround: register(( (new EditorStringEnumOption(
        EditorOption.autoSurround,
        'autoSurround',
        'languageDefined',
        ['languageDefined', 'quotes', 'brackets', 'never'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    239,
                    "Use language configurations to determine when to automatically surround selections."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 240, "Surround with quotes but not brackets.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 241, "Surround with brackets but not quotes.")),
                ''
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                242,
                "Controls whether the editor should automatically surround selections when typing quotes or brackets."
            ))
        }
    )))),
    bracketPairColorization: register(( (new BracketPairColorization()))),
    bracketPairGuides: register(( (new GuideOptions()))),
    stickyTabStops: register(( (new EditorBooleanOption(
        EditorOption.stickyTabStops,
        'stickyTabStops',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            243,
            "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops."
        )) }
    )))),
    codeLens: register(( (new EditorBooleanOption(EditorOption.codeLens, 'codeLens', true, { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 244, "Controls whether the editor shows CodeLens.")) })))),
    codeLensFontFamily: register(( (new EditorStringOption(
        EditorOption.codeLensFontFamily,
        'codeLensFontFamily',
        '',
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 245, "Controls the font family for CodeLens.")) }
    )))),
    codeLensFontSize: register(( (new EditorIntOption(EditorOption.codeLensFontSize, 'codeLensFontSize', 0, 0, 100, {
        type: 'number',
        default: 0,
        minimum: 0,
        maximum: 100,
        markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            246,
            "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used."
        ))
    })))),
    colorDecorators: register(( (new EditorBooleanOption(
        EditorOption.colorDecorators,
        'colorDecorators',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            247,
            "Controls whether the editor should render the inline color decorators and color picker."
        )) }
    )))),
    colorDecoratorActivatedOn: register(( (new EditorStringEnumOption(
        EditorOption.colorDecoratorsActivatedOn,
        'colorDecoratorsActivatedOn',
        'clickAndHover',
        ['clickAndHover', 'hover', 'click'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    248,
                    "Make the color picker appear both on click and hover of the color decorator"
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    249,
                    "Make the color picker appear on hover of the color decorator"
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    250,
                    "Make the color picker appear on click of the color decorator"
                ))
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                251,
                "Controls the condition to make a color picker appear from a color decorator"
            ))
        }
    )))),
    colorDecoratorsLimit: register(( (new EditorIntOption(
        EditorOption.colorDecoratorsLimit,
        'colorDecoratorsLimit',
        500,
        1,
        1000000,
        {
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                252,
                "Controls the max number of color decorators that can be rendered in an editor at once."
            ))
        }
    )))),
    columnSelection: register(( (new EditorBooleanOption(
        EditorOption.columnSelection,
        'columnSelection',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            253,
            "Enable that the selection with the mouse and keys is doing column selection."
        )) }
    )))),
    comments: register(( (new EditorComments()))),
    contextmenu: register(( (new EditorBooleanOption(EditorOption.contextmenu, 'contextmenu', true)))),
    copyWithSyntaxHighlighting: register(( (new EditorBooleanOption(
        EditorOption.copyWithSyntaxHighlighting,
        'copyWithSyntaxHighlighting',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            254,
            "Controls whether syntax highlighting should be copied into the clipboard."
        )) }
    )))),
    cursorBlinking: register(( (new EditorEnumOption(
        EditorOption.cursorBlinking,
        'cursorBlinking',
        TextEditorCursorBlinkingStyle.Blink,
        'blink',
        ['blink', 'smooth', 'phase', 'expand', 'solid'],
        _cursorBlinkingStyleFromString,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 255, "Control the cursor animation style.")) }
    )))),
    cursorSmoothCaretAnimation: register(( (new EditorStringEnumOption(
        EditorOption.cursorSmoothCaretAnimation,
        'cursorSmoothCaretAnimation',
        'off',
        ['off', 'explicit', 'on'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 256, "Smooth caret animation is disabled.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    257,
                    "Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 258, "Smooth caret animation is always enabled."))
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                259,
                "Controls whether the smooth caret animation should be enabled."
            ))
        }
    )))),
    cursorStyle: register(( (new EditorEnumOption(
        EditorOption.cursorStyle,
        'cursorStyle',
        TextEditorCursorStyle.Line,
        'line',
        ['line', 'block', 'underline', 'line-thin', 'block-outline', 'underline-thin'],
        _cursorStyleFromString,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 260, "Controls the cursor style.")) }
    )))),
    cursorSurroundingLines: register(( (new EditorIntOption(
        EditorOption.cursorSurroundingLines,
        'cursorSurroundingLines',
        0,
        0,
        _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            261,
            "Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors."
        )) }
    )))),
    cursorSurroundingLinesStyle: register(( (new EditorStringEnumOption(
        EditorOption.cursorSurroundingLinesStyle,
        'cursorSurroundingLinesStyle',
        'default',
        ['default', 'all'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    262,
                    "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 263, "`cursorSurroundingLines` is enforced always."))
            ],
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                264,
                "Controls when `#editor.cursorSurroundingLines#` should be enforced."
            ))
        }
    )))),
    cursorWidth: register(( (new EditorIntOption(
        EditorOption.cursorWidth,
        'cursorWidth',
        0,
        0,
        _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER,
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            265,
            "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`."
        )) }
    )))),
    disableLayerHinting: register(( (new EditorBooleanOption(EditorOption.disableLayerHinting, 'disableLayerHinting', false)))),
    disableMonospaceOptimizations: register(( (new EditorBooleanOption(
        EditorOption.disableMonospaceOptimizations,
        'disableMonospaceOptimizations',
        false
    )))),
    domReadOnly: register(( (new EditorBooleanOption(EditorOption.domReadOnly, 'domReadOnly', false)))),
    dragAndDrop: register(( (new EditorBooleanOption(
        EditorOption.dragAndDrop,
        'dragAndDrop',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            266,
            "Controls whether the editor should allow moving selections via drag and drop."
        )) }
    )))),
    emptySelectionClipboard: register(( (new EditorEmptySelectionClipboard()))),
    dropIntoEditor: register(( (new EditorDropIntoEditor()))),
    stickyScroll: register(( (new EditorStickyScroll()))),
    experimentalWhitespaceRendering: register(( (new EditorStringEnumOption(
        EditorOption.experimentalWhitespaceRendering,
        'experimentalWhitespaceRendering',
        'svg',
        ['svg', 'font', 'off'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 267, "Use a new rendering method with svgs.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 268, "Use a new rendering method with font characters.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 269, "Use the stable rendering method.")),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                270,
                "Controls whether whitespace is rendered with a new, experimental method."
            ))
        }
    )))),
    extraEditorClassName: register(( (new EditorStringOption(EditorOption.extraEditorClassName, 'extraEditorClassName', '')))),
    fastScrollSensitivity: register(( (new EditorFloatOption(
        EditorOption.fastScrollSensitivity,
        'fastScrollSensitivity',
        5,
        x => (x <= 0 ? 5 : x),
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 271, "Scrolling speed multiplier when pressing `Alt`.")) }
    )))),
    find: register(( (new EditorFind()))),
    fixedOverflowWidgets: register(( (new EditorBooleanOption(EditorOption.fixedOverflowWidgets, 'fixedOverflowWidgets', false)))),
    folding: register(( (new EditorBooleanOption(EditorOption.folding, 'folding', true, { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 272, "Controls whether the editor has code folding enabled.")) })))),
    foldingStrategy: register(( (new EditorStringEnumOption(
        EditorOption.foldingStrategy,
        'foldingStrategy',
        'auto',
        ['auto', 'indentation'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    273,
                    "Use a language-specific folding strategy if available, else the indentation-based one."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 274, "Use the indentation-based folding strategy.")),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 275, "Controls the strategy for computing folding ranges."))
        }
    )))),
    foldingHighlight: register(( (new EditorBooleanOption(
        EditorOption.foldingHighlight,
        'foldingHighlight',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            276,
            "Controls whether the editor should highlight folded ranges."
        )) }
    )))),
    foldingImportsByDefault: register(( (new EditorBooleanOption(
        EditorOption.foldingImportsByDefault,
        'foldingImportsByDefault',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            277,
            "Controls whether the editor automatically collapses import ranges."
        )) }
    )))),
    foldingMaximumRegions: register(( (new EditorIntOption(
        EditorOption.foldingMaximumRegions,
        'foldingMaximumRegions',
        5000,
        10,
        65000,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            278,
            "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions."
        )) }
    )))),
    unfoldOnClickAfterEndOfLine: register(( (new EditorBooleanOption(
        EditorOption.unfoldOnClickAfterEndOfLine,
        'unfoldOnClickAfterEndOfLine',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            279,
            "Controls whether clicking on the empty content after a folded line will unfold the line."
        )) }
    )))),
    fontFamily: register(( (new EditorStringOption(
        EditorOption.fontFamily,
        'fontFamily',
        EDITOR_FONT_DEFAULTS.fontFamily,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 280, "Controls the font family.")) }
    )))),
    fontInfo: register(( (new EditorFontInfo()))),
    fontLigatures2: register(( (new EditorFontLigatures()))),
    fontSize: register(( (new EditorFontSize()))),
    fontWeight: register(( (new EditorFontWeight()))),
    fontVariations: register(( (new EditorFontVariations()))),
    formatOnPaste: register(( (new EditorBooleanOption(
        EditorOption.formatOnPaste,
        'formatOnPaste',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            281,
            "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document."
        )) }
    )))),
    formatOnType: register(( (new EditorBooleanOption(
        EditorOption.formatOnType,
        'formatOnType',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            282,
            "Controls whether the editor should automatically format the line after typing."
        )) }
    )))),
    glyphMargin: register(( (new EditorBooleanOption(
        EditorOption.glyphMargin,
        'glyphMargin',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            283,
            "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging."
        )) }
    )))),
    gotoLocation: register(( (new EditorGoToLocation()))),
    hideCursorInOverviewRuler: register(( (new EditorBooleanOption(
        EditorOption.hideCursorInOverviewRuler,
        'hideCursorInOverviewRuler',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            284,
            "Controls whether the cursor should be hidden in the overview ruler."
        )) }
    )))),
    hover: register(( (new EditorHover()))),
    inDiffEditor: register(( (new EditorBooleanOption(EditorOption.inDiffEditor, 'inDiffEditor', false)))),
    letterSpacing: register(( (new EditorFloatOption(
        EditorOption.letterSpacing,
        'letterSpacing',
        EDITOR_FONT_DEFAULTS.letterSpacing,
        x => EditorFloatOption.clamp(x, -5, 20),
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 285, "Controls the letter spacing in pixels.")) }
    )))),
    lightbulb: register(( (new EditorLightbulb()))),
    lineDecorationsWidth: register(( (new EditorLineDecorationsWidth()))),
    lineHeight: register(( (new EditorLineHeight()))),
    lineNumbers: register(( (new EditorRenderLineNumbersOption()))),
    lineNumbersMinChars: register(( (new EditorIntOption(EditorOption.lineNumbersMinChars, 'lineNumbersMinChars', 5, 1, 300)))),
    linkedEditing: register(( (new EditorBooleanOption(
        EditorOption.linkedEditing,
        'linkedEditing',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            286,
            "Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing."
        )) }
    )))),
    links: register(( (new EditorBooleanOption(EditorOption.links, 'links', true, { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
        _moduleId,
        287,
        "Controls whether the editor should detect links and make them clickable."
    )) })))),
    matchBrackets: register(( (new EditorStringEnumOption(
        EditorOption.matchBrackets,
        'matchBrackets',
        'always',
        ['always', 'near', 'never'],
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 288, "Highlight matching brackets.")) }
    )))),
    minimap: register(( (new EditorMinimap()))),
    mouseStyle: register(( (new EditorStringEnumOption(EditorOption.mouseStyle, 'mouseStyle', 'text', ['text', 'default', 'copy'])))),
    mouseWheelScrollSensitivity: register(( (new EditorFloatOption(
        EditorOption.mouseWheelScrollSensitivity,
        'mouseWheelScrollSensitivity',
        1,
        x => (x === 0 ? 1 : x),
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            289,
            "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events."
        )) }
    )))),
    mouseWheelZoom: register(( (new EditorBooleanOption(EditorOption.mouseWheelZoom, 'mouseWheelZoom', false, {
        markdownDescription: _base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isMacintosh
            ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            290,
            "Zoom the font of the editor when using mouse wheel and holding `Cmd`."
        ))
            : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            291,
            "Zoom the font of the editor when using mouse wheel and holding `Ctrl`."
        ))
    })))),
    multiCursorMergeOverlapping: register(( (new EditorBooleanOption(
        EditorOption.multiCursorMergeOverlapping,
        'multiCursorMergeOverlapping',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 292, "Merge multiple cursors when they are overlapping.")) }
    )))),
    multiCursorModifier: register(( (new EditorEnumOption(
        EditorOption.multiCursorModifier,
        'multiCursorModifier',
        'altKey',
        'alt',
        ['ctrlCmd', 'alt'],
        _multiCursorModifierFromString,
        {
            markdownEnumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    293,
                    "Maps to `Control` on Windows and Linux and to `Command` on macOS."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    294,
                    "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
                ))
            ],
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                295,
                "The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)."
            ))
        }
    )))),
    multiCursorPaste: register(( (new EditorStringEnumOption(
        EditorOption.multiCursorPaste,
        'multiCursorPaste',
        'spread',
        ['spread', 'full'],
        {
            markdownEnumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 296, "Each cursor pastes a single line of the text.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 297, "Each cursor pastes the full text."))
            ],
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                298,
                "Controls pasting when the line count of the pasted text matches the cursor count."
            ))
        }
    )))),
    multiCursorLimit: register(( (new EditorIntOption(EditorOption.multiCursorLimit, 'multiCursorLimit', 10000, 1, 100000, {
        markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            299,
            "Controls the max number of cursors that can be in an active editor at once."
        ))
    })))),
    occurrencesHighlight: register(( (new EditorStringEnumOption(
        EditorOption.occurrencesHighlight,
        'occurrencesHighlight',
        'singleFile',
        ['off', 'singleFile', 'multiFile'],
        {
            markdownEnumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 300, "Does not highlight occurrences.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 301, "Highlights occurrences only in the current file.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    302,
                    "Experimental: Highlights occurrences across all valid open files."
                ))
            ],
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                303,
                "Controls whether occurrences should be highlighted across open files."
            ))
        }
    )))),
    overviewRulerBorder: register(( (new EditorBooleanOption(
        EditorOption.overviewRulerBorder,
        'overviewRulerBorder',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            304,
            "Controls whether a border should be drawn around the overview ruler."
        )) }
    )))),
    overviewRulerLanes: register(( (new EditorIntOption(EditorOption.overviewRulerLanes, 'overviewRulerLanes', 3, 0, 3)))),
    padding: register(( (new EditorPadding()))),
    pasteAs: register(( (new EditorPasteAs()))),
    parameterHints: register(( (new EditorParameterHints()))),
    peekWidgetDefaultFocus: register(( (new EditorStringEnumOption(
        EditorOption.peekWidgetDefaultFocus,
        'peekWidgetDefaultFocus',
        'tree',
        ['tree', 'editor'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 305, "Focus the tree when opening peek")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 306, "Focus the editor when opening peek"))
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                307,
                "Controls whether to focus the inline editor or the tree in the peek widget."
            ))
        }
    )))),
    placeholder: register(( (new PlaceholderOption()))),
    definitionLinkOpensInPeek: register(( (new EditorBooleanOption(
        EditorOption.definitionLinkOpensInPeek,
        'definitionLinkOpensInPeek',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            308,
            "Controls whether the Go to Definition mouse gesture always opens the peek widget."
        )) }
    )))),
    quickSuggestions: register(( (new EditorQuickSuggestions()))),
    quickSuggestionsDelay: register(( (new EditorIntOption(
        EditorOption.quickSuggestionsDelay,
        'quickSuggestionsDelay',
        10,
        0,
        _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            309,
            "Controls the delay in milliseconds after which quick suggestions will show up."
        )) }
    )))),
    readOnly: register(( (new EditorBooleanOption(EditorOption.readOnly, 'readOnly', false)))),
    readOnlyMessage: register(( (new ReadonlyMessage()))),
    renameOnType: register(( (new EditorBooleanOption(
        EditorOption.renameOnType,
        'renameOnType',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 310, "Controls whether the editor auto renames on type.")), markdownDeprecationMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 311, "Deprecated, use `editor.linkedEditing` instead.")) }
    )))),
    renderControlCharacters: register(( (new EditorBooleanOption(
        EditorOption.renderControlCharacters,
        'renderControlCharacters',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            312,
            "Controls whether the editor should render control characters."
        )), restricted: true }
    )))),
    renderFinalNewline: register(( (new EditorStringEnumOption(
        EditorOption.renderFinalNewline,
        'renderFinalNewline',
        (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isLinux ? 'dimmed' : 'on'),
        ['off', 'on', 'dimmed'],
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            313,
            "Render last line number when the file ends with a newline."
        )) }
    )))),
    renderLineHighlight: register(( (new EditorStringEnumOption(
        EditorOption.renderLineHighlight,
        'renderLineHighlight',
        'line',
        ['none', 'gutter', 'line', 'all'],
        {
            enumDescriptions: [
                '',
                '',
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 314, "Highlights both the gutter and the current line.")),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                315,
                "Controls how the editor should render the current line highlight."
            ))
        }
    )))),
    renderLineHighlightOnlyWhenFocus: register(( (new EditorBooleanOption(
        EditorOption.renderLineHighlightOnlyWhenFocus,
        'renderLineHighlightOnlyWhenFocus',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            316,
            "Controls if the editor should render the current line highlight only when the editor is focused."
        )) }
    )))),
    renderValidationDecorations: register(( (new EditorStringEnumOption(
        EditorOption.renderValidationDecorations,
        'renderValidationDecorations',
        'editable',
        ['editable', 'on', 'off']
    )))),
    renderWhitespace: register(( (new EditorStringEnumOption(
        EditorOption.renderWhitespace,
        'renderWhitespace',
        'selection',
        ['none', 'boundary', 'selection', 'trailing', 'all'],
        {
            enumDescriptions: [
                '',
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    317,
                    "Render whitespace characters except for single spaces between words."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 318, "Render whitespace characters only on selected text.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 319, "Render only trailing whitespace characters.")),
                ''
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                320,
                "Controls how the editor should render whitespace characters."
            ))
        }
    )))),
    revealHorizontalRightPadding: register(( (new EditorIntOption(
        EditorOption.revealHorizontalRightPadding,
        'revealHorizontalRightPadding',
        15,
        0,
        1000
    )))),
    roundedSelection: register(( (new EditorBooleanOption(
        EditorOption.roundedSelection,
        'roundedSelection',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 321, "Controls whether selections should have rounded corners.")) }
    )))),
    rulers: register(( (new EditorRulers()))),
    scrollbar: register(( (new EditorScrollbar()))),
    scrollBeyondLastColumn: register(( (new EditorIntOption(
        EditorOption.scrollBeyondLastColumn,
        'scrollBeyondLastColumn',
        4,
        0,
        _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            322,
            "Controls the number of extra characters beyond which the editor will scroll horizontally."
        )) }
    )))),
    scrollBeyondLastLine: register(( (new EditorBooleanOption(
        EditorOption.scrollBeyondLastLine,
        'scrollBeyondLastLine',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            323,
            "Controls whether the editor will scroll beyond the last line."
        )) }
    )))),
    scrollPredominantAxis: register(( (new EditorBooleanOption(
        EditorOption.scrollPredominantAxis,
        'scrollPredominantAxis',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            324,
            "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad."
        )) }
    )))),
    selectionClipboard: register(( (new EditorBooleanOption(EditorOption.selectionClipboard, 'selectionClipboard', true, {
        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            325,
            "Controls whether the Linux primary clipboard should be supported."
        )),
        included: _base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.isLinux
    })))),
    selectionHighlight: register(( (new EditorBooleanOption(
        EditorOption.selectionHighlight,
        'selectionHighlight',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            326,
            "Controls whether the editor should highlight matches similar to the selection."
        )) }
    )))),
    selectOnLineNumbers: register(( (new EditorBooleanOption(EditorOption.selectOnLineNumbers, 'selectOnLineNumbers', true)))),
    showFoldingControls: register(( (new EditorStringEnumOption(
        EditorOption.showFoldingControls,
        'showFoldingControls',
        'mouseover',
        ['always', 'never', 'mouseover'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 327, "Always show the folding controls.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    328,
                    "Never show the folding controls and reduce the gutter size."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    329,
                    "Only show the folding controls when the mouse is over the gutter."
                )),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                330,
                "Controls when the folding controls on the gutter are shown."
            ))
        }
    )))),
    showUnused: register(( (new EditorBooleanOption(EditorOption.showUnused, 'showUnused', true, { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 331, "Controls fading out of unused code.")) })))),
    showDeprecated: register(( (new EditorBooleanOption(
        EditorOption.showDeprecated,
        'showDeprecated',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 332, "Controls strikethrough deprecated variables.")) }
    )))),
    inlayHints: register(( (new EditorInlayHints()))),
    snippetSuggestions: register(( (new EditorStringEnumOption(
        EditorOption.snippetSuggestions,
        'snippetSuggestions',
        'inline',
        ['top', 'bottom', 'inline', 'none'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 333, "Show snippet suggestions on top of other suggestions.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 334, "Show snippet suggestions below other suggestions.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 335, "Show snippets suggestions with other suggestions.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 336, "Do not show snippet suggestions.")),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                337,
                "Controls whether snippets are shown with other suggestions and how they are sorted."
            ))
        }
    )))),
    smartSelect: register(( (new SmartSelect()))),
    smoothScrolling: register(( (new EditorBooleanOption(
        EditorOption.smoothScrolling,
        'smoothScrolling',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            338,
            "Controls whether the editor will scroll using an animation."
        )) }
    )))),
    stopRenderingLineAfter: register(( (new EditorIntOption(
        EditorOption.stopRenderingLineAfter,
        'stopRenderingLineAfter',
        10000,
        -1,
        _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER
    )))),
    suggest: register(( (new EditorSuggest()))),
    inlineSuggest: register(( (new InlineEditorSuggest()))),
    inlineEdit: register(( (new InlineEditorEdit()))),
    inlineCompletionsAccessibilityVerbose: register(( (new EditorBooleanOption(
        EditorOption.inlineCompletionsAccessibilityVerbose,
        'inlineCompletionsAccessibilityVerbose',
        false,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            339,
            "Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown."
        )) }
    )))),
    suggestFontSize: register(( (new EditorIntOption(
        EditorOption.suggestFontSize,
        'suggestFontSize',
        0,
        0,
        1000,
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            340,
            "Font size for the suggest widget. When set to {0}, the value of {1} is used.",
            '`0`',
            '`#editor.fontSize#`'
        )) }
    )))),
    suggestLineHeight: register(( (new EditorIntOption(
        EditorOption.suggestLineHeight,
        'suggestLineHeight',
        0,
        0,
        1000,
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            341,
            "Line height for the suggest widget. When set to {0}, the value of {1} is used. The minimum value is 8.",
            '`0`',
            '`#editor.lineHeight#`'
        )) }
    )))),
    suggestOnTriggerCharacters: register(( (new EditorBooleanOption(
        EditorOption.suggestOnTriggerCharacters,
        'suggestOnTriggerCharacters',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            342,
            "Controls whether suggestions should automatically show up when typing trigger characters."
        )) }
    )))),
    suggestSelection: register(( (new EditorStringEnumOption(
        EditorOption.suggestSelection,
        'suggestSelection',
        'first',
        ['first', 'recentlyUsed', 'recentlyUsedByPrefix'],
        {
            markdownEnumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 343, "Always select the first suggestion.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    344,
                    "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    345,
                    "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
                )),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                346,
                "Controls how suggestions are pre-selected when showing the suggest list."
            ))
        }
    )))),
    tabCompletion: register(( (new EditorStringEnumOption(
        EditorOption.tabCompletion,
        'tabCompletion',
        'off',
        ['on', 'off', 'onlySnippets'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    347,
                    "Tab complete will insert the best matching suggestion when pressing tab."
                )),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 348, "Disable tab completions.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    349,
                    "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
                )),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 350, "Enables tab completions."))
        }
    )))),
    tabIndex: register(( (new EditorIntOption(EditorOption.tabIndex, 'tabIndex', 0, -1, _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER)))),
    unicodeHighlight: register(( (new UnicodeHighlight()))),
    unusualLineTerminators: register(( (new EditorStringEnumOption(
        EditorOption.unusualLineTerminators,
        'unusualLineTerminators',
        'prompt',
        ['auto', 'off', 'prompt'],
        {
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 351, "Unusual line terminators are automatically removed.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 352, "Unusual line terminators are ignored.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 353, "Unusual line terminators prompt to be removed.")),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                354,
                "Remove unusual line terminators that might cause problems."
            ))
        }
    )))),
    useShadowDOM: register(( (new EditorBooleanOption(EditorOption.useShadowDOM, 'useShadowDOM', true)))),
    useTabStops: register(( (new EditorBooleanOption(
        EditorOption.useTabStops,
        'useTabStops',
        true,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            355,
            "Spaces and tabs are inserted and deleted in alignment with tab stops."
        )) }
    )))),
    wordBreak: register(( (new EditorStringEnumOption(EditorOption.wordBreak, 'wordBreak', 'normal', ['normal', 'keepAll'], {
        markdownEnumDescriptions: [
            ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 356, "Use the default line break rule.")),
            ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                357,
                "Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal."
            )),
        ],
        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            358,
            "Controls the word break rules used for Chinese/Japanese/Korean (CJK) text."
        ))
    })))),
    wordSegmenterLocales: register(( (new WordSegmenterLocales()))),
    wordSeparators: register(( (new EditorStringOption(
        EditorOption.wordSeparators,
        'wordSeparators',
        _core_wordHelper_js__WEBPACK_IMPORTED_MODULE_6__.USUAL_WORD_SEPARATORS,
        { description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            359,
            "Characters that will be used as word separators when doing word related navigations or operations."
        )) }
    )))),
    wordWrap: register(( (new EditorStringEnumOption(
        EditorOption.wordWrap,
        'wordWrap',
        'off',
        ['off', 'on', 'wordWrapColumn', 'bounded'],
        {
            markdownEnumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 360, "Lines will never wrap.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 361, "Lines will wrap at the viewport width.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 362, "Lines will wrap at `#editor.wordWrapColumn#`.")),
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                    _moduleId,
                    363,
                    "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."
                )),
            ],
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 364, "Controls how lines should wrap."))
        }
    )))),
    wordWrapBreakAfterCharacters: register(( (new EditorStringOption(
        EditorOption.wordWrapBreakAfterCharacters,
        'wordWrapBreakAfterCharacters',
        ' \t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣'
    )))),
    wordWrapBreakBeforeCharacters: register(( (new EditorStringOption(
        EditorOption.wordWrapBreakBeforeCharacters,
        'wordWrapBreakBeforeCharacters',
        '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋'
    )))),
    wordWrapColumn: register(( (new EditorIntOption(
        EditorOption.wordWrapColumn,
        'wordWrapColumn',
        80,
        1,
        _base_common_uint_js__WEBPACK_IMPORTED_MODULE_4__.Constants.MAX_SAFE_SMALL_INTEGER,
        {
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                _moduleId,
                365,
                "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`."
            ))
        }
    )))),
    wordWrapOverride1: register(( (new EditorStringEnumOption(
        EditorOption.wordWrapOverride1,
        'wordWrapOverride1',
        'inherit',
        ['off', 'on', 'inherit']
    )))),
    wordWrapOverride2: register(( (new EditorStringEnumOption(
        EditorOption.wordWrapOverride2,
        'wordWrapOverride2',
        'inherit',
        ['off', 'on', 'inherit']
    )))),
    editorClassName: register(( (new EditorClassName()))),
    defaultColorDecorators: register(( (new EditorBooleanOption(
        EditorOption.defaultColorDecorators,
        'defaultColorDecorators',
        false,
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            366,
            "Controls whether inline color decorations should be shown using the default document color provider"
        )) }
    )))),
    pixelRatio: register(( (new EditorPixelRatio()))),
    tabFocusMode: register(( (new EditorBooleanOption(
        EditorOption.tabFocusMode,
        'tabFocusMode',
        false,
        { markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
            _moduleId,
            367,
            "Controls whether the editor receives tabs or defers them to the workbench for navigation."
        )) }
    )))),
    layoutInfo: register(( (new EditorLayoutInfoComputer()))),
    wrappingInfo: register(( (new EditorWrappingInfoComputer()))),
    wrappingIndent: register(( (new WrappingIndentOption()))),
    wrappingStrategy: register(( (new WrappingStrategy())))
};



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/core/eolCounter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/core/eolCounter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StringEOL: () => (/* binding */ StringEOL),
/* harmony export */   countEOL: () => (/* binding */ countEOL)
/* harmony export */ });
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");

var StringEOL;
( (function(StringEOL) {
    StringEOL[StringEOL["Unknown"] = 0] = "Unknown";
    StringEOL[StringEOL["Invalid"] = 3] = "Invalid";
    StringEOL[StringEOL["LF"] = 1] = "LF";
    StringEOL[StringEOL["CRLF"] = 2] = "CRLF";
})(StringEOL || (StringEOL = {})));
function countEOL(text) {
    let eolCount = 0;
    let firstLineLength = 0;
    let lastLineStart = 0;
    let eol = StringEOL.Unknown;
    for (let i = 0, len = text.length; i < len; i++) {
        const chr = text.charCodeAt(i);
        if (chr === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn) {
            if (eolCount === 0) {
                firstLineLength = i;
            }
            eolCount++;
            if (i + 1 < len && text.charCodeAt(i + 1) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed) {
                eol |= StringEOL.CRLF;
                i++;
            }
            else {
                eol |= StringEOL.Invalid;
            }
            lastLineStart = i + 1;
        }
        else if (chr === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed) {
            eol |= StringEOL.LF;
            if (eolCount === 0) {
                firstLineLength = i;
            }
            eolCount++;
            lastLineStart = i + 1;
        }
    }
    if (eolCount === 0) {
        firstLineLength = text.length;
    }
    return [eolCount, firstLineLength, text.length - lastLineStart, eol];
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/core/stringBuilder.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/core/stringBuilder.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StringBuilder: () => (/* binding */ StringBuilder),
/* harmony export */   decodeUTF16LE: () => (/* binding */ decodeUTF16LE),
/* harmony export */   getPlatformTextDecoder: () => (/* binding */ getPlatformTextDecoder)
/* harmony export */ });
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");



let _utf16LE_TextDecoder;
function getUTF16LE_TextDecoder() {
    if (!_utf16LE_TextDecoder) {
        _utf16LE_TextDecoder = ( new TextDecoder('UTF-16LE'));
    }
    return _utf16LE_TextDecoder;
}
let _utf16BE_TextDecoder;
function getUTF16BE_TextDecoder() {
    if (!_utf16BE_TextDecoder) {
        _utf16BE_TextDecoder = ( new TextDecoder('UTF-16BE'));
    }
    return _utf16BE_TextDecoder;
}
let _platformTextDecoder;
function getPlatformTextDecoder() {
    if (!_platformTextDecoder) {
        _platformTextDecoder = (0,_base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian)() ? getUTF16LE_TextDecoder() : getUTF16BE_TextDecoder();
    }
    return _platformTextDecoder;
}
function decodeUTF16LE(source, offset, len) {
    const view = ( new Uint16Array(source.buffer, offset, len));
    if (len > 0 && (view[0] === 0xFEFF || view[0] === 0xFFFE)) {
        return compatDecodeUTF16LE(source, offset, len);
    }
    return getUTF16LE_TextDecoder().decode(view);
}
function compatDecodeUTF16LE(source, offset, len) {
    const result = [];
    let resultLen = 0;
    for (let i = 0; i < len; i++) {
        const charCode = (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_2__.readUInt16LE)(source, offset);
        offset += 2;
        result[resultLen++] = String.fromCharCode(charCode);
    }
    return result.join('');
}
class StringBuilder {
    constructor(capacity) {
        this._capacity = capacity | 0;
        this._buffer = ( new Uint16Array(this._capacity));
        this._completedStrings = null;
        this._bufferLength = 0;
    }
    reset() {
        this._completedStrings = null;
        this._bufferLength = 0;
    }
    build() {
        if (this._completedStrings !== null) {
            this._flushBuffer();
            return this._completedStrings.join('');
        }
        return this._buildBuffer();
    }
    _buildBuffer() {
        if (this._bufferLength === 0) {
            return '';
        }
        const view = ( new Uint16Array(this._buffer.buffer, 0, this._bufferLength));
        return getPlatformTextDecoder().decode(view);
    }
    _flushBuffer() {
        const bufferString = this._buildBuffer();
        this._bufferLength = 0;
        if (this._completedStrings === null) {
            this._completedStrings = [bufferString];
        }
        else {
            this._completedStrings[this._completedStrings.length] = bufferString;
        }
    }
    appendCharCode(charCode) {
        const remainingSpace = this._capacity - this._bufferLength;
        if (remainingSpace <= 1) {
            if (remainingSpace === 0 || (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.isHighSurrogate)(charCode)) {
                this._flushBuffer();
            }
        }
        this._buffer[this._bufferLength++] = charCode;
    }
    appendASCIICharCode(charCode) {
        if (this._bufferLength === this._capacity) {
            this._flushBuffer();
        }
        this._buffer[this._bufferLength++] = charCode;
    }
    appendString(str) {
        const strLen = str.length;
        if (this._bufferLength + strLen >= this._capacity) {
            this._flushBuffer();
            this._completedStrings[this._completedStrings.length] = str;
            return;
        }
        for (let i = 0; i < strLen; i++) {
            this._buffer[this._bufferLength++] = str.charCodeAt(i);
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/core/textChange.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/core/textChange.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextChange: () => (/* binding */ TextChange),
/* harmony export */   compressConsecutiveTextChanges: () => (/* binding */ compressConsecutiveTextChanges)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringBuilder.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/stringBuilder.js");


function escapeNewLine(str) {
    return (str
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r'));
}
class TextChange {
    get oldLength() {
        return this.oldText.length;
    }
    get oldEnd() {
        return this.oldPosition + this.oldText.length;
    }
    get newLength() {
        return this.newText.length;
    }
    get newEnd() {
        return this.newPosition + this.newText.length;
    }
    constructor(oldPosition, oldText, newPosition, newText) {
        this.oldPosition = oldPosition;
        this.oldText = oldText;
        this.newPosition = newPosition;
        this.newText = newText;
    }
    toString() {
        if (this.oldText.length === 0) {
            return `(insert@${this.oldPosition} "${escapeNewLine(this.newText)}")`;
        }
        if (this.newText.length === 0) {
            return `(delete@${this.oldPosition} "${escapeNewLine(this.oldText)}")`;
        }
        return `(replace@${this.oldPosition} "${escapeNewLine(this.oldText)}" with "${escapeNewLine(this.newText)}")`;
    }
    static _writeStringSize(str) {
        return (4 + 2 * str.length);
    }
    static _writeString(b, str, offset) {
        const len = str.length;
        (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.writeUInt32BE)(b, len, offset);
        offset += 4;
        for (let i = 0; i < len; i++) {
            (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.writeUInt16LE)(b, str.charCodeAt(i), offset);
            offset += 2;
        }
        return offset;
    }
    static _readString(b, offset) {
        const len = (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.readUInt32BE)(b, offset);
        offset += 4;
        return (0,_stringBuilder_js__WEBPACK_IMPORTED_MODULE_1__.decodeUTF16LE)(b, offset, len);
    }
    writeSize() {
        return (+4
            + 4
            + TextChange._writeStringSize(this.oldText)
            + TextChange._writeStringSize(this.newText));
    }
    write(b, offset) {
        (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.writeUInt32BE)(b, this.oldPosition, offset);
        offset += 4;
        (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.writeUInt32BE)(b, this.newPosition, offset);
        offset += 4;
        offset = TextChange._writeString(b, this.oldText, offset);
        offset = TextChange._writeString(b, this.newText, offset);
        return offset;
    }
    static read(b, offset, dest) {
        const oldPosition = (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.readUInt32BE)(b, offset);
        offset += 4;
        const newPosition = (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.readUInt32BE)(b, offset);
        offset += 4;
        const oldText = TextChange._readString(b, offset);
        offset += TextChange._writeStringSize(oldText);
        const newText = TextChange._readString(b, offset);
        offset += TextChange._writeStringSize(newText);
        dest.push(( new TextChange(oldPosition, oldText, newPosition, newText)));
        return offset;
    }
}
function compressConsecutiveTextChanges(prevEdits, currEdits) {
    if (prevEdits === null || prevEdits.length === 0) {
        return currEdits;
    }
    const compressor = ( new TextChangeCompressor(prevEdits, currEdits));
    return compressor.compress();
}
class TextChangeCompressor {
    constructor(prevEdits, currEdits) {
        this._prevEdits = prevEdits;
        this._currEdits = currEdits;
        this._result = [];
        this._resultLen = 0;
        this._prevLen = this._prevEdits.length;
        this._prevDeltaOffset = 0;
        this._currLen = this._currEdits.length;
        this._currDeltaOffset = 0;
    }
    compress() {
        let prevIndex = 0;
        let currIndex = 0;
        let prevEdit = this._getPrev(prevIndex);
        let currEdit = this._getCurr(currIndex);
        while (prevIndex < this._prevLen || currIndex < this._currLen) {
            if (prevEdit === null) {
                this._acceptCurr(currEdit);
                currEdit = this._getCurr(++currIndex);
                continue;
            }
            if (currEdit === null) {
                this._acceptPrev(prevEdit);
                prevEdit = this._getPrev(++prevIndex);
                continue;
            }
            if (currEdit.oldEnd <= prevEdit.newPosition) {
                this._acceptCurr(currEdit);
                currEdit = this._getCurr(++currIndex);
                continue;
            }
            if (prevEdit.newEnd <= currEdit.oldPosition) {
                this._acceptPrev(prevEdit);
                prevEdit = this._getPrev(++prevIndex);
                continue;
            }
            if (currEdit.oldPosition < prevEdit.newPosition) {
                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newPosition - currEdit.oldPosition);
                this._acceptCurr(e1);
                currEdit = e2;
                continue;
            }
            if (prevEdit.newPosition < currEdit.oldPosition) {
                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldPosition - prevEdit.newPosition);
                this._acceptPrev(e1);
                prevEdit = e2;
                continue;
            }
            let mergePrev;
            let mergeCurr;
            if (currEdit.oldEnd === prevEdit.newEnd) {
                mergePrev = prevEdit;
                mergeCurr = currEdit;
                prevEdit = this._getPrev(++prevIndex);
                currEdit = this._getCurr(++currIndex);
            }
            else if (currEdit.oldEnd < prevEdit.newEnd) {
                const [e1, e2] = TextChangeCompressor._splitPrev(prevEdit, currEdit.oldLength);
                mergePrev = e1;
                mergeCurr = currEdit;
                prevEdit = e2;
                currEdit = this._getCurr(++currIndex);
            }
            else {
                const [e1, e2] = TextChangeCompressor._splitCurr(currEdit, prevEdit.newLength);
                mergePrev = prevEdit;
                mergeCurr = e1;
                prevEdit = this._getPrev(++prevIndex);
                currEdit = e2;
            }
            this._result[this._resultLen++] = ( new TextChange(
                mergePrev.oldPosition,
                mergePrev.oldText,
                mergeCurr.newPosition,
                mergeCurr.newText
            ));
            this._prevDeltaOffset += mergePrev.newLength - mergePrev.oldLength;
            this._currDeltaOffset += mergeCurr.newLength - mergeCurr.oldLength;
        }
        const merged = TextChangeCompressor._merge(this._result);
        const cleaned = TextChangeCompressor._removeNoOps(merged);
        return cleaned;
    }
    _acceptCurr(currEdit) {
        this._result[this._resultLen++] = TextChangeCompressor._rebaseCurr(this._prevDeltaOffset, currEdit);
        this._currDeltaOffset += currEdit.newLength - currEdit.oldLength;
    }
    _getCurr(currIndex) {
        return (currIndex < this._currLen ? this._currEdits[currIndex] : null);
    }
    _acceptPrev(prevEdit) {
        this._result[this._resultLen++] = TextChangeCompressor._rebasePrev(this._currDeltaOffset, prevEdit);
        this._prevDeltaOffset += prevEdit.newLength - prevEdit.oldLength;
    }
    _getPrev(prevIndex) {
        return (prevIndex < this._prevLen ? this._prevEdits[prevIndex] : null);
    }
    static _rebaseCurr(prevDeltaOffset, currEdit) {
        return ( new TextChange(
            currEdit.oldPosition - prevDeltaOffset,
            currEdit.oldText,
            currEdit.newPosition,
            currEdit.newText
        ));
    }
    static _rebasePrev(currDeltaOffset, prevEdit) {
        return ( new TextChange(
            prevEdit.oldPosition,
            prevEdit.oldText,
            prevEdit.newPosition + currDeltaOffset,
            prevEdit.newText
        ));
    }
    static _splitPrev(edit, offset) {
        const preText = edit.newText.substr(0, offset);
        const postText = edit.newText.substr(offset);
        return [
            ( new TextChange(edit.oldPosition, edit.oldText, edit.newPosition, preText)),
            ( new TextChange(edit.oldEnd, '', edit.newPosition + offset, postText))
        ];
    }
    static _splitCurr(edit, offset) {
        const preText = edit.oldText.substr(0, offset);
        const postText = edit.oldText.substr(offset);
        return [
            ( new TextChange(edit.oldPosition, preText, edit.newPosition, edit.newText)),
            ( new TextChange(edit.oldPosition + offset, postText, edit.newEnd, ''))
        ];
    }
    static _merge(edits) {
        if (edits.length === 0) {
            return edits;
        }
        const result = [];
        let resultLen = 0;
        let prev = edits[0];
        for (let i = 1; i < edits.length; i++) {
            const curr = edits[i];
            if (prev.oldEnd === curr.oldPosition) {
                prev = ( new TextChange(
                    prev.oldPosition,
                    prev.oldText + curr.oldText,
                    prev.newPosition,
                    prev.newText + curr.newText
                ));
            }
            else {
                result[resultLen++] = prev;
                prev = curr;
            }
        }
        result[resultLen++] = prev;
        return result;
    }
    static _removeNoOps(edits) {
        if (edits.length === 0) {
            return edits;
        }
        const result = [];
        let resultLen = 0;
        for (let i = 0; i < edits.length; i++) {
            const edit = edits[i];
            if (edit.oldText === edit.newText) {
                continue;
            }
            result[resultLen++] = edit;
        }
        return result;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/core/textModelDefaults.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/core/textModelDefaults.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EDITOR_MODEL_DEFAULTS: () => (/* binding */ EDITOR_MODEL_DEFAULTS)
/* harmony export */ });
const EDITOR_MODEL_DEFAULTS = {
    tabSize: 4,
    indentSize: 4,
    insertSpaces: true,
    detectIndentation: true,
    trimAutoWhitespace: true,
    largeFileOptimizations: true,
    bracketPairColorizationOptions: {
        enabled: true,
        independentColorPoolPerBracketType: false,
    },
};



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/languageSelector.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/languageSelector.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   score: () => (/* binding */ score),
/* harmony export */   targetsNotebooks: () => (/* binding */ targetsNotebooks)
/* harmony export */ });
/* harmony import */ var _base_common_glob_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/glob.js */ "./node_modules/vscode/vscode/src/vs/base/common/glob.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");


function score(selector, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType) {
    if (Array.isArray(selector)) {
        let ret = 0;
        for (const filter of selector) {
            const value = score(filter, candidateUri, candidateLanguage, candidateIsSynchronized, candidateNotebookUri, candidateNotebookType);
            if (value === 10) {
                return value;
            }
            if (value > ret) {
                ret = value;
            }
        }
        return ret;
    }
    else if (typeof selector === 'string') {
        if (!candidateIsSynchronized) {
            return 0;
        }
        if (selector === '*') {
            return 5;
        }
        else if (selector === candidateLanguage) {
            return 10;
        }
        else {
            return 0;
        }
    }
    else if (selector) {
        const { language, pattern, scheme, hasAccessToAllModels, notebookType } = selector;
        if (!candidateIsSynchronized && !hasAccessToAllModels) {
            return 0;
        }
        if (notebookType && candidateNotebookUri) {
            candidateUri = candidateNotebookUri;
        }
        let ret = 0;
        if (scheme) {
            if (scheme === candidateUri.scheme) {
                ret = 10;
            }
            else if (scheme === '*') {
                ret = 5;
            }
            else {
                return 0;
            }
        }
        if (language) {
            if (language === candidateLanguage) {
                ret = 10;
            }
            else if (language === '*') {
                ret = Math.max(ret, 5);
            }
            else {
                return 0;
            }
        }
        if (notebookType) {
            if (notebookType === candidateNotebookType) {
                ret = 10;
            }
            else if (notebookType === '*' && candidateNotebookType !== undefined) {
                ret = Math.max(ret, 5);
            }
            else {
                return 0;
            }
        }
        if (pattern) {
            let normalizedPattern;
            if (typeof pattern === 'string') {
                normalizedPattern = pattern;
            }
            else {
                normalizedPattern = { ...pattern, base: (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(pattern.base) };
            }
            if (normalizedPattern === candidateUri.fsPath || (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_0__.match)(normalizedPattern, candidateUri.fsPath)) {
                ret = 10;
            }
            else {
                return 0;
            }
        }
        return ret;
    }
    else {
        return 0;
    }
}
function targetsNotebooks(selector) {
    if (typeof selector === 'string') {
        return false;
    }
    else if (Array.isArray(selector)) {
        return ( selector.some(targetsNotebooks));
    }
    else {
        return !!selector.notebookType;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/languages/languageConfiguration.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/languages/languageConfiguration.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AutoClosingPairs: () => (/* binding */ AutoClosingPairs),
/* harmony export */   IndentAction: () => (/* binding */ IndentAction),
/* harmony export */   StandardAutoClosingPairConditional: () => (/* binding */ StandardAutoClosingPairConditional)
/* harmony export */ });
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encodedTokenAttributes.js */ "./node_modules/vscode/vscode/src/vs/editor/common/encodedTokenAttributes.js");


var IndentAction;
( (function(IndentAction) {
    IndentAction[IndentAction["None"] = 0] = "None";
    IndentAction[IndentAction["Indent"] = 1] = "Indent";
    IndentAction[IndentAction["IndentOutdent"] = 2] = "IndentOutdent";
    IndentAction[IndentAction["Outdent"] = 3] = "Outdent";
})(IndentAction || (IndentAction = {})));
class StandardAutoClosingPairConditional {
    constructor(source) {
        this._neutralCharacter = null;
        this._neutralCharacterSearched = false;
        this.open = source.open;
        this.close = source.close;
        this._inString = true;
        this._inComment = true;
        this._inRegEx = true;
        if (Array.isArray(source.notIn)) {
            for (let i = 0, len = source.notIn.length; i < len; i++) {
                const notIn = source.notIn[i];
                switch (notIn) {
                    case 'string':
                        this._inString = false;
                        break;
                    case 'comment':
                        this._inComment = false;
                        break;
                    case 'regex':
                        this._inRegEx = false;
                        break;
                }
            }
        }
    }
    isOK(standardToken) {
        switch (standardToken) {
            case _encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_1__.StandardTokenType.Other:
                return true;
            case _encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_1__.StandardTokenType.Comment:
                return this._inComment;
            case _encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_1__.StandardTokenType.String:
                return this._inString;
            case _encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_1__.StandardTokenType.RegEx:
                return this._inRegEx;
        }
    }
    shouldAutoClose(context, column) {
        if (context.getTokenCount() === 0) {
            return true;
        }
        const tokenIndex = context.findTokenIndexAtOffset(column - 2);
        const standardTokenType = context.getStandardTokenType(tokenIndex);
        return this.isOK(standardTokenType);
    }
    _findNeutralCharacterInRange(fromCharCode, toCharCode) {
        for (let charCode = fromCharCode; charCode <= toCharCode; charCode++) {
            const character = String.fromCharCode(charCode);
            if (!this.open.includes(character) && !this.close.includes(character)) {
                return character;
            }
        }
        return null;
    }
    findNeutralCharacter() {
        if (!this._neutralCharacterSearched) {
            this._neutralCharacterSearched = true;
            if (!this._neutralCharacter) {
                this._neutralCharacter = this._findNeutralCharacterInRange(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Digit0, _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Digit9);
            }
            if (!this._neutralCharacter) {
                this._neutralCharacter = this._findNeutralCharacterInRange(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.a, _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.z);
            }
            if (!this._neutralCharacter) {
                this._neutralCharacter = this._findNeutralCharacterInRange(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.A, _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Z);
            }
        }
        return this._neutralCharacter;
    }
}
class AutoClosingPairs {
    constructor(autoClosingPairs) {
        this.autoClosingPairsOpenByStart = ( new Map());
        this.autoClosingPairsOpenByEnd = ( new Map());
        this.autoClosingPairsCloseByStart = ( new Map());
        this.autoClosingPairsCloseByEnd = ( new Map());
        this.autoClosingPairsCloseSingleChar = ( new Map());
        for (const pair of autoClosingPairs) {
            appendEntry(this.autoClosingPairsOpenByStart, pair.open.charAt(0), pair);
            appendEntry(this.autoClosingPairsOpenByEnd, pair.open.charAt(pair.open.length - 1), pair);
            appendEntry(this.autoClosingPairsCloseByStart, pair.close.charAt(0), pair);
            appendEntry(this.autoClosingPairsCloseByEnd, pair.close.charAt(pair.close.length - 1), pair);
            if (pair.close.length === 1 && pair.open.length === 1) {
                appendEntry(this.autoClosingPairsCloseSingleChar, pair.close, pair);
            }
        }
    }
}
function appendEntry(target, key, value) {
    if (( target.has(key))) {
        target.get(key).push(value);
    }
    else {
        target.set(key, [value]);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Piece: () => (/* binding */ Piece),
/* harmony export */   PieceTreeBase: () => (/* binding */ PieceTreeBase),
/* harmony export */   StringBuffer: () => (/* binding */ StringBuffer),
/* harmony export */   createLineStarts: () => (/* binding */ createLineStarts),
/* harmony export */   createLineStartsFast: () => (/* binding */ createLineStartsFast)
/* harmony export */ });
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _core_position_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/position.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/position.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model.js");
/* harmony import */ var _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rbTreeBase.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js");
/* harmony import */ var _textModelSearch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../textModelSearch.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/textModelSearch.js");






const AverageBufferSize = 65535;
function createUintArray(arr) {
    let r;
    if (arr[arr.length - 1] < 65536) {
        r = ( new Uint16Array(arr.length));
    }
    else {
        r = ( new Uint32Array(arr.length));
    }
    r.set(arr, 0);
    return r;
}
class LineStarts {
    constructor(lineStarts, cr, lf, crlf, isBasicASCII) {
        this.lineStarts = lineStarts;
        this.cr = cr;
        this.lf = lf;
        this.crlf = crlf;
        this.isBasicASCII = isBasicASCII;
    }
}
function createLineStartsFast(str, readonly = true) {
    const r = [0];
    let rLength = 1;
    for (let i = 0, len = str.length; i < len; i++) {
        const chr = str.charCodeAt(i);
        if (chr === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn) {
            if (i + 1 < len && str.charCodeAt(i + 1) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed) {
                r[rLength++] = i + 2;
                i++;
            }
            else {
                r[rLength++] = i + 1;
            }
        }
        else if (chr === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed) {
            r[rLength++] = i + 1;
        }
    }
    if (readonly) {
        return createUintArray(r);
    }
    else {
        return r;
    }
}
function createLineStarts(r, str) {
    r.length = 0;
    r[0] = 0;
    let rLength = 1;
    let cr = 0, lf = 0, crlf = 0;
    let isBasicASCII = true;
    for (let i = 0, len = str.length; i < len; i++) {
        const chr = str.charCodeAt(i);
        if (chr === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn) {
            if (i + 1 < len && str.charCodeAt(i + 1) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed) {
                crlf++;
                r[rLength++] = i + 2;
                i++;
            }
            else {
                cr++;
                r[rLength++] = i + 1;
            }
        }
        else if (chr === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed) {
            lf++;
            r[rLength++] = i + 1;
        }
        else {
            if (isBasicASCII) {
                if (chr !== _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Tab && (chr < 32 || chr > 126)) {
                    isBasicASCII = false;
                }
            }
        }
    }
    const result = ( new LineStarts(createUintArray(r), cr, lf, crlf, isBasicASCII));
    r.length = 0;
    return result;
}
class Piece {
    constructor(bufferIndex, start, end, lineFeedCnt, length) {
        this.bufferIndex = bufferIndex;
        this.start = start;
        this.end = end;
        this.lineFeedCnt = lineFeedCnt;
        this.length = length;
    }
}
class StringBuffer {
    constructor(buffer, lineStarts) {
        this.buffer = buffer;
        this.lineStarts = lineStarts;
    }
}
class PieceTreeSnapshot {
    constructor(tree, BOM) {
        this._pieces = [];
        this._tree = tree;
        this._BOM = BOM;
        this._index = 0;
        if (tree.root !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            tree.iterate(tree.root, node => {
                if (node !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
                    this._pieces.push(node.piece);
                }
                return true;
            });
        }
    }
    read() {
        if (this._pieces.length === 0) {
            if (this._index === 0) {
                this._index++;
                return this._BOM;
            }
            else {
                return null;
            }
        }
        if (this._index > this._pieces.length - 1) {
            return null;
        }
        if (this._index === 0) {
            return this._BOM + this._tree.getPieceContent(this._pieces[this._index++]);
        }
        return this._tree.getPieceContent(this._pieces[this._index++]);
    }
}
class PieceTreeSearchCache {
    constructor(limit) {
        this._limit = limit;
        this._cache = [];
    }
    get(offset) {
        for (let i = this._cache.length - 1; i >= 0; i--) {
            const nodePos = this._cache[i];
            if (nodePos.nodeStartOffset <= offset && nodePos.nodeStartOffset + nodePos.node.piece.length >= offset) {
                return nodePos;
            }
        }
        return null;
    }
    get2(lineNumber) {
        for (let i = this._cache.length - 1; i >= 0; i--) {
            const nodePos = this._cache[i];
            if (nodePos.nodeStartLineNumber && nodePos.nodeStartLineNumber < lineNumber && nodePos.nodeStartLineNumber + nodePos.node.piece.lineFeedCnt >= lineNumber) {
                return nodePos;
            }
        }
        return null;
    }
    set(nodePosition) {
        if (this._cache.length >= this._limit) {
            this._cache.shift();
        }
        this._cache.push(nodePosition);
    }
    validate(offset) {
        let hasInvalidVal = false;
        const tmp = this._cache;
        for (let i = 0; i < tmp.length; i++) {
            const nodePos = tmp[i];
            if (nodePos.node.parent === null || nodePos.nodeStartOffset >= offset) {
                tmp[i] = null;
                hasInvalidVal = true;
                continue;
            }
        }
        if (hasInvalidVal) {
            const newArr = [];
            for (const entry of tmp) {
                if (entry !== null) {
                    newArr.push(entry);
                }
            }
            this._cache = newArr;
        }
    }
}
class PieceTreeBase {
    constructor(chunks, eol, eolNormalized) {
        this.create(chunks, eol, eolNormalized);
    }
    create(chunks, eol, eolNormalized) {
        this._buffers = [
            ( new StringBuffer('', [0]))
        ];
        this._lastChangeBufferPos = { line: 0, column: 0 };
        this.root = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL;
        this._lineCnt = 1;
        this._length = 0;
        this._EOL = eol;
        this._EOLLength = eol.length;
        this._EOLNormalized = eolNormalized;
        let lastNode = null;
        for (let i = 0, len = chunks.length; i < len; i++) {
            if (chunks[i].buffer.length > 0) {
                if (!chunks[i].lineStarts) {
                    chunks[i].lineStarts = createLineStartsFast(chunks[i].buffer);
                }
                const piece = ( new Piece(
                    i + 1,
                    { line: 0, column: 0 },
                    { line: chunks[i].lineStarts.length - 1, column: chunks[i].buffer.length - chunks[i].lineStarts[chunks[i].lineStarts.length - 1] },
                    chunks[i].lineStarts.length - 1,
                    chunks[i].buffer.length
                ));
                this._buffers.push(chunks[i]);
                lastNode = this.rbInsertRight(lastNode, piece);
            }
        }
        this._searchCache = ( new PieceTreeSearchCache(1));
        this._lastVisitedLine = { lineNumber: 0, value: '' };
        this.computeBufferMetadata();
    }
    normalizeEOL(eol) {
        const averageBufferSize = AverageBufferSize;
        const min = averageBufferSize - Math.floor(averageBufferSize / 3);
        const max = min * 2;
        let tempChunk = '';
        let tempChunkLen = 0;
        const chunks = [];
        this.iterate(this.root, node => {
            const str = this.getNodeContent(node);
            const len = str.length;
            if (tempChunkLen <= min || tempChunkLen + len < max) {
                tempChunk += str;
                tempChunkLen += len;
                return true;
            }
            const text = tempChunk.replace(/\r\n|\r|\n/g, eol);
            chunks.push(( new StringBuffer(text, createLineStartsFast(text))));
            tempChunk = str;
            tempChunkLen = len;
            return true;
        });
        if (tempChunkLen > 0) {
            const text = tempChunk.replace(/\r\n|\r|\n/g, eol);
            chunks.push(( new StringBuffer(text, createLineStartsFast(text))));
        }
        this.create(chunks, eol, true);
    }
    getEOL() {
        return this._EOL;
    }
    setEOL(newEOL) {
        this._EOL = newEOL;
        this._EOLLength = this._EOL.length;
        this.normalizeEOL(newEOL);
    }
    createSnapshot(BOM) {
        return ( new PieceTreeSnapshot(this, BOM));
    }
    equal(other) {
        if (this.getLength() !== other.getLength()) {
            return false;
        }
        if (this.getLineCount() !== other.getLineCount()) {
            return false;
        }
        let offset = 0;
        const ret = this.iterate(this.root, node => {
            if (node === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
                return true;
            }
            const str = this.getNodeContent(node);
            const len = str.length;
            const startPosition = other.nodeAt(offset);
            const endPosition = other.nodeAt(offset + len);
            const val = other.getValueInRange2(startPosition, endPosition);
            offset += len;
            return str === val;
        });
        return ret;
    }
    getOffsetAt(lineNumber, column) {
        let leftLen = 0;
        let x = this.root;
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            if (x.left !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL && x.lf_left + 1 >= lineNumber) {
                x = x.left;
            }
            else if (x.lf_left + x.piece.lineFeedCnt + 1 >= lineNumber) {
                leftLen += x.size_left;
                const accumualtedValInCurrentIndex = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);
                return leftLen += accumualtedValInCurrentIndex + column - 1;
            }
            else {
                lineNumber -= x.lf_left + x.piece.lineFeedCnt;
                leftLen += x.size_left + x.piece.length;
                x = x.right;
            }
        }
        return leftLen;
    }
    getPositionAt(offset) {
        offset = Math.floor(offset);
        offset = Math.max(0, offset);
        let x = this.root;
        let lfCnt = 0;
        const originalOffset = offset;
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            if (x.size_left !== 0 && x.size_left >= offset) {
                x = x.left;
            }
            else if (x.size_left + x.piece.length >= offset) {
                const out = this.getIndexOf(x, offset - x.size_left);
                lfCnt += x.lf_left + out.index;
                if (out.index === 0) {
                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);
                    const column = originalOffset - lineStartOffset;
                    return ( new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(lfCnt + 1, column + 1));
                }
                return ( new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(lfCnt + 1, out.remainder + 1));
            }
            else {
                offset -= x.size_left + x.piece.length;
                lfCnt += x.lf_left + x.piece.lineFeedCnt;
                if (x.right === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
                    const lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);
                    const column = originalOffset - offset - lineStartOffset;
                    return ( new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(lfCnt + 1, column + 1));
                }
                else {
                    x = x.right;
                }
            }
        }
        return ( new _core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position(1, 1));
    }
    getValueInRange(range, eol) {
        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {
            return '';
        }
        const startPosition = this.nodeAt2(range.startLineNumber, range.startColumn);
        const endPosition = this.nodeAt2(range.endLineNumber, range.endColumn);
        const value = this.getValueInRange2(startPosition, endPosition);
        if (eol) {
            if (eol !== this._EOL || !this._EOLNormalized) {
                return value.replace(/\r\n|\r|\n/g, eol);
            }
            if (eol === this.getEOL() && this._EOLNormalized) {
                return value;
            }
            return value.replace(/\r\n|\r|\n/g, eol);
        }
        return value;
    }
    getValueInRange2(startPosition, endPosition) {
        if (startPosition.node === endPosition.node) {
            const node = startPosition.node;
            const buffer = this._buffers[node.piece.bufferIndex].buffer;
            const startOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);
            return buffer.substring(startOffset + startPosition.remainder, startOffset + endPosition.remainder);
        }
        let x = startPosition.node;
        const buffer = this._buffers[x.piece.bufferIndex].buffer;
        const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);
        let ret = buffer.substring(startOffset + startPosition.remainder, startOffset + x.piece.length);
        x = x.next();
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            const buffer = this._buffers[x.piece.bufferIndex].buffer;
            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);
            if (x === endPosition.node) {
                ret += buffer.substring(startOffset, startOffset + endPosition.remainder);
                break;
            }
            else {
                ret += buffer.substr(startOffset, x.piece.length);
            }
            x = x.next();
        }
        return ret;
    }
    getLinesContent() {
        const lines = [];
        let linesLength = 0;
        let currentLine = '';
        let danglingCR = false;
        this.iterate(this.root, node => {
            if (node === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
                return true;
            }
            const piece = node.piece;
            let pieceLength = piece.length;
            if (pieceLength === 0) {
                return true;
            }
            const buffer = this._buffers[piece.bufferIndex].buffer;
            const lineStarts = this._buffers[piece.bufferIndex].lineStarts;
            const pieceStartLine = piece.start.line;
            const pieceEndLine = piece.end.line;
            let pieceStartOffset = lineStarts[pieceStartLine] + piece.start.column;
            if (danglingCR) {
                if (buffer.charCodeAt(pieceStartOffset) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed) {
                    pieceStartOffset++;
                    pieceLength--;
                }
                lines[linesLength++] = currentLine;
                currentLine = '';
                danglingCR = false;
                if (pieceLength === 0) {
                    return true;
                }
            }
            if (pieceStartLine === pieceEndLine) {
                if (!this._EOLNormalized && buffer.charCodeAt(pieceStartOffset + pieceLength - 1) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn) {
                    danglingCR = true;
                    currentLine += buffer.substr(pieceStartOffset, pieceLength - 1);
                }
                else {
                    currentLine += buffer.substr(pieceStartOffset, pieceLength);
                }
                return true;
            }
            currentLine += (this._EOLNormalized
                ? buffer.substring(pieceStartOffset, Math.max(pieceStartOffset, lineStarts[pieceStartLine + 1] - this._EOLLength))
                : buffer.substring(pieceStartOffset, lineStarts[pieceStartLine + 1]).replace(/(\r\n|\r|\n)$/, ''));
            lines[linesLength++] = currentLine;
            for (let line = pieceStartLine + 1; line < pieceEndLine; line++) {
                currentLine = (this._EOLNormalized
                    ? buffer.substring(lineStarts[line], lineStarts[line + 1] - this._EOLLength)
                    : buffer.substring(lineStarts[line], lineStarts[line + 1]).replace(/(\r\n|\r|\n)$/, ''));
                lines[linesLength++] = currentLine;
            }
            if (!this._EOLNormalized && buffer.charCodeAt(lineStarts[pieceEndLine] + piece.end.column - 1) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn) {
                danglingCR = true;
                if (piece.end.column === 0) {
                    linesLength--;
                }
                else {
                    currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column - 1);
                }
            }
            else {
                currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column);
            }
            return true;
        });
        if (danglingCR) {
            lines[linesLength++] = currentLine;
            currentLine = '';
        }
        lines[linesLength++] = currentLine;
        return lines;
    }
    getLength() {
        return this._length;
    }
    getLineCount() {
        return this._lineCnt;
    }
    getLineContent(lineNumber) {
        if (this._lastVisitedLine.lineNumber === lineNumber) {
            return this._lastVisitedLine.value;
        }
        this._lastVisitedLine.lineNumber = lineNumber;
        if (lineNumber === this._lineCnt) {
            this._lastVisitedLine.value = this.getLineRawContent(lineNumber);
        }
        else if (this._EOLNormalized) {
            this._lastVisitedLine.value = this.getLineRawContent(lineNumber, this._EOLLength);
        }
        else {
            this._lastVisitedLine.value = this.getLineRawContent(lineNumber).replace(/(\r\n|\r|\n)$/, '');
        }
        return this._lastVisitedLine.value;
    }
    _getCharCode(nodePos) {
        if (nodePos.remainder === nodePos.node.piece.length) {
            const matchingNode = nodePos.node.next();
            if (!matchingNode) {
                return 0;
            }
            const buffer = this._buffers[matchingNode.piece.bufferIndex];
            const startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);
            return buffer.buffer.charCodeAt(startOffset);
        }
        else {
            const buffer = this._buffers[nodePos.node.piece.bufferIndex];
            const startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);
            const targetOffset = startOffset + nodePos.remainder;
            return buffer.buffer.charCodeAt(targetOffset);
        }
    }
    getLineCharCode(lineNumber, index) {
        const nodePos = this.nodeAt2(lineNumber, index + 1);
        return this._getCharCode(nodePos);
    }
    getLineLength(lineNumber) {
        if (lineNumber === this.getLineCount()) {
            const startOffset = this.getOffsetAt(lineNumber, 1);
            return this.getLength() - startOffset;
        }
        return this.getOffsetAt(lineNumber + 1, 1) - this.getOffsetAt(lineNumber, 1) - this._EOLLength;
    }
    getCharCode(offset) {
        const nodePos = this.nodeAt(offset);
        return this._getCharCode(nodePos);
    }
    getNearestChunk(offset) {
        const nodePos = this.nodeAt(offset);
        if (nodePos.remainder === nodePos.node.piece.length) {
            const matchingNode = nodePos.node.next();
            if (!matchingNode || matchingNode === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
                return '';
            }
            const buffer = this._buffers[matchingNode.piece.bufferIndex];
            const startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);
            return buffer.buffer.substring(startOffset, startOffset + matchingNode.piece.length);
        }
        else {
            const buffer = this._buffers[nodePos.node.piece.bufferIndex];
            const startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);
            const targetOffset = startOffset + nodePos.remainder;
            const targetEnd = startOffset + nodePos.node.piece.length;
            return buffer.buffer.substring(targetOffset, targetEnd);
        }
    }
    findMatchesInNode(node, searcher, startLineNumber, startColumn, startCursor, endCursor, searchData, captureMatches, limitResultCount, resultLen, result) {
        const buffer = this._buffers[node.piece.bufferIndex];
        const startOffsetInBuffer = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);
        const start = this.offsetInBuffer(node.piece.bufferIndex, startCursor);
        const end = this.offsetInBuffer(node.piece.bufferIndex, endCursor);
        let m;
        const ret = { line: 0, column: 0 };
        let searchText;
        let offsetInBuffer;
        if (searcher._wordSeparators) {
            searchText = buffer.buffer.substring(start, end);
            offsetInBuffer = (offset) => offset + start;
            searcher.reset(0);
        }
        else {
            searchText = buffer.buffer;
            offsetInBuffer = (offset) => offset;
            searcher.reset(start);
        }
        do {
            m = searcher.next(searchText);
            if (m) {
                if (offsetInBuffer(m.index) >= end) {
                    return resultLen;
                }
                this.positionInBuffer(node, offsetInBuffer(m.index) - startOffsetInBuffer, ret);
                const lineFeedCnt = this.getLineFeedCnt(node.piece.bufferIndex, startCursor, ret);
                const retStartColumn = ret.line === startCursor.line ? ret.column - startCursor.column + startColumn : ret.column + 1;
                const retEndColumn = retStartColumn + m[0].length;
                result[resultLen++] = (0,_textModelSearch_js__WEBPACK_IMPORTED_MODULE_5__.createFindMatch)(( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
                    startLineNumber + lineFeedCnt,
                    retStartColumn,
                    startLineNumber + lineFeedCnt,
                    retEndColumn
                )), m, captureMatches);
                if (offsetInBuffer(m.index) + m[0].length >= end) {
                    return resultLen;
                }
                if (resultLen >= limitResultCount) {
                    return resultLen;
                }
            }
        } while (m);
        return resultLen;
    }
    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {
        const result = [];
        let resultLen = 0;
        const searcher = ( new _textModelSearch_js__WEBPACK_IMPORTED_MODULE_5__.Searcher(searchData.wordSeparators, searchData.regex));
        let startPosition = this.nodeAt2(searchRange.startLineNumber, searchRange.startColumn);
        if (startPosition === null) {
            return [];
        }
        const endPosition = this.nodeAt2(searchRange.endLineNumber, searchRange.endColumn);
        if (endPosition === null) {
            return [];
        }
        let start = this.positionInBuffer(startPosition.node, startPosition.remainder);
        const end = this.positionInBuffer(endPosition.node, endPosition.remainder);
        if (startPosition.node === endPosition.node) {
            this.findMatchesInNode(startPosition.node, searcher, searchRange.startLineNumber, searchRange.startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);
            return result;
        }
        let startLineNumber = searchRange.startLineNumber;
        let currentNode = startPosition.node;
        while (currentNode !== endPosition.node) {
            const lineBreakCnt = this.getLineFeedCnt(currentNode.piece.bufferIndex, start, currentNode.piece.end);
            if (lineBreakCnt >= 1) {
                const lineStarts = this._buffers[currentNode.piece.bufferIndex].lineStarts;
                const startOffsetInBuffer = this.offsetInBuffer(currentNode.piece.bufferIndex, currentNode.piece.start);
                const nextLineStartOffset = lineStarts[start.line + lineBreakCnt];
                const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;
                resultLen = this.findMatchesInNode(currentNode, searcher, startLineNumber, startColumn, start, this.positionInBuffer(currentNode, nextLineStartOffset - startOffsetInBuffer), searchData, captureMatches, limitResultCount, resultLen, result);
                if (resultLen >= limitResultCount) {
                    return result;
                }
                startLineNumber += lineBreakCnt;
            }
            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;
            if (startLineNumber === searchRange.endLineNumber) {
                const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);
                resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);
                return result;
            }
            resultLen = this._findMatchesInLine(searchData, searcher, this.getLineContent(startLineNumber).substr(startColumn), startLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);
            if (resultLen >= limitResultCount) {
                return result;
            }
            startLineNumber++;
            startPosition = this.nodeAt2(startLineNumber, 1);
            currentNode = startPosition.node;
            start = this.positionInBuffer(startPosition.node, startPosition.remainder);
        }
        if (startLineNumber === searchRange.endLineNumber) {
            const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;
            const text = this.getLineContent(startLineNumber).substring(startColumn, searchRange.endColumn - 1);
            resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn, resultLen, result, captureMatches, limitResultCount);
            return result;
        }
        const startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;
        resultLen = this.findMatchesInNode(endPosition.node, searcher, startLineNumber, startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);
        return result;
    }
    _findMatchesInLine(searchData, searcher, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {
        const wordSeparators = searchData.wordSeparators;
        if (!captureMatches && searchData.simpleSearch) {
            const searchString = searchData.simpleSearch;
            const searchStringLen = searchString.length;
            const textLength = text.length;
            let lastMatchIndex = -searchStringLen;
            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {
                if (!wordSeparators || (0,_textModelSearch_js__WEBPACK_IMPORTED_MODULE_5__.isValidMatch)(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {
                    result[resultLen++] = ( new _model_js__WEBPACK_IMPORTED_MODULE_3__.FindMatch(( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
                        lineNumber,
                        lastMatchIndex + 1 + deltaOffset,
                        lineNumber,
                        lastMatchIndex + 1 + searchStringLen + deltaOffset
                    )), null));
                    if (resultLen >= limitResultCount) {
                        return resultLen;
                    }
                }
            }
            return resultLen;
        }
        let m;
        searcher.reset(0);
        do {
            m = searcher.next(text);
            if (m) {
                result[resultLen++] = (0,_textModelSearch_js__WEBPACK_IMPORTED_MODULE_5__.createFindMatch)(( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
                    lineNumber,
                    m.index + 1 + deltaOffset,
                    lineNumber,
                    m.index + 1 + m[0].length + deltaOffset
                )), m, captureMatches);
                if (resultLen >= limitResultCount) {
                    return resultLen;
                }
            }
        } while (m);
        return resultLen;
    }
    insert(offset, value, eolNormalized = false) {
        this._EOLNormalized = this._EOLNormalized && eolNormalized;
        this._lastVisitedLine.lineNumber = 0;
        this._lastVisitedLine.value = '';
        if (this.root !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            const { node, remainder, nodeStartOffset } = this.nodeAt(offset);
            const piece = node.piece;
            const bufferIndex = piece.bufferIndex;
            const insertPosInBuffer = this.positionInBuffer(node, remainder);
            if (node.piece.bufferIndex === 0 &&
                piece.end.line === this._lastChangeBufferPos.line &&
                piece.end.column === this._lastChangeBufferPos.column &&
                (nodeStartOffset + piece.length === offset) &&
                value.length < AverageBufferSize) {
                this.appendToNode(node, value);
                this.computeBufferMetadata();
                return;
            }
            if (nodeStartOffset === offset) {
                this.insertContentToNodeLeft(value, node);
                this._searchCache.validate(offset);
            }
            else if (nodeStartOffset + node.piece.length > offset) {
                const nodesToDel = [];
                let newRightPiece = ( new Piece(
                    piece.bufferIndex,
                    insertPosInBuffer,
                    piece.end,
                    this.getLineFeedCnt(piece.bufferIndex, insertPosInBuffer, piece.end),
                    this.offsetInBuffer(bufferIndex, piece.end) - this.offsetInBuffer(bufferIndex, insertPosInBuffer)
                ));
                if (this.shouldCheckCRLF() && this.endWithCR(value)) {
                    const headOfRight = this.nodeCharCodeAt(node, remainder);
                    if (headOfRight === 10 ) {
                        const newStart = { line: newRightPiece.start.line + 1, column: 0 };
                        newRightPiece = ( new Piece(
                            newRightPiece.bufferIndex,
                            newStart,
                            newRightPiece.end,
                            this.getLineFeedCnt(newRightPiece.bufferIndex, newStart, newRightPiece.end),
                            newRightPiece.length - 1
                        ));
                        value += '\n';
                    }
                }
                if (this.shouldCheckCRLF() && this.startWithLF(value)) {
                    const tailOfLeft = this.nodeCharCodeAt(node, remainder - 1);
                    if (tailOfLeft === 13 ) {
                        const previousPos = this.positionInBuffer(node, remainder - 1);
                        this.deleteNodeTail(node, previousPos);
                        value = '\r' + value;
                        if (node.piece.length === 0) {
                            nodesToDel.push(node);
                        }
                    }
                    else {
                        this.deleteNodeTail(node, insertPosInBuffer);
                    }
                }
                else {
                    this.deleteNodeTail(node, insertPosInBuffer);
                }
                const newPieces = this.createNewPieces(value);
                if (newRightPiece.length > 0) {
                    this.rbInsertRight(node, newRightPiece);
                }
                let tmpNode = node;
                for (let k = 0; k < newPieces.length; k++) {
                    tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);
                }
                this.deleteNodes(nodesToDel);
            }
            else {
                this.insertContentToNodeRight(value, node);
            }
        }
        else {
            const pieces = this.createNewPieces(value);
            let node = this.rbInsertLeft(null, pieces[0]);
            for (let k = 1; k < pieces.length; k++) {
                node = this.rbInsertRight(node, pieces[k]);
            }
        }
        this.computeBufferMetadata();
    }
    delete(offset, cnt) {
        this._lastVisitedLine.lineNumber = 0;
        this._lastVisitedLine.value = '';
        if (cnt <= 0 || this.root === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            return;
        }
        const startPosition = this.nodeAt(offset);
        const endPosition = this.nodeAt(offset + cnt);
        const startNode = startPosition.node;
        const endNode = endPosition.node;
        if (startNode === endNode) {
            const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);
            const endSplitPosInBuffer = this.positionInBuffer(startNode, endPosition.remainder);
            if (startPosition.nodeStartOffset === offset) {
                if (cnt === startNode.piece.length) {
                    const next = startNode.next();
                    (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.rbDelete)(this, startNode);
                    this.validateCRLFWithPrevNode(next);
                    this.computeBufferMetadata();
                    return;
                }
                this.deleteNodeHead(startNode, endSplitPosInBuffer);
                this._searchCache.validate(offset);
                this.validateCRLFWithPrevNode(startNode);
                this.computeBufferMetadata();
                return;
            }
            if (startPosition.nodeStartOffset + startNode.piece.length === offset + cnt) {
                this.deleteNodeTail(startNode, startSplitPosInBuffer);
                this.validateCRLFWithNextNode(startNode);
                this.computeBufferMetadata();
                return;
            }
            this.shrinkNode(startNode, startSplitPosInBuffer, endSplitPosInBuffer);
            this.computeBufferMetadata();
            return;
        }
        const nodesToDel = [];
        const startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);
        this.deleteNodeTail(startNode, startSplitPosInBuffer);
        this._searchCache.validate(offset);
        if (startNode.piece.length === 0) {
            nodesToDel.push(startNode);
        }
        const endSplitPosInBuffer = this.positionInBuffer(endNode, endPosition.remainder);
        this.deleteNodeHead(endNode, endSplitPosInBuffer);
        if (endNode.piece.length === 0) {
            nodesToDel.push(endNode);
        }
        const secondNode = startNode.next();
        for (let node = secondNode; node !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL && node !== endNode; node = node.next()) {
            nodesToDel.push(node);
        }
        const prev = startNode.piece.length === 0 ? startNode.prev() : startNode;
        this.deleteNodes(nodesToDel);
        this.validateCRLFWithNextNode(prev);
        this.computeBufferMetadata();
    }
    insertContentToNodeLeft(value, node) {
        const nodesToDel = [];
        if (this.shouldCheckCRLF() && this.endWithCR(value) && this.startWithLF(node)) {
            const piece = node.piece;
            const newStart = { line: piece.start.line + 1, column: 0 };
            const nPiece = ( new Piece(
                piece.bufferIndex,
                newStart,
                piece.end,
                this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end),
                piece.length - 1
            ));
            node.piece = nPiece;
            value += '\n';
            (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, node, -1, -1);
            if (node.piece.length === 0) {
                nodesToDel.push(node);
            }
        }
        const newPieces = this.createNewPieces(value);
        let newNode = this.rbInsertLeft(node, newPieces[newPieces.length - 1]);
        for (let k = newPieces.length - 2; k >= 0; k--) {
            newNode = this.rbInsertLeft(newNode, newPieces[k]);
        }
        this.validateCRLFWithPrevNode(newNode);
        this.deleteNodes(nodesToDel);
    }
    insertContentToNodeRight(value, node) {
        if (this.adjustCarriageReturnFromNext(value, node)) {
            value += '\n';
        }
        const newPieces = this.createNewPieces(value);
        const newNode = this.rbInsertRight(node, newPieces[0]);
        let tmpNode = newNode;
        for (let k = 1; k < newPieces.length; k++) {
            tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);
        }
        this.validateCRLFWithPrevNode(newNode);
    }
    positionInBuffer(node, remainder, ret) {
        const piece = node.piece;
        const bufferIndex = node.piece.bufferIndex;
        const lineStarts = this._buffers[bufferIndex].lineStarts;
        const startOffset = lineStarts[piece.start.line] + piece.start.column;
        const offset = startOffset + remainder;
        let low = piece.start.line;
        let high = piece.end.line;
        let mid = 0;
        let midStop = 0;
        let midStart = 0;
        while (low <= high) {
            mid = low + ((high - low) / 2) | 0;
            midStart = lineStarts[mid];
            if (mid === high) {
                break;
            }
            midStop = lineStarts[mid + 1];
            if (offset < midStart) {
                high = mid - 1;
            }
            else if (offset >= midStop) {
                low = mid + 1;
            }
            else {
                break;
            }
        }
        if (ret) {
            ret.line = mid;
            ret.column = offset - midStart;
            return null;
        }
        return {
            line: mid,
            column: offset - midStart
        };
    }
    getLineFeedCnt(bufferIndex, start, end) {
        if (end.column === 0) {
            return end.line - start.line;
        }
        const lineStarts = this._buffers[bufferIndex].lineStarts;
        if (end.line === lineStarts.length - 1) {
            return end.line - start.line;
        }
        const nextLineStartOffset = lineStarts[end.line + 1];
        const endOffset = lineStarts[end.line] + end.column;
        if (nextLineStartOffset > endOffset + 1) {
            return end.line - start.line;
        }
        const previousCharOffset = endOffset - 1;
        const buffer = this._buffers[bufferIndex].buffer;
        if (buffer.charCodeAt(previousCharOffset) === 13) {
            return end.line - start.line + 1;
        }
        else {
            return end.line - start.line;
        }
    }
    offsetInBuffer(bufferIndex, cursor) {
        const lineStarts = this._buffers[bufferIndex].lineStarts;
        return lineStarts[cursor.line] + cursor.column;
    }
    deleteNodes(nodes) {
        for (let i = 0; i < nodes.length; i++) {
            (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.rbDelete)(this, nodes[i]);
        }
    }
    createNewPieces(text) {
        if (text.length > AverageBufferSize) {
            const newPieces = [];
            while (text.length > AverageBufferSize) {
                const lastChar = text.charCodeAt(AverageBufferSize - 1);
                let splitText;
                if (lastChar === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {
                    splitText = text.substring(0, AverageBufferSize - 1);
                    text = text.substring(AverageBufferSize - 1);
                }
                else {
                    splitText = text.substring(0, AverageBufferSize);
                    text = text.substring(AverageBufferSize);
                }
                const lineStarts = createLineStartsFast(splitText);
                newPieces.push(( new Piece(
                    this._buffers.length,
                     { line: 0, column: 0 },
                    { line: lineStarts.length - 1, column: splitText.length - lineStarts[lineStarts.length - 1] },
                    lineStarts.length - 1,
                    splitText.length
                )));
                this._buffers.push(( new StringBuffer(splitText, lineStarts)));
            }
            const lineStarts = createLineStartsFast(text);
            newPieces.push(( new Piece(
                this._buffers.length,
                 { line: 0, column: 0 },
                { line: lineStarts.length - 1, column: text.length - lineStarts[lineStarts.length - 1] },
                lineStarts.length - 1,
                text.length
            )));
            this._buffers.push(( new StringBuffer(text, lineStarts)));
            return newPieces;
        }
        let startOffset = this._buffers[0].buffer.length;
        const lineStarts = createLineStartsFast(text, false);
        let start = this._lastChangeBufferPos;
        if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === startOffset
            && startOffset !== 0
            && this.startWithLF(text)
            && this.endWithCR(this._buffers[0].buffer)
        ) {
            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 };
            start = this._lastChangeBufferPos;
            for (let i = 0; i < lineStarts.length; i++) {
                lineStarts[i] += startOffset + 1;
            }
            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));
            this._buffers[0].buffer += '_' + text;
            startOffset += 1;
        }
        else {
            if (startOffset !== 0) {
                for (let i = 0; i < lineStarts.length; i++) {
                    lineStarts[i] += startOffset;
                }
            }
            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));
            this._buffers[0].buffer += text;
        }
        const endOffset = this._buffers[0].buffer.length;
        const endIndex = this._buffers[0].lineStarts.length - 1;
        const endColumn = endOffset - this._buffers[0].lineStarts[endIndex];
        const endPos = { line: endIndex, column: endColumn };
        const newPiece = ( new Piece(
            0,
             start,
            endPos,
            this.getLineFeedCnt(0, start, endPos),
            endOffset - startOffset
        ));
        this._lastChangeBufferPos = endPos;
        return [newPiece];
    }
    getLinesRawContent() {
        return this.getContentOfSubTree(this.root);
    }
    getLineRawContent(lineNumber, endOffset = 0) {
        let x = this.root;
        let ret = '';
        const cache = this._searchCache.get2(lineNumber);
        if (cache) {
            x = cache.node;
            const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber - 1);
            const buffer = this._buffers[x.piece.bufferIndex].buffer;
            const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);
            if (cache.nodeStartLineNumber + x.piece.lineFeedCnt === lineNumber) {
                ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);
            }
            else {
                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber);
                return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);
            }
        }
        else {
            let nodeStartOffset = 0;
            const originalLineNumber = lineNumber;
            while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
                if (x.left !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL && x.lf_left >= lineNumber - 1) {
                    x = x.left;
                }
                else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {
                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);
                    const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);
                    const buffer = this._buffers[x.piece.bufferIndex].buffer;
                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);
                    nodeStartOffset += x.size_left;
                    this._searchCache.set({
                        node: x,
                        nodeStartOffset,
                        nodeStartLineNumber: originalLineNumber - (lineNumber - 1 - x.lf_left)
                    });
                    return buffer.substring(startOffset + prevAccumulatedValue, startOffset + accumulatedValue - endOffset);
                }
                else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {
                    const prevAccumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);
                    const buffer = this._buffers[x.piece.bufferIndex].buffer;
                    const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);
                    ret = buffer.substring(startOffset + prevAccumulatedValue, startOffset + x.piece.length);
                    break;
                }
                else {
                    lineNumber -= x.lf_left + x.piece.lineFeedCnt;
                    nodeStartOffset += x.size_left + x.piece.length;
                    x = x.right;
                }
            }
        }
        x = x.next();
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            const buffer = this._buffers[x.piece.bufferIndex].buffer;
            if (x.piece.lineFeedCnt > 0) {
                const accumulatedValue = this.getAccumulatedValue(x, 0);
                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);
                ret += buffer.substring(startOffset, startOffset + accumulatedValue - endOffset);
                return ret;
            }
            else {
                const startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);
                ret += buffer.substr(startOffset, x.piece.length);
            }
            x = x.next();
        }
        return ret;
    }
    computeBufferMetadata() {
        let x = this.root;
        let lfCnt = 1;
        let len = 0;
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            lfCnt += x.lf_left + x.piece.lineFeedCnt;
            len += x.size_left + x.piece.length;
            x = x.right;
        }
        this._lineCnt = lfCnt;
        this._length = len;
        this._searchCache.validate(this._length);
    }
    getIndexOf(node, accumulatedValue) {
        const piece = node.piece;
        const pos = this.positionInBuffer(node, accumulatedValue);
        const lineCnt = pos.line - piece.start.line;
        if (this.offsetInBuffer(piece.bufferIndex, piece.end) - this.offsetInBuffer(piece.bufferIndex, piece.start) === accumulatedValue) {
            const realLineCnt = this.getLineFeedCnt(node.piece.bufferIndex, piece.start, pos);
            if (realLineCnt !== lineCnt) {
                return { index: realLineCnt, remainder: 0 };
            }
        }
        return { index: lineCnt, remainder: pos.column };
    }
    getAccumulatedValue(node, index) {
        if (index < 0) {
            return 0;
        }
        const piece = node.piece;
        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;
        const expectedLineStartIndex = piece.start.line + index + 1;
        if (expectedLineStartIndex > piece.end.line) {
            return lineStarts[piece.end.line] + piece.end.column - lineStarts[piece.start.line] - piece.start.column;
        }
        else {
            return lineStarts[expectedLineStartIndex] - lineStarts[piece.start.line] - piece.start.column;
        }
    }
    deleteNodeTail(node, pos) {
        const piece = node.piece;
        const originalLFCnt = piece.lineFeedCnt;
        const originalEndOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);
        const newEnd = pos;
        const newEndOffset = this.offsetInBuffer(piece.bufferIndex, newEnd);
        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);
        const lf_delta = newLineFeedCnt - originalLFCnt;
        const size_delta = newEndOffset - originalEndOffset;
        const newLength = piece.length + size_delta;
        node.piece = ( new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength));
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, node, size_delta, lf_delta);
    }
    deleteNodeHead(node, pos) {
        const piece = node.piece;
        const originalLFCnt = piece.lineFeedCnt;
        const originalStartOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);
        const newStart = pos;
        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);
        const newStartOffset = this.offsetInBuffer(piece.bufferIndex, newStart);
        const lf_delta = newLineFeedCnt - originalLFCnt;
        const size_delta = originalStartOffset - newStartOffset;
        const newLength = piece.length + size_delta;
        node.piece = ( new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength));
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, node, size_delta, lf_delta);
    }
    shrinkNode(node, start, end) {
        const piece = node.piece;
        const originalStartPos = piece.start;
        const originalEndPos = piece.end;
        const oldLength = piece.length;
        const oldLFCnt = piece.lineFeedCnt;
        const newEnd = start;
        const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);
        const newLength = this.offsetInBuffer(piece.bufferIndex, start) - this.offsetInBuffer(piece.bufferIndex, originalStartPos);
        node.piece = ( new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength));
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, node, newLength - oldLength, newLineFeedCnt - oldLFCnt);
        const newPiece = ( new Piece(
            piece.bufferIndex,
            end,
            originalEndPos,
            this.getLineFeedCnt(piece.bufferIndex, end, originalEndPos),
            this.offsetInBuffer(piece.bufferIndex, originalEndPos) - this.offsetInBuffer(piece.bufferIndex, end)
        ));
        const newNode = this.rbInsertRight(node, newPiece);
        this.validateCRLFWithPrevNode(newNode);
    }
    appendToNode(node, value) {
        if (this.adjustCarriageReturnFromNext(value, node)) {
            value += '\n';
        }
        const hitCRLF = this.shouldCheckCRLF() && this.startWithLF(value) && this.endWithCR(node);
        const startOffset = this._buffers[0].buffer.length;
        this._buffers[0].buffer += value;
        const lineStarts = createLineStartsFast(value, false);
        for (let i = 0; i < lineStarts.length; i++) {
            lineStarts[i] += startOffset;
        }
        if (hitCRLF) {
            const prevStartOffset = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];
            this._buffers[0].lineStarts.pop();
            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: startOffset - prevStartOffset };
        }
        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));
        const endIndex = this._buffers[0].lineStarts.length - 1;
        const endColumn = this._buffers[0].buffer.length - this._buffers[0].lineStarts[endIndex];
        const newEnd = { line: endIndex, column: endColumn };
        const newLength = node.piece.length + value.length;
        const oldLineFeedCnt = node.piece.lineFeedCnt;
        const newLineFeedCnt = this.getLineFeedCnt(0, node.piece.start, newEnd);
        const lf_delta = newLineFeedCnt - oldLineFeedCnt;
        node.piece = ( new Piece(
            node.piece.bufferIndex,
            node.piece.start,
            newEnd,
            newLineFeedCnt,
            newLength
        ));
        this._lastChangeBufferPos = newEnd;
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, node, value.length, lf_delta);
    }
    nodeAt(offset) {
        let x = this.root;
        const cache = this._searchCache.get(offset);
        if (cache) {
            return {
                node: cache.node,
                nodeStartOffset: cache.nodeStartOffset,
                remainder: offset - cache.nodeStartOffset
            };
        }
        let nodeStartOffset = 0;
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            if (x.size_left > offset) {
                x = x.left;
            }
            else if (x.size_left + x.piece.length >= offset) {
                nodeStartOffset += x.size_left;
                const ret = {
                    node: x,
                    remainder: offset - x.size_left,
                    nodeStartOffset
                };
                this._searchCache.set(ret);
                return ret;
            }
            else {
                offset -= x.size_left + x.piece.length;
                nodeStartOffset += x.size_left + x.piece.length;
                x = x.right;
            }
        }
        return null;
    }
    nodeAt2(lineNumber, column) {
        let x = this.root;
        let nodeStartOffset = 0;
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            if (x.left !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL && x.lf_left >= lineNumber - 1) {
                x = x.left;
            }
            else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {
                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);
                const accumulatedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);
                nodeStartOffset += x.size_left;
                return {
                    node: x,
                    remainder: Math.min(prevAccumualtedValue + column - 1, accumulatedValue),
                    nodeStartOffset
                };
            }
            else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {
                const prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);
                if (prevAccumualtedValue + column - 1 <= x.piece.length) {
                    return {
                        node: x,
                        remainder: prevAccumualtedValue + column - 1,
                        nodeStartOffset
                    };
                }
                else {
                    column -= x.piece.length - prevAccumualtedValue;
                    break;
                }
            }
            else {
                lineNumber -= x.lf_left + x.piece.lineFeedCnt;
                nodeStartOffset += x.size_left + x.piece.length;
                x = x.right;
            }
        }
        x = x.next();
        while (x !== _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            if (x.piece.lineFeedCnt > 0) {
                const accumulatedValue = this.getAccumulatedValue(x, 0);
                const nodeStartOffset = this.offsetOfNode(x);
                return {
                    node: x,
                    remainder: Math.min(column - 1, accumulatedValue),
                    nodeStartOffset
                };
            }
            else {
                if (x.piece.length >= column - 1) {
                    const nodeStartOffset = this.offsetOfNode(x);
                    return {
                        node: x,
                        remainder: column - 1,
                        nodeStartOffset
                    };
                }
                else {
                    column -= x.piece.length;
                }
            }
            x = x.next();
        }
        return null;
    }
    nodeCharCodeAt(node, offset) {
        if (node.piece.lineFeedCnt < 1) {
            return -1;
        }
        const buffer = this._buffers[node.piece.bufferIndex];
        const newOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start) + offset;
        return buffer.buffer.charCodeAt(newOffset);
    }
    offsetOfNode(node) {
        if (!node) {
            return 0;
        }
        let pos = node.size_left;
        while (node !== this.root) {
            if (node.parent.right === node) {
                pos += node.parent.size_left + node.parent.piece.length;
            }
            node = node.parent;
        }
        return pos;
    }
    shouldCheckCRLF() {
        return !(this._EOLNormalized && this._EOL === '\n');
    }
    startWithLF(val) {
        if (typeof val === 'string') {
            return val.charCodeAt(0) === 10;
        }
        if (val === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL || val.piece.lineFeedCnt === 0) {
            return false;
        }
        const piece = val.piece;
        const lineStarts = this._buffers[piece.bufferIndex].lineStarts;
        const line = piece.start.line;
        const startOffset = lineStarts[line] + piece.start.column;
        if (line === lineStarts.length - 1) {
            return false;
        }
        const nextLineOffset = lineStarts[line + 1];
        if (nextLineOffset > startOffset + 1) {
            return false;
        }
        return this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset) === 10;
    }
    endWithCR(val) {
        if (typeof val === 'string') {
            return val.charCodeAt(val.length - 1) === 13;
        }
        if (val === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL || val.piece.lineFeedCnt === 0) {
            return false;
        }
        return this.nodeCharCodeAt(val, val.piece.length - 1) === 13;
    }
    validateCRLFWithPrevNode(nextNode) {
        if (this.shouldCheckCRLF() && this.startWithLF(nextNode)) {
            const node = nextNode.prev();
            if (this.endWithCR(node)) {
                this.fixCRLF(node, nextNode);
            }
        }
    }
    validateCRLFWithNextNode(node) {
        if (this.shouldCheckCRLF() && this.endWithCR(node)) {
            const nextNode = node.next();
            if (this.startWithLF(nextNode)) {
                this.fixCRLF(node, nextNode);
            }
        }
    }
    fixCRLF(prev, next) {
        const nodesToDel = [];
        const lineStarts = this._buffers[prev.piece.bufferIndex].lineStarts;
        let newEnd;
        if (prev.piece.end.column === 0) {
            newEnd = { line: prev.piece.end.line - 1, column: lineStarts[prev.piece.end.line] - lineStarts[prev.piece.end.line - 1] - 1 };
        }
        else {
            newEnd = { line: prev.piece.end.line, column: prev.piece.end.column - 1 };
        }
        const prevNewLength = prev.piece.length - 1;
        const prevNewLFCnt = prev.piece.lineFeedCnt - 1;
        prev.piece = ( new Piece(
            prev.piece.bufferIndex,
            prev.piece.start,
            newEnd,
            prevNewLFCnt,
            prevNewLength
        ));
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, prev, -1, -1);
        if (prev.piece.length === 0) {
            nodesToDel.push(prev);
        }
        const newStart = { line: next.piece.start.line + 1, column: 0 };
        const newLength = next.piece.length - 1;
        const newLineFeedCnt = this.getLineFeedCnt(next.piece.bufferIndex, newStart, next.piece.end);
        next.piece = ( new Piece(
            next.piece.bufferIndex,
            newStart,
            next.piece.end,
            newLineFeedCnt,
            newLength
        ));
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, next, -1, -1);
        if (next.piece.length === 0) {
            nodesToDel.push(next);
        }
        const pieces = this.createNewPieces('\r\n');
        this.rbInsertRight(prev, pieces[0]);
        for (let i = 0; i < nodesToDel.length; i++) {
            (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.rbDelete)(this, nodesToDel[i]);
        }
    }
    adjustCarriageReturnFromNext(value, node) {
        if (this.shouldCheckCRLF() && this.endWithCR(value)) {
            const nextNode = node.next();
            if (this.startWithLF(nextNode)) {
                value += '\n';
                if (nextNode.piece.length === 1) {
                    (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.rbDelete)(this, nextNode);
                }
                else {
                    const piece = nextNode.piece;
                    const newStart = { line: piece.start.line + 1, column: 0 };
                    const newLength = piece.length - 1;
                    const newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);
                    nextNode.piece = ( new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength));
                    (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.updateTreeMetadata)(this, nextNode, -1, -1);
                }
                return true;
            }
        }
        return false;
    }
    iterate(node, callback) {
        if (node === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            return callback(_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL);
        }
        const leftRet = this.iterate(node.left, callback);
        if (!leftRet) {
            return leftRet;
        }
        return callback(node) && this.iterate(node.right, callback);
    }
    getNodeContent(node) {
        if (node === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            return '';
        }
        const buffer = this._buffers[node.piece.bufferIndex];
        const piece = node.piece;
        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);
        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);
        const currentContent = buffer.buffer.substring(startOffset, endOffset);
        return currentContent;
    }
    getPieceContent(piece) {
        const buffer = this._buffers[piece.bufferIndex];
        const startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);
        const endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);
        const currentContent = buffer.buffer.substring(startOffset, endOffset);
        return currentContent;
    }
    rbInsertRight(node, p) {
        const z = ( new _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.TreeNode(p, _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.NodeColor.Red));
        z.left = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL;
        z.right = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL;
        z.parent = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL;
        z.size_left = 0;
        z.lf_left = 0;
        const x = this.root;
        if (x === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            this.root = z;
            z.color = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.NodeColor.Black;
        }
        else if (node.right === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            node.right = z;
            z.parent = node;
        }
        else {
            const nextNode = (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.leftest)(node.right);
            nextNode.left = z;
            z.parent = nextNode;
        }
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.fixInsert)(this, z);
        return z;
    }
    rbInsertLeft(node, p) {
        const z = ( new _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.TreeNode(p, _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.NodeColor.Red));
        z.left = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL;
        z.right = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL;
        z.parent = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL;
        z.size_left = 0;
        z.lf_left = 0;
        if (this.root === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            this.root = z;
            z.color = _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.NodeColor.Black;
        }
        else if (node.left === _rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.SENTINEL) {
            node.left = z;
            z.parent = node;
        }
        else {
            const prevNode = (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.righttest)(node.left);
            prevNode.right = z;
            z.parent = prevNode;
        }
        (0,_rbTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.fixInsert)(this, z);
        return z;
    }
    getContentOfSubTree(node) {
        let str = '';
        this.iterate(node, node => {
            str += this.getNodeContent(node);
            return true;
        });
        return str;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PieceTreeTextBuffer: () => (/* binding */ PieceTreeTextBuffer)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../model.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model.js");
/* harmony import */ var _pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pieceTreeBase.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js");
/* harmony import */ var _core_eolCounter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/eolCounter.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/eolCounter.js");
/* harmony import */ var _core_textChange_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/textChange.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/textChange.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");








class PieceTreeTextBuffer extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.Disposable {
    constructor(chunks, BOM, eol, containsRTL, containsUnusualLineTerminators, isBasicASCII, eolNormalized) {
        super();
        this._onDidChangeContent = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this.onDidChangeContent = this._onDidChangeContent.event;
        this._BOM = BOM;
        this._mightContainNonBasicASCII = !isBasicASCII;
        this._mightContainRTL = containsRTL;
        this._mightContainUnusualLineTerminators = containsUnusualLineTerminators;
        this._pieceTree = ( new _pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_4__.PieceTreeBase(chunks, eol, eolNormalized));
    }
    equals(other) {
        if (!(other instanceof PieceTreeTextBuffer)) {
            return false;
        }
        if (this._BOM !== other._BOM) {
            return false;
        }
        if (this.getEOL() !== other.getEOL()) {
            return false;
        }
        return this._pieceTree.equal(other._pieceTree);
    }
    mightContainRTL() {
        return this._mightContainRTL;
    }
    mightContainUnusualLineTerminators() {
        return this._mightContainUnusualLineTerminators;
    }
    resetMightContainUnusualLineTerminators() {
        this._mightContainUnusualLineTerminators = false;
    }
    mightContainNonBasicASCII() {
        return this._mightContainNonBasicASCII;
    }
    getBOM() {
        return this._BOM;
    }
    getEOL() {
        return this._pieceTree.getEOL();
    }
    createSnapshot(preserveBOM) {
        return this._pieceTree.createSnapshot(preserveBOM ? this._BOM : '');
    }
    getOffsetAt(lineNumber, column) {
        return this._pieceTree.getOffsetAt(lineNumber, column);
    }
    getPositionAt(offset) {
        return this._pieceTree.getPositionAt(offset);
    }
    getRangeAt(start, length) {
        const end = start + length;
        const startPosition = this.getPositionAt(start);
        const endPosition = this.getPositionAt(end);
        return ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
            startPosition.lineNumber,
            startPosition.column,
            endPosition.lineNumber,
            endPosition.column
        ));
    }
    getValueInRange(range, eol = _model_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLinePreference.TextDefined) {
        if (range.isEmpty()) {
            return '';
        }
        const lineEnding = this._getEndOfLine(eol);
        return this._pieceTree.getValueInRange(range, lineEnding);
    }
    getValueLengthInRange(range, eol = _model_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLinePreference.TextDefined) {
        if (range.isEmpty()) {
            return 0;
        }
        if (range.startLineNumber === range.endLineNumber) {
            return (range.endColumn - range.startColumn);
        }
        const startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);
        const endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);
        let eolOffsetCompensation = 0;
        const desiredEOL = this._getEndOfLine(eol);
        const actualEOL = this.getEOL();
        if (desiredEOL.length !== actualEOL.length) {
            const delta = desiredEOL.length - actualEOL.length;
            const eolCount = range.endLineNumber - range.startLineNumber;
            eolOffsetCompensation = delta * eolCount;
        }
        return endOffset - startOffset + eolOffsetCompensation;
    }
    getCharacterCountInRange(range, eol = _model_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLinePreference.TextDefined) {
        if (this._mightContainNonBasicASCII) {
            let result = 0;
            const fromLineNumber = range.startLineNumber;
            const toLineNumber = range.endLineNumber;
            for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {
                const lineContent = this.getLineContent(lineNumber);
                const fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);
                const toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);
                for (let offset = fromOffset; offset < toOffset; offset++) {
                    if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.isHighSurrogate)(lineContent.charCodeAt(offset))) {
                        result = result + 1;
                        offset = offset + 1;
                    }
                    else {
                        result = result + 1;
                    }
                }
            }
            result += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);
            return result;
        }
        return this.getValueLengthInRange(range, eol);
    }
    getNearestChunk(offset) {
        return this._pieceTree.getNearestChunk(offset);
    }
    getLength() {
        return this._pieceTree.getLength();
    }
    getLineCount() {
        return this._pieceTree.getLineCount();
    }
    getLinesContent() {
        return this._pieceTree.getLinesContent();
    }
    getLineContent(lineNumber) {
        return this._pieceTree.getLineContent(lineNumber);
    }
    getLineCharCode(lineNumber, index) {
        return this._pieceTree.getLineCharCode(lineNumber, index);
    }
    getCharCode(offset) {
        return this._pieceTree.getCharCode(offset);
    }
    getLineLength(lineNumber) {
        return this._pieceTree.getLineLength(lineNumber);
    }
    getLineMinColumn(lineNumber) {
        return 1;
    }
    getLineMaxColumn(lineNumber) {
        return this.getLineLength(lineNumber) + 1;
    }
    getLineFirstNonWhitespaceColumn(lineNumber) {
        const result = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.firstNonWhitespaceIndex)(this.getLineContent(lineNumber));
        if (result === -1) {
            return 0;
        }
        return result + 1;
    }
    getLineLastNonWhitespaceColumn(lineNumber) {
        const result = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.lastNonWhitespaceIndex)(this.getLineContent(lineNumber));
        if (result === -1) {
            return 0;
        }
        return result + 2;
    }
    _getEndOfLine(eol) {
        switch (eol) {
            case _model_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLinePreference.LF:
                return '\n';
            case _model_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLinePreference.CRLF:
                return '\r\n';
            case _model_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLinePreference.TextDefined:
                return this.getEOL();
            default:
                throw ( new Error('Unknown EOL preference'));
        }
    }
    setEOL(newEOL) {
        this._pieceTree.setEOL(newEOL);
    }
    applyEdits(rawOperations, recordTrimAutoWhitespace, computeUndoEdits) {
        let mightContainRTL = this._mightContainRTL;
        let mightContainUnusualLineTerminators = this._mightContainUnusualLineTerminators;
        let mightContainNonBasicASCII = this._mightContainNonBasicASCII;
        let canReduceOperations = true;
        let operations = [];
        for (let i = 0; i < rawOperations.length; i++) {
            const op = rawOperations[i];
            if (canReduceOperations && op._isTracked) {
                canReduceOperations = false;
            }
            const validatedRange = op.range;
            if (op.text) {
                let textMightContainNonBasicASCII = true;
                if (!mightContainNonBasicASCII) {
                    textMightContainNonBasicASCII = !(0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.isBasicASCII)(op.text);
                    mightContainNonBasicASCII = textMightContainNonBasicASCII;
                }
                if (!mightContainRTL && textMightContainNonBasicASCII) {
                    mightContainRTL = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.containsRTL)(op.text);
                }
                if (!mightContainUnusualLineTerminators && textMightContainNonBasicASCII) {
                    mightContainUnusualLineTerminators = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.containsUnusualLineTerminators)(op.text);
                }
            }
            let validText = '';
            let eolCount = 0;
            let firstLineLength = 0;
            let lastLineLength = 0;
            if (op.text) {
                let strEOL;
                [eolCount, firstLineLength, lastLineLength, strEOL] = (0,_core_eolCounter_js__WEBPACK_IMPORTED_MODULE_5__.countEOL)(op.text);
                const bufferEOL = this.getEOL();
                const expectedStrEOL = (bufferEOL === '\r\n' ? _core_eolCounter_js__WEBPACK_IMPORTED_MODULE_5__.StringEOL.CRLF : _core_eolCounter_js__WEBPACK_IMPORTED_MODULE_5__.StringEOL.LF);
                if (strEOL === _core_eolCounter_js__WEBPACK_IMPORTED_MODULE_5__.StringEOL.Unknown || strEOL === expectedStrEOL) {
                    validText = op.text;
                }
                else {
                    validText = op.text.replace(/\r\n|\r|\n/g, bufferEOL);
                }
            }
            operations[i] = {
                sortIndex: i,
                identifier: op.identifier || null,
                range: validatedRange,
                rangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),
                rangeLength: this.getValueLengthInRange(validatedRange),
                text: validText,
                eolCount: eolCount,
                firstLineLength: firstLineLength,
                lastLineLength: lastLineLength,
                forceMoveMarkers: Boolean(op.forceMoveMarkers),
                isAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false
            };
        }
        operations.sort(PieceTreeTextBuffer._sortOpsAscending);
        let hasTouchingRanges = false;
        for (let i = 0, count = operations.length - 1; i < count; i++) {
            const rangeEnd = operations[i].range.getEndPosition();
            const nextRangeStart = operations[i + 1].range.getStartPosition();
            if (nextRangeStart.isBeforeOrEqual(rangeEnd)) {
                if (nextRangeStart.isBefore(rangeEnd)) {
                    throw ( new Error('Overlapping ranges are not allowed!'));
                }
                hasTouchingRanges = true;
            }
        }
        if (canReduceOperations) {
            operations = this._reduceOperations(operations);
        }
        const reverseRanges = (computeUndoEdits || recordTrimAutoWhitespace ? PieceTreeTextBuffer._getInverseEditRanges(operations) : []);
        const newTrimAutoWhitespaceCandidates = [];
        if (recordTrimAutoWhitespace) {
            for (let i = 0; i < operations.length; i++) {
                const op = operations[i];
                const reverseRange = reverseRanges[i];
                if (op.isAutoWhitespaceEdit && op.range.isEmpty()) {
                    for (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {
                        let currentLineContent = '';
                        if (lineNumber === reverseRange.startLineNumber) {
                            currentLineContent = this.getLineContent(op.range.startLineNumber);
                            if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.firstNonWhitespaceIndex)(currentLineContent) !== -1) {
                                continue;
                            }
                        }
                        newTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });
                    }
                }
            }
        }
        let reverseOperations = null;
        if (computeUndoEdits) {
            let reverseRangeDeltaOffset = 0;
            reverseOperations = [];
            for (let i = 0; i < operations.length; i++) {
                const op = operations[i];
                const reverseRange = reverseRanges[i];
                const bufferText = this.getValueInRange(op.range);
                const reverseRangeOffset = op.rangeOffset + reverseRangeDeltaOffset;
                reverseRangeDeltaOffset += (op.text.length - bufferText.length);
                reverseOperations[i] = {
                    sortIndex: op.sortIndex,
                    identifier: op.identifier,
                    range: reverseRange,
                    text: bufferText,
                    textChange: ( new _core_textChange_js__WEBPACK_IMPORTED_MODULE_6__.TextChange(op.rangeOffset, bufferText, reverseRangeOffset, op.text))
                };
            }
            if (!hasTouchingRanges) {
                reverseOperations.sort((a, b) => a.sortIndex - b.sortIndex);
            }
        }
        this._mightContainRTL = mightContainRTL;
        this._mightContainUnusualLineTerminators = mightContainUnusualLineTerminators;
        this._mightContainNonBasicASCII = mightContainNonBasicASCII;
        const contentChanges = this._doApplyEdits(operations);
        let trimAutoWhitespaceLineNumbers = null;
        if (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {
            newTrimAutoWhitespaceCandidates.sort((a, b) => b.lineNumber - a.lineNumber);
            trimAutoWhitespaceLineNumbers = [];
            for (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {
                const lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;
                if (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {
                    continue;
                }
                const prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;
                const lineContent = this.getLineContent(lineNumber);
                if (lineContent.length === 0 || lineContent === prevContent || (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.firstNonWhitespaceIndex)(lineContent) !== -1) {
                    continue;
                }
                trimAutoWhitespaceLineNumbers.push(lineNumber);
            }
        }
        this._onDidChangeContent.fire();
        return ( new _model_js__WEBPACK_IMPORTED_MODULE_3__.ApplyEditsResult(reverseOperations, contentChanges, trimAutoWhitespaceLineNumbers));
    }
    _reduceOperations(operations) {
        if (operations.length < 1000) {
            return operations;
        }
        return [this._toSingleEditOperation(operations)];
    }
    _toSingleEditOperation(operations) {
        let forceMoveMarkers = false;
        const firstEditRange = operations[0].range;
        const lastEditRange = operations[operations.length - 1].range;
        const entireEditRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
            firstEditRange.startLineNumber,
            firstEditRange.startColumn,
            lastEditRange.endLineNumber,
            lastEditRange.endColumn
        ));
        let lastEndLineNumber = firstEditRange.startLineNumber;
        let lastEndColumn = firstEditRange.startColumn;
        const result = [];
        for (let i = 0, len = operations.length; i < len; i++) {
            const operation = operations[i];
            const range = operation.range;
            forceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;
            result.push(this.getValueInRange(( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(lastEndLineNumber, lastEndColumn, range.startLineNumber, range.startColumn))));
            if (operation.text.length > 0) {
                result.push(operation.text);
            }
            lastEndLineNumber = range.endLineNumber;
            lastEndColumn = range.endColumn;
        }
        const text = result.join('');
        const [eolCount, firstLineLength, lastLineLength] = (0,_core_eolCounter_js__WEBPACK_IMPORTED_MODULE_5__.countEOL)(text);
        return {
            sortIndex: 0,
            identifier: operations[0].identifier,
            range: entireEditRange,
            rangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),
            rangeLength: this.getValueLengthInRange(entireEditRange, _model_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLinePreference.TextDefined),
            text: text,
            eolCount: eolCount,
            firstLineLength: firstLineLength,
            lastLineLength: lastLineLength,
            forceMoveMarkers: forceMoveMarkers,
            isAutoWhitespaceEdit: false
        };
    }
    _doApplyEdits(operations) {
        operations.sort(PieceTreeTextBuffer._sortOpsDescending);
        const contentChanges = [];
        for (let i = 0; i < operations.length; i++) {
            const op = operations[i];
            const startLineNumber = op.range.startLineNumber;
            const startColumn = op.range.startColumn;
            const endLineNumber = op.range.endLineNumber;
            const endColumn = op.range.endColumn;
            if (startLineNumber === endLineNumber && startColumn === endColumn && op.text.length === 0) {
                continue;
            }
            if (op.text) {
                this._pieceTree.delete(op.rangeOffset, op.rangeLength);
                this._pieceTree.insert(op.rangeOffset, op.text, true);
            }
            else {
                this._pieceTree.delete(op.rangeOffset, op.rangeLength);
            }
            const contentChangeRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(startLineNumber, startColumn, endLineNumber, endColumn));
            contentChanges.push({
                range: contentChangeRange,
                rangeLength: op.rangeLength,
                text: op.text,
                rangeOffset: op.rangeOffset,
                forceMoveMarkers: op.forceMoveMarkers
            });
        }
        return contentChanges;
    }
    findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount) {
        return this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);
    }
    getPieceTree() {
        return this._pieceTree;
    }
    static _getInverseEditRange(range, text) {
        const startLineNumber = range.startLineNumber;
        const startColumn = range.startColumn;
        const [eolCount, firstLineLength, lastLineLength] = (0,_core_eolCounter_js__WEBPACK_IMPORTED_MODULE_5__.countEOL)(text);
        let resultRange;
        if (text.length > 0) {
            const lineCount = eolCount + 1;
            if (lineCount === 1) {
                resultRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
                    startLineNumber,
                    startColumn,
                    startLineNumber,
                    startColumn + firstLineLength
                ));
            }
            else {
                resultRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
                    startLineNumber,
                    startColumn,
                    startLineNumber + lineCount - 1,
                    lastLineLength + 1
                ));
            }
        }
        else {
            resultRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(startLineNumber, startColumn, startLineNumber, startColumn));
        }
        return resultRange;
    }
    static _getInverseEditRanges(operations) {
        const result = [];
        let prevOpEndLineNumber = 0;
        let prevOpEndColumn = 0;
        let prevOp = null;
        for (let i = 0, len = operations.length; i < len; i++) {
            const op = operations[i];
            let startLineNumber;
            let startColumn;
            if (prevOp) {
                if (prevOp.range.endLineNumber === op.range.startLineNumber) {
                    startLineNumber = prevOpEndLineNumber;
                    startColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);
                }
                else {
                    startLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);
                    startColumn = op.range.startColumn;
                }
            }
            else {
                startLineNumber = op.range.startLineNumber;
                startColumn = op.range.startColumn;
            }
            let resultRange;
            if (op.text.length > 0) {
                const lineCount = op.eolCount + 1;
                if (lineCount === 1) {
                    resultRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
                        startLineNumber,
                        startColumn,
                        startLineNumber,
                        startColumn + op.firstLineLength
                    ));
                }
                else {
                    resultRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(
                        startLineNumber,
                        startColumn,
                        startLineNumber + lineCount - 1,
                        op.lastLineLength + 1
                    ));
                }
            }
            else {
                resultRange = ( new _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range(startLineNumber, startColumn, startLineNumber, startColumn));
            }
            prevOpEndLineNumber = resultRange.endLineNumber;
            prevOpEndColumn = resultRange.endColumn;
            result.push(resultRange);
            prevOp = op;
        }
        return result;
    }
    static _sortOpsAscending(a, b) {
        const r = _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.compareRangesUsingEnds(a.range, b.range);
        if (r === 0) {
            return a.sortIndex - b.sortIndex;
        }
        return r;
    }
    static _sortOpsDescending(a, b) {
        const r = _core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.compareRangesUsingEnds(a.range, b.range);
        if (r === 0) {
            return b.sortIndex - a.sortIndex;
        }
        return -r;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PieceTreeTextBufferBuilder: () => (/* binding */ PieceTreeTextBufferBuilder)
/* harmony export */ });
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _model_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../model.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model.js");
/* harmony import */ var _pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pieceTreeBase.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js");
/* harmony import */ var _pieceTreeTextBuffer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pieceTreeTextBuffer.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js");





class PieceTreeTextBufferFactory {
    constructor(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _containsUnusualLineTerminators, _isBasicASCII, _normalizeEOL) {
        this._chunks = _chunks;
        this._bom = _bom;
        this._cr = _cr;
        this._lf = _lf;
        this._crlf = _crlf;
        this._containsRTL = _containsRTL;
        this._containsUnusualLineTerminators = _containsUnusualLineTerminators;
        this._isBasicASCII = _isBasicASCII;
        this._normalizeEOL = _normalizeEOL;
    }
    _getEOL(defaultEOL) {
        const totalEOLCount = this._cr + this._lf + this._crlf;
        const totalCRCount = this._cr + this._crlf;
        if (totalEOLCount === 0) {
            return (defaultEOL === _model_js__WEBPACK_IMPORTED_MODULE_2__.DefaultEndOfLine.LF ? '\n' : '\r\n');
        }
        if (totalCRCount > totalEOLCount / 2) {
            return '\r\n';
        }
        return '\n';
    }
    create(defaultEOL) {
        const eol = this._getEOL(defaultEOL);
        const chunks = this._chunks;
        if (this._normalizeEOL &&
            ((eol === '\r\n' && (this._cr > 0 || this._lf > 0))
                || (eol === '\n' && (this._cr > 0 || this._crlf > 0)))) {
            for (let i = 0, len = chunks.length; i < len; i++) {
                const str = chunks[i].buffer.replace(/\r\n|\r|\n/g, eol);
                const newLineStart = (0,_pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_3__.createLineStartsFast)(str);
                chunks[i] = ( new _pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_3__.StringBuffer(str, newLineStart));
            }
        }
        const textBuffer = ( new _pieceTreeTextBuffer_js__WEBPACK_IMPORTED_MODULE_4__.PieceTreeTextBuffer(
            chunks,
            this._bom,
            eol,
            this._containsRTL,
            this._containsUnusualLineTerminators,
            this._isBasicASCII,
            this._normalizeEOL
        ));
        return { textBuffer: textBuffer, disposable: textBuffer };
    }
    getFirstLineText(lengthLimit) {
        return this._chunks[0].buffer.substr(0, lengthLimit).split(/\r\n|\r|\n/)[0];
    }
}
class PieceTreeTextBufferBuilder {
    constructor() {
        this.chunks = [];
        this.BOM = '';
        this._hasPreviousChar = false;
        this._previousChar = 0;
        this._tmpLineStarts = [];
        this.cr = 0;
        this.lf = 0;
        this.crlf = 0;
        this.containsRTL = false;
        this.containsUnusualLineTerminators = false;
        this.isBasicASCII = true;
    }
    acceptChunk(chunk) {
        if (chunk.length === 0) {
            return;
        }
        if (this.chunks.length === 0) {
            if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.startsWithUTF8BOM)(chunk)) {
                this.BOM = _base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.UTF8_BOM_CHARACTER;
                chunk = chunk.substr(1);
            }
        }
        const lastChar = chunk.charCodeAt(chunk.length - 1);
        if (lastChar === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {
            this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);
            this._hasPreviousChar = true;
            this._previousChar = lastChar;
        }
        else {
            this._acceptChunk1(chunk, false);
            this._hasPreviousChar = false;
            this._previousChar = lastChar;
        }
    }
    _acceptChunk1(chunk, allowEmptyStrings) {
        if (!allowEmptyStrings && chunk.length === 0) {
            return;
        }
        if (this._hasPreviousChar) {
            this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);
        }
        else {
            this._acceptChunk2(chunk);
        }
    }
    _acceptChunk2(chunk) {
        const lineStarts = (0,_pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_3__.createLineStarts)(this._tmpLineStarts, chunk);
        this.chunks.push(( new _pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_3__.StringBuffer(chunk, lineStarts.lineStarts)));
        this.cr += lineStarts.cr;
        this.lf += lineStarts.lf;
        this.crlf += lineStarts.crlf;
        if (!lineStarts.isBasicASCII) {
            this.isBasicASCII = false;
            if (!this.containsRTL) {
                this.containsRTL = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.containsRTL)(chunk);
            }
            if (!this.containsUnusualLineTerminators) {
                this.containsUnusualLineTerminators = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_1__.containsUnusualLineTerminators)(chunk);
            }
        }
    }
    finish(normalizeEOL = true) {
        this._finish();
        return ( new PieceTreeTextBufferFactory(
            this.chunks,
            this.BOM,
            this.cr,
            this.lf,
            this.crlf,
            this.containsRTL,
            this.containsUnusualLineTerminators,
            this.isBasicASCII,
            normalizeEOL
        ));
    }
    _finish() {
        if (this.chunks.length === 0) {
            this._acceptChunk1('', true);
        }
        if (this._hasPreviousChar) {
            this._hasPreviousChar = false;
            const lastChunk = this.chunks[this.chunks.length - 1];
            lastChunk.buffer += String.fromCharCode(this._previousChar);
            const newLineStarts = (0,_pieceTreeBase_js__WEBPACK_IMPORTED_MODULE_3__.createLineStartsFast)(lastChunk.buffer);
            lastChunk.lineStarts = newLineStarts;
            if (this._previousChar === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn) {
                this.cr++;
            }
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NodeColor: () => (/* binding */ NodeColor),
/* harmony export */   SENTINEL: () => (/* binding */ SENTINEL),
/* harmony export */   TreeNode: () => (/* binding */ TreeNode),
/* harmony export */   fixInsert: () => (/* binding */ fixInsert),
/* harmony export */   leftRotate: () => (/* binding */ leftRotate),
/* harmony export */   leftest: () => (/* binding */ leftest),
/* harmony export */   rbDelete: () => (/* binding */ rbDelete),
/* harmony export */   recomputeTreeMetadata: () => (/* binding */ recomputeTreeMetadata),
/* harmony export */   rightRotate: () => (/* binding */ rightRotate),
/* harmony export */   righttest: () => (/* binding */ righttest),
/* harmony export */   updateTreeMetadata: () => (/* binding */ updateTreeMetadata)
/* harmony export */ });
class TreeNode {
    constructor(piece, color) {
        this.piece = piece;
        this.color = color;
        this.size_left = 0;
        this.lf_left = 0;
        this.parent = this;
        this.left = this;
        this.right = this;
    }
    next() {
        if (this.right !== SENTINEL) {
            return leftest(this.right);
        }
        let node = this;
        while (node.parent !== SENTINEL) {
            if (node.parent.left === node) {
                break;
            }
            node = node.parent;
        }
        if (node.parent === SENTINEL) {
            return SENTINEL;
        }
        else {
            return node.parent;
        }
    }
    prev() {
        if (this.left !== SENTINEL) {
            return righttest(this.left);
        }
        let node = this;
        while (node.parent !== SENTINEL) {
            if (node.parent.right === node) {
                break;
            }
            node = node.parent;
        }
        if (node.parent === SENTINEL) {
            return SENTINEL;
        }
        else {
            return node.parent;
        }
    }
    detach() {
        this.parent = null;
        this.left = null;
        this.right = null;
    }
}
var NodeColor;
( (function(NodeColor) {
    NodeColor[NodeColor["Black"] = 0] = "Black";
    NodeColor[NodeColor["Red"] = 1] = "Red";
})(NodeColor || (NodeColor = {})));
const SENTINEL = ( new TreeNode(null, NodeColor.Black));
SENTINEL.parent = SENTINEL;
SENTINEL.left = SENTINEL;
SENTINEL.right = SENTINEL;
SENTINEL.color = NodeColor.Black;
function leftest(node) {
    while (node.left !== SENTINEL) {
        node = node.left;
    }
    return node;
}
function righttest(node) {
    while (node.right !== SENTINEL) {
        node = node.right;
    }
    return node;
}
function calculateSize(node) {
    if (node === SENTINEL) {
        return 0;
    }
    return node.size_left + node.piece.length + calculateSize(node.right);
}
function calculateLF(node) {
    if (node === SENTINEL) {
        return 0;
    }
    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);
}
function resetSentinel() {
    SENTINEL.parent = SENTINEL;
}
function leftRotate(tree, x) {
    const y = x.right;
    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);
    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);
    x.right = y.left;
    if (y.left !== SENTINEL) {
        y.left.parent = x;
    }
    y.parent = x.parent;
    if (x.parent === SENTINEL) {
        tree.root = y;
    }
    else if (x.parent.left === x) {
        x.parent.left = y;
    }
    else {
        x.parent.right = y;
    }
    y.left = x;
    x.parent = y;
}
function rightRotate(tree, y) {
    const x = y.left;
    y.left = x.right;
    if (x.right !== SENTINEL) {
        x.right.parent = y;
    }
    x.parent = y.parent;
    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);
    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);
    if (y.parent === SENTINEL) {
        tree.root = x;
    }
    else if (y === y.parent.right) {
        y.parent.right = x;
    }
    else {
        y.parent.left = x;
    }
    x.right = y;
    y.parent = x;
}
function rbDelete(tree, z) {
    let x;
    let y;
    if (z.left === SENTINEL) {
        y = z;
        x = y.right;
    }
    else if (z.right === SENTINEL) {
        y = z;
        x = y.left;
    }
    else {
        y = leftest(z.right);
        x = y.right;
    }
    if (y === tree.root) {
        tree.root = x;
        x.color = NodeColor.Black;
        z.detach();
        resetSentinel();
        tree.root.parent = SENTINEL;
        return;
    }
    const yWasRed = (y.color === NodeColor.Red);
    if (y === y.parent.left) {
        y.parent.left = x;
    }
    else {
        y.parent.right = x;
    }
    if (y === z) {
        x.parent = y.parent;
        recomputeTreeMetadata(tree, x);
    }
    else {
        if (y.parent === z) {
            x.parent = y;
        }
        else {
            x.parent = y.parent;
        }
        recomputeTreeMetadata(tree, x);
        y.left = z.left;
        y.right = z.right;
        y.parent = z.parent;
        y.color = z.color;
        if (z === tree.root) {
            tree.root = y;
        }
        else {
            if (z === z.parent.left) {
                z.parent.left = y;
            }
            else {
                z.parent.right = y;
            }
        }
        if (y.left !== SENTINEL) {
            y.left.parent = y;
        }
        if (y.right !== SENTINEL) {
            y.right.parent = y;
        }
        y.size_left = z.size_left;
        y.lf_left = z.lf_left;
        recomputeTreeMetadata(tree, y);
    }
    z.detach();
    if (x.parent.left === x) {
        const newSizeLeft = calculateSize(x);
        const newLFLeft = calculateLF(x);
        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {
            const delta = newSizeLeft - x.parent.size_left;
            const lf_delta = newLFLeft - x.parent.lf_left;
            x.parent.size_left = newSizeLeft;
            x.parent.lf_left = newLFLeft;
            updateTreeMetadata(tree, x.parent, delta, lf_delta);
        }
    }
    recomputeTreeMetadata(tree, x.parent);
    if (yWasRed) {
        resetSentinel();
        return;
    }
    let w;
    while (x !== tree.root && x.color === NodeColor.Black) {
        if (x === x.parent.left) {
            w = x.parent.right;
            if (w.color === NodeColor.Red) {
                w.color = NodeColor.Black;
                x.parent.color = NodeColor.Red;
                leftRotate(tree, x.parent);
                w = x.parent.right;
            }
            if (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {
                w.color = NodeColor.Red;
                x = x.parent;
            }
            else {
                if (w.right.color === NodeColor.Black) {
                    w.left.color = NodeColor.Black;
                    w.color = NodeColor.Red;
                    rightRotate(tree, w);
                    w = x.parent.right;
                }
                w.color = x.parent.color;
                x.parent.color = NodeColor.Black;
                w.right.color = NodeColor.Black;
                leftRotate(tree, x.parent);
                x = tree.root;
            }
        }
        else {
            w = x.parent.left;
            if (w.color === NodeColor.Red) {
                w.color = NodeColor.Black;
                x.parent.color = NodeColor.Red;
                rightRotate(tree, x.parent);
                w = x.parent.left;
            }
            if (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {
                w.color = NodeColor.Red;
                x = x.parent;
            }
            else {
                if (w.left.color === NodeColor.Black) {
                    w.right.color = NodeColor.Black;
                    w.color = NodeColor.Red;
                    leftRotate(tree, w);
                    w = x.parent.left;
                }
                w.color = x.parent.color;
                x.parent.color = NodeColor.Black;
                w.left.color = NodeColor.Black;
                rightRotate(tree, x.parent);
                x = tree.root;
            }
        }
    }
    x.color = NodeColor.Black;
    resetSentinel();
}
function fixInsert(tree, x) {
    recomputeTreeMetadata(tree, x);
    while (x !== tree.root && x.parent.color === NodeColor.Red) {
        if (x.parent === x.parent.parent.left) {
            const y = x.parent.parent.right;
            if (y.color === NodeColor.Red) {
                x.parent.color = NodeColor.Black;
                y.color = NodeColor.Black;
                x.parent.parent.color = NodeColor.Red;
                x = x.parent.parent;
            }
            else {
                if (x === x.parent.right) {
                    x = x.parent;
                    leftRotate(tree, x);
                }
                x.parent.color = NodeColor.Black;
                x.parent.parent.color = NodeColor.Red;
                rightRotate(tree, x.parent.parent);
            }
        }
        else {
            const y = x.parent.parent.left;
            if (y.color === NodeColor.Red) {
                x.parent.color = NodeColor.Black;
                y.color = NodeColor.Black;
                x.parent.parent.color = NodeColor.Red;
                x = x.parent.parent;
            }
            else {
                if (x === x.parent.left) {
                    x = x.parent;
                    rightRotate(tree, x);
                }
                x.parent.color = NodeColor.Black;
                x.parent.parent.color = NodeColor.Red;
                leftRotate(tree, x.parent.parent);
            }
        }
    }
    tree.root.color = NodeColor.Black;
}
function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {
    while (x !== tree.root && x !== SENTINEL) {
        if (x.parent.left === x) {
            x.parent.size_left += delta;
            x.parent.lf_left += lineFeedCntDelta;
        }
        x = x.parent;
    }
}
function recomputeTreeMetadata(tree, x) {
    let delta = 0;
    let lf_delta = 0;
    if (x === tree.root) {
        return;
    }
    while (x !== tree.root && x === x.parent.right) {
        x = x.parent;
    }
    if (x === tree.root) {
        return;
    }
    x = x.parent;
    delta = calculateSize(x.left) - x.size_left;
    lf_delta = calculateLF(x.left) - x.lf_left;
    x.size_left += delta;
    x.lf_left += lf_delta;
    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {
        if (x.parent.left === x) {
            x.parent.size_left += delta;
            x.parent.lf_left += lf_delta;
        }
        x = x.parent;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/services/semanticTokensDto.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/services/semanticTokensDto.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   decodeSemanticTokensDto: () => (/* binding */ decodeSemanticTokensDto),
/* harmony export */   encodeSemanticTokensDto: () => (/* binding */ encodeSemanticTokensDto)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");


var EncodedSemanticTokensType;
( (function(EncodedSemanticTokensType) {
    EncodedSemanticTokensType[EncodedSemanticTokensType["Full"] = 1] = "Full";
    EncodedSemanticTokensType[EncodedSemanticTokensType["Delta"] = 2] = "Delta";
})(EncodedSemanticTokensType || (EncodedSemanticTokensType = {})));
function reverseEndianness(arr) {
    for (let i = 0, len = arr.length; i < len; i += 4) {
        const b0 = arr[i + 0];
        const b1 = arr[i + 1];
        const b2 = arr[i + 2];
        const b3 = arr[i + 3];
        arr[i + 0] = b3;
        arr[i + 1] = b2;
        arr[i + 2] = b1;
        arr[i + 3] = b0;
    }
}
function toLittleEndianBuffer(arr) {
    const uint8Arr = ( new Uint8Array(arr.buffer, arr.byteOffset, arr.length * 4));
    if (!(0,_base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian)()) {
        reverseEndianness(uint8Arr);
    }
    return _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.wrap(uint8Arr);
}
function fromLittleEndianBuffer(buff) {
    const uint8Arr = buff.buffer;
    if (!(0,_base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isLittleEndian)()) {
        reverseEndianness(uint8Arr);
    }
    if (uint8Arr.byteOffset % 4 === 0) {
        return ( new Uint32Array(uint8Arr.buffer, uint8Arr.byteOffset, uint8Arr.length / 4));
    }
    else {
        const data = ( new Uint8Array(uint8Arr.byteLength));
        data.set(uint8Arr);
        return ( new Uint32Array(data.buffer, data.byteOffset, data.length / 4));
    }
}
function encodeSemanticTokensDto(semanticTokens) {
    const dest = ( new Uint32Array(encodeSemanticTokensDtoSize(semanticTokens)));
    let offset = 0;
    dest[offset++] = semanticTokens.id;
    if (semanticTokens.type === 'full') {
        dest[offset++] = EncodedSemanticTokensType.Full;
        dest[offset++] = semanticTokens.data.length;
        dest.set(semanticTokens.data, offset);
        offset += semanticTokens.data.length;
    }
    else {
        dest[offset++] = EncodedSemanticTokensType.Delta;
        dest[offset++] = semanticTokens.deltas.length;
        for (const delta of semanticTokens.deltas) {
            dest[offset++] = delta.start;
            dest[offset++] = delta.deleteCount;
            if (delta.data) {
                dest[offset++] = delta.data.length;
                dest.set(delta.data, offset);
                offset += delta.data.length;
            }
            else {
                dest[offset++] = 0;
            }
        }
    }
    return toLittleEndianBuffer(dest);
}
function encodeSemanticTokensDtoSize(semanticTokens) {
    let result = 0;
    result += ((
    +1 + 1)
    );
    if (semanticTokens.type === 'full') {
        result += (+1
            + semanticTokens.data.length);
    }
    else {
        result += ((+1)
        );
        result += ((
        +1
            + 1 + 1)
        ) * semanticTokens.deltas.length;
        for (const delta of semanticTokens.deltas) {
            if (delta.data) {
                result += delta.data.length;
            }
        }
    }
    return result;
}
function decodeSemanticTokensDto(_buff) {
    const src = fromLittleEndianBuffer(_buff);
    let offset = 0;
    const id = src[offset++];
    const type = src[offset++];
    if (type === EncodedSemanticTokensType.Full) {
        const length = src[offset++];
        const data = src.subarray(offset, offset + length);
        offset += length;
        return {
            id: id,
            type: 'full',
            data: data
        };
    }
    const deltaCount = src[offset++];
    const deltas = [];
    for (let i = 0; i < deltaCount; i++) {
        const start = src[offset++];
        const deleteCount = src[offset++];
        const length = src[offset++];
        let data;
        if (length > 0) {
            data = src.subarray(offset, offset + length);
            offset += length;
        }
        deltas[i] = { start, deleteCount, data };
    }
    return {
        id: id,
        type: 'delta',
        deltas: deltas
    };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/editor/common/services/treeViewsDnd.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/editor/common/services/treeViewsDnd.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DraggedTreeItemsIdentifier: () => (/* binding */ DraggedTreeItemsIdentifier),
/* harmony export */   TreeViewsDnDService: () => (/* binding */ TreeViewsDnDService)
/* harmony export */ });
class TreeViewsDnDService {
    constructor() {
        this._dragOperations = ( new Map());
    }
    removeDragOperationTransfer(uuid) {
        if ((uuid && ( this._dragOperations.has(uuid)))) {
            const operation = this._dragOperations.get(uuid);
            this._dragOperations.delete(uuid);
            return operation;
        }
        return undefined;
    }
    addDragOperationTransfer(uuid, transferPromise) {
        this._dragOperations.set(uuid, transferPromise);
    }
}
class DraggedTreeItemsIdentifier {
    constructor(identifier) {
        this.identifier = identifier;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/accessibility/common/accessibility.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/accessibility/common/accessibility.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACCESSIBLE_VIEW_SHOWN_STORAGE_PREFIX: () => (/* binding */ ACCESSIBLE_VIEW_SHOWN_STORAGE_PREFIX),
/* harmony export */   AccessibilitySupport: () => (/* binding */ AccessibilitySupport),
/* harmony export */   CONTEXT_ACCESSIBILITY_MODE_ENABLED: () => (/* binding */ CONTEXT_ACCESSIBILITY_MODE_ENABLED),
/* harmony export */   isAccessibilityInformation: () => (/* binding */ isAccessibilityInformation)
/* harmony export */ });
/* harmony import */ var _contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");

var AccessibilitySupport;
( (function(AccessibilitySupport) {
    AccessibilitySupport[AccessibilitySupport["Unknown"] = 0] = "Unknown";
    AccessibilitySupport[AccessibilitySupport["Disabled"] = 1] = "Disabled";
    AccessibilitySupport[AccessibilitySupport["Enabled"] = 2] = "Enabled";
})(AccessibilitySupport || (AccessibilitySupport = {})));
const CONTEXT_ACCESSIBILITY_MODE_ENABLED = ( new _contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_0__.RawContextKey('accessibilityModeEnabled', false));
function isAccessibilityInformation(obj) {
    return obj && typeof obj === 'object'
        && typeof obj.label === 'string'
        && (typeof obj.role === 'undefined' || typeof obj.role === 'string');
}
const ACCESSIBLE_VIEW_SHOWN_STORAGE_PREFIX = 'ACCESSIBLE_VIEW_SHOWN_';



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConfigurationTarget: () => (/* binding */ ConfigurationTarget),
/* harmony export */   ConfigurationTargetToString: () => (/* binding */ ConfigurationTargetToString),
/* harmony export */   addToValueTree: () => (/* binding */ addToValueTree),
/* harmony export */   getConfigurationValue: () => (/* binding */ getConfigurationValue),
/* harmony export */   getLanguageTagSettingPlainKey: () => (/* binding */ getLanguageTagSettingPlainKey),
/* harmony export */   isConfigurationOverrides: () => (/* binding */ isConfigurationOverrides),
/* harmony export */   isConfigurationUpdateOverrides: () => (/* binding */ isConfigurationUpdateOverrides),
/* harmony export */   isConfigured: () => (/* binding */ isConfigured),
/* harmony export */   removeFromValueTree: () => (/* binding */ removeFromValueTree),
/* harmony export */   toValuesTree: () => (/* binding */ toValuesTree)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");

function isConfigurationOverrides(thing) {
    return thing
        && typeof thing === 'object'
        && (!thing.overrideIdentifier || typeof thing.overrideIdentifier === 'string')
        && (!thing.resource || thing.resource instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI);
}
function isConfigurationUpdateOverrides(thing) {
    return thing
        && typeof thing === 'object'
        && (!thing.overrideIdentifiers || Array.isArray(thing.overrideIdentifiers))
        && !thing.overrideIdentifier
        && (!thing.resource || thing.resource instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI);
}
var ConfigurationTarget;
( (function(ConfigurationTarget) {
    ConfigurationTarget[ConfigurationTarget["APPLICATION"] = 1] = "APPLICATION";
    ConfigurationTarget[ConfigurationTarget["USER"] = 2] = "USER";
    ConfigurationTarget[ConfigurationTarget["USER_LOCAL"] = 3] = "USER_LOCAL";
    ConfigurationTarget[ConfigurationTarget["USER_REMOTE"] = 4] = "USER_REMOTE";
    ConfigurationTarget[ConfigurationTarget["WORKSPACE"] = 5] = "WORKSPACE";
    ConfigurationTarget[ConfigurationTarget["WORKSPACE_FOLDER"] = 6] = "WORKSPACE_FOLDER";
    ConfigurationTarget[ConfigurationTarget["DEFAULT"] = 7] = "DEFAULT";
    ConfigurationTarget[ConfigurationTarget["MEMORY"] = 8] = "MEMORY";
})(ConfigurationTarget || (ConfigurationTarget = {})));
function ConfigurationTargetToString(configurationTarget) {
    switch (configurationTarget) {
        case ConfigurationTarget.APPLICATION: return 'APPLICATION';
        case ConfigurationTarget.USER: return 'USER';
        case ConfigurationTarget.USER_LOCAL: return 'USER_LOCAL';
        case ConfigurationTarget.USER_REMOTE: return 'USER_REMOTE';
        case ConfigurationTarget.WORKSPACE: return 'WORKSPACE';
        case ConfigurationTarget.WORKSPACE_FOLDER: return 'WORKSPACE_FOLDER';
        case ConfigurationTarget.DEFAULT: return 'DEFAULT';
        case ConfigurationTarget.MEMORY: return 'MEMORY';
    }
}
function isConfigured(configValue) {
    return configValue.applicationValue !== undefined ||
        configValue.userValue !== undefined ||
        configValue.userLocalValue !== undefined ||
        configValue.userRemoteValue !== undefined ||
        configValue.workspaceValue !== undefined ||
        configValue.workspaceFolderValue !== undefined;
}
function toValuesTree(properties, conflictReporter) {
    const root = Object.create(null);
    for (const key in properties) {
        addToValueTree(root, key, properties[key], conflictReporter);
    }
    return root;
}
function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {
    const segments = key.split('.');
    const last = segments.pop();
    let curr = settingsTreeRoot;
    for (let i = 0; i < segments.length; i++) {
        const s = segments[i];
        let obj = curr[s];
        switch (typeof obj) {
            case 'undefined':
                obj = curr[s] = Object.create(null);
                break;
            case 'object':
                if (obj === null) {
                    conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is null`);
                    return;
                }
                break;
            default:
                conflictReporter(`Ignoring ${key} as ${segments.slice(0, i + 1).join('.')} is ${JSON.stringify(obj)}`);
                return;
        }
        curr = obj;
    }
    if (typeof curr === 'object' && curr !== null) {
        try {
            curr[last] = value;
        }
        catch (e) {
            conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);
        }
    }
    else {
        conflictReporter(`Ignoring ${key} as ${segments.join('.')} is ${JSON.stringify(curr)}`);
    }
}
function removeFromValueTree(valueTree, key) {
    const segments = key.split('.');
    doRemoveFromValueTree(valueTree, segments);
}
function doRemoveFromValueTree(valueTree, segments) {
    const first = segments.shift();
    if (segments.length === 0) {
        delete valueTree[first];
        return;
    }
    if (( Object.keys(valueTree)).indexOf(first) !== -1) {
        const value = valueTree[first];
        if (typeof value === 'object' && !Array.isArray(value)) {
            doRemoveFromValueTree(value, segments);
            if (( Object.keys(value)).length === 0) {
                delete valueTree[first];
            }
        }
    }
}
function getConfigurationValue(config, settingPath, defaultValue) {
    function accessSetting(config, path) {
        let current = config;
        for (const component of path) {
            if (typeof current !== 'object' || current === null) {
                return undefined;
            }
            current = current[component];
        }
        return current;
    }
    const path = settingPath.split('.');
    const result = accessSetting(config, path);
    return typeof result === 'undefined' ? defaultValue : result;
}
function getLanguageTagSettingPlainKey(settingKey) {
    return settingKey.replace(/[\[\]]/g, '');
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IConfigurationService: () => (/* binding */ IConfigurationService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IConfigurationService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('configurationService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationModels.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationModels.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Configuration: () => (/* binding */ Configuration$1),
/* harmony export */   ConfigurationChangeEvent: () => (/* binding */ ConfigurationChangeEvent),
/* harmony export */   ConfigurationModel: () => (/* binding */ ConfigurationModel),
/* harmony export */   ConfigurationModelParser: () => (/* binding */ ConfigurationModelParser),
/* harmony export */   UserSettings: () => (/* binding */ UserSettings),
/* harmony export */   mergeChanges: () => (/* binding */ mergeChanges)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/json.js */ "./node_modules/vscode/vscode/src/vs/base/common/json.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./configuration.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.js");
/* harmony import */ var _configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./configurationRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js");
/* harmony import */ var _files_common_files_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");












function freeze(data) {
    return Object.isFrozen(data) ? data : (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.deepFreeze)(data);
}
class ConfigurationModel {
    static createEmptyModel(logService) {
        return ( new ConfigurationModel({}, [], [], undefined, logService));
    }
    constructor(_contents, _keys, _overrides, raw, logService) {
        this._contents = _contents;
        this._keys = _keys;
        this._overrides = _overrides;
        this.raw = raw;
        this.logService = logService;
        this.overrideConfigurations = ( new Map());
    }
    get rawConfiguration() {
        if (!this._rawConfiguration) {
            if (this.raw?.length) {
                const rawConfigurationModels = ( this.raw.map(raw => {
                    if (raw instanceof ConfigurationModel) {
                        return raw;
                    }
                    const parser = ( new ConfigurationModelParser('', this.logService));
                    parser.parseRaw(raw);
                    return parser.configurationModel;
                }));
                this._rawConfiguration = rawConfigurationModels.reduce((previous, current) => current === previous ? current : previous.merge(current), rawConfigurationModels[0]);
            }
            else {
                this._rawConfiguration = this;
            }
        }
        return this._rawConfiguration;
    }
    get contents() {
        return this._contents;
    }
    get overrides() {
        return this._overrides;
    }
    get keys() {
        return this._keys;
    }
    isEmpty() {
        return this._keys.length === 0 && ( Object.keys(this._contents)).length === 0 && this._overrides.length === 0;
    }
    getValue(section) {
        return section ? (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.getConfigurationValue)(this.contents, section) : this.contents;
    }
    inspect(section, overrideIdentifier) {
        const that = this;
        return {
            get value() {
                return freeze(that.rawConfiguration.getValue(section));
            },
            get override() {
                return overrideIdentifier ? freeze(that.rawConfiguration.getOverrideValue(section, overrideIdentifier)) : undefined;
            },
            get merged() {
                return freeze(overrideIdentifier ? that.rawConfiguration.override(overrideIdentifier).getValue(section) : that.rawConfiguration.getValue(section));
            },
            get overrides() {
                const overrides = [];
                for (const { contents, identifiers, keys } of that.rawConfiguration.overrides) {
                    const value = ( new ConfigurationModel(contents, keys, [], undefined, that.logService)).getValue(section);
                    if (value !== undefined) {
                        overrides.push({ identifiers, value });
                    }
                }
                return overrides.length ? freeze(overrides) : undefined;
            }
        };
    }
    getOverrideValue(section, overrideIdentifier) {
        const overrideContents = this.getContentsForOverrideIdentifer(overrideIdentifier);
        return overrideContents
            ? section ? (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.getConfigurationValue)(overrideContents, section) : overrideContents
            : undefined;
    }
    getKeysForOverrideIdentifier(identifier) {
        const keys = [];
        for (const override of this.overrides) {
            if (override.identifiers.includes(identifier)) {
                keys.push(...override.keys);
            }
        }
        return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.distinct)(keys);
    }
    getAllOverrideIdentifiers() {
        const result = [];
        for (const override of this.overrides) {
            result.push(...override.identifiers);
        }
        return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.distinct)(result);
    }
    override(identifier) {
        let overrideConfigurationModel = this.overrideConfigurations.get(identifier);
        if (!overrideConfigurationModel) {
            overrideConfigurationModel = this.createOverrideConfigurationModel(identifier);
            this.overrideConfigurations.set(identifier, overrideConfigurationModel);
        }
        return overrideConfigurationModel;
    }
    merge(...others) {
        const contents = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(this.contents);
        const overrides = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(this.overrides);
        const keys = [...this.keys];
        const raws = this.raw?.length ? [...this.raw] : [this];
        for (const other of others) {
            raws.push(...(other.raw?.length ? other.raw : [other]));
            if (other.isEmpty()) {
                continue;
            }
            this.mergeContents(contents, other.contents);
            for (const otherOverride of other.overrides) {
                const [override] = overrides.filter(o => (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(o.identifiers, otherOverride.identifiers));
                if (override) {
                    this.mergeContents(override.contents, otherOverride.contents);
                    override.keys.push(...otherOverride.keys);
                    override.keys = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.distinct)(override.keys);
                }
                else {
                    overrides.push((0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(otherOverride));
                }
            }
            for (const key of other.keys) {
                if (keys.indexOf(key) === -1) {
                    keys.push(key);
                }
            }
        }
        return ( new ConfigurationModel(
            contents,
            keys,
            overrides,
            raws.every(raw => raw instanceof ConfigurationModel) ? undefined : raws,
            this.logService
        ));
    }
    createOverrideConfigurationModel(identifier) {
        const overrideContents = this.getContentsForOverrideIdentifer(identifier);
        if (!overrideContents || typeof overrideContents !== 'object' || !( Object.keys(overrideContents)).length) {
            return this;
        }
        const contents = {};
        for (const key of (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.distinct)([...( Object.keys(this.contents)), ...( Object.keys(overrideContents))])) {
            let contentsForKey = this.contents[key];
            const overrideContentsForKey = overrideContents[key];
            if (overrideContentsForKey) {
                if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {
                    contentsForKey = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(contentsForKey);
                    this.mergeContents(contentsForKey, overrideContentsForKey);
                }
                else {
                    contentsForKey = overrideContentsForKey;
                }
            }
            contents[key] = contentsForKey;
        }
        return ( new ConfigurationModel(contents, this.keys, this.overrides, undefined, this.logService));
    }
    mergeContents(source, target) {
        for (const key of ( Object.keys(target))) {
            if (key in source) {
                if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_6__.isObject)(source[key]) && (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_6__.isObject)(target[key])) {
                    this.mergeContents(source[key], target[key]);
                    continue;
                }
            }
            source[key] = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(target[key]);
        }
    }
    getContentsForOverrideIdentifer(identifier) {
        let contentsForIdentifierOnly = null;
        let contents = null;
        const mergeContents = (contentsToMerge) => {
            if (contentsToMerge) {
                if (contents) {
                    this.mergeContents(contents, contentsToMerge);
                }
                else {
                    contents = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.deepClone)(contentsToMerge);
                }
            }
        };
        for (const override of this.overrides) {
            if (override.identifiers.length === 1 && override.identifiers[0] === identifier) {
                contentsForIdentifierOnly = override.contents;
            }
            else if (override.identifiers.includes(identifier)) {
                mergeContents(override.contents);
            }
        }
        mergeContents(contentsForIdentifierOnly);
        return contents;
    }
    toJSON() {
        return {
            contents: this.contents,
            overrides: this.overrides,
            keys: this.keys
        };
    }
    addValue(key, value) {
        this.updateValue(key, value, true);
    }
    setValue(key, value) {
        this.updateValue(key, value, false);
    }
    removeValue(key) {
        const index = this.keys.indexOf(key);
        if (index === -1) {
            return;
        }
        this.keys.splice(index, 1);
        (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.removeFromValueTree)(this.contents, key);
        if (_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.OVERRIDE_PROPERTY_REGEX.test(key)) {
            this.overrides.splice(this.overrides.findIndex(o => (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.equals)(o.identifiers, (0,_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.overrideIdentifiersFromKey)(key))), 1);
        }
    }
    updateValue(key, value, add) {
        (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.addToValueTree)(this.contents, key, value, e => this.logService.error(e));
        add = add || this.keys.indexOf(key) === -1;
        if (add) {
            this.keys.push(key);
        }
        if (_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.OVERRIDE_PROPERTY_REGEX.test(key)) {
            this.overrides.push({
                identifiers: (0,_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.overrideIdentifiersFromKey)(key),
                keys: ( Object.keys(this.contents[key])),
                contents: (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.toValuesTree)(this.contents[key], message => this.logService.error(message)),
            });
        }
    }
}
class ConfigurationModelParser {
    constructor(_name, logService) {
        this._name = _name;
        this.logService = logService;
        this._raw = null;
        this._configurationModel = null;
        this._restrictedConfigurations = [];
        this._parseErrors = [];
    }
    get configurationModel() {
        return this._configurationModel || ConfigurationModel.createEmptyModel(this.logService);
    }
    get restrictedConfigurations() {
        return this._restrictedConfigurations;
    }
    get errors() {
        return this._parseErrors;
    }
    parse(content, options) {
        if (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_6__.isUndefinedOrNull)(content)) {
            const raw = this.doParseContent(content);
            this.parseRaw(raw, options);
        }
    }
    reparse(options) {
        if (this._raw) {
            this.parseRaw(this._raw, options);
        }
    }
    parseRaw(raw, options) {
        this._raw = raw;
        const { contents, keys, overrides, restricted, hasExcludedProperties } = this.doParseRaw(raw, options);
        this._configurationModel = ( new ConfigurationModel(
            contents,
            keys,
            overrides,
            hasExcludedProperties ? [raw] : undefined ,
            this.logService
        ));
        this._restrictedConfigurations = restricted || [];
    }
    doParseContent(content) {
        let raw = {};
        let currentProperty = null;
        let currentParent = [];
        const previousParents = [];
        function onValue(value) {
            if (Array.isArray(currentParent)) {
                currentParent.push(value);
            }
            else if (currentProperty !== null) {
                currentParent[currentProperty] = value;
            }
        }
        const visitor = {
            onObjectBegin: () => {
                const object = {};
                onValue(object);
                previousParents.push(currentParent);
                currentParent = object;
                currentProperty = null;
            },
            onObjectProperty: (name) => {
                currentProperty = name;
            },
            onObjectEnd: () => {
                currentParent = previousParents.pop();
            },
            onArrayBegin: () => {
                const array = [];
                onValue(array);
                previousParents.push(currentParent);
                currentParent = array;
                currentProperty = null;
            },
            onArrayEnd: () => {
                currentParent = previousParents.pop();
            },
            onLiteralValue: onValue,
            onError: (error, offset, length) => {
            }
        };
        if (content) {
            try {
                (0,_base_common_json_js__WEBPACK_IMPORTED_MODULE_2__.visit)(content, visitor);
                raw = currentParent[0] || {};
            }
            catch (e) {
                this.logService.error(`Error while parsing settings file ${this._name}: ${e}`);
                this._parseErrors = [e];
            }
        }
        return raw;
    }
    doParseRaw(raw, options) {
        const configurationProperties = ( _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_11__.Registry.as(_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.Extensions.Configuration)).getConfigurationProperties();
        const filtered = this.filter(raw, configurationProperties, true, options);
        raw = filtered.raw;
        const contents = (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.toValuesTree)(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));
        const keys = ( Object.keys(raw));
        const overrides = this.toOverrides(raw, message => this.logService.error(`Conflict in settings file ${this._name}: ${message}`));
        return { contents, keys, overrides, restricted: filtered.restricted, hasExcludedProperties: filtered.hasExcludedProperties };
    }
    filter(properties, configurationProperties, filterOverriddenProperties, options) {
        let hasExcludedProperties = false;
        if (!options?.scopes && !options?.skipRestricted && !options?.exclude?.length) {
            return { raw: properties, restricted: [], hasExcludedProperties };
        }
        const raw = {};
        const restricted = [];
        for (const key in properties) {
            if (_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.OVERRIDE_PROPERTY_REGEX.test(key) && filterOverriddenProperties) {
                const result = this.filter(properties[key], configurationProperties, false, options);
                raw[key] = result.raw;
                hasExcludedProperties = hasExcludedProperties || result.hasExcludedProperties;
                restricted.push(...result.restricted);
            }
            else {
                const propertySchema = configurationProperties[key];
                const scope = propertySchema ? typeof propertySchema.scope !== 'undefined' ? propertySchema.scope : _configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.ConfigurationScope.WINDOW : undefined;
                if (propertySchema?.restricted) {
                    restricted.push(key);
                }
                if (!options.exclude?.includes(key)
                    && (options.include?.includes(key)
                        || ((scope === undefined || options.scopes === undefined || options.scopes.includes(scope))
                            && !(options.skipRestricted && propertySchema?.restricted))))  {
                    raw[key] = properties[key];
                }
                else {
                    hasExcludedProperties = true;
                }
            }
        }
        return { raw, restricted, hasExcludedProperties };
    }
    toOverrides(raw, conflictReporter) {
        const overrides = [];
        for (const key of ( Object.keys(raw))) {
            if (_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.OVERRIDE_PROPERTY_REGEX.test(key)) {
                const overrideRaw = {};
                for (const keyInOverrideRaw in raw[key]) {
                    overrideRaw[keyInOverrideRaw] = raw[key][keyInOverrideRaw];
                }
                overrides.push({
                    identifiers: (0,_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.overrideIdentifiersFromKey)(key),
                    keys: ( Object.keys(overrideRaw)),
                    contents: (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.toValuesTree)(overrideRaw, conflictReporter)
                });
            }
        }
        return overrides;
    }
}
class UserSettings extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
    constructor(userSettingsResource, parseOptions, extUri, fileService, logService) {
        super();
        this.userSettingsResource = userSettingsResource;
        this.parseOptions = parseOptions;
        this.fileService = fileService;
        this.logService = logService;
        this._onDidChange = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidChange = this._onDidChange.event;
        this.parser = ( new ConfigurationModelParser(( this.userSettingsResource.toString()), logService));
        this._register(this.fileService.watch(extUri.dirname(this.userSettingsResource)));
        this._register(this.fileService.watch(this.userSettingsResource));
        this._register(_base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Event.any(_base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Event.filter(this.fileService.onDidFilesChange, e => e.contains(this.userSettingsResource)), _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Event.filter(this.fileService.onDidRunOperation, e => (e.isOperation(_files_common_files_js__WEBPACK_IMPORTED_MODULE_10__.FileOperation.CREATE) || e.isOperation(_files_common_files_js__WEBPACK_IMPORTED_MODULE_10__.FileOperation.COPY) || e.isOperation(_files_common_files_js__WEBPACK_IMPORTED_MODULE_10__.FileOperation.DELETE) || e.isOperation(_files_common_files_js__WEBPACK_IMPORTED_MODULE_10__.FileOperation.WRITE)) && extUri.isEqual(e.resource, userSettingsResource)))(() => this._onDidChange.fire()));
    }
    async loadConfiguration() {
        try {
            const content = await this.fileService.readFile(this.userSettingsResource);
            this.parser.parse(( content.value.toString()) || '{}', this.parseOptions);
            return this.parser.configurationModel;
        }
        catch (e) {
            return ConfigurationModel.createEmptyModel(this.logService);
        }
    }
    reparse(parseOptions) {
        if (parseOptions) {
            this.parseOptions = parseOptions;
        }
        this.parser.reparse(this.parseOptions);
        return this.parser.configurationModel;
    }
    getRestrictedSettings() {
        return this.parser.restrictedConfigurations;
    }
}
class ConfigurationInspectValue {
    constructor(key, overrides, _value, overrideIdentifiers, defaultConfiguration, policyConfiguration, applicationConfiguration, userConfiguration, localUserConfiguration, remoteUserConfiguration, workspaceConfiguration, folderConfigurationModel, memoryConfigurationModel) {
        this.key = key;
        this.overrides = overrides;
        this._value = _value;
        this.overrideIdentifiers = overrideIdentifiers;
        this.defaultConfiguration = defaultConfiguration;
        this.policyConfiguration = policyConfiguration;
        this.applicationConfiguration = applicationConfiguration;
        this.userConfiguration = userConfiguration;
        this.localUserConfiguration = localUserConfiguration;
        this.remoteUserConfiguration = remoteUserConfiguration;
        this.workspaceConfiguration = workspaceConfiguration;
        this.folderConfigurationModel = folderConfigurationModel;
        this.memoryConfigurationModel = memoryConfigurationModel;
    }
    get value() {
        return freeze(this._value);
    }
    toInspectValue(inspectValue) {
        return inspectValue?.value !== undefined || inspectValue?.override !== undefined || inspectValue?.overrides !== undefined ? inspectValue : undefined;
    }
    get defaultInspectValue() {
        if (!this._defaultInspectValue) {
            this._defaultInspectValue = this.defaultConfiguration.inspect(this.key, this.overrides.overrideIdentifier);
        }
        return this._defaultInspectValue;
    }
    get defaultValue() {
        return this.defaultInspectValue.merged;
    }
    get default() {
        return this.toInspectValue(this.defaultInspectValue);
    }
    get policyInspectValue() {
        if (this._policyInspectValue === undefined) {
            this._policyInspectValue = this.policyConfiguration ? this.policyConfiguration.inspect(this.key) : null;
        }
        return this._policyInspectValue;
    }
    get policyValue() {
        return this.policyInspectValue?.merged;
    }
    get policy() {
        return this.policyInspectValue?.value !== undefined ? { value: this.policyInspectValue.value } : undefined;
    }
    get applicationInspectValue() {
        if (this._applicationInspectValue === undefined) {
            this._applicationInspectValue = this.applicationConfiguration ? this.applicationConfiguration.inspect(this.key) : null;
        }
        return this._applicationInspectValue;
    }
    get applicationValue() {
        return this.applicationInspectValue?.merged;
    }
    get application() {
        return this.toInspectValue(this.applicationInspectValue);
    }
    get userInspectValue() {
        if (!this._userInspectValue) {
            this._userInspectValue = this.userConfiguration.inspect(this.key, this.overrides.overrideIdentifier);
        }
        return this._userInspectValue;
    }
    get userValue() {
        return this.userInspectValue.merged;
    }
    get user() {
        return this.toInspectValue(this.userInspectValue);
    }
    get userLocalInspectValue() {
        if (!this._userLocalInspectValue) {
            this._userLocalInspectValue = this.localUserConfiguration.inspect(this.key, this.overrides.overrideIdentifier);
        }
        return this._userLocalInspectValue;
    }
    get userLocalValue() {
        return this.userLocalInspectValue.merged;
    }
    get userLocal() {
        return this.toInspectValue(this.userLocalInspectValue);
    }
    get userRemoteInspectValue() {
        if (!this._userRemoteInspectValue) {
            this._userRemoteInspectValue = this.remoteUserConfiguration.inspect(this.key, this.overrides.overrideIdentifier);
        }
        return this._userRemoteInspectValue;
    }
    get userRemoteValue() {
        return this.userRemoteInspectValue.merged;
    }
    get userRemote() {
        return this.toInspectValue(this.userRemoteInspectValue);
    }
    get workspaceInspectValue() {
        if (this._workspaceInspectValue === undefined) {
            this._workspaceInspectValue = this.workspaceConfiguration ? this.workspaceConfiguration.inspect(this.key, this.overrides.overrideIdentifier) : null;
        }
        return this._workspaceInspectValue;
    }
    get workspaceValue() {
        return this.workspaceInspectValue?.merged;
    }
    get workspace() {
        return this.toInspectValue(this.workspaceInspectValue);
    }
    get workspaceFolderInspectValue() {
        if (this._workspaceFolderInspectValue === undefined) {
            this._workspaceFolderInspectValue = this.folderConfigurationModel ? this.folderConfigurationModel.inspect(this.key, this.overrides.overrideIdentifier) : null;
        }
        return this._workspaceFolderInspectValue;
    }
    get workspaceFolderValue() {
        return this.workspaceFolderInspectValue?.merged;
    }
    get workspaceFolder() {
        return this.toInspectValue(this.workspaceFolderInspectValue);
    }
    get memoryInspectValue() {
        if (this._memoryInspectValue === undefined) {
            this._memoryInspectValue = this.memoryConfigurationModel.inspect(this.key, this.overrides.overrideIdentifier);
        }
        return this._memoryInspectValue;
    }
    get memoryValue() {
        return this.memoryInspectValue.merged;
    }
    get memory() {
        return this.toInspectValue(this.memoryInspectValue);
    }
}
let Configuration$1 = class Configuration {
    constructor(_defaultConfiguration, _policyConfiguration, _applicationConfiguration, _localUserConfiguration, _remoteUserConfiguration, _workspaceConfiguration, _folderConfigurations, _memoryConfiguration, _memoryConfigurationByResource, logService) {
        this._defaultConfiguration = _defaultConfiguration;
        this._policyConfiguration = _policyConfiguration;
        this._applicationConfiguration = _applicationConfiguration;
        this._localUserConfiguration = _localUserConfiguration;
        this._remoteUserConfiguration = _remoteUserConfiguration;
        this._workspaceConfiguration = _workspaceConfiguration;
        this._folderConfigurations = _folderConfigurations;
        this._memoryConfiguration = _memoryConfiguration;
        this._memoryConfigurationByResource = _memoryConfigurationByResource;
        this.logService = logService;
        this._workspaceConsolidatedConfiguration = null;
        this._foldersConsolidatedConfigurations = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.ResourceMap());
        this._userConfiguration = null;
    }
    getValue(section, overrides, workspace) {
        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(section, overrides, workspace);
        return consolidateConfigurationModel.getValue(section);
    }
    updateValue(key, value, overrides = {}) {
        let memoryConfiguration;
        if (overrides.resource) {
            memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);
            if (!memoryConfiguration) {
                memoryConfiguration = ConfigurationModel.createEmptyModel(this.logService);
                this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);
            }
        }
        else {
            memoryConfiguration = this._memoryConfiguration;
        }
        if (value === undefined) {
            memoryConfiguration.removeValue(key);
        }
        else {
            memoryConfiguration.setValue(key, value);
        }
        if (!overrides.resource) {
            this._workspaceConsolidatedConfiguration = null;
        }
    }
    inspect(key, overrides, workspace) {
        const consolidateConfigurationModel = this.getConsolidatedConfigurationModel(key, overrides, workspace);
        const folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);
        const memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;
        const overrideIdentifiers = ( new Set());
        for (const override of consolidateConfigurationModel.overrides) {
            for (const overrideIdentifier of override.identifiers) {
                if (consolidateConfigurationModel.getOverrideValue(key, overrideIdentifier) !== undefined) {
                    overrideIdentifiers.add(overrideIdentifier);
                }
            }
        }
        return ( new ConfigurationInspectValue(
            key,
            overrides,
            consolidateConfigurationModel.getValue(key),
            overrideIdentifiers.size ? [...overrideIdentifiers] : undefined,
            this._defaultConfiguration,
            this._policyConfiguration.isEmpty() ? undefined : this._policyConfiguration,
            this.applicationConfiguration.isEmpty() ? undefined : this.applicationConfiguration,
            this.userConfiguration,
            this.localUserConfiguration,
            this.remoteUserConfiguration,
            workspace ? this._workspaceConfiguration : undefined,
            folderConfigurationModel ? folderConfigurationModel : undefined,
            memoryConfigurationModel
        ));
    }
    keys(workspace) {
        const folderConfigurationModel = this.getFolderConfigurationModelForResource(undefined, workspace);
        return {
            default: this._defaultConfiguration.keys.slice(0),
            user: this.userConfiguration.keys.slice(0),
            workspace: this._workspaceConfiguration.keys.slice(0),
            workspaceFolder: folderConfigurationModel ? folderConfigurationModel.keys.slice(0) : []
        };
    }
    updateDefaultConfiguration(defaultConfiguration) {
        this._defaultConfiguration = defaultConfiguration;
        this._workspaceConsolidatedConfiguration = null;
        this._foldersConsolidatedConfigurations.clear();
    }
    updatePolicyConfiguration(policyConfiguration) {
        this._policyConfiguration = policyConfiguration;
    }
    updateApplicationConfiguration(applicationConfiguration) {
        this._applicationConfiguration = applicationConfiguration;
        this._workspaceConsolidatedConfiguration = null;
        this._foldersConsolidatedConfigurations.clear();
    }
    updateLocalUserConfiguration(localUserConfiguration) {
        this._localUserConfiguration = localUserConfiguration;
        this._userConfiguration = null;
        this._workspaceConsolidatedConfiguration = null;
        this._foldersConsolidatedConfigurations.clear();
    }
    updateRemoteUserConfiguration(remoteUserConfiguration) {
        this._remoteUserConfiguration = remoteUserConfiguration;
        this._userConfiguration = null;
        this._workspaceConsolidatedConfiguration = null;
        this._foldersConsolidatedConfigurations.clear();
    }
    updateWorkspaceConfiguration(workspaceConfiguration) {
        this._workspaceConfiguration = workspaceConfiguration;
        this._workspaceConsolidatedConfiguration = null;
        this._foldersConsolidatedConfigurations.clear();
    }
    updateFolderConfiguration(resource, configuration) {
        this._folderConfigurations.set(resource, configuration);
        this._foldersConsolidatedConfigurations.delete(resource);
    }
    deleteFolderConfiguration(resource) {
        this.folderConfigurations.delete(resource);
        this._foldersConsolidatedConfigurations.delete(resource);
    }
    compareAndUpdateDefaultConfiguration(defaults, keys) {
        const overrides = [];
        if (!keys) {
            const { added, updated, removed } = compare(this._defaultConfiguration, defaults);
            keys = [...added, ...updated, ...removed];
        }
        for (const key of keys) {
            for (const overrideIdentifier of (0,_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_9__.overrideIdentifiersFromKey)(key)) {
                const fromKeys = this._defaultConfiguration.getKeysForOverrideIdentifier(overrideIdentifier);
                const toKeys = defaults.getKeysForOverrideIdentifier(overrideIdentifier);
                const keys = [
                    ...toKeys.filter(key => fromKeys.indexOf(key) === -1),
                    ...fromKeys.filter(key => toKeys.indexOf(key) === -1),
                    ...fromKeys.filter(key => !(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.equals)(this._defaultConfiguration.override(overrideIdentifier).getValue(key), defaults.override(overrideIdentifier).getValue(key)))
                ];
                overrides.push([overrideIdentifier, keys]);
            }
        }
        this.updateDefaultConfiguration(defaults);
        return { keys, overrides };
    }
    compareAndUpdatePolicyConfiguration(policyConfiguration) {
        const { added, updated, removed } = compare(this._policyConfiguration, policyConfiguration);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updatePolicyConfiguration(policyConfiguration);
        }
        return { keys, overrides: [] };
    }
    compareAndUpdateApplicationConfiguration(application) {
        const { added, updated, removed, overrides } = compare(this.applicationConfiguration, application);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updateApplicationConfiguration(application);
        }
        return { keys, overrides };
    }
    compareAndUpdateLocalUserConfiguration(user) {
        const { added, updated, removed, overrides } = compare(this.localUserConfiguration, user);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updateLocalUserConfiguration(user);
        }
        return { keys, overrides };
    }
    compareAndUpdateRemoteUserConfiguration(user) {
        const { added, updated, removed, overrides } = compare(this.remoteUserConfiguration, user);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updateRemoteUserConfiguration(user);
        }
        return { keys, overrides };
    }
    compareAndUpdateWorkspaceConfiguration(workspaceConfiguration) {
        const { added, updated, removed, overrides } = compare(this.workspaceConfiguration, workspaceConfiguration);
        const keys = [...added, ...updated, ...removed];
        if (keys.length) {
            this.updateWorkspaceConfiguration(workspaceConfiguration);
        }
        return { keys, overrides };
    }
    compareAndUpdateFolderConfiguration(resource, folderConfiguration) {
        const currentFolderConfiguration = this.folderConfigurations.get(resource);
        const { added, updated, removed, overrides } = compare(currentFolderConfiguration, folderConfiguration);
        const keys = [...added, ...updated, ...removed];
        if (keys.length || !currentFolderConfiguration) {
            this.updateFolderConfiguration(resource, folderConfiguration);
        }
        return { keys, overrides };
    }
    compareAndDeleteFolderConfiguration(folder) {
        const folderConfig = this.folderConfigurations.get(folder);
        if (!folderConfig) {
            throw ( new Error('Unknown folder'));
        }
        this.deleteFolderConfiguration(folder);
        const { added, updated, removed, overrides } = compare(folderConfig, undefined);
        return { keys: [...added, ...updated, ...removed], overrides };
    }
    get defaults() {
        return this._defaultConfiguration;
    }
    get applicationConfiguration() {
        return this._applicationConfiguration;
    }
    get userConfiguration() {
        if (!this._userConfiguration) {
            this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);
        }
        return this._userConfiguration;
    }
    get localUserConfiguration() {
        return this._localUserConfiguration;
    }
    get remoteUserConfiguration() {
        return this._remoteUserConfiguration;
    }
    get workspaceConfiguration() {
        return this._workspaceConfiguration;
    }
    get folderConfigurations() {
        return this._folderConfigurations;
    }
    getConsolidatedConfigurationModel(section, overrides, workspace) {
        let configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);
        if (overrides.overrideIdentifier) {
            configurationModel = configurationModel.override(overrides.overrideIdentifier);
        }
        if (!this._policyConfiguration.isEmpty() && this._policyConfiguration.getValue(section) !== undefined) {
            configurationModel = configurationModel.merge(this._policyConfiguration);
        }
        return configurationModel;
    }
    getConsolidatedConfigurationModelForResource({ resource }, workspace) {
        let consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();
        if (workspace && resource) {
            const root = workspace.getFolder(resource);
            if (root) {
                consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;
            }
            const memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);
            if (memoryConfigurationForResource) {
                consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);
            }
        }
        return consolidateConfiguration;
    }
    getWorkspaceConsolidatedConfiguration() {
        if (!this._workspaceConsolidatedConfiguration) {
            this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.applicationConfiguration, this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);
        }
        return this._workspaceConsolidatedConfiguration;
    }
    getFolderConsolidatedConfiguration(folder) {
        let folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);
        if (!folderConsolidatedConfiguration) {
            const workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();
            const folderConfiguration = this._folderConfigurations.get(folder);
            if (folderConfiguration) {
                folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);
                this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);
            }
            else {
                folderConsolidatedConfiguration = workspaceConsolidateConfiguration;
            }
        }
        return folderConsolidatedConfiguration;
    }
    getFolderConfigurationModelForResource(resource, workspace) {
        if (workspace && resource) {
            const root = workspace.getFolder(resource);
            if (root) {
                return this._folderConfigurations.get(root.uri);
            }
        }
        return undefined;
    }
    toData() {
        return {
            defaults: {
                contents: this._defaultConfiguration.contents,
                overrides: this._defaultConfiguration.overrides,
                keys: this._defaultConfiguration.keys
            },
            policy: {
                contents: this._policyConfiguration.contents,
                overrides: this._policyConfiguration.overrides,
                keys: this._policyConfiguration.keys
            },
            application: {
                contents: this.applicationConfiguration.contents,
                overrides: this.applicationConfiguration.overrides,
                keys: this.applicationConfiguration.keys
            },
            user: {
                contents: this.userConfiguration.contents,
                overrides: this.userConfiguration.overrides,
                keys: this.userConfiguration.keys
            },
            workspace: {
                contents: this._workspaceConfiguration.contents,
                overrides: this._workspaceConfiguration.overrides,
                keys: this._workspaceConfiguration.keys
            },
            folders: [...( this._folderConfigurations.keys())].reduce((result, folder) => {
                const { contents, overrides, keys } = this._folderConfigurations.get(folder);
                result.push([folder, { contents, overrides, keys }]);
                return result;
            }, [])
        };
    }
    allKeys() {
        const keys = ( new Set());
        this._defaultConfiguration.keys.forEach(key => keys.add(key));
        this.userConfiguration.keys.forEach(key => keys.add(key));
        this._workspaceConfiguration.keys.forEach(key => keys.add(key));
        this._folderConfigurations.forEach(folderConfiguration => folderConfiguration.keys.forEach(key => keys.add(key)));
        return [...( keys.values())];
    }
    allOverrideIdentifiers() {
        const keys = ( new Set());
        this._defaultConfiguration.getAllOverrideIdentifiers().forEach(key => keys.add(key));
        this.userConfiguration.getAllOverrideIdentifiers().forEach(key => keys.add(key));
        this._workspaceConfiguration.getAllOverrideIdentifiers().forEach(key => keys.add(key));
        this._folderConfigurations.forEach(folderConfiguration => folderConfiguration.getAllOverrideIdentifiers().forEach(key => keys.add(key)));
        return [...( keys.values())];
    }
    getAllKeysForOverrideIdentifier(overrideIdentifier) {
        const keys = ( new Set());
        this._defaultConfiguration.getKeysForOverrideIdentifier(overrideIdentifier).forEach(key => keys.add(key));
        this.userConfiguration.getKeysForOverrideIdentifier(overrideIdentifier).forEach(key => keys.add(key));
        this._workspaceConfiguration.getKeysForOverrideIdentifier(overrideIdentifier).forEach(key => keys.add(key));
        this._folderConfigurations.forEach(folderConfiguration => folderConfiguration.getKeysForOverrideIdentifier(overrideIdentifier).forEach(key => keys.add(key)));
        return [...( keys.values())];
    }
    static parse(data, logService) {
        const defaultConfiguration = this.parseConfigurationModel(data.defaults, logService);
        const policyConfiguration = this.parseConfigurationModel(data.policy, logService);
        const applicationConfiguration = this.parseConfigurationModel(data.application, logService);
        const userConfiguration = this.parseConfigurationModel(data.user, logService);
        const workspaceConfiguration = this.parseConfigurationModel(data.workspace, logService);
        const folders = data.folders.reduce((result, value) => {
            result.set(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__.URI.revive(value[0]), this.parseConfigurationModel(value[1], logService));
            return result;
        }, ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.ResourceMap()));
        return ( new Configuration(
            defaultConfiguration,
            policyConfiguration,
            applicationConfiguration,
            userConfiguration,
            ConfigurationModel.createEmptyModel(logService),
            workspaceConfiguration,
            folders,
            ConfigurationModel.createEmptyModel(logService),
            ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.ResourceMap()),
            logService
        ));
    }
    static parseConfigurationModel(model, logService) {
        return ( new ConfigurationModel(model.contents, model.keys, model.overrides, undefined, logService));
    }
};
function mergeChanges(...changes) {
    if (changes.length === 0) {
        return { keys: [], overrides: [] };
    }
    if (changes.length === 1) {
        return changes[0];
    }
    const keysSet = ( new Set());
    const overridesMap = ( new Map());
    for (const change of changes) {
        change.keys.forEach(key => keysSet.add(key));
        change.overrides.forEach(([identifier, keys]) => {
            const result = (0,_base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.getOrSet)(overridesMap, identifier, ( new Set()));
            keys.forEach(key => result.add(key));
        });
    }
    const overrides = [];
    overridesMap.forEach((keys, identifier) => overrides.push([identifier, [...( keys.values())]]));
    return { keys: [...( keysSet.values())], overrides };
}
class ConfigurationChangeEvent {
    constructor(change, previous, currentConfiguraiton, currentWorkspace, logService) {
        this.change = change;
        this.previous = previous;
        this.currentConfiguraiton = currentConfiguraiton;
        this.currentWorkspace = currentWorkspace;
        this.logService = logService;
        this._marker = '\n';
        this._markerCode1 = this._marker.charCodeAt(0);
        this._markerCode2 = '.'.charCodeAt(0);
        this.affectedKeys = ( new Set());
        this._previousConfiguration = undefined;
        for (const key of change.keys) {
            this.affectedKeys.add(key);
        }
        for (const [, keys] of change.overrides) {
            for (const key of keys) {
                this.affectedKeys.add(key);
            }
        }
        this._affectsConfigStr = this._marker;
        for (const key of this.affectedKeys) {
            this._affectsConfigStr += key + this._marker;
        }
    }
    get previousConfiguration() {
        if (!this._previousConfiguration && this.previous) {
            this._previousConfiguration = Configuration$1.parse(this.previous.data, this.logService);
        }
        return this._previousConfiguration;
    }
    affectsConfiguration(section, overrides) {
        const needle = this._marker + section;
        const idx = this._affectsConfigStr.indexOf(needle);
        if (idx < 0) {
            return false;
        }
        const pos = idx + needle.length;
        if (pos >= this._affectsConfigStr.length) {
            return false;
        }
        const code = this._affectsConfigStr.charCodeAt(pos);
        if (code !== this._markerCode1 && code !== this._markerCode2) {
            return false;
        }
        if (overrides) {
            const value1 = this.previousConfiguration ? this.previousConfiguration.getValue(section, overrides, this.previous?.workspace) : undefined;
            const value2 = this.currentConfiguraiton.getValue(section, overrides, this.currentWorkspace);
            return !(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.equals)(value1, value2);
        }
        return true;
    }
}
function compare(from, to) {
    const { added, removed, updated } = compareConfigurationContents(to?.rawConfiguration, from?.rawConfiguration);
    const overrides = [];
    const fromOverrideIdentifiers = from?.getAllOverrideIdentifiers() || [];
    const toOverrideIdentifiers = to?.getAllOverrideIdentifiers() || [];
    if (to) {
        const addedOverrideIdentifiers = toOverrideIdentifiers.filter(key => !fromOverrideIdentifiers.includes(key));
        for (const identifier of addedOverrideIdentifiers) {
            overrides.push([identifier, to.getKeysForOverrideIdentifier(identifier)]);
        }
    }
    if (from) {
        const removedOverrideIdentifiers = fromOverrideIdentifiers.filter(key => !toOverrideIdentifiers.includes(key));
        for (const identifier of removedOverrideIdentifiers) {
            overrides.push([identifier, from.getKeysForOverrideIdentifier(identifier)]);
        }
    }
    if (to && from) {
        for (const identifier of fromOverrideIdentifiers) {
            if (toOverrideIdentifiers.includes(identifier)) {
                const result = compareConfigurationContents({ contents: from.getOverrideValue(undefined, identifier) || {}, keys: from.getKeysForOverrideIdentifier(identifier) }, { contents: to.getOverrideValue(undefined, identifier) || {}, keys: to.getKeysForOverrideIdentifier(identifier) });
                overrides.push([identifier, [...result.added, ...result.removed, ...result.updated]]);
            }
        }
    }
    return { added, removed, updated, overrides };
}
function compareConfigurationContents(to, from) {
    const added = to
        ? from ? to.keys.filter(key => from.keys.indexOf(key) === -1) : [...to.keys]
        : [];
    const removed = from
        ? to ? from.keys.filter(key => to.keys.indexOf(key) === -1) : [...from.keys]
        : [];
    const updated = [];
    if (to && from) {
        for (const key of from.keys) {
            if (to.keys.indexOf(key) !== -1) {
                const value1 = (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.getConfigurationValue)(from.contents, key);
                const value2 = (0,_configuration_js__WEBPACK_IMPORTED_MODULE_8__.getConfigurationValue)(to.contents, key);
                if (!(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.equals)(value1, value2)) {
                    updated.push(key);
                }
            }
        }
    }
    return { added, removed, updated };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ConfigurationScope: () => (/* binding */ ConfigurationScope),
/* harmony export */   EditPresentationTypes: () => (/* binding */ EditPresentationTypes),
/* harmony export */   Extensions: () => (/* binding */ Extensions),
/* harmony export */   OVERRIDE_PROPERTY_PATTERN: () => (/* binding */ OVERRIDE_PROPERTY_PATTERN),
/* harmony export */   OVERRIDE_PROPERTY_REGEX: () => (/* binding */ OVERRIDE_PROPERTY_REGEX),
/* harmony export */   allSettings: () => (/* binding */ allSettings),
/* harmony export */   applicationSettings: () => (/* binding */ applicationSettings),
/* harmony export */   configurationDefaultsSchemaId: () => (/* binding */ configurationDefaultsSchemaId),
/* harmony export */   getDefaultValue: () => (/* binding */ getDefaultValue),
/* harmony export */   getScopes: () => (/* binding */ getScopes),
/* harmony export */   keyFromOverrideIdentifiers: () => (/* binding */ keyFromOverrideIdentifiers),
/* harmony export */   machineOverridableSettings: () => (/* binding */ machineOverridableSettings),
/* harmony export */   machineSettings: () => (/* binding */ machineSettings),
/* harmony export */   overrideIdentifiersFromKey: () => (/* binding */ overrideIdentifiersFromKey),
/* harmony export */   resourceLanguageSettingsSchemaId: () => (/* binding */ resourceLanguageSettingsSchemaId),
/* harmony export */   resourceSettings: () => (/* binding */ resourceSettings),
/* harmony export */   validateProperty: () => (/* binding */ validateProperty),
/* harmony export */   windowSettings: () => (/* binding */ windowSettings)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./configuration.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.js");
/* harmony import */ var _jsonschemas_common_jsonContributionRegistry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../jsonschemas/common/jsonContributionRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.js");
/* harmony import */ var _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");







const _moduleId = "vs/platform/configuration/common/configurationRegistry";
var EditPresentationTypes;
( ((function(EditPresentationTypes) {
    EditPresentationTypes["Multiline"] = "multilineText";
    EditPresentationTypes["Singleline"] = "singlelineText";
})(EditPresentationTypes || (EditPresentationTypes = {}))));
const Extensions = {
    Configuration: 'base.contributions.configuration'
};
var ConfigurationScope;
( ((function(ConfigurationScope) {
    ConfigurationScope[ConfigurationScope["APPLICATION"] = 1] = "APPLICATION";
    ConfigurationScope[ConfigurationScope["MACHINE"] = 2] = "MACHINE";
    ConfigurationScope[ConfigurationScope["WINDOW"] = 3] = "WINDOW";
    ConfigurationScope[ConfigurationScope["RESOURCE"] = 4] = "RESOURCE";
    ConfigurationScope[ConfigurationScope["LANGUAGE_OVERRIDABLE"] = 5] = "LANGUAGE_OVERRIDABLE";
    ConfigurationScope[ConfigurationScope["MACHINE_OVERRIDABLE"] = 6] = "MACHINE_OVERRIDABLE";
})(ConfigurationScope || (ConfigurationScope = {}))));
const allSettings = { properties: {}, patternProperties: {} };
const applicationSettings = { properties: {}, patternProperties: {} };
const machineSettings = { properties: {}, patternProperties: {} };
const machineOverridableSettings = { properties: {}, patternProperties: {} };
const windowSettings = { properties: {}, patternProperties: {} };
const resourceSettings = { properties: {}, patternProperties: {} };
const resourceLanguageSettingsSchemaId = 'vscode://schemas/settings/resourceLanguage';
const configurationDefaultsSchemaId = 'vscode://schemas/settings/configurationDefaults';
const contributionRegistry = ( (_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_6__.Registry.as(_jsonschemas_common_jsonContributionRegistry_js__WEBPACK_IMPORTED_MODULE_5__.Extensions.JSONContribution)));
class ConfigurationRegistry {
    constructor() {
        this.overrideIdentifiers = ( (new Set()));
        this._onDidSchemaChange = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidSchemaChange = this._onDidSchemaChange.event;
        this._onDidUpdateConfiguration = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidUpdateConfiguration = this._onDidUpdateConfiguration.event;
        this.configurationDefaultsOverrides = ( (new Map()));
        this.defaultLanguageConfigurationOverridesNode = {
            id: 'defaultOverrides',
            title: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 0, "Default Language Configuration Overrides")),
            properties: {}
        };
        this.configurationContributors = [this.defaultLanguageConfigurationOverridesNode];
        this.resourceLanguageSettingsSchema = {
            properties: {},
            patternProperties: {},
            additionalProperties: true,
            allowTrailingCommas: true,
            allowComments: true
        };
        this.configurationProperties = {};
        this.policyConfigurations = ( (new Map()));
        this.excludedConfigurationProperties = {};
        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);
        this.registerOverridePropertyPatternKey();
    }
    registerConfiguration(configuration, validate = true) {
        this.registerConfigurations([configuration], validate);
    }
    registerConfigurations(configurations, validate = true) {
        const properties = ( (new Set()));
        this.doRegisterConfigurations(configurations, validate, properties);
        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire({ properties });
    }
    deregisterConfigurations(configurations) {
        const properties = ( (new Set()));
        this.doDeregisterConfigurations(configurations, properties);
        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire({ properties });
    }
    updateConfigurations({ add, remove }) {
        const properties = ( (new Set()));
        this.doDeregisterConfigurations(remove, properties);
        this.doRegisterConfigurations(add, false, properties);
        contributionRegistry.registerSchema(resourceLanguageSettingsSchemaId, this.resourceLanguageSettingsSchema);
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire({ properties });
    }
    registerDefaultConfigurations(configurationDefaults) {
        const properties = ( (new Set()));
        this.doRegisterDefaultConfigurations(configurationDefaults, properties);
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });
    }
    doRegisterDefaultConfigurations(configurationDefaults, bucket) {
        const overrideIdentifiers = [];
        for (const { overrides, source } of configurationDefaults) {
            for (const key in overrides) {
                bucket.add(key);
                if (OVERRIDE_PROPERTY_REGEX.test(key)) {
                    const configurationDefaultOverride = this.configurationDefaultsOverrides.get(key);
                    const valuesSources = configurationDefaultOverride?.valuesSources ?? ( (new Map()));
                    const defaultValue = configurationDefaultOverride?.value || {};
                    for (const configuration of ( (Object.keys(overrides[key])))) {
                        const overrideValue = overrides[key][configuration];
                        const isObjectSetting = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(overrideValue) && ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(defaultValue[configuration]) || (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(defaultValue[configuration]));
                        if (isObjectSetting) {
                            defaultValue[configuration] = { ...(defaultValue[configuration] ?? {}), ...overrideValue };
                            if (source) {
                                let objectConfigurationSources = valuesSources.get(configuration);
                                if (!objectConfigurationSources) {
                                    objectConfigurationSources = ( (new Map()));
                                    valuesSources.set(configuration, objectConfigurationSources);
                                }
                                if (!(objectConfigurationSources instanceof Map)) {
                                    console.error('objectConfigurationSources is not a Map');
                                    continue;
                                }
                                for (const objectKey in overrideValue) {
                                    objectConfigurationSources.set(objectKey, source);
                                }
                            }
                        }
                        else {
                            defaultValue[configuration] = overrideValue;
                            if (source) {
                                valuesSources.set(configuration, source);
                            }
                        }
                    }
                    this.configurationDefaultsOverrides.set(key, { source, value: defaultValue, valuesSources });
                    const plainKey = (0,_configuration_js__WEBPACK_IMPORTED_MODULE_4__.getLanguageTagSettingPlainKey)(key);
                    const property = {
                        type: 'object',
                        default: defaultValue,
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                            _moduleId,
                            1,
                            "Configure settings to be overridden for the {0} language.",
                            plainKey
                        )),
                        $ref: resourceLanguageSettingsSchemaId,
                        defaultDefaultValue: defaultValue,
                        source: (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(source) ? undefined : source,
                        defaultValueSource: source
                    };
                    overrideIdentifiers.push(...overrideIdentifiersFromKey(key));
                    this.configurationProperties[key] = property;
                    this.defaultLanguageConfigurationOverridesNode.properties[key] = property;
                }
                else {
                    const property = this.configurationProperties[key];
                    const existingDefaultOverride = this.configurationDefaultsOverrides.get(key);
                    let existingDefaultValue = existingDefaultOverride?.value ?? property?.defaultDefaultValue;
                    let newDefaultValue = overrides[key];
                    let newDefaultValueSource = source;
                    const isObjectSetting = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(newDefaultValue) && (property !== undefined && property.type === 'object' ||
                        property === undefined && ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(existingDefaultValue) || (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(existingDefaultValue)));
                    if (isObjectSetting) {
                        if (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(existingDefaultValue)) {
                            existingDefaultValue = {};
                        }
                        newDefaultValue = { ...existingDefaultValue, ...newDefaultValue };
                        newDefaultValueSource = existingDefaultOverride?.source ?? ( (new Map()));
                        if (!(newDefaultValueSource instanceof Map)) {
                            console.error('defaultValueSource is not a Map');
                            continue;
                        }
                        for (const overrideObjectKey in overrides[key]) {
                            if (source) {
                                newDefaultValueSource.set(overrideObjectKey, source);
                            }
                            else {
                                newDefaultValueSource.delete(overrideObjectKey);
                            }
                        }
                    }
                    this.configurationDefaultsOverrides.set(key, { value: newDefaultValue, source: newDefaultValueSource });
                    if (property) {
                        this.updatePropertyDefaultValue(key, property);
                        this.updateSchema(key, property);
                    }
                }
            }
        }
        this.doRegisterOverrideIdentifiers(overrideIdentifiers);
    }
    deregisterDefaultConfigurations(defaultConfigurations) {
        const properties = ( (new Set()));
        this.doDeregisterDefaultConfigurations(defaultConfigurations, properties);
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides: true });
    }
    doDeregisterDefaultConfigurations(defaultConfigurations, bucket) {
        for (const { overrides, source } of defaultConfigurations) {
            for (const key in overrides) {
                const id = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(source) ? source : source?.id;
                const configurationDefaultsOverride = this.configurationDefaultsOverrides.get(key);
                if (!configurationDefaultsOverride) {
                    continue;
                }
                if (OVERRIDE_PROPERTY_REGEX.test(key)) {
                    for (const configuration of ( (Object.keys(overrides[key])))) {
                        const overrideValue = overrides[key][configuration];
                        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(overrideValue)) {
                            const configurationSource = configurationDefaultsOverride.valuesSources?.get(configuration);
                            for (const overrideObjectKey of ( (Object.keys(overrideValue)))) {
                                const keySource = configurationSource?.get(overrideObjectKey);
                                const keySourceId = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(keySource) ? keySource : keySource?.id;
                                if (keySourceId === id) {
                                    configurationSource?.delete(overrideObjectKey);
                                    delete configurationDefaultsOverride.value[configuration][overrideObjectKey];
                                }
                            }
                            if (( (Object.keys(configurationDefaultsOverride.value[configuration]))).length === 0) {
                                delete configurationDefaultsOverride.value[configuration];
                                configurationDefaultsOverride.valuesSources?.delete(configuration);
                            }
                        }
                        else {
                            const configurationSource = configurationDefaultsOverride.valuesSources?.get(configuration);
                            const keySourceId = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(configurationSource) ? configurationSource : configurationSource?.id;
                            if (keySourceId === id) {
                                configurationDefaultsOverride.valuesSources?.delete(configuration);
                                delete configurationDefaultsOverride.value[configuration];
                            }
                        }
                    }
                    const languageValues = this.configurationDefaultsOverrides.get(key);
                    if (languageValues && ( (Object.keys(languageValues.value))).length === 0) {
                        this.configurationDefaultsOverrides.delete(key);
                        delete this.configurationProperties[key];
                        delete this.defaultLanguageConfigurationOverridesNode.properties[key];
                    }
                }
                else {
                    if (configurationDefaultsOverride.source instanceof Map) {
                        const keySources = configurationDefaultsOverride.source;
                        for (const objectKey in overrides[key]) {
                            const keySource = keySources.get(objectKey);
                            const keySourceId = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(keySource) ? keySource : keySource?.id;
                            if (keySourceId === id) {
                                keySources.delete(objectKey);
                                delete configurationDefaultsOverride.value[objectKey];
                            }
                        }
                        if (keySources.size === 0) {
                            this.configurationDefaultsOverrides.delete(key);
                        }
                    }
                    else {
                        const configurationDefaultsOverrideSourceId = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(configurationDefaultsOverride.source) ? configurationDefaultsOverride.source : configurationDefaultsOverride.source?.id;
                        if (id !== configurationDefaultsOverrideSourceId) {
                            continue;
                        }
                        this.configurationDefaultsOverrides.delete(key);
                    }
                    const property = this.configurationProperties[key];
                    if (property) {
                        this.updatePropertyDefaultValue(key, property);
                        this.updateSchema(key, property);
                    }
                }
                bucket.add(key);
            }
        }
        this.updateOverridePropertyPatternKey();
    }
    deltaConfiguration(delta) {
        let defaultsOverrides = false;
        const properties = ( (new Set()));
        if (delta.removedDefaults) {
            this.doDeregisterDefaultConfigurations(delta.removedDefaults, properties);
            defaultsOverrides = true;
        }
        if (delta.addedDefaults) {
            this.doRegisterDefaultConfigurations(delta.addedDefaults, properties);
            defaultsOverrides = true;
        }
        if (delta.removedConfigurations) {
            this.doDeregisterConfigurations(delta.removedConfigurations, properties);
        }
        if (delta.addedConfigurations) {
            this.doRegisterConfigurations(delta.addedConfigurations, false, properties);
        }
        this._onDidSchemaChange.fire();
        this._onDidUpdateConfiguration.fire({ properties, defaultsOverrides });
    }
    notifyConfigurationSchemaUpdated(...configurations) {
        this._onDidSchemaChange.fire();
    }
    registerOverrideIdentifiers(overrideIdentifiers) {
        this.doRegisterOverrideIdentifiers(overrideIdentifiers);
        this._onDidSchemaChange.fire();
    }
    doRegisterOverrideIdentifiers(overrideIdentifiers) {
        for (const overrideIdentifier of overrideIdentifiers) {
            this.overrideIdentifiers.add(overrideIdentifier);
        }
        this.updateOverridePropertyPatternKey();
    }
    doRegisterConfigurations(configurations, validate, bucket) {
        configurations.forEach(configuration => {
            this.validateAndRegisterProperties(configuration, validate, configuration.extensionInfo, configuration.restrictedProperties, undefined, bucket);
            this.configurationContributors.push(configuration);
            this.registerJSONConfiguration(configuration);
        });
    }
    doDeregisterConfigurations(configurations, bucket) {
        const deregisterConfiguration = (configuration) => {
            if (configuration.properties) {
                for (const key in configuration.properties) {
                    bucket.add(key);
                    const property = this.configurationProperties[key];
                    if (property?.policy?.name) {
                        this.policyConfigurations.delete(property.policy.name);
                    }
                    delete this.configurationProperties[key];
                    this.removeFromSchema(key, configuration.properties[key]);
                }
            }
            configuration.allOf?.forEach(node => deregisterConfiguration(node));
        };
        for (const configuration of configurations) {
            deregisterConfiguration(configuration);
            const index = this.configurationContributors.indexOf(configuration);
            if (index !== -1) {
                this.configurationContributors.splice(index, 1);
            }
        }
    }
    validateAndRegisterProperties(configuration, validate = true, extensionInfo, restrictedProperties, scope = ConfigurationScope.WINDOW, bucket) {
        scope = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefinedOrNull)(configuration.scope) ? scope : configuration.scope;
        const properties = configuration.properties;
        if (properties) {
            for (const key in properties) {
                const property = properties[key];
                if (validate && validateProperty(key, property)) {
                    delete properties[key];
                    continue;
                }
                property.source = extensionInfo;
                property.defaultDefaultValue = properties[key].default;
                this.updatePropertyDefaultValue(key, property);
                if (OVERRIDE_PROPERTY_REGEX.test(key)) {
                    property.scope = undefined;
                }
                else {
                    property.scope = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefinedOrNull)(property.scope) ? scope : property.scope;
                    property.restricted = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefinedOrNull)(property.restricted) ? !!restrictedProperties?.includes(key) : property.restricted;
                }
                if (properties[key].hasOwnProperty('included') && !properties[key].included) {
                    this.excludedConfigurationProperties[key] = properties[key];
                    delete properties[key];
                    continue;
                }
                else {
                    this.configurationProperties[key] = properties[key];
                    if (properties[key].policy?.name) {
                        this.policyConfigurations.set(properties[key].policy.name, key);
                    }
                }
                if (!properties[key].deprecationMessage && properties[key].markdownDeprecationMessage) {
                    properties[key].deprecationMessage = properties[key].markdownDeprecationMessage;
                }
                bucket.add(key);
            }
        }
        const subNodes = configuration.allOf;
        if (subNodes) {
            for (const node of subNodes) {
                this.validateAndRegisterProperties(node, validate, extensionInfo, restrictedProperties, scope, bucket);
            }
        }
    }
    getConfigurations() {
        return this.configurationContributors;
    }
    getConfigurationProperties() {
        return this.configurationProperties;
    }
    getPolicyConfigurations() {
        return this.policyConfigurations;
    }
    getExcludedConfigurationProperties() {
        return this.excludedConfigurationProperties;
    }
    getConfigurationDefaultsOverrides() {
        return this.configurationDefaultsOverrides;
    }
    registerJSONConfiguration(configuration) {
        const register = (configuration) => {
            const properties = configuration.properties;
            if (properties) {
                for (const key in properties) {
                    this.updateSchema(key, properties[key]);
                }
            }
            const subNodes = configuration.allOf;
            subNodes?.forEach(register);
        };
        register(configuration);
    }
    updateSchema(key, property) {
        allSettings.properties[key] = property;
        switch (property.scope) {
            case ConfigurationScope.APPLICATION:
                applicationSettings.properties[key] = property;
                break;
            case ConfigurationScope.MACHINE:
                machineSettings.properties[key] = property;
                break;
            case ConfigurationScope.MACHINE_OVERRIDABLE:
                machineOverridableSettings.properties[key] = property;
                break;
            case ConfigurationScope.WINDOW:
                windowSettings.properties[key] = property;
                break;
            case ConfigurationScope.RESOURCE:
                resourceSettings.properties[key] = property;
                break;
            case ConfigurationScope.LANGUAGE_OVERRIDABLE:
                resourceSettings.properties[key] = property;
                this.resourceLanguageSettingsSchema.properties[key] = property;
                break;
        }
    }
    removeFromSchema(key, property) {
        delete allSettings.properties[key];
        switch (property.scope) {
            case ConfigurationScope.APPLICATION:
                delete applicationSettings.properties[key];
                break;
            case ConfigurationScope.MACHINE:
                delete machineSettings.properties[key];
                break;
            case ConfigurationScope.MACHINE_OVERRIDABLE:
                delete machineOverridableSettings.properties[key];
                break;
            case ConfigurationScope.WINDOW:
                delete windowSettings.properties[key];
                break;
            case ConfigurationScope.RESOURCE:
            case ConfigurationScope.LANGUAGE_OVERRIDABLE:
                delete resourceSettings.properties[key];
                delete this.resourceLanguageSettingsSchema.properties[key];
                break;
        }
    }
    updateOverridePropertyPatternKey() {
        for (const overrideIdentifier of ( (this.overrideIdentifiers.values()))) {
            const overrideIdentifierProperty = `[${overrideIdentifier}]`;
            const resourceLanguagePropertiesSchema = {
                type: 'object',
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 2, "Configure editor settings to be overridden for a language.")),
                errorMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 3, "This setting does not support per-language configuration.")),
                $ref: resourceLanguageSettingsSchemaId,
            };
            this.updatePropertyDefaultValue(overrideIdentifierProperty, resourceLanguagePropertiesSchema);
            allSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;
            applicationSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;
            machineSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;
            machineOverridableSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;
            windowSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;
            resourceSettings.properties[overrideIdentifierProperty] = resourceLanguagePropertiesSchema;
        }
    }
    registerOverridePropertyPatternKey() {
        const resourceLanguagePropertiesSchema = {
            type: 'object',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 2, "Configure editor settings to be overridden for a language.")),
            errorMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 3, "This setting does not support per-language configuration.")),
            $ref: resourceLanguageSettingsSchemaId,
        };
        allSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;
        applicationSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;
        machineSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;
        machineOverridableSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;
        windowSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;
        resourceSettings.patternProperties[OVERRIDE_PROPERTY_PATTERN] = resourceLanguagePropertiesSchema;
        this._onDidSchemaChange.fire();
    }
    updatePropertyDefaultValue(key, property) {
        const configurationdefaultOverride = this.configurationDefaultsOverrides.get(key);
        let defaultValue = configurationdefaultOverride?.value;
        let defaultSource = configurationdefaultOverride?.source;
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(defaultValue)) {
            defaultValue = property.defaultDefaultValue;
            defaultSource = undefined;
        }
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefined)(defaultValue)) {
            defaultValue = getDefaultValue(property.type);
        }
        property.default = defaultValue;
        property.defaultValueSource = defaultSource;
    }
}
const OVERRIDE_IDENTIFIER_PATTERN = `\\[([^\\]]+)\\]`;
const OVERRIDE_IDENTIFIER_REGEX = ( (new RegExp(OVERRIDE_IDENTIFIER_PATTERN, 'g')));
const OVERRIDE_PROPERTY_PATTERN = `^(${OVERRIDE_IDENTIFIER_PATTERN})+$`;
const OVERRIDE_PROPERTY_REGEX = ( (new RegExp(OVERRIDE_PROPERTY_PATTERN)));
function overrideIdentifiersFromKey(key) {
    const identifiers = [];
    if (OVERRIDE_PROPERTY_REGEX.test(key)) {
        let matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);
        while (matches?.length) {
            const identifier = matches[1].trim();
            if (identifier) {
                identifiers.push(identifier);
            }
            matches = OVERRIDE_IDENTIFIER_REGEX.exec(key);
        }
    }
    return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.distinct)(identifiers);
}
function keyFromOverrideIdentifiers(overrideIdentifiers) {
    return overrideIdentifiers.reduce((result, overrideIdentifier) => `${result}[${overrideIdentifier}]`, '');
}
function getDefaultValue(type) {
    const t = Array.isArray(type) ? type[0] : type;
    switch (t) {
        case 'boolean':
            return false;
        case 'integer':
        case 'number':
            return 0;
        case 'string':
            return '';
        case 'array':
            return [];
        case 'object':
            return {};
        default:
            return null;
    }
}
const configurationRegistry = ( (new ConfigurationRegistry()));
_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_6__.Registry.add(Extensions.Configuration, configurationRegistry);
function validateProperty(property, schema) {
    if (!property.trim()) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 4, "Cannot register an empty property"));
    }
    if (OVERRIDE_PROPERTY_REGEX.test(property)) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
            _moduleId,
            5,
            "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",
            property
        ));
    }
    if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
            _moduleId,
            6,
            "Cannot register '{0}'. This property is already registered.",
            property
        ));
    }
    if (schema.policy?.name && configurationRegistry.getPolicyConfigurations().get(schema.policy?.name) !== undefined) {
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
            _moduleId,
            7,
            "Cannot register '{0}'. The associated policy {1} is already registered with {2}.",
            property,
            schema.policy?.name,
            configurationRegistry.getPolicyConfigurations().get(schema.policy?.name)
        ));
    }
    return null;
}
function getScopes() {
    const scopes = [];
    const configurationProperties = configurationRegistry.getConfigurationProperties();
    for (const key of ( (Object.keys(configurationProperties)))) {
        scopes.push([key, configurationProperties[key].scope]);
    }
    scopes.push(['launch', ConfigurationScope.RESOURCE]);
    scopes.push(['task', ConfigurationScope.RESOURCE]);
    return scopes;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ContextKeyAndExpr: () => (/* binding */ ContextKeyAndExpr),
/* harmony export */   ContextKeyDefinedExpr: () => (/* binding */ ContextKeyDefinedExpr),
/* harmony export */   ContextKeyEqualsExpr: () => (/* binding */ ContextKeyEqualsExpr),
/* harmony export */   ContextKeyExpr: () => (/* binding */ ContextKeyExpr),
/* harmony export */   ContextKeyExprType: () => (/* binding */ ContextKeyExprType),
/* harmony export */   ContextKeyFalseExpr: () => (/* binding */ ContextKeyFalseExpr),
/* harmony export */   ContextKeyGreaterEqualsExpr: () => (/* binding */ ContextKeyGreaterEqualsExpr),
/* harmony export */   ContextKeyGreaterExpr: () => (/* binding */ ContextKeyGreaterExpr),
/* harmony export */   ContextKeyInExpr: () => (/* binding */ ContextKeyInExpr),
/* harmony export */   ContextKeyNotEqualsExpr: () => (/* binding */ ContextKeyNotEqualsExpr),
/* harmony export */   ContextKeyNotExpr: () => (/* binding */ ContextKeyNotExpr),
/* harmony export */   ContextKeyNotInExpr: () => (/* binding */ ContextKeyNotInExpr),
/* harmony export */   ContextKeyNotRegexExpr: () => (/* binding */ ContextKeyNotRegexExpr),
/* harmony export */   ContextKeyOrExpr: () => (/* binding */ ContextKeyOrExpr),
/* harmony export */   ContextKeyRegexExpr: () => (/* binding */ ContextKeyRegexExpr),
/* harmony export */   ContextKeySmallerEqualsExpr: () => (/* binding */ ContextKeySmallerEqualsExpr),
/* harmony export */   ContextKeySmallerExpr: () => (/* binding */ ContextKeySmallerExpr),
/* harmony export */   ContextKeyTrueExpr: () => (/* binding */ ContextKeyTrueExpr),
/* harmony export */   Parser: () => (/* binding */ Parser),
/* harmony export */   RawContextKey: () => (/* binding */ RawContextKey),
/* harmony export */   expressionsAreEqualWithConstantSubstitution: () => (/* binding */ expressionsAreEqualWithConstantSubstitution),
/* harmony export */   implies: () => (/* binding */ implies),
/* harmony export */   setConstant: () => (/* binding */ setConstant),
/* harmony export */   validateWhenClauses: () => (/* binding */ validateWhenClauses)
/* harmony export */ });
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _scanner_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scanner.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/scanner.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");






const _moduleId = "vs/platform/contextkey/common/contextkey";
const CONSTANT_VALUES = ( (new Map()));
CONSTANT_VALUES.set('false', false);
CONSTANT_VALUES.set('true', true);
CONSTANT_VALUES.set('isMac', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isMacintosh);
CONSTANT_VALUES.set('isLinux', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isLinux);
CONSTANT_VALUES.set('isWindows', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWindows);
CONSTANT_VALUES.set('isWeb', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWeb);
CONSTANT_VALUES.set('isMacNative', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isMacintosh && !_base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isWeb);
CONSTANT_VALUES.set('isEdge', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isEdge);
CONSTANT_VALUES.set('isFirefox', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isFirefox);
CONSTANT_VALUES.set('isChrome', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isChrome);
CONSTANT_VALUES.set('isSafari', _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.isSafari);
function setConstant(key, value) {
    if (CONSTANT_VALUES.get(key) !== undefined) {
        throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_5__.illegalArgument)('contextkey.setConstant(k, v) invoked with already set constant `k`');
    }
    CONSTANT_VALUES.set(key, value);
}
const hasOwnProperty = Object.prototype.hasOwnProperty;
var ContextKeyExprType;
( ((function(ContextKeyExprType) {
    ContextKeyExprType[ContextKeyExprType["False"] = 0] = "False";
    ContextKeyExprType[ContextKeyExprType["True"] = 1] = "True";
    ContextKeyExprType[ContextKeyExprType["Defined"] = 2] = "Defined";
    ContextKeyExprType[ContextKeyExprType["Not"] = 3] = "Not";
    ContextKeyExprType[ContextKeyExprType["Equals"] = 4] = "Equals";
    ContextKeyExprType[ContextKeyExprType["NotEquals"] = 5] = "NotEquals";
    ContextKeyExprType[ContextKeyExprType["And"] = 6] = "And";
    ContextKeyExprType[ContextKeyExprType["Regex"] = 7] = "Regex";
    ContextKeyExprType[ContextKeyExprType["NotRegex"] = 8] = "NotRegex";
    ContextKeyExprType[ContextKeyExprType["Or"] = 9] = "Or";
    ContextKeyExprType[ContextKeyExprType["In"] = 10] = "In";
    ContextKeyExprType[ContextKeyExprType["NotIn"] = 11] = "NotIn";
    ContextKeyExprType[ContextKeyExprType["Greater"] = 12] = "Greater";
    ContextKeyExprType[ContextKeyExprType["GreaterEquals"] = 13] = "GreaterEquals";
    ContextKeyExprType[ContextKeyExprType["Smaller"] = 14] = "Smaller";
    ContextKeyExprType[ContextKeyExprType["SmallerEquals"] = 15] = "SmallerEquals";
})(ContextKeyExprType || (ContextKeyExprType = {}))));
const defaultConfig = {
    regexParsingWithErrorRecovery: true
};
const errorEmptyString = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 0, "Empty context key expression"));
const hintEmptyString = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(
    _moduleId,
    1,
    "Did you forget to write an expression? You can also put 'false' or 'true' to always evaluate to false or true, respectively."
));
const errorNoInAfterNot = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 2, "'in' after 'not'."));
const errorClosingParenthesis = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 3, "closing parenthesis ')'"));
const errorUnexpectedToken = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 4, "Unexpected token"));
const hintUnexpectedToken = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 5, "Did you forget to put && or || before the token?"));
const errorUnexpectedEOF = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 6, "Unexpected end of expression"));
const hintUnexpectedEOF = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 7, "Did you forget to put a context key?"));
class Parser {
    static { this._parseError = ( (new Error())); }
    get lexingErrors() {
        return this._scanner.errors;
    }
    get parsingErrors() {
        return this._parsingErrors;
    }
    constructor(_config = defaultConfig) {
        this._config = _config;
        this._scanner = ( (new _scanner_js__WEBPACK_IMPORTED_MODULE_3__.Scanner()));
        this._tokens = [];
        this._current = 0;
        this._parsingErrors = [];
        this._flagsGYRe = /g|y/g;
    }
    parse(input) {
        if (input === '') {
            this._parsingErrors.push({ message: errorEmptyString, offset: 0, lexeme: '', additionalInfo: hintEmptyString });
            return undefined;
        }
        this._tokens = this._scanner.reset(input).scan();
        this._current = 0;
        this._parsingErrors = [];
        try {
            const expr = this._expr();
            if (!this._isAtEnd()) {
                const peek = this._peek();
                const additionalInfo = peek.type === _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Str ? hintUnexpectedToken : undefined;
                this._parsingErrors.push({ message: errorUnexpectedToken, offset: peek.offset, lexeme: _scanner_js__WEBPACK_IMPORTED_MODULE_3__.Scanner.getLexeme(peek), additionalInfo });
                throw Parser._parseError;
            }
            return expr;
        }
        catch (e) {
            if (!(e === Parser._parseError)) {
                throw e;
            }
            return undefined;
        }
    }
    _expr() {
        return this._or();
    }
    _or() {
        const expr = [this._and()];
        while (this._matchOne(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Or)) {
            const right = this._and();
            expr.push(right);
        }
        return expr.length === 1 ? expr[0] : ( (ContextKeyExpr.or(...expr)));
    }
    _and() {
        const expr = [this._term()];
        while (this._matchOne(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.And)) {
            const right = this._term();
            expr.push(right);
        }
        return expr.length === 1 ? expr[0] : ( (ContextKeyExpr.and(...expr)));
    }
    _term() {
        if (this._matchOne(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Neg)) {
            const peek = this._peek();
            switch (peek.type) {
                case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.True:
                    this._advance();
                    return ContextKeyFalseExpr.INSTANCE;
                case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.False:
                    this._advance();
                    return ContextKeyTrueExpr.INSTANCE;
                case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.LParen: {
                    this._advance();
                    const expr = this._expr();
                    this._consume(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.RParen, errorClosingParenthesis);
                    return expr?.negate();
                }
                case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Str:
                    this._advance();
                    return (
                         (ContextKeyNotExpr.create(peek.lexeme))
                    );
                default:
                    throw this._errExpectedButGot(`KEY | true | false | '(' expression ')'`, peek);
            }
        }
        return this._primary();
    }
    _primary() {
        const peek = this._peek();
        switch (peek.type) {
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.True:
                this._advance();
                return ContextKeyExpr.true();
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.False:
                this._advance();
                return (
                     (ContextKeyExpr.false())
                );
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.LParen: {
                this._advance();
                const expr = this._expr();
                this._consume(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.RParen, errorClosingParenthesis);
                return expr;
            }
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Str: {
                const key = peek.lexeme;
                this._advance();
                if (this._matchOne(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.RegexOp)) {
                    const expr = this._peek();
                    if (!this._config.regexParsingWithErrorRecovery) {
                        this._advance();
                        if (expr.type !== _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.RegexStr) {
                            throw this._errExpectedButGot(`REGEX`, expr);
                        }
                        const regexLexeme = expr.lexeme;
                        const closingSlashIndex = regexLexeme.lastIndexOf('/');
                        const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));
                        let regexp;
                        try {
                            regexp = ( (new RegExp(regexLexeme.substring(1, closingSlashIndex), flags)));
                        }
                        catch (e) {
                            throw this._errExpectedButGot(`REGEX`, expr);
                        }
                        return ContextKeyRegexExpr.create(key, regexp);
                    }
                    switch (expr.type) {
                        case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.RegexStr:
                        case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Error: {
                            const lexemeReconstruction = [expr.lexeme];
                            this._advance();
                            let followingToken = this._peek();
                            let parenBalance = 0;
                            for (let i = 0; i < expr.lexeme.length; i++) {
                                if (expr.lexeme.charCodeAt(i) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.OpenParen) {
                                    parenBalance++;
                                }
                                else if (expr.lexeme.charCodeAt(i) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CloseParen) {
                                    parenBalance--;
                                }
                            }
                            while (!this._isAtEnd() && followingToken.type !== _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.And && followingToken.type !== _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Or) {
                                switch (followingToken.type) {
                                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.LParen:
                                        parenBalance++;
                                        break;
                                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.RParen:
                                        parenBalance--;
                                        break;
                                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.RegexStr:
                                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.QuotedStr:
                                        for (let i = 0; i < followingToken.lexeme.length; i++) {
                                            if (followingToken.lexeme.charCodeAt(i) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.OpenParen) {
                                                parenBalance++;
                                            }
                                            else if (expr.lexeme.charCodeAt(i) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CloseParen) {
                                                parenBalance--;
                                            }
                                        }
                                }
                                if (parenBalance < 0) {
                                    break;
                                }
                                lexemeReconstruction.push(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.Scanner.getLexeme(followingToken));
                                this._advance();
                                followingToken = this._peek();
                            }
                            const regexLexeme = lexemeReconstruction.join('');
                            const closingSlashIndex = regexLexeme.lastIndexOf('/');
                            const flags = closingSlashIndex === regexLexeme.length - 1 ? undefined : this._removeFlagsGY(regexLexeme.substring(closingSlashIndex + 1));
                            let regexp;
                            try {
                                regexp = ( (new RegExp(regexLexeme.substring(1, closingSlashIndex), flags)));
                            }
                            catch (e) {
                                throw this._errExpectedButGot(`REGEX`, expr);
                            }
                            return (
                                 (ContextKeyExpr.regex(key, regexp))
                            );
                        }
                        case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.QuotedStr: {
                            const serializedValue = expr.lexeme;
                            this._advance();
                            let regex = null;
                            if (!(0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.isFalsyOrWhitespace)(serializedValue)) {
                                const start = serializedValue.indexOf('/');
                                const end = serializedValue.lastIndexOf('/');
                                if (start !== end && start >= 0) {
                                    const value = serializedValue.slice(start + 1, end);
                                    const caseIgnoreFlag = serializedValue[end + 1] === 'i' ? 'i' : '';
                                    try {
                                        regex = ( (new RegExp(value, caseIgnoreFlag)));
                                    }
                                    catch (_e) {
                                        throw this._errExpectedButGot(`REGEX`, expr);
                                    }
                                }
                            }
                            if (regex === null) {
                                throw this._errExpectedButGot('REGEX', expr);
                            }
                            return ContextKeyRegexExpr.create(key, regex);
                        }
                        default:
                            throw this._errExpectedButGot('REGEX', this._peek());
                    }
                }
                if (this._matchOne(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Not)) {
                    this._consume(_scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.In, errorNoInAfterNot);
                    const right = this._value();
                    return ContextKeyExpr.notIn(key, right);
                }
                const maybeOp = this._peek().type;
                switch (maybeOp) {
                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Eq: {
                        this._advance();
                        const right = this._value();
                        if (this._previous().type === _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.QuotedStr) {
                            return (
                                 (ContextKeyExpr.equals(key, right))
                            );
                        }
                        switch (right) {
                            case 'true':
                                return (
                                     (ContextKeyExpr.has(key))
                                );
                            case 'false':
                                return ContextKeyExpr.not(key);
                            default:
                                return (
                                     (ContextKeyExpr.equals(key, right))
                                );
                        }
                    }
                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.NotEq: {
                        this._advance();
                        const right = this._value();
                        if (this._previous().type === _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.QuotedStr) {
                            return (
                                 (ContextKeyExpr.notEquals(key, right))
                            );
                        }
                        switch (right) {
                            case 'true':
                                return ContextKeyExpr.not(key);
                            case 'false':
                                return (
                                     (ContextKeyExpr.has(key))
                                );
                            default:
                                return (
                                     (ContextKeyExpr.notEquals(key, right))
                                );
                        }
                    }
                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Lt:
                        this._advance();
                        return ContextKeySmallerExpr.create(key, this._value());
                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.LtEq:
                        this._advance();
                        return ContextKeySmallerEqualsExpr.create(key, this._value());
                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Gt:
                        this._advance();
                        return ContextKeyGreaterExpr.create(key, this._value());
                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.GtEq:
                        this._advance();
                        return ContextKeyGreaterEqualsExpr.create(key, this._value());
                    case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.In:
                        this._advance();
                        return ContextKeyExpr.in(key, this._value());
                    default:
                        return (
                             (ContextKeyExpr.has(key))
                        );
                }
            }
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.EOF:
                this._parsingErrors.push({ message: errorUnexpectedEOF, offset: peek.offset, lexeme: '', additionalInfo: hintUnexpectedEOF });
                throw Parser._parseError;
            default:
                throw this._errExpectedButGot(`true | false | KEY \n\t| KEY '=~' REGEX \n\t| KEY ('==' | '!=' | '<' | '<=' | '>' | '>=' | 'in' | 'not' 'in') value`, this._peek());
        }
    }
    _value() {
        const token = this._peek();
        switch (token.type) {
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.Str:
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.QuotedStr:
                this._advance();
                return token.lexeme;
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.True:
                this._advance();
                return 'true';
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.False:
                this._advance();
                return 'false';
            case _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.In:
                this._advance();
                return 'in';
            default:
                return '';
        }
    }
    _removeFlagsGY(flags) {
        return flags.replaceAll(this._flagsGYRe, '');
    }
    _previous() {
        return this._tokens[this._current - 1];
    }
    _matchOne(token) {
        if (this._check(token)) {
            this._advance();
            return true;
        }
        return false;
    }
    _advance() {
        if (!this._isAtEnd()) {
            this._current++;
        }
        return this._previous();
    }
    _consume(type, message) {
        if (this._check(type)) {
            return this._advance();
        }
        throw this._errExpectedButGot(message, this._peek());
    }
    _errExpectedButGot(expected, got, additionalInfo) {
        const message = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(
            _moduleId,
            8,
            "Expected: {0}\nReceived: '{1}'.",
            expected,
            _scanner_js__WEBPACK_IMPORTED_MODULE_3__.Scanner.getLexeme(got)
        ));
        const offset = got.offset;
        const lexeme = _scanner_js__WEBPACK_IMPORTED_MODULE_3__.Scanner.getLexeme(got);
        this._parsingErrors.push({ message, offset, lexeme, additionalInfo });
        return Parser._parseError;
    }
    _check(type) {
        return this._peek().type === type;
    }
    _peek() {
        return this._tokens[this._current];
    }
    _isAtEnd() {
        return this._peek().type === _scanner_js__WEBPACK_IMPORTED_MODULE_3__.TokenType.EOF;
    }
}
class ContextKeyExpr {
    static false() {
        return ContextKeyFalseExpr.INSTANCE;
    }
    static true() {
        return ContextKeyTrueExpr.INSTANCE;
    }
    static has(key) {
        return (
             (ContextKeyDefinedExpr.create(key))
        );
    }
    static equals(key, value) {
        return ContextKeyEqualsExpr.create(key, value);
    }
    static notEquals(key, value) {
        return ContextKeyNotEqualsExpr.create(key, value);
    }
    static regex(key, value) {
        return ContextKeyRegexExpr.create(key, value);
    }
    static in(key, value) {
        return ContextKeyInExpr.create(key, value);
    }
    static notIn(key, value) {
        return ContextKeyNotInExpr.create(key, value);
    }
    static not(key) {
        return (
             (ContextKeyNotExpr.create(key))
        );
    }
    static and(...expr) {
        return ContextKeyAndExpr.create(expr, null, true);
    }
    static or(...expr) {
        return ContextKeyOrExpr.create(expr, null, true);
    }
    static greater(key, value) {
        return ContextKeyGreaterExpr.create(key, value);
    }
    static greaterEquals(key, value) {
        return ContextKeyGreaterEqualsExpr.create(key, value);
    }
    static smaller(key, value) {
        return ContextKeySmallerExpr.create(key, value);
    }
    static smallerEquals(key, value) {
        return ContextKeySmallerEqualsExpr.create(key, value);
    }
    static { this._parser = ( (new Parser({ regexParsingWithErrorRecovery: false }))); }
    static deserialize(serialized) {
        if (serialized === undefined || serialized === null) {
            return undefined;
        }
        const expr = this._parser.parse(serialized);
        return expr;
    }
}
function validateWhenClauses(whenClauses) {
    const parser = ( (new Parser({ regexParsingWithErrorRecovery: false })));
    return (
         (whenClauses.map(whenClause => {
            parser.parse(whenClause);
            if (parser.lexingErrors.length > 0) {
                return (
                     (parser.lexingErrors.map((se) => ({
                        errorMessage: se.additionalInfo ?
                            ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 9, "Unexpected token. Hint: {0}", se.additionalInfo)) :
                            ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 10, "Unexpected token.")),
                        offset: se.offset,
                        length: se.lexeme.length,
                    })))
                );
            }
            else if (parser.parsingErrors.length > 0) {
                return (
                     (parser.parsingErrors.map((pe) => ({
                        errorMessage: pe.additionalInfo ? `${pe.message}. ${pe.additionalInfo}` : pe.message,
                        offset: pe.offset,
                        length: pe.lexeme.length,
                    })))
                );
            }
            else {
                return [];
            }
        }))
    );
}
function expressionsAreEqualWithConstantSubstitution(a, b) {
    const aExpr = a ? a.substituteConstants() : undefined;
    const bExpr = b ? b.substituteConstants() : undefined;
    if (!aExpr && !bExpr) {
        return true;
    }
    if (!aExpr || !bExpr) {
        return false;
    }
    return aExpr.equals(bExpr);
}
function cmp(a, b) {
    return a.cmp(b);
}
class ContextKeyFalseExpr {
    static { this.INSTANCE = ( (new ContextKeyFalseExpr())); }
    constructor() {
        this.type = ContextKeyExprType.False;
    }
    cmp(other) {
        return this.type - other.type;
    }
    equals(other) {
        return (other.type === this.type);
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        return false;
    }
    serialize() {
        return 'false';
    }
    keys() {
        return [];
    }
    map(mapFnc) {
        return this;
    }
    negate() {
        return ContextKeyTrueExpr.INSTANCE;
    }
}
class ContextKeyTrueExpr {
    static { this.INSTANCE = ( (new ContextKeyTrueExpr())); }
    constructor() {
        this.type = ContextKeyExprType.True;
    }
    cmp(other) {
        return this.type - other.type;
    }
    equals(other) {
        return (other.type === this.type);
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        return true;
    }
    serialize() {
        return 'true';
    }
    keys() {
        return [];
    }
    map(mapFnc) {
        return this;
    }
    negate() {
        return ContextKeyFalseExpr.INSTANCE;
    }
}
class ContextKeyDefinedExpr {
    static create(key, negated = null) {
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;
        }
        return (
             (new ContextKeyDefinedExpr(key, negated))
        );
    }
    constructor(key, negated) {
        this.key = key;
        this.negated = negated;
        this.type = ContextKeyExprType.Defined;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp1(this.key, other.key);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            return constantValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE;
        }
        return this;
    }
    evaluate(context) {
        return (!!context.getValue(this.key));
    }
    serialize() {
        return this.key;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapDefined(this.key);
    }
    negate() {
        if (!this.negated) {
            this.negated = ( (ContextKeyNotExpr.create(this.key, this)));
        }
        return this.negated;
    }
}
class ContextKeyEqualsExpr {
    static create(key, value, negated = null) {
        if (typeof value === 'boolean') {
            return (value ?  (ContextKeyDefinedExpr.create(key, negated)) :  (ContextKeyNotExpr.create(key, negated)));
        }
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            const trueValue = constantValue ? 'true' : 'false';
            return (value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE);
        }
        return (
             (new ContextKeyEqualsExpr(key, value, negated))
        );
    }
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = ContextKeyExprType.Equals;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            const trueValue = constantValue ? 'true' : 'false';
            return (this.value === trueValue ? ContextKeyTrueExpr.INSTANCE : ContextKeyFalseExpr.INSTANCE);
        }
        return this;
    }
    evaluate(context) {
        return (context.getValue(this.key) == this.value);
    }
    serialize() {
        return `${this.key} == '${this.value}'`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyNotEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
class ContextKeyInExpr {
    static create(key, valueKey) {
        return (
             (new ContextKeyInExpr(key, valueKey))
        );
    }
    constructor(key, valueKey) {
        this.key = key;
        this.valueKey = valueKey;
        this.type = ContextKeyExprType.In;
        this.negated = null;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.valueKey, other.key, other.valueKey);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.valueKey === other.valueKey);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        const source = context.getValue(this.valueKey);
        const item = context.getValue(this.key);
        if (Array.isArray(source)) {
            return source.includes(item);
        }
        if (typeof item === 'string' && typeof source === 'object' && source !== null) {
            return hasOwnProperty.call(source, item);
        }
        return false;
    }
    serialize() {
        return `${this.key} in '${this.valueKey}'`;
    }
    keys() {
        return [this.key, this.valueKey];
    }
    map(mapFnc) {
        return mapFnc.mapIn(this.key, this.valueKey);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyNotInExpr.create(this.key, this.valueKey);
        }
        return this.negated;
    }
}
class ContextKeyNotInExpr {
    static create(key, valueKey) {
        return (
             (new ContextKeyNotInExpr(key, valueKey))
        );
    }
    constructor(key, valueKey) {
        this.key = key;
        this.valueKey = valueKey;
        this.type = ContextKeyExprType.NotIn;
        this._negated = ContextKeyInExpr.create(key, valueKey);
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return this._negated.cmp(other._negated);
    }
    equals(other) {
        if (other.type === this.type) {
            return this._negated.equals(other._negated);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        return !this._negated.evaluate(context);
    }
    serialize() {
        return `${this.key} not in '${this.valueKey}'`;
    }
    keys() {
        return (
             (this._negated.keys())
        );
    }
    map(mapFnc) {
        return mapFnc.mapNotIn(this.key, this.valueKey);
    }
    negate() {
        return this._negated;
    }
}
class ContextKeyNotEqualsExpr {
    static create(key, value, negated = null) {
        if (typeof value === 'boolean') {
            if (value) {
                return (
                     (ContextKeyNotExpr.create(key, negated))
                );
            }
            return (
                 (ContextKeyDefinedExpr.create(key, negated))
            );
        }
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            const falseValue = constantValue ? 'true' : 'false';
            return (value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return (
             (new ContextKeyNotEqualsExpr(key, value, negated))
        );
    }
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = ContextKeyExprType.NotEquals;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            const falseValue = constantValue ? 'true' : 'false';
            return (this.value === falseValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return this;
    }
    evaluate(context) {
        return (context.getValue(this.key) != this.value);
    }
    serialize() {
        return `${this.key} != '${this.value}'`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapNotEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
class ContextKeyNotExpr {
    static create(key, negated = null) {
        const constantValue = CONSTANT_VALUES.get(key);
        if (typeof constantValue === 'boolean') {
            return (constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return (
             (new ContextKeyNotExpr(key, negated))
        );
    }
    constructor(key, negated) {
        this.key = key;
        this.negated = negated;
        this.type = ContextKeyExprType.Not;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp1(this.key, other.key);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key);
        }
        return false;
    }
    substituteConstants() {
        const constantValue = CONSTANT_VALUES.get(this.key);
        if (typeof constantValue === 'boolean') {
            return (constantValue ? ContextKeyFalseExpr.INSTANCE : ContextKeyTrueExpr.INSTANCE);
        }
        return this;
    }
    evaluate(context) {
        return (!context.getValue(this.key));
    }
    serialize() {
        return `!${this.key}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapNot(this.key);
    }
    negate() {
        if (!this.negated) {
            this.negated = ( (ContextKeyDefinedExpr.create(this.key, this)));
        }
        return this.negated;
    }
}
function withFloatOrStr(value, callback) {
    if (typeof value === 'string') {
        const n = parseFloat(value);
        if (!isNaN(n)) {
            value = n;
        }
    }
    if (typeof value === 'string' || typeof value === 'number') {
        return callback(value);
    }
    return ContextKeyFalseExpr.INSTANCE;
}
class ContextKeyGreaterExpr {
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => ( (new ContextKeyGreaterExpr(key, value, negated))));
    }
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = ContextKeyExprType.Greater;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) > this.value);
    }
    serialize() {
        return `${this.key} > ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapGreater(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeySmallerEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
class ContextKeyGreaterEqualsExpr {
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => ( (new ContextKeyGreaterEqualsExpr(key, value, negated))));
    }
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = ContextKeyExprType.GreaterEquals;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) >= this.value);
    }
    serialize() {
        return `${this.key} >= ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapGreaterEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeySmallerExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
class ContextKeySmallerExpr {
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => ( (new ContextKeySmallerExpr(key, value, negated))));
    }
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = ContextKeyExprType.Smaller;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) < this.value);
    }
    serialize() {
        return `${this.key} < ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapSmaller(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyGreaterEqualsExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
class ContextKeySmallerEqualsExpr {
    static create(key, _value, negated = null) {
        return withFloatOrStr(_value, (value) => ( (new ContextKeySmallerEqualsExpr(key, value, negated))));
    }
    constructor(key, value, negated) {
        this.key = key;
        this.value = value;
        this.negated = negated;
        this.type = ContextKeyExprType.SmallerEquals;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return cmp2(this.key, this.value, other.key, other.value);
    }
    equals(other) {
        if (other.type === this.type) {
            return (this.key === other.key && this.value === other.value);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        if (typeof this.value === 'string') {
            return false;
        }
        return (parseFloat(context.getValue(this.key)) <= this.value);
    }
    serialize() {
        return `${this.key} <= ${this.value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapSmallerEquals(this.key, this.value);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyGreaterExpr.create(this.key, this.value, this);
        }
        return this.negated;
    }
}
class ContextKeyRegexExpr {
    static create(key, regexp) {
        return (
             (new ContextKeyRegexExpr(key, regexp))
        );
    }
    constructor(key, regexp) {
        this.key = key;
        this.regexp = regexp;
        this.type = ContextKeyExprType.Regex;
        this.negated = null;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        if (this.key < other.key) {
            return -1;
        }
        if (this.key > other.key) {
            return 1;
        }
        const thisSource = this.regexp ? this.regexp.source : '';
        const otherSource = other.regexp ? other.regexp.source : '';
        if (thisSource < otherSource) {
            return -1;
        }
        if (thisSource > otherSource) {
            return 1;
        }
        return 0;
    }
    equals(other) {
        if (other.type === this.type) {
            const thisSource = this.regexp ? this.regexp.source : '';
            const otherSource = other.regexp ? other.regexp.source : '';
            return (this.key === other.key && thisSource === otherSource);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        const value = context.getValue(this.key);
        return this.regexp ? this.regexp.test(value) : false;
    }
    serialize() {
        const value = this.regexp
            ? `/${this.regexp.source}/${this.regexp.flags}`
            : '/invalid/';
        return `${this.key} =~ ${value}`;
    }
    keys() {
        return [this.key];
    }
    map(mapFnc) {
        return mapFnc.mapRegex(this.key, this.regexp);
    }
    negate() {
        if (!this.negated) {
            this.negated = ContextKeyNotRegexExpr.create(this);
        }
        return this.negated;
    }
}
class ContextKeyNotRegexExpr {
    static create(actual) {
        return (
             (new ContextKeyNotRegexExpr(actual))
        );
    }
    constructor(_actual) {
        this._actual = _actual;
        this.type = ContextKeyExprType.NotRegex;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        return this._actual.cmp(other._actual);
    }
    equals(other) {
        if (other.type === this.type) {
            return this._actual.equals(other._actual);
        }
        return false;
    }
    substituteConstants() {
        return this;
    }
    evaluate(context) {
        return !this._actual.evaluate(context);
    }
    serialize() {
        return `!(${this._actual.serialize()})`;
    }
    keys() {
        return (
             (this._actual.keys())
        );
    }
    map(mapFnc) {
        return (
             (new ContextKeyNotRegexExpr( (this._actual.map(mapFnc))))
        );
    }
    negate() {
        return this._actual;
    }
}
function eliminateConstantsInArray(arr) {
    let newArr = null;
    for (let i = 0, len = arr.length; i < len; i++) {
        const newExpr = arr[i].substituteConstants();
        if (arr[i] !== newExpr) {
            if (newArr === null) {
                newArr = [];
                for (let j = 0; j < i; j++) {
                    newArr[j] = arr[j];
                }
            }
        }
        if (newArr !== null) {
            newArr[i] = newExpr;
        }
    }
    if (newArr === null) {
        return arr;
    }
    return newArr;
}
class ContextKeyAndExpr {
    static create(_expr, negated, extraRedundantCheck) {
        return ContextKeyAndExpr._normalizeArr(_expr, negated, extraRedundantCheck);
    }
    constructor(expr, negated) {
        this.expr = expr;
        this.negated = negated;
        this.type = ContextKeyExprType.And;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        if (this.expr.length < other.expr.length) {
            return -1;
        }
        if (this.expr.length > other.expr.length) {
            return 1;
        }
        for (let i = 0, len = this.expr.length; i < len; i++) {
            const r = cmp(this.expr[i], other.expr[i]);
            if (r !== 0) {
                return r;
            }
        }
        return 0;
    }
    equals(other) {
        if (other.type === this.type) {
            if (this.expr.length !== other.expr.length) {
                return false;
            }
            for (let i = 0, len = this.expr.length; i < len; i++) {
                if (!this.expr[i].equals(other.expr[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    substituteConstants() {
        const exprArr = eliminateConstantsInArray(this.expr);
        if (exprArr === this.expr) {
            return this;
        }
        return ContextKeyAndExpr.create(exprArr, this.negated, false);
    }
    evaluate(context) {
        for (let i = 0, len = this.expr.length; i < len; i++) {
            if (!this.expr[i].evaluate(context)) {
                return false;
            }
        }
        return true;
    }
    static _normalizeArr(arr, negated, extraRedundantCheck) {
        const expr = [];
        let hasTrue = false;
        for (const e of arr) {
            if (!e) {
                continue;
            }
            if (e.type === ContextKeyExprType.True) {
                hasTrue = true;
                continue;
            }
            if (e.type === ContextKeyExprType.False) {
                return ContextKeyFalseExpr.INSTANCE;
            }
            if (e.type === ContextKeyExprType.And) {
                expr.push(...e.expr);
                continue;
            }
            expr.push(e);
        }
        if (expr.length === 0 && hasTrue) {
            return ContextKeyTrueExpr.INSTANCE;
        }
        if (expr.length === 0) {
            return undefined;
        }
        if (expr.length === 1) {
            return expr[0];
        }
        expr.sort(cmp);
        for (let i = 1; i < expr.length; i++) {
            if (expr[i - 1].equals(expr[i])) {
                expr.splice(i, 1);
                i--;
            }
        }
        if (expr.length === 1) {
            return expr[0];
        }
        while (expr.length > 1) {
            const lastElement = expr[expr.length - 1];
            if (lastElement.type !== ContextKeyExprType.Or) {
                break;
            }
            expr.pop();
            const secondToLastElement = expr.pop();
            const isFinished = (expr.length === 0);
            const resultElement = ContextKeyOrExpr.create(( (lastElement.expr.map(
                el => ContextKeyAndExpr.create([el, secondToLastElement], null, extraRedundantCheck)
            ))), null, isFinished);
            if (resultElement) {
                expr.push(resultElement);
                expr.sort(cmp);
            }
        }
        if (expr.length === 1) {
            return expr[0];
        }
        if (extraRedundantCheck) {
            for (let i = 0; i < expr.length; i++) {
                for (let j = i + 1; j < expr.length; j++) {
                    if (( (expr[i].negate())).equals(expr[j])) {
                        return ContextKeyFalseExpr.INSTANCE;
                    }
                }
            }
            if (expr.length === 1) {
                return expr[0];
            }
        }
        return (
             (new ContextKeyAndExpr(expr, negated))
        );
    }
    serialize() {
        return ( (this.expr.map(e => e.serialize()))).join(' && ');
    }
    keys() {
        const result = [];
        for (const expr of this.expr) {
            result.push(...( (expr.keys())));
        }
        return result;
    }
    map(mapFnc) {
        return (
             (new ContextKeyAndExpr(
                 (this.expr.map(expr => ( (expr.map(mapFnc))))),
                null
            ))
        );
    }
    negate() {
        if (!this.negated) {
            const result = [];
            for (const expr of this.expr) {
                result.push(( (expr.negate())));
            }
            this.negated = ContextKeyOrExpr.create(result, this, true);
        }
        return this.negated;
    }
}
class ContextKeyOrExpr {
    static create(_expr, negated, extraRedundantCheck) {
        return ContextKeyOrExpr._normalizeArr(_expr, negated, extraRedundantCheck);
    }
    constructor(expr, negated) {
        this.expr = expr;
        this.negated = negated;
        this.type = ContextKeyExprType.Or;
    }
    cmp(other) {
        if (other.type !== this.type) {
            return this.type - other.type;
        }
        if (this.expr.length < other.expr.length) {
            return -1;
        }
        if (this.expr.length > other.expr.length) {
            return 1;
        }
        for (let i = 0, len = this.expr.length; i < len; i++) {
            const r = cmp(this.expr[i], other.expr[i]);
            if (r !== 0) {
                return r;
            }
        }
        return 0;
    }
    equals(other) {
        if (other.type === this.type) {
            if (this.expr.length !== other.expr.length) {
                return false;
            }
            for (let i = 0, len = this.expr.length; i < len; i++) {
                if (!this.expr[i].equals(other.expr[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
    substituteConstants() {
        const exprArr = eliminateConstantsInArray(this.expr);
        if (exprArr === this.expr) {
            return this;
        }
        return ContextKeyOrExpr.create(exprArr, this.negated, false);
    }
    evaluate(context) {
        for (let i = 0, len = this.expr.length; i < len; i++) {
            if (this.expr[i].evaluate(context)) {
                return true;
            }
        }
        return false;
    }
    static _normalizeArr(arr, negated, extraRedundantCheck) {
        let expr = [];
        let hasFalse = false;
        if (arr) {
            for (let i = 0, len = arr.length; i < len; i++) {
                const e = arr[i];
                if (!e) {
                    continue;
                }
                if (e.type === ContextKeyExprType.False) {
                    hasFalse = true;
                    continue;
                }
                if (e.type === ContextKeyExprType.True) {
                    return ContextKeyTrueExpr.INSTANCE;
                }
                if (e.type === ContextKeyExprType.Or) {
                    expr = expr.concat(e.expr);
                    continue;
                }
                expr.push(e);
            }
            if (expr.length === 0 && hasFalse) {
                return ContextKeyFalseExpr.INSTANCE;
            }
            expr.sort(cmp);
        }
        if (expr.length === 0) {
            return undefined;
        }
        if (expr.length === 1) {
            return expr[0];
        }
        for (let i = 1; i < expr.length; i++) {
            if (expr[i - 1].equals(expr[i])) {
                expr.splice(i, 1);
                i--;
            }
        }
        if (expr.length === 1) {
            return expr[0];
        }
        if (extraRedundantCheck) {
            for (let i = 0; i < expr.length; i++) {
                for (let j = i + 1; j < expr.length; j++) {
                    if (( (expr[i].negate())).equals(expr[j])) {
                        return ContextKeyTrueExpr.INSTANCE;
                    }
                }
            }
            if (expr.length === 1) {
                return expr[0];
            }
        }
        return (
             (new ContextKeyOrExpr(expr, negated))
        );
    }
    serialize() {
        return ( (this.expr.map(e => e.serialize()))).join(' || ');
    }
    keys() {
        const result = [];
        for (const expr of this.expr) {
            result.push(...( (expr.keys())));
        }
        return result;
    }
    map(mapFnc) {
        return (
             (new ContextKeyOrExpr(
                 (this.expr.map(expr => ( (expr.map(mapFnc))))),
                null
            ))
        );
    }
    negate() {
        if (!this.negated) {
            const result = [];
            for (const expr of this.expr) {
                result.push(( (expr.negate())));
            }
            while (result.length > 1) {
                const LEFT = result.shift();
                const RIGHT = result.shift();
                const all = [];
                for (const left of getTerminals(LEFT)) {
                    for (const right of getTerminals(RIGHT)) {
                        all.push(ContextKeyAndExpr.create([left, right], null, false));
                    }
                }
                result.unshift(ContextKeyOrExpr.create(all, null, false));
            }
            this.negated = ContextKeyOrExpr.create(result, this, true);
        }
        return this.negated;
    }
}
class RawContextKey extends ContextKeyDefinedExpr {
    static { this._info = []; }
    static all() {
        return (
             (RawContextKey._info.values())
        );
    }
    constructor(key, defaultValue, metaOrHide) {
        super(key, null);
        this._defaultValue = defaultValue;
        if (typeof metaOrHide === 'object') {
            RawContextKey._info.push({ ...metaOrHide, key });
        }
        else if (metaOrHide !== true) {
            RawContextKey._info.push({ key, description: metaOrHide, type: defaultValue !== null && defaultValue !== undefined ? typeof defaultValue : undefined });
        }
    }
    bindTo(target) {
        return target.createKey(this.key, this._defaultValue);
    }
    getValue(target) {
        return target.getContextKeyValue(this.key);
    }
    toNegated() {
        return (
             (this.negate())
        );
    }
    isEqualTo(value) {
        return ContextKeyEqualsExpr.create(this.key, value);
    }
    notEqualsTo(value) {
        return ContextKeyNotEqualsExpr.create(this.key, value);
    }
}
function cmp1(key1, key2) {
    if (key1 < key2) {
        return -1;
    }
    if (key1 > key2) {
        return 1;
    }
    return 0;
}
function cmp2(key1, value1, key2, value2) {
    if (key1 < key2) {
        return -1;
    }
    if (key1 > key2) {
        return 1;
    }
    if (value1 < value2) {
        return -1;
    }
    if (value1 > value2) {
        return 1;
    }
    return 0;
}
function implies(p, q) {
    if (p.type === ContextKeyExprType.False || q.type === ContextKeyExprType.True) {
        return true;
    }
    if (p.type === ContextKeyExprType.Or) {
        if (q.type === ContextKeyExprType.Or) {
            return allElementsIncluded(p.expr, q.expr);
        }
        return false;
    }
    if (q.type === ContextKeyExprType.Or) {
        for (const element of q.expr) {
            if (implies(p, element)) {
                return true;
            }
        }
        return false;
    }
    if (p.type === ContextKeyExprType.And) {
        if (q.type === ContextKeyExprType.And) {
            return allElementsIncluded(q.expr, p.expr);
        }
        for (const element of p.expr) {
            if (implies(element, q)) {
                return true;
            }
        }
        return false;
    }
    return p.equals(q);
}
function allElementsIncluded(p, q) {
    let pIndex = 0;
    let qIndex = 0;
    while (pIndex < p.length && qIndex < q.length) {
        const cmp = p[pIndex].cmp(q[qIndex]);
        if (cmp < 0) {
            return false;
        }
        else if (cmp === 0) {
            pIndex++;
            qIndex++;
        }
        else {
            qIndex++;
        }
    }
    return (pIndex === p.length);
}
function getTerminals(node) {
    if (node.type === ContextKeyExprType.Or) {
        return node.expr;
    }
    return [node];
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.service.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.service.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IContextKeyService: () => (/* binding */ IContextKeyService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IContextKeyService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('contextKeyService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/scanner.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/contextkey/common/scanner.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Scanner: () => (/* binding */ Scanner),
/* harmony export */   TokenType: () => (/* binding */ TokenType)
/* harmony export */ });
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");



const _moduleId = "vs/platform/contextkey/common/scanner";
var TokenType;
( ((function(TokenType) {
    TokenType[TokenType["LParen"] = 0] = "LParen";
    TokenType[TokenType["RParen"] = 1] = "RParen";
    TokenType[TokenType["Neg"] = 2] = "Neg";
    TokenType[TokenType["Eq"] = 3] = "Eq";
    TokenType[TokenType["NotEq"] = 4] = "NotEq";
    TokenType[TokenType["Lt"] = 5] = "Lt";
    TokenType[TokenType["LtEq"] = 6] = "LtEq";
    TokenType[TokenType["Gt"] = 7] = "Gt";
    TokenType[TokenType["GtEq"] = 8] = "GtEq";
    TokenType[TokenType["RegexOp"] = 9] = "RegexOp";
    TokenType[TokenType["RegexStr"] = 10] = "RegexStr";
    TokenType[TokenType["True"] = 11] = "True";
    TokenType[TokenType["False"] = 12] = "False";
    TokenType[TokenType["In"] = 13] = "In";
    TokenType[TokenType["Not"] = 14] = "Not";
    TokenType[TokenType["And"] = 15] = "And";
    TokenType[TokenType["Or"] = 16] = "Or";
    TokenType[TokenType["Str"] = 17] = "Str";
    TokenType[TokenType["QuotedStr"] = 18] = "QuotedStr";
    TokenType[TokenType["Error"] = 19] = "Error";
    TokenType[TokenType["EOF"] = 20] = "EOF";
})(TokenType || (TokenType = {}))));
function hintDidYouMean(...meant) {
    switch (meant.length) {
        case 1:
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 0, "Did you mean {0}?", meant[0]));
        case 2:
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 1, "Did you mean {0} or {1}?", meant[0], meant[1]));
        case 3:
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                2,
                "Did you mean {0}, {1} or {2}?",
                meant[0],
                meant[1],
                meant[2]
            ));
        default:
            return undefined;
    }
}
const hintDidYouForgetToOpenOrCloseQuote = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 3, "Did you forget to open or close the quote?"));
const hintDidYouForgetToEscapeSlash = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
    _moduleId,
    4,
    "Did you forget to escape the '/' (slash) character? Put two backslashes before it to escape, e.g., '\\\\/\'."
));
class Scanner {
    constructor() {
        this._input = '';
        this._start = 0;
        this._current = 0;
        this._tokens = [];
        this._errors = [];
        this.stringRe = /[a-zA-Z0-9_<>\-\./\\:\*\?\+\[\]\^,#@;"%\$\p{L}-]+/uy;
    }
    static getLexeme(token) {
        switch (token.type) {
            case TokenType.LParen:
                return '(';
            case TokenType.RParen:
                return ')';
            case TokenType.Neg:
                return '!';
            case TokenType.Eq:
                return token.isTripleEq ? '===' : '==';
            case TokenType.NotEq:
                return token.isTripleEq ? '!==' : '!=';
            case TokenType.Lt:
                return '<';
            case TokenType.LtEq:
                return '<=';
            case TokenType.Gt:
                return '>=';
            case TokenType.GtEq:
                return '>=';
            case TokenType.RegexOp:
                return '=~';
            case TokenType.RegexStr:
                return token.lexeme;
            case TokenType.True:
                return 'true';
            case TokenType.False:
                return 'false';
            case TokenType.In:
                return 'in';
            case TokenType.Not:
                return 'not';
            case TokenType.And:
                return '&&';
            case TokenType.Or:
                return '||';
            case TokenType.Str:
                return token.lexeme;
            case TokenType.QuotedStr:
                return token.lexeme;
            case TokenType.Error:
                return token.lexeme;
            case TokenType.EOF:
                return 'EOF';
            default:
                throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.illegalState)(`unhandled token type: ${JSON.stringify(token)}; have you forgotten to add a case?`);
        }
    }
    static { this._regexFlags = ( (new Set( (['i', 'g', 's', 'm', 'y', 'u'].map(ch => ch.charCodeAt(0)))))); }
    static { this._keywords = ( (new Map([
        ['not', TokenType.Not],
        ['in', TokenType.In],
        ['false', TokenType.False],
        ['true', TokenType.True],
    ]))); }
    get errors() {
        return this._errors;
    }
    reset(value) {
        this._input = value;
        this._start = 0;
        this._current = 0;
        this._tokens = [];
        this._errors = [];
        return this;
    }
    scan() {
        while (!this._isAtEnd()) {
            this._start = this._current;
            const ch = this._advance();
            switch (ch) {
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.OpenParen:
                    this._addToken(TokenType.LParen);
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CloseParen:
                    this._addToken(TokenType.RParen);
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.ExclamationMark:
                    if (this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Equals)) {
                        const isTripleEq = this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Equals);
                        this._tokens.push({ type: TokenType.NotEq, offset: this._start, isTripleEq });
                    }
                    else {
                        this._addToken(TokenType.Neg);
                    }
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.SingleQuote:
                    this._quotedString();
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Slash:
                    this._regex();
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Equals:
                    if (this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Equals)) {
                        const isTripleEq = this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Equals);
                        this._tokens.push({ type: TokenType.Eq, offset: this._start, isTripleEq });
                    }
                    else if (this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Tilde)) {
                        this._addToken(TokenType.RegexOp);
                    }
                    else {
                        this._error(hintDidYouMean('==', '=~'));
                    }
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LessThan:
                    this._addToken(this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Equals) ? TokenType.LtEq : TokenType.Lt);
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.GreaterThan:
                    this._addToken(this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Equals) ? TokenType.GtEq : TokenType.Gt);
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Ampersand:
                    if (this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Ampersand)) {
                        this._addToken(TokenType.And);
                    }
                    else {
                        this._error(hintDidYouMean('&&'));
                    }
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Pipe:
                    if (this._match(_base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Pipe)) {
                        this._addToken(TokenType.Or);
                    }
                    else {
                        this._error(hintDidYouMean('||'));
                    }
                    break;
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Space:
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CarriageReturn:
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Tab:
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.LineFeed:
                case _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.NoBreakSpace:
                    break;
                default:
                    this._string();
            }
        }
        this._start = this._current;
        this._addToken(TokenType.EOF);
        return Array.from(this._tokens);
    }
    _match(expected) {
        if (this._isAtEnd()) {
            return false;
        }
        if (this._input.charCodeAt(this._current) !== expected) {
            return false;
        }
        this._current++;
        return true;
    }
    _advance() {
        return this._input.charCodeAt(this._current++);
    }
    _peek() {
        return this._isAtEnd() ? _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Null : this._input.charCodeAt(this._current);
    }
    _addToken(type) {
        this._tokens.push({ type, offset: this._start });
    }
    _error(additional) {
        const offset = this._start;
        const lexeme = this._input.substring(this._start, this._current);
        const errToken = { type: TokenType.Error, offset: this._start, lexeme };
        this._errors.push({ offset, lexeme, additionalInfo: additional });
        this._tokens.push(errToken);
    }
    _string() {
        this.stringRe.lastIndex = this._start;
        const match = this.stringRe.exec(this._input);
        if (match) {
            this._current = this._start + match[0].length;
            const lexeme = this._input.substring(this._start, this._current);
            const keyword = Scanner._keywords.get(lexeme);
            if (keyword) {
                this._addToken(keyword);
            }
            else {
                this._tokens.push({ type: TokenType.Str, lexeme, offset: this._start });
            }
        }
    }
    _quotedString() {
        while (this._peek() !== _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.SingleQuote && !this._isAtEnd()) {
            this._advance();
        }
        if (this._isAtEnd()) {
            this._error(hintDidYouForgetToOpenOrCloseQuote);
            return;
        }
        this._advance();
        this._tokens.push({ type: TokenType.QuotedStr, lexeme: this._input.substring(this._start + 1, this._current - 1), offset: this._start + 1 });
    }
    _regex() {
        let p = this._current;
        let inEscape = false;
        let inCharacterClass = false;
        while (true) {
            if (p >= this._input.length) {
                this._current = p;
                this._error(hintDidYouForgetToEscapeSlash);
                return;
            }
            const ch = this._input.charCodeAt(p);
            if (inEscape) {
                inEscape = false;
            }
            else if (ch === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Slash && !inCharacterClass) {
                p++;
                break;
            }
            else if (ch === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.OpenSquareBracket) {
                inCharacterClass = true;
            }
            else if (ch === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Backslash) {
                inEscape = true;
            }
            else if (ch === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.CloseSquareBracket) {
                inCharacterClass = false;
            }
            p++;
        }
        while (p < this._input.length && ( (Scanner._regexFlags.has(this._input.charCodeAt(p))))) {
            p++;
        }
        this._current = p;
        const lexeme = this._input.substring(this._start, this._current);
        this._tokens.push({ type: TokenType.RegexStr, lexeme, offset: this._start });
    }
    _isAtEnd() {
        return this._current >= this._input.length;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/environment/common/environment.service.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/environment/common/environment.service.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IEnvironmentService: () => (/* binding */ IEnvironmentService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IEnvironmentService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('environmentService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/extensionManagement.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/extensionManagement.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DISABLED_EXTENSIONS_STORAGE_PATH: () => (/* binding */ DISABLED_EXTENSIONS_STORAGE_PATH),
/* harmony export */   ENABLED_EXTENSIONS_STORAGE_PATH: () => (/* binding */ ENABLED_EXTENSIONS_STORAGE_PATH),
/* harmony export */   EXTENSION_IDENTIFIER_PATTERN: () => (/* binding */ EXTENSION_IDENTIFIER_PATTERN),
/* harmony export */   EXTENSION_IDENTIFIER_REGEX: () => (/* binding */ EXTENSION_IDENTIFIER_REGEX),
/* harmony export */   EXTENSION_INSTALL_DEP_PACK_CONTEXT: () => (/* binding */ EXTENSION_INSTALL_DEP_PACK_CONTEXT),
/* harmony export */   EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT: () => (/* binding */ EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT),
/* harmony export */   EXTENSION_INSTALL_SOURCE_CONTEXT: () => (/* binding */ EXTENSION_INSTALL_SOURCE_CONTEXT),
/* harmony export */   ExtensionGalleryError: () => (/* binding */ ExtensionGalleryError),
/* harmony export */   ExtensionGalleryErrorCode: () => (/* binding */ ExtensionGalleryErrorCode),
/* harmony export */   ExtensionInstallSource: () => (/* binding */ ExtensionInstallSource),
/* harmony export */   ExtensionManagementError: () => (/* binding */ ExtensionManagementError),
/* harmony export */   ExtensionManagementErrorCode: () => (/* binding */ ExtensionManagementErrorCode),
/* harmony export */   ExtensionsLocalizedLabel: () => (/* binding */ ExtensionsLocalizedLabel),
/* harmony export */   InstallOperation: () => (/* binding */ InstallOperation),
/* harmony export */   PreferencesLocalizedLabel: () => (/* binding */ PreferencesLocalizedLabel),
/* harmony export */   SortBy: () => (/* binding */ SortBy),
/* harmony export */   SortOrder: () => (/* binding */ SortOrder),
/* harmony export */   StatisticType: () => (/* binding */ StatisticType),
/* harmony export */   TargetPlatformToString: () => (/* binding */ TargetPlatformToString),
/* harmony export */   WEB_EXTENSION_TAG: () => (/* binding */ WEB_EXTENSION_TAG),
/* harmony export */   getTargetPlatform: () => (/* binding */ getTargetPlatform),
/* harmony export */   isIExtensionIdentifier: () => (/* binding */ isIExtensionIdentifier),
/* harmony export */   isNotWebExtensionInWebTargetPlatform: () => (/* binding */ isNotWebExtensionInWebTargetPlatform),
/* harmony export */   isTargetPlatformCompatible: () => (/* binding */ isTargetPlatformCompatible),
/* harmony export */   toTargetPlatform: () => (/* binding */ toTargetPlatform)
/* harmony export */ });
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");



const _moduleId = "vs/platform/extensionManagement/common/extensionManagement";
const EXTENSION_IDENTIFIER_PATTERN = '^([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$';
const EXTENSION_IDENTIFIER_REGEX = ( (new RegExp(EXTENSION_IDENTIFIER_PATTERN)));
const WEB_EXTENSION_TAG = '__web_extension';
const EXTENSION_INSTALL_SKIP_WALKTHROUGH_CONTEXT = 'skipWalkthrough';
const EXTENSION_INSTALL_SOURCE_CONTEXT = 'extensionInstallSource';
const EXTENSION_INSTALL_DEP_PACK_CONTEXT = 'dependecyOrPackExtensionInstall';
var ExtensionInstallSource;
( ((function(ExtensionInstallSource) {
    ExtensionInstallSource["COMMAND"] = "command";
    ExtensionInstallSource["SETTINGS_SYNC"] = "settingsSync";
})(ExtensionInstallSource || (ExtensionInstallSource = {}))));
function TargetPlatformToString(targetPlatform) {
    switch (targetPlatform) {
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_X64: return 'Windows 64 bit';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_ARM64: return 'Windows ARM';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_X64: return 'Linux 64 bit';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARM64: return 'Linux ARM 64';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARMHF: return 'Linux ARM';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_X64: return 'Alpine Linux 64 bit';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_ARM64: return 'Alpine ARM 64';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_X64: return 'Mac';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_ARM64: return 'Mac Silicon';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WEB: return 'Web';
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNIVERSAL: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNIVERSAL;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNDEFINED: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNDEFINED;
    }
}
function toTargetPlatform(targetPlatform) {
    switch (targetPlatform) {
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_X64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_X64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_ARM64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_ARM64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_X64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_X64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARM64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARM64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARMHF: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARMHF;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_X64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_X64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_ARM64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_ARM64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_X64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_X64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_ARM64: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_ARM64;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WEB: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WEB;
        case _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNIVERSAL: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNIVERSAL;
        default: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN;
    }
}
function getTargetPlatform(platform, arch) {
    switch (platform) {
        case _base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__.Platform.Windows:
            if (arch === 'x64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_X64;
            }
            if (arch === 'arm64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WIN32_ARM64;
            }
            return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN;
        case _base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__.Platform.Linux:
            if (arch === 'x64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_X64;
            }
            if (arch === 'arm64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARM64;
            }
            if (arch === 'arm') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.LINUX_ARMHF;
            }
            return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN;
        case 'alpine':
            if (arch === 'x64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_X64;
            }
            if (arch === 'arm64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.ALPINE_ARM64;
            }
            return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN;
        case _base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__.Platform.Mac:
            if (arch === 'x64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_X64;
            }
            if (arch === 'arm64') {
                return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.DARWIN_ARM64;
            }
            return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN;
        case _base_common_platform_js__WEBPACK_IMPORTED_MODULE_0__.Platform.Web: return _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WEB;
    }
}
function isNotWebExtensionInWebTargetPlatform(allTargetPlatforms, productTargetPlatform) {
    return productTargetPlatform === _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WEB && !allTargetPlatforms.includes(_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.WEB);
}
function isTargetPlatformCompatible(extensionTargetPlatform, allTargetPlatforms, productTargetPlatform) {
    if (isNotWebExtensionInWebTargetPlatform(allTargetPlatforms, productTargetPlatform)) {
        return false;
    }
    if (extensionTargetPlatform === _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNDEFINED) {
        return true;
    }
    if (extensionTargetPlatform === _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNIVERSAL) {
        return true;
    }
    if (extensionTargetPlatform === _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNKNOWN) {
        return false;
    }
    if (extensionTargetPlatform === productTargetPlatform) {
        return true;
    }
    return false;
}
function isIExtensionIdentifier(thing) {
    return thing
        && typeof thing === 'object'
        && typeof thing.id === 'string'
        && (!thing.uuid || typeof thing.uuid === 'string');
}
var SortBy;
( ((function(SortBy) {
    SortBy[SortBy["NoneOrRelevance"] = 0] = "NoneOrRelevance";
    SortBy[SortBy["LastUpdatedDate"] = 1] = "LastUpdatedDate";
    SortBy[SortBy["Title"] = 2] = "Title";
    SortBy[SortBy["PublisherName"] = 3] = "PublisherName";
    SortBy[SortBy["InstallCount"] = 4] = "InstallCount";
    SortBy[SortBy["PublishedDate"] = 10] = "PublishedDate";
    SortBy[SortBy["AverageRating"] = 6] = "AverageRating";
    SortBy[SortBy["WeightedRating"] = 12] = "WeightedRating";
})(SortBy || (SortBy = {}))));
var SortOrder;
( ((function(SortOrder) {
    SortOrder[SortOrder["Default"] = 0] = "Default";
    SortOrder[SortOrder["Ascending"] = 1] = "Ascending";
    SortOrder[SortOrder["Descending"] = 2] = "Descending";
})(SortOrder || (SortOrder = {}))));
var StatisticType;
( ((function(StatisticType) {
    StatisticType["Install"] = "install";
    StatisticType["Uninstall"] = "uninstall";
})(StatisticType || (StatisticType = {}))));
var InstallOperation;
( ((function(InstallOperation) {
    InstallOperation[InstallOperation["None"] = 1] = "None";
    InstallOperation[InstallOperation["Install"] = 2] = "Install";
    InstallOperation[InstallOperation["Update"] = 3] = "Update";
    InstallOperation[InstallOperation["Migrate"] = 4] = "Migrate";
})(InstallOperation || (InstallOperation = {}))));
var ExtensionGalleryErrorCode;
( ((function(ExtensionGalleryErrorCode) {
    ExtensionGalleryErrorCode["Timeout"] = "Timeout";
    ExtensionGalleryErrorCode["Cancelled"] = "Cancelled";
    ExtensionGalleryErrorCode["Failed"] = "Failed";
    ExtensionGalleryErrorCode["DownloadFailedWriting"] = "DownloadFailedWriting";
})(ExtensionGalleryErrorCode || (ExtensionGalleryErrorCode = {}))));
class ExtensionGalleryError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
        this.name = code;
    }
}
var ExtensionManagementErrorCode;
( ((function(ExtensionManagementErrorCode) {
    ExtensionManagementErrorCode["Unsupported"] = "Unsupported";
    ExtensionManagementErrorCode["Deprecated"] = "Deprecated";
    ExtensionManagementErrorCode["Malicious"] = "Malicious";
    ExtensionManagementErrorCode["Incompatible"] = "Incompatible";
    ExtensionManagementErrorCode["IncompatibleApi"] = "IncompatibleApi";
    ExtensionManagementErrorCode["IncompatibleTargetPlatform"] = "IncompatibleTargetPlatform";
    ExtensionManagementErrorCode["ReleaseVersionNotFound"] = "ReleaseVersionNotFound";
    ExtensionManagementErrorCode["Invalid"] = "Invalid";
    ExtensionManagementErrorCode["Download"] = "Download";
    ExtensionManagementErrorCode["DownloadSignature"] = "DownloadSignature";
    ExtensionManagementErrorCode["DownloadFailedWriting"] = "DownloadFailedWriting";
    ExtensionManagementErrorCode["UpdateExistingMetadata"] = "UpdateExistingMetadata";
    ExtensionManagementErrorCode["UpdateMetadata"] = "UpdateMetadata";
    ExtensionManagementErrorCode["Extract"] = "Extract";
    ExtensionManagementErrorCode["Scanning"] = "Scanning";
    ExtensionManagementErrorCode["ScanningExtension"] = "ScanningExtension";
    ExtensionManagementErrorCode["ReadUninstalled"] = "ReadUninstalled";
    ExtensionManagementErrorCode["UnsetUninstalled"] = "UnsetUninstalled";
    ExtensionManagementErrorCode["Delete"] = "Delete";
    ExtensionManagementErrorCode["Rename"] = "Rename";
    ExtensionManagementErrorCode["IntializeDefaultProfile"] = "IntializeDefaultProfile";
    ExtensionManagementErrorCode["AddToProfile"] = "AddToProfile";
    ExtensionManagementErrorCode["InstalledExtensionNotFound"] = "InstalledExtensionNotFound";
    ExtensionManagementErrorCode["PostInstall"] = "PostInstall";
    ExtensionManagementErrorCode["CorruptZip"] = "CorruptZip";
    ExtensionManagementErrorCode["IncompleteZip"] = "IncompleteZip";
    ExtensionManagementErrorCode["Signature"] = "Signature";
    ExtensionManagementErrorCode["NotAllowed"] = "NotAllowed";
    ExtensionManagementErrorCode["Gallery"] = "Gallery";
    ExtensionManagementErrorCode["Cancelled"] = "Cancelled";
    ExtensionManagementErrorCode["Unknown"] = "Unknown";
    ExtensionManagementErrorCode["Internal"] = "Internal";
})(ExtensionManagementErrorCode || (ExtensionManagementErrorCode = {}))));
class ExtensionManagementError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
        this.name = code;
    }
}
const DISABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/disabled';
const ENABLED_EXTENSIONS_STORAGE_PATH = 'extensionsIdentifiers/enabled';
const ExtensionsLocalizedLabel = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localize2WithPath)(_moduleId, 0, "Extensions"));
const PreferencesLocalizedLabel = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localize2WithPath)(_moduleId, 1, 'Preferences'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BetterMergeId: () => (/* binding */ BetterMergeId),
/* harmony export */   ExtensionKey: () => (/* binding */ ExtensionKey),
/* harmony export */   adoptToGalleryExtensionId: () => (/* binding */ adoptToGalleryExtensionId),
/* harmony export */   areSameExtensions: () => (/* binding */ areSameExtensions),
/* harmony export */   computeTargetPlatform: () => (/* binding */ computeTargetPlatform),
/* harmony export */   getExtensionDependencies: () => (/* binding */ getExtensionDependencies),
/* harmony export */   getExtensionId: () => (/* binding */ getExtensionId),
/* harmony export */   getGalleryExtensionId: () => (/* binding */ getGalleryExtensionId),
/* harmony export */   getGalleryExtensionTelemetryData: () => (/* binding */ getGalleryExtensionTelemetryData),
/* harmony export */   getIdAndVersion: () => (/* binding */ getIdAndVersion),
/* harmony export */   getLocalExtensionTelemetryData: () => (/* binding */ getLocalExtensionTelemetryData),
/* harmony export */   groupByExtension: () => (/* binding */ groupByExtension)
/* harmony export */ });
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _extensionManagement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extensionManagement.js */ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/extensionManagement.js");
/* harmony import */ var _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_process_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/process.js */ "./node_modules/vscode/vscode/src/vs/base/common/process.js");
/* harmony import */ var _telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../telemetry/common/telemetryUtils.js */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js");








function areSameExtensions(a, b) {
    if (a.uuid && b.uuid) {
        return a.uuid === b.uuid;
    }
    if (a.id === b.id) {
        return true;
    }
    return (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.compareIgnoreCase)(a.id, b.id) === 0;
}
const ExtensionKeyRegex = /^([^.]+\..+)-(\d+\.\d+\.\d+)(-(.+))?$/;
class ExtensionKey {
    static create(extension) {
        const version = extension.manifest ? extension.manifest.version : extension.version;
        const targetPlatform = extension.manifest ? extension.targetPlatform : extension.properties.targetPlatform;
        return ( new ExtensionKey(extension.identifier, version, targetPlatform));
    }
    static parse(key) {
        const matches = ExtensionKeyRegex.exec(key);
        return matches && matches[1] && matches[2] ? ( new ExtensionKey({ id: matches[1] }, matches[2], matches[4] || undefined)) : null;
    }
    constructor(identifier, version, targetPlatform = _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNDEFINED) {
        this.identifier = identifier;
        this.version = version;
        this.targetPlatform = targetPlatform;
        this.id = identifier.id;
    }
    toString() {
        return `${this.id}-${this.version}${this.targetPlatform !== _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.TargetPlatform.UNDEFINED ? `-${this.targetPlatform}` : ''}`;
    }
    equals(o) {
        if (!(o instanceof ExtensionKey)) {
            return false;
        }
        return areSameExtensions(this, o) && this.version === o.version && this.targetPlatform === o.targetPlatform;
    }
}
const EXTENSION_IDENTIFIER_WITH_VERSION_REGEX = /^([^.]+\..+)@((prerelease)|(\d+\.\d+\.\d+(-.*)?))$/;
function getIdAndVersion(id) {
    const matches = EXTENSION_IDENTIFIER_WITH_VERSION_REGEX.exec(id);
    if (matches && matches[1]) {
        return [adoptToGalleryExtensionId(matches[1]), matches[2]];
    }
    return [adoptToGalleryExtensionId(id), undefined];
}
function getExtensionId(publisher, name) {
    return `${publisher}.${name}`;
}
function adoptToGalleryExtensionId(id) {
    return id.toLowerCase();
}
function getGalleryExtensionId(publisher, name) {
    return adoptToGalleryExtensionId(getExtensionId(publisher ?? _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.UNDEFINED_PUBLISHER, name));
}
function groupByExtension(extensions, getExtensionIdentifier) {
    const byExtension = [];
    const findGroup = (extension) => {
        for (const group of byExtension) {
            if (( group.some(
                e => areSameExtensions(getExtensionIdentifier(e), getExtensionIdentifier(extension))
            ))) {
                return group;
            }
        }
        return null;
    };
    for (const extension of extensions) {
        const group = findGroup(extension);
        if (group) {
            group.push(extension);
        }
        else {
            byExtension.push([extension]);
        }
    }
    return byExtension;
}
function getLocalExtensionTelemetryData(extension) {
    return {
        id: extension.identifier.id,
        name: extension.manifest.name,
        galleryId: null,
        publisherId: extension.publisherId,
        publisherName: extension.manifest.publisher,
        publisherDisplayName: extension.publisherDisplayName,
        dependencies: extension.manifest.extensionDependencies && extension.manifest.extensionDependencies.length > 0
    };
}
function getGalleryExtensionTelemetryData(extension) {
    return {
        id: ( new _telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_7__.TelemetryTrustedValue(extension.identifier.id)),
        name: ( new _telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_7__.TelemetryTrustedValue(extension.name)),
        version: extension.version,
        galleryId: extension.identifier.uuid,
        publisherId: extension.publisherId,
        publisherName: extension.publisher,
        publisherDisplayName: extension.publisherDisplayName,
        isPreReleaseVersion: extension.properties.isPreReleaseVersion,
        dependencies: !!(extension.properties.dependencies && extension.properties.dependencies.length > 0),
        isSigned: extension.isSigned,
        ...extension.telemetryData
    };
}
const BetterMergeId = ( new _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.ExtensionIdentifier('pprice.better-merge'));
function getExtensionDependencies(installedExtensions, extension) {
    const dependencies = [];
    const extensions = extension.manifest.extensionDependencies?.slice(0) ?? [];
    while (extensions.length) {
        const id = extensions.shift();
        if (id && dependencies.every(e => !areSameExtensions(e.identifier, { id }))) {
            const ext = installedExtensions.filter(e => areSameExtensions(e.identifier, { id }));
            if (ext.length === 1) {
                dependencies.push(ext[0]);
                extensions.push(...(ext[0].manifest.extensionDependencies?.slice(0) ?? []));
            }
        }
    }
    return dependencies;
}
async function isAlpineLinux(fileService, logService) {
    if (!_base_common_platform_js__WEBPACK_IMPORTED_MODULE_3__.isLinux) {
        return false;
    }
    let content;
    try {
        const fileContent = await fileService.readFile(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.file('/etc/os-release'));
        content = ( fileContent.value.toString());
    }
    catch (error) {
        try {
            const fileContent = await fileService.readFile(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.file('/usr/lib/os-release'));
            content = ( fileContent.value.toString());
        }
        catch (error) {
            logService.debug(`Error while getting the os-release file.`, (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_5__.getErrorMessage)(error));
        }
    }
    return !!content && (content.match(/^ID=([^\u001b\r\n]*)/m) || [])[1] === 'alpine';
}
async function computeTargetPlatform(fileService, logService) {
    const alpineLinux = await isAlpineLinux(fileService, logService);
    const targetPlatform = (0,_extensionManagement_js__WEBPACK_IMPORTED_MODULE_1__.getTargetPlatform)(alpineLinux ? 'alpine' : _base_common_platform_js__WEBPACK_IMPORTED_MODULE_3__.platform, _base_common_process_js__WEBPACK_IMPORTED_MODULE_6__.arch);
    logService.debug('ComputeTargetPlatform:', targetPlatform);
    return targetPlatform;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/implicitActivationEvents.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/implicitActivationEvents.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ImplicitActivationEvents: () => (/* binding */ ImplicitActivationEvents),
/* harmony export */   ImplicitActivationEventsImpl: () => (/* binding */ ImplicitActivationEventsImpl)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");


class ImplicitActivationEventsImpl {
    constructor() {
        this._generators = ( new Map());
        this._cache = ( new WeakMap());
    }
    register(extensionPointName, generator) {
        this._generators.set(extensionPointName, generator);
    }
    readActivationEvents(extensionDescription) {
        if (!( this._cache.has(extensionDescription))) {
            this._cache.set(extensionDescription, this._readActivationEvents(extensionDescription));
        }
        return this._cache.get(extensionDescription);
    }
    createActivationEventsMap(extensionDescriptions) {
        const result = Object.create(null);
        for (const extensionDescription of extensionDescriptions) {
            const activationEvents = this.readActivationEvents(extensionDescription);
            if (activationEvents.length > 0) {
                result[_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_1__.ExtensionIdentifier.toKey(extensionDescription.identifier)] = activationEvents;
            }
        }
        return result;
    }
    _readActivationEvents(desc) {
        if (typeof desc.main === 'undefined' && typeof desc.browser === 'undefined') {
            return [];
        }
        const activationEvents = (Array.isArray(desc.activationEvents) ? desc.activationEvents.slice(0) : []);
        for (let i = 0; i < activationEvents.length; i++) {
            if (activationEvents[i] === 'onUri') {
                activationEvents[i] = `onUri:${_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_1__.ExtensionIdentifier.toKey(desc.identifier)}`;
            }
        }
        if (!desc.contributes) {
            return activationEvents;
        }
        for (const extPointName in desc.contributes) {
            const generator = this._generators.get(extPointName);
            if (!generator) {
                continue;
            }
            const contrib = desc.contributes[extPointName];
            const contribArr = Array.isArray(contrib) ? contrib : [contrib];
            try {
                generator(contribArr, activationEvents);
            }
            catch (err) {
                (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(err);
            }
        }
        return activationEvents;
    }
}
const ImplicitActivationEvents = ( new ImplicitActivationEventsImpl());



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensionValidator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensionValidator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   areApiProposalsCompatible: () => (/* binding */ areApiProposalsCompatible),
/* harmony export */   isEngineValid: () => (/* binding */ isEngineValid),
/* harmony export */   isValidExtensionVersion: () => (/* binding */ isValidExtensionVersion),
/* harmony export */   isValidVersion: () => (/* binding */ isValidVersion),
/* harmony export */   isValidVersionStr: () => (/* binding */ isValidVersionStr),
/* harmony export */   normalizeVersion: () => (/* binding */ normalizeVersion),
/* harmony export */   parseVersion: () => (/* binding */ parseVersion),
/* harmony export */   validateExtensionManifest: () => (/* binding */ validateExtensionManifest)
/* harmony export */ });
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _external_vscode_semver_semver_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../external/vscode-semver/semver.js */ "./node_modules/vscode/external/vscode-semver/semver.js");
/* harmony import */ var _extensions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _extensionsApiProposals_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extensionsApiProposals.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensionsApiProposals.js");






const _moduleId = "vs/platform/extensions/common/extensionValidator";
const VERSION_REGEXP = /^(\^|>=)?((\d+)|x)\.((\d+)|x)\.((\d+)|x)(\-.*)?$/;
const NOT_BEFORE_REGEXP = /^-(\d{4})(\d{2})(\d{2})$/;
function isValidVersionStr(version) {
    version = version.trim();
    return (version === '*' || VERSION_REGEXP.test(version));
}
function parseVersion(version) {
    if (!isValidVersionStr(version)) {
        return null;
    }
    version = version.trim();
    if (version === '*') {
        return {
            hasCaret: false,
            hasGreaterEquals: false,
            majorBase: 0,
            majorMustEqual: false,
            minorBase: 0,
            minorMustEqual: false,
            patchBase: 0,
            patchMustEqual: false,
            preRelease: null
        };
    }
    const m = version.match(VERSION_REGEXP);
    if (!m) {
        return null;
    }
    return {
        hasCaret: m[1] === '^',
        hasGreaterEquals: m[1] === '>=',
        majorBase: m[2] === 'x' ? 0 : parseInt(m[2], 10),
        majorMustEqual: (m[2] === 'x' ? false : true),
        minorBase: m[4] === 'x' ? 0 : parseInt(m[4], 10),
        minorMustEqual: (m[4] === 'x' ? false : true),
        patchBase: m[6] === 'x' ? 0 : parseInt(m[6], 10),
        patchMustEqual: (m[6] === 'x' ? false : true),
        preRelease: m[8] || null
    };
}
function normalizeVersion(version) {
    if (!version) {
        return null;
    }
    const majorBase = version.majorBase;
    const majorMustEqual = version.majorMustEqual;
    const minorBase = version.minorBase;
    let minorMustEqual = version.minorMustEqual;
    const patchBase = version.patchBase;
    let patchMustEqual = version.patchMustEqual;
    if (version.hasCaret) {
        if (majorBase === 0) {
            patchMustEqual = false;
        }
        else {
            minorMustEqual = false;
            patchMustEqual = false;
        }
    }
    let notBefore = 0;
    if (version.preRelease) {
        const match = NOT_BEFORE_REGEXP.exec(version.preRelease);
        if (match) {
            const [, year, month, day] = match;
            notBefore = Date.UTC(Number(year), Number(month) - 1, Number(day));
        }
    }
    return {
        majorBase: majorBase,
        majorMustEqual: majorMustEqual,
        minorBase: minorBase,
        minorMustEqual: minorMustEqual,
        patchBase: patchBase,
        patchMustEqual: patchMustEqual,
        isMinimum: version.hasGreaterEquals,
        notBefore,
    };
}
function isValidVersion(_inputVersion, _inputDate, _desiredVersion) {
    let version;
    if (typeof _inputVersion === 'string') {
        version = normalizeVersion(parseVersion(_inputVersion));
    }
    else {
        version = _inputVersion;
    }
    let productTs;
    if (_inputDate instanceof Date) {
        productTs = _inputDate.getTime();
    }
    else if (typeof _inputDate === 'string') {
        productTs = ( (new Date(_inputDate))).getTime();
    }
    let desiredVersion;
    if (typeof _desiredVersion === 'string') {
        desiredVersion = normalizeVersion(parseVersion(_desiredVersion));
    }
    else {
        desiredVersion = _desiredVersion;
    }
    if (!version || !desiredVersion) {
        return false;
    }
    const majorBase = version.majorBase;
    const minorBase = version.minorBase;
    const patchBase = version.patchBase;
    let desiredMajorBase = desiredVersion.majorBase;
    let desiredMinorBase = desiredVersion.minorBase;
    let desiredPatchBase = desiredVersion.patchBase;
    const desiredNotBefore = desiredVersion.notBefore;
    let majorMustEqual = desiredVersion.majorMustEqual;
    let minorMustEqual = desiredVersion.minorMustEqual;
    let patchMustEqual = desiredVersion.patchMustEqual;
    if (desiredVersion.isMinimum) {
        if (majorBase > desiredMajorBase) {
            return true;
        }
        if (majorBase < desiredMajorBase) {
            return false;
        }
        if (minorBase > desiredMinorBase) {
            return true;
        }
        if (minorBase < desiredMinorBase) {
            return false;
        }
        if (productTs && productTs < desiredNotBefore) {
            return false;
        }
        return patchBase >= desiredPatchBase;
    }
    if (majorBase === 1 && desiredMajorBase === 0 && (!majorMustEqual || !minorMustEqual || !patchMustEqual)) {
        desiredMajorBase = 1;
        desiredMinorBase = 0;
        desiredPatchBase = 0;
        majorMustEqual = true;
        minorMustEqual = false;
        patchMustEqual = false;
    }
    if (majorBase < desiredMajorBase) {
        return false;
    }
    if (majorBase > desiredMajorBase) {
        return (!majorMustEqual);
    }
    if (minorBase < desiredMinorBase) {
        return false;
    }
    if (minorBase > desiredMinorBase) {
        return (!minorMustEqual);
    }
    if (patchBase < desiredPatchBase) {
        return false;
    }
    if (patchBase > desiredPatchBase) {
        return (!patchMustEqual);
    }
    if (productTs && productTs < desiredNotBefore) {
        return false;
    }
    return true;
}
function validateExtensionManifest(productVersion, productDate, extensionLocation, extensionManifest, extensionIsBuiltin, validateApiVersion) {
    const validations = [];
    if (typeof extensionManifest.publisher !== 'undefined' && typeof extensionManifest.publisher !== 'string') {
        validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 0, "property publisher must be of type `string`."))]);
        return validations;
    }
    if (typeof extensionManifest.name !== 'string') {
        validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            1,
            "property `{0}` is mandatory and must be of type `string`",
            'name'
        ))]);
        return validations;
    }
    if (typeof extensionManifest.version !== 'string') {
        validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            2,
            "property `{0}` is mandatory and must be of type `string`",
            'version'
        ))]);
        return validations;
    }
    if (!extensionManifest.engines) {
        validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            3,
            "property `{0}` is mandatory and must be of type `object`",
            'engines'
        ))]);
        return validations;
    }
    if (typeof extensionManifest.engines.vscode !== 'string') {
        validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            4,
            "property `{0}` is mandatory and must be of type `string`",
            'engines.vscode'
        ))]);
        return validations;
    }
    if (typeof extensionManifest.extensionDependencies !== 'undefined') {
        if (!isStringArray(extensionManifest.extensionDependencies)) {
            validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                5,
                "property `{0}` can be omitted or must be of type `string[]`",
                'extensionDependencies'
            ))]);
            return validations;
        }
    }
    if (typeof extensionManifest.activationEvents !== 'undefined') {
        if (!isStringArray(extensionManifest.activationEvents)) {
            validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                6,
                "property `{0}` can be omitted or must be of type `string[]`",
                'activationEvents'
            ))]);
            return validations;
        }
        if (typeof extensionManifest.main === 'undefined' && typeof extensionManifest.browser === 'undefined') {
            validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                7,
                "property `{0}` should be omitted if the extension doesn't have a `{1}` or `{2}` property.",
                'activationEvents',
                'main',
                'browser'
            ))]);
            return validations;
        }
    }
    if (typeof extensionManifest.extensionKind !== 'undefined') {
        if (typeof extensionManifest.main === 'undefined') {
            validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Warning, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                8,
                "property `{0}` can be defined only if property `main` is also defined.",
                'extensionKind'
            ))]);
        }
    }
    if (typeof extensionManifest.main !== 'undefined') {
        if (typeof extensionManifest.main !== 'string') {
            validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                9,
                "property `{0}` can be omitted or must be of type `string`",
                'main'
            ))]);
            return validations;
        }
        else {
            const mainLocation = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_0__.joinPath)(extensionLocation, extensionManifest.main);
            if (!(0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_0__.isEqualOrParent)(mainLocation, extensionLocation)) {
                validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Warning, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                    _moduleId,
                    10,
                    "Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.",
                    mainLocation.path,
                    extensionLocation.path
                ))]);
            }
        }
    }
    if (typeof extensionManifest.browser !== 'undefined') {
        if (typeof extensionManifest.browser !== 'string') {
            validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                11,
                "property `{0}` can be omitted or must be of type `string`",
                'browser'
            ))]);
            return validations;
        }
        else {
            const browserLocation = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_0__.joinPath)(extensionLocation, extensionManifest.browser);
            if (!(0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_0__.isEqualOrParent)(browserLocation, extensionLocation)) {
                validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Warning, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                    _moduleId,
                    12,
                    "Expected `browser` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.",
                    browserLocation.path,
                    extensionLocation.path
                ))]);
            }
        }
    }
    if (!_external_vscode_semver_semver_js__WEBPACK_IMPORTED_MODULE_3__.semverExports.valid(extensionManifest.version)) {
        validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 13, "Extension version is not semver compatible."))]);
        return validations;
    }
    const notices = [];
    const validExtensionVersion = isValidExtensionVersion(productVersion, productDate, extensionManifest, extensionIsBuiltin, notices);
    if (!validExtensionVersion) {
        for (const notice of notices) {
            validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, notice]);
        }
    }
    if (validateApiVersion && extensionManifest.enabledApiProposals?.length) {
        const incompatibleNotices = [];
        if (!areApiProposalsCompatible([...extensionManifest.enabledApiProposals], incompatibleNotices)) {
            for (const notice of incompatibleNotices) {
                validations.push([_base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"].Error, notice]);
            }
        }
    }
    return validations;
}
function isValidExtensionVersion(productVersion, productDate, extensionManifest, extensionIsBuiltin, notices) {
    if (extensionIsBuiltin || (typeof extensionManifest.main === 'undefined' && typeof extensionManifest.browser === 'undefined')) {
        return true;
    }
    return isVersionValid(productVersion, productDate, extensionManifest.engines.vscode, notices);
}
function isEngineValid(engine, version, date) {
    return engine === '*' || isVersionValid(version, date, engine);
}
function areApiProposalsCompatible(apiProposals, arg1) {
    if (apiProposals.length === 0) {
        return true;
    }
    const notices = Array.isArray(arg1) ? arg1 : undefined;
    const productApiProposals = (notices ? undefined : arg1) ?? _extensionsApiProposals_js__WEBPACK_IMPORTED_MODULE_5__.allApiProposals;
    const incompatibleNotices = [];
    const parsedProposals = (0,_extensions_js__WEBPACK_IMPORTED_MODULE_4__.parseApiProposals)(apiProposals);
    for (const { proposalName, version } of parsedProposals) {
        const existingProposal = productApiProposals[proposalName];
        if (!existingProposal) {
            continue;
        }
        if (!version) {
            continue;
        }
        if (existingProposal.version !== version) {
            incompatibleNotices.push(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                14,
                "Extension is using an API proposal '{0}' that is not compatible with the current version of VS Code.",
                proposalName
            )));
        }
    }
    notices?.push(...incompatibleNotices);
    return incompatibleNotices.length === 0;
}
function isVersionValid(currentVersion, date, requestedVersion, notices = []) {
    const desiredVersion = normalizeVersion(parseVersion(requestedVersion));
    if (!desiredVersion) {
        notices.push(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            15,
            "Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.",
            requestedVersion
        )));
        return false;
    }
    if (desiredVersion.majorBase === 0) {
        if (!desiredVersion.majorMustEqual || !desiredVersion.minorMustEqual) {
            notices.push(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                16,
                "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.",
                requestedVersion
            )));
            return false;
        }
    }
    else {
        if (!desiredVersion.majorMustEqual) {
            notices.push(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                _moduleId,
                17,
                "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.",
                requestedVersion
            )));
            return false;
        }
    }
    if (!isValidVersion(currentVersion, date, desiredVersion)) {
        notices.push(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
            _moduleId,
            18,
            "Extension is not compatible with Code {0}. Extension requires: {1}.",
            currentVersion,
            requestedVersion
        )));
        return false;
    }
    return true;
}
function isStringArray(arr) {
    if (!Array.isArray(arr)) {
        return false;
    }
    for (let i = 0, len = arr.length; i < len; i++) {
        if (typeof arr[i] !== 'string') {
            return false;
        }
    }
    return true;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ALL_EXTENSION_KINDS: () => (/* binding */ ALL_EXTENSION_KINDS),
/* harmony export */   BUILTIN_MANIFEST_CACHE_FILE: () => (/* binding */ BUILTIN_MANIFEST_CACHE_FILE),
/* harmony export */   EXTENSION_CATEGORIES: () => (/* binding */ EXTENSION_CATEGORIES),
/* harmony export */   ExtensionIdentifier: () => (/* binding */ ExtensionIdentifier),
/* harmony export */   ExtensionIdentifierMap: () => (/* binding */ ExtensionIdentifierMap),
/* harmony export */   ExtensionIdentifierSet: () => (/* binding */ ExtensionIdentifierSet),
/* harmony export */   ExtensionType: () => (/* binding */ ExtensionType),
/* harmony export */   TargetPlatform: () => (/* binding */ TargetPlatform),
/* harmony export */   UNDEFINED_PUBLISHER: () => (/* binding */ UNDEFINED_PUBLISHER),
/* harmony export */   USER_MANIFEST_CACHE_FILE: () => (/* binding */ USER_MANIFEST_CACHE_FILE),
/* harmony export */   getWorkspaceSupportTypeMessage: () => (/* binding */ getWorkspaceSupportTypeMessage),
/* harmony export */   isApplicationScopedExtension: () => (/* binding */ isApplicationScopedExtension),
/* harmony export */   isAuthenticationProviderExtension: () => (/* binding */ isAuthenticationProviderExtension),
/* harmony export */   isLanguagePackExtension: () => (/* binding */ isLanguagePackExtension),
/* harmony export */   isResolverExtension: () => (/* binding */ isResolverExtension),
/* harmony export */   parseApiProposals: () => (/* binding */ parseApiProposals),
/* harmony export */   parseEnabledApiProposalNames: () => (/* binding */ parseEnabledApiProposalNames)
/* harmony export */ });
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../remote/common/remoteHosts.js */ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteHosts.js");


const USER_MANIFEST_CACHE_FILE = 'extensions.user.cache';
const BUILTIN_MANIFEST_CACHE_FILE = 'extensions.builtin.cache';
const UNDEFINED_PUBLISHER = 'undefined_publisher';
const ALL_EXTENSION_KINDS = ['ui', 'workspace', 'web'];
function getWorkspaceSupportTypeMessage(supportType) {
    if (typeof supportType === 'object' && supportType !== null) {
        if (supportType.supported !== true) {
            return supportType.description;
        }
    }
    return undefined;
}
const EXTENSION_CATEGORIES = [
    'AI',
    'Azure',
    'Chat',
    'Data Science',
    'Debuggers',
    'Extension Packs',
    'Education',
    'Formatters',
    'Keymaps',
    'Language Packs',
    'Linters',
    'Machine Learning',
    'Notebooks',
    'Programming Languages',
    'SCM Providers',
    'Snippets',
    'Testing',
    'Themes',
    'Visualization',
    'Other',
];
var ExtensionType;
( (function(ExtensionType) {
    ExtensionType[ExtensionType["System"] = 0] = "System";
    ExtensionType[ExtensionType["User"] = 1] = "User";
})(ExtensionType || (ExtensionType = {})));
var TargetPlatform;
( (function(TargetPlatform) {
    TargetPlatform["WIN32_X64"] = "win32-x64";
    TargetPlatform["WIN32_ARM64"] = "win32-arm64";
    TargetPlatform["LINUX_X64"] = "linux-x64";
    TargetPlatform["LINUX_ARM64"] = "linux-arm64";
    TargetPlatform["LINUX_ARMHF"] = "linux-armhf";
    TargetPlatform["ALPINE_X64"] = "alpine-x64";
    TargetPlatform["ALPINE_ARM64"] = "alpine-arm64";
    TargetPlatform["DARWIN_X64"] = "darwin-x64";
    TargetPlatform["DARWIN_ARM64"] = "darwin-arm64";
    TargetPlatform["WEB"] = "web";
    TargetPlatform["UNIVERSAL"] = "universal";
    TargetPlatform["UNKNOWN"] = "unknown";
    TargetPlatform["UNDEFINED"] = "undefined";
})(TargetPlatform || (TargetPlatform = {})));
class ExtensionIdentifier {
    constructor(value) {
        this.value = value;
        this._lower = value.toLowerCase();
    }
    static equals(a, b) {
        if (typeof a === 'undefined' || a === null) {
            return (typeof b === 'undefined' || b === null);
        }
        if (typeof b === 'undefined' || b === null) {
            return false;
        }
        if (typeof a === 'string' || typeof b === 'string') {
            const aValue = (typeof a === 'string' ? a : a.value);
            const bValue = (typeof b === 'string' ? b : b.value);
            return (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.equalsIgnoreCase)(aValue, bValue);
        }
        return (a._lower === b._lower);
    }
    static toKey(id) {
        if (typeof id === 'string') {
            return id.toLowerCase();
        }
        return id._lower;
    }
}
class ExtensionIdentifierSet {
    get size() {
        return this._set.size;
    }
    constructor(iterable) {
        this._set = ( new Set());
        if (iterable) {
            for (const value of iterable) {
                this.add(value);
            }
        }
    }
    add(id) {
        this._set.add(ExtensionIdentifier.toKey(id));
    }
    delete(extensionId) {
        return this._set.delete(ExtensionIdentifier.toKey(extensionId));
    }
    has(id) {
        return ( this._set.has(ExtensionIdentifier.toKey(id)));
    }
}
class ExtensionIdentifierMap {
    constructor() {
        this._map = ( new Map());
    }
    clear() {
        this._map.clear();
    }
    delete(id) {
        this._map.delete(ExtensionIdentifier.toKey(id));
    }
    get(id) {
        return this._map.get(ExtensionIdentifier.toKey(id));
    }
    has(id) {
        return ( this._map.has(ExtensionIdentifier.toKey(id)));
    }
    set(id, value) {
        this._map.set(ExtensionIdentifier.toKey(id), value);
    }
    values() {
        return ( this._map.values());
    }
    forEach(callbackfn) {
        this._map.forEach(callbackfn);
    }
    [Symbol.iterator]() {
        return this._map[Symbol.iterator]();
    }
}
function isApplicationScopedExtension(manifest) {
    return isLanguagePackExtension(manifest);
}
function isLanguagePackExtension(manifest) {
    return manifest.contributes && manifest.contributes.localizations ? manifest.contributes.localizations.length > 0 : false;
}
function isAuthenticationProviderExtension(manifest) {
    return manifest.contributes && manifest.contributes.authentication ? manifest.contributes.authentication.length > 0 : false;
}
function isResolverExtension(manifest, remoteAuthority) {
    if (remoteAuthority) {
        const activationEvent = `onResolveRemoteAuthority:${(0,_remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_1__.getRemoteName)(remoteAuthority)}`;
        return !!manifest.activationEvents?.includes(activationEvent);
    }
    return false;
}
function parseApiProposals(enabledApiProposals) {
    return ( enabledApiProposals.map(proposal => {
        const [proposalName, version] = proposal.split('@');
        return { proposalName, version: version ? parseInt(version) : undefined };
    }));
}
function parseEnabledApiProposalNames(enabledApiProposals) {
    return ( enabledApiProposals.map(proposal => proposal.split('@')[0]));
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensionsApiProposals.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensionsApiProposals.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   allApiProposals: () => (/* binding */ allApiProposals)
/* harmony export */ });
const _allApiProposals = {
    activeComment: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.activeComment.d.ts',
    },
    aiRelatedInformation: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.aiRelatedInformation.d.ts',
    },
    aiTextSearchProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.aiTextSearchProvider.d.ts',
    },
    attributableCoverage: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.attributableCoverage.d.ts',
    },
    authGetSessions: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.authGetSessions.d.ts',
    },
    authLearnMore: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.authLearnMore.d.ts',
    },
    authSession: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.authSession.d.ts',
    },
    canonicalUriProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.canonicalUriProvider.d.ts',
    },
    chatParticipantAdditions: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatParticipantAdditions.d.ts',
    },
    chatParticipantPrivate: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatParticipantPrivate.d.ts',
    },
    chatProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatProvider.d.ts',
    },
    chatTab: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatTab.d.ts',
    },
    chatVariableResolver: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.chatVariableResolver.d.ts',
    },
    codeActionAI: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.codeActionAI.d.ts',
    },
    codeActionRanges: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.codeActionRanges.d.ts',
    },
    codiconDecoration: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.codiconDecoration.d.ts',
    },
    commentReactor: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentReactor.d.ts',
    },
    commentReveal: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentReveal.d.ts',
    },
    commentThreadApplicability: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentThreadApplicability.d.ts',
    },
    commentingRangeHint: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentingRangeHint.d.ts',
    },
    commentsDraftState: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.commentsDraftState.d.ts',
    },
    contribAccessibilityHelpContent: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribAccessibilityHelpContent.d.ts',
    },
    contribCommentEditorActionsMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentEditorActionsMenu.d.ts',
    },
    contribCommentPeekContext: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentPeekContext.d.ts',
    },
    contribCommentThreadAdditionalMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentThreadAdditionalMenu.d.ts',
    },
    contribCommentsViewThreadMenus: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribCommentsViewThreadMenus.d.ts',
    },
    contribDiffEditorGutterToolBarMenus: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribDiffEditorGutterToolBarMenus.d.ts',
    },
    contribEditSessions: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribEditSessions.d.ts',
    },
    contribEditorContentMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribEditorContentMenu.d.ts',
    },
    contribIssueReporter: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribIssueReporter.d.ts',
    },
    contribLabelFormatterWorkspaceTooltip: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribLabelFormatterWorkspaceTooltip.d.ts',
    },
    contribMenuBarHome: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribMenuBarHome.d.ts',
    },
    contribMergeEditorMenus: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribMergeEditorMenus.d.ts',
    },
    contribMultiDiffEditorMenus: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribMultiDiffEditorMenus.d.ts',
    },
    contribNotebookStaticPreloads: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribNotebookStaticPreloads.d.ts',
    },
    contribRemoteHelp: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribRemoteHelp.d.ts',
    },
    contribShareMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribShareMenu.d.ts',
    },
    contribSourceControlHistoryItemGroupMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlHistoryItemGroupMenu.d.ts',
    },
    contribSourceControlHistoryItemMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlHistoryItemMenu.d.ts',
    },
    contribSourceControlInputBoxMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlInputBoxMenu.d.ts',
    },
    contribSourceControlTitleMenu: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribSourceControlTitleMenu.d.ts',
    },
    contribStatusBarItems: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribStatusBarItems.d.ts',
    },
    contribViewsRemote: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribViewsRemote.d.ts',
    },
    contribViewsWelcome: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.contribViewsWelcome.d.ts',
    },
    createFileSystemWatcher: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.createFileSystemWatcher.d.ts',
    },
    customEditorMove: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.customEditorMove.d.ts',
    },
    debugVisualization: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.debugVisualization.d.ts',
    },
    defaultChatParticipant: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.defaultChatParticipant.d.ts',
    },
    diffCommand: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.diffCommand.d.ts',
    },
    diffContentOptions: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.diffContentOptions.d.ts',
    },
    documentFiltersExclusive: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.documentFiltersExclusive.d.ts',
    },
    documentPaste: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.documentPaste.d.ts',
    },
    editSessionIdentityProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.editSessionIdentityProvider.d.ts',
    },
    editorHoverVerbosityLevel: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.editorHoverVerbosityLevel.d.ts',
    },
    editorInsets: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.editorInsets.d.ts',
    },
    embeddings: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.embeddings.d.ts',
    },
    extensionRuntime: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.extensionRuntime.d.ts',
    },
    extensionsAny: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.extensionsAny.d.ts',
    },
    externalUriOpener: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.externalUriOpener.d.ts',
    },
    fileComments: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.fileComments.d.ts',
    },
    fileSearchProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.fileSearchProvider.d.ts',
    },
    findFiles2: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.findFiles2.d.ts',
    },
    findTextInFiles: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.findTextInFiles.d.ts',
    },
    fsChunks: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.fsChunks.d.ts',
    },
    idToken: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.idToken.d.ts',
    },
    inlineCompletionsAdditions: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.inlineCompletionsAdditions.d.ts',
    },
    inlineEdit: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.inlineEdit.d.ts',
    },
    interactive: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.interactive.d.ts',
    },
    interactiveWindow: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.interactiveWindow.d.ts',
    },
    ipc: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.ipc.d.ts',
    },
    languageModelSystem: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageModelSystem.d.ts',
    },
    languageStatusText: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.languageStatusText.d.ts',
    },
    lmTools: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.lmTools.d.ts',
        version: 2
    },
    mappedEditsProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.mappedEditsProvider.d.ts',
    },
    multiDocumentHighlightProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.multiDocumentHighlightProvider.d.ts',
    },
    newSymbolNamesProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.newSymbolNamesProvider.d.ts',
    },
    notebookCellExecution: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookCellExecution.d.ts',
    },
    notebookCellExecutionState: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookCellExecutionState.d.ts',
    },
    notebookControllerAffinityHidden: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookControllerAffinityHidden.d.ts',
    },
    notebookDeprecated: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookDeprecated.d.ts',
    },
    notebookExecution: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookExecution.d.ts',
    },
    notebookKernelSource: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookKernelSource.d.ts',
    },
    notebookLiveShare: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookLiveShare.d.ts',
    },
    notebookMessaging: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookMessaging.d.ts',
    },
    notebookMime: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookMime.d.ts',
    },
    notebookVariableProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.notebookVariableProvider.d.ts',
    },
    portsAttributes: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.portsAttributes.d.ts',
    },
    profileContentHandlers: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.profileContentHandlers.d.ts',
    },
    quickDiffProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.quickDiffProvider.d.ts',
    },
    quickPickItemTooltip: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.quickPickItemTooltip.d.ts',
    },
    quickPickSortByLabel: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.quickPickSortByLabel.d.ts',
    },
    resolvers: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.resolvers.d.ts',
    },
    scmActionButton: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmActionButton.d.ts',
    },
    scmHistoryProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmHistoryProvider.d.ts',
    },
    scmMultiDiffEditor: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmMultiDiffEditor.d.ts',
    },
    scmSelectedProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmSelectedProvider.d.ts',
    },
    scmTextDocument: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmTextDocument.d.ts',
    },
    scmValidation: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.scmValidation.d.ts',
    },
    shareProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.shareProvider.d.ts',
    },
    showLocal: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.showLocal.d.ts',
    },
    speech: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.speech.d.ts',
    },
    tabInputMultiDiff: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tabInputMultiDiff.d.ts',
    },
    tabInputTextMerge: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tabInputTextMerge.d.ts',
    },
    taskPresentationGroup: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.taskPresentationGroup.d.ts',
    },
    telemetry: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.telemetry.d.ts',
    },
    terminalDataWriteEvent: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalDataWriteEvent.d.ts',
    },
    terminalDimensions: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalDimensions.d.ts',
    },
    terminalExecuteCommandEvent: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalExecuteCommandEvent.d.ts',
    },
    terminalQuickFixProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalQuickFixProvider.d.ts',
    },
    terminalSelection: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalSelection.d.ts',
    },
    terminalShellIntegration: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.terminalShellIntegration.d.ts',
    },
    testObserver: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.testObserver.d.ts',
    },
    textSearchProvider: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.textSearchProvider.d.ts',
    },
    timeline: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.timeline.d.ts',
    },
    tokenInformation: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tokenInformation.d.ts',
    },
    treeViewActiveItem: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.treeViewActiveItem.d.ts',
    },
    treeViewMarkdownMessage: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.treeViewMarkdownMessage.d.ts',
    },
    treeViewReveal: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.treeViewReveal.d.ts',
    },
    tunnelFactory: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tunnelFactory.d.ts',
    },
    tunnels: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.tunnels.d.ts',
    },
    workspaceTrust: {
        proposal: 'https://raw.githubusercontent.com/microsoft/vscode/main/src/vscode-dts/vscode.proposed.workspaceTrust.d.ts',
    }
};
const allApiProposals = ( Object.freeze(_allApiProposals));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js":
/*!**************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/files/common/files.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AutoSaveConfiguration: () => (/* binding */ AutoSaveConfiguration),
/* harmony export */   ByteSize: () => (/* binding */ ByteSize),
/* harmony export */   ETAG_DISABLED: () => (/* binding */ ETAG_DISABLED),
/* harmony export */   FILES_ASSOCIATIONS_CONFIG: () => (/* binding */ FILES_ASSOCIATIONS_CONFIG),
/* harmony export */   FILES_EXCLUDE_CONFIG: () => (/* binding */ FILES_EXCLUDE_CONFIG),
/* harmony export */   FILES_READONLY_EXCLUDE_CONFIG: () => (/* binding */ FILES_READONLY_EXCLUDE_CONFIG),
/* harmony export */   FILES_READONLY_FROM_PERMISSIONS_CONFIG: () => (/* binding */ FILES_READONLY_FROM_PERMISSIONS_CONFIG),
/* harmony export */   FILES_READONLY_INCLUDE_CONFIG: () => (/* binding */ FILES_READONLY_INCLUDE_CONFIG),
/* harmony export */   FileChangeFilter: () => (/* binding */ FileChangeFilter),
/* harmony export */   FileChangeType: () => (/* binding */ FileChangeType),
/* harmony export */   FileChangesEvent: () => (/* binding */ FileChangesEvent),
/* harmony export */   FileKind: () => (/* binding */ FileKind),
/* harmony export */   FileOperation: () => (/* binding */ FileOperation),
/* harmony export */   FileOperationError: () => (/* binding */ FileOperationError),
/* harmony export */   FileOperationEvent: () => (/* binding */ FileOperationEvent),
/* harmony export */   FileOperationResult: () => (/* binding */ FileOperationResult),
/* harmony export */   FilePermission: () => (/* binding */ FilePermission),
/* harmony export */   FileSystemProviderCapabilities: () => (/* binding */ FileSystemProviderCapabilities),
/* harmony export */   FileSystemProviderError: () => (/* binding */ FileSystemProviderError),
/* harmony export */   FileSystemProviderErrorCode: () => (/* binding */ FileSystemProviderErrorCode),
/* harmony export */   FileType: () => (/* binding */ FileType),
/* harmony export */   HotExitConfiguration: () => (/* binding */ HotExitConfiguration),
/* harmony export */   NotModifiedSinceFileOperationError: () => (/* binding */ NotModifiedSinceFileOperationError),
/* harmony export */   TooLargeFileOperationError: () => (/* binding */ TooLargeFileOperationError),
/* harmony export */   createFileSystemProviderError: () => (/* binding */ createFileSystemProviderError),
/* harmony export */   ensureFileSystemProviderError: () => (/* binding */ ensureFileSystemProviderError),
/* harmony export */   etag: () => (/* binding */ etag),
/* harmony export */   getLargeFileConfirmationLimit: () => (/* binding */ getLargeFileConfirmationLimit),
/* harmony export */   hasFileAtomicDeleteCapability: () => (/* binding */ hasFileAtomicDeleteCapability),
/* harmony export */   hasFileAtomicReadCapability: () => (/* binding */ hasFileAtomicReadCapability),
/* harmony export */   hasFileAtomicWriteCapability: () => (/* binding */ hasFileAtomicWriteCapability),
/* harmony export */   hasFileCloneCapability: () => (/* binding */ hasFileCloneCapability),
/* harmony export */   hasFileFolderCopyCapability: () => (/* binding */ hasFileFolderCopyCapability),
/* harmony export */   hasFileReadStreamCapability: () => (/* binding */ hasFileReadStreamCapability),
/* harmony export */   hasOpenReadWriteCloseCapability: () => (/* binding */ hasOpenReadWriteCloseCapability),
/* harmony export */   hasReadWriteCapability: () => (/* binding */ hasReadWriteCapability),
/* harmony export */   hasReadonlyCapability: () => (/* binding */ hasReadonlyCapability),
/* harmony export */   markAsFileSystemProviderError: () => (/* binding */ markAsFileSystemProviderError),
/* harmony export */   toFileOperationResult: () => (/* binding */ toFileOperationResult),
/* harmony export */   toFileSystemProviderErrorCode: () => (/* binding */ toFileSystemProviderErrorCode),
/* harmony export */   whenProviderRegistered: () => (/* binding */ whenProviderRegistered)
/* harmony export */ });
/* harmony import */ var _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/ternarySearchTree.js */ "./node_modules/vscode/vscode/src/vs/base/common/ternarySearchTree.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/lazy.js */ "./node_modules/vscode/vscode/src/vs/base/common/lazy.js");









const _moduleId = "vs/platform/files/common/files";
var FileType;
( ((function(FileType) {
    FileType[FileType["Unknown"] = 0] = "Unknown";
    FileType[FileType["File"] = 1] = "File";
    FileType[FileType["Directory"] = 2] = "Directory";
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType || (FileType = {}))));
var FilePermission;
( ((function(FilePermission) {
    FilePermission[FilePermission["Readonly"] = 1] = "Readonly";
    FilePermission[FilePermission["Locked"] = 2] = "Locked";
})(FilePermission || (FilePermission = {}))));
var FileChangeFilter;
( ((function(FileChangeFilter) {
    FileChangeFilter[FileChangeFilter["UPDATED"] = 2] = "UPDATED";
    FileChangeFilter[FileChangeFilter["ADDED"] = 4] = "ADDED";
    FileChangeFilter[FileChangeFilter["DELETED"] = 8] = "DELETED";
})(FileChangeFilter || (FileChangeFilter = {}))));
var FileSystemProviderCapabilities;
( ((function(FileSystemProviderCapabilities) {
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["None"] = 0] = "None";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileReadWrite"] = 2] = "FileReadWrite";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileOpenReadWriteClose"] = 4] = "FileOpenReadWriteClose";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileReadStream"] = 16] = "FileReadStream";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileFolderCopy"] = 8] = "FileFolderCopy";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["PathCaseSensitive"] = 1024] = "PathCaseSensitive";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["Readonly"] = 2048] = "Readonly";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["Trash"] = 4096] = "Trash";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileWriteUnlock"] = 8192] = "FileWriteUnlock";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileAtomicRead"] = 16384] = "FileAtomicRead";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileAtomicWrite"] = 32768] = "FileAtomicWrite";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileAtomicDelete"] = 65536] = "FileAtomicDelete";
    FileSystemProviderCapabilities[FileSystemProviderCapabilities["FileClone"] = 131072] = "FileClone";
})(FileSystemProviderCapabilities || (FileSystemProviderCapabilities = {}))));
function hasReadWriteCapability(provider) {
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileReadWrite);
}
function hasFileFolderCopyCapability(provider) {
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileFolderCopy);
}
function hasFileCloneCapability(provider) {
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileClone);
}
function hasOpenReadWriteCloseCapability(provider) {
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileOpenReadWriteClose);
}
function hasFileReadStreamCapability(provider) {
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileReadStream);
}
function hasFileAtomicReadCapability(provider) {
    if (!hasReadWriteCapability(provider)) {
        return false;
    }
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicRead);
}
function hasFileAtomicWriteCapability(provider) {
    if (!hasReadWriteCapability(provider)) {
        return false;
    }
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicWrite);
}
function hasFileAtomicDeleteCapability(provider) {
    return !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicDelete);
}
function hasReadonlyCapability(provider) {
    return !!(provider.capabilities & FileSystemProviderCapabilities.Readonly);
}
var FileSystemProviderErrorCode;
( ((function(FileSystemProviderErrorCode) {
    FileSystemProviderErrorCode["FileExists"] = "EntryExists";
    FileSystemProviderErrorCode["FileNotFound"] = "EntryNotFound";
    FileSystemProviderErrorCode["FileNotADirectory"] = "EntryNotADirectory";
    FileSystemProviderErrorCode["FileIsADirectory"] = "EntryIsADirectory";
    FileSystemProviderErrorCode["FileExceedsStorageQuota"] = "EntryExceedsStorageQuota";
    FileSystemProviderErrorCode["FileTooLarge"] = "EntryTooLarge";
    FileSystemProviderErrorCode["FileWriteLocked"] = "EntryWriteLocked";
    FileSystemProviderErrorCode["NoPermissions"] = "NoPermissions";
    FileSystemProviderErrorCode["Unavailable"] = "Unavailable";
    FileSystemProviderErrorCode["Unknown"] = "Unknown";
})(FileSystemProviderErrorCode || (FileSystemProviderErrorCode = {}))));
class FileSystemProviderError extends Error {
    static create(error, code) {
        const providerError = ( (new FileSystemProviderError( (error.toString()), code)));
        markAsFileSystemProviderError(providerError, code);
        return providerError;
    }
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
function createFileSystemProviderError(error, code) {
    return FileSystemProviderError.create(error, code);
}
function ensureFileSystemProviderError(error) {
    if (!error) {
        return createFileSystemProviderError(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 0, "Unknown Error")), FileSystemProviderErrorCode.Unknown);
    }
    return error;
}
function markAsFileSystemProviderError(error, code) {
    error.name = code ? `${code} (FileSystemError)` : `FileSystemError`;
    return error;
}
function toFileSystemProviderErrorCode(error) {
    if (!error) {
        return FileSystemProviderErrorCode.Unknown;
    }
    if (error instanceof FileSystemProviderError) {
        return error.code;
    }
    const match = /^(.+) \(FileSystemError\)$/.exec(error.name);
    if (!match) {
        return FileSystemProviderErrorCode.Unknown;
    }
    switch (match[1]) {
        case FileSystemProviderErrorCode.FileExists: return FileSystemProviderErrorCode.FileExists;
        case FileSystemProviderErrorCode.FileIsADirectory: return FileSystemProviderErrorCode.FileIsADirectory;
        case FileSystemProviderErrorCode.FileNotADirectory: return FileSystemProviderErrorCode.FileNotADirectory;
        case FileSystemProviderErrorCode.FileNotFound: return FileSystemProviderErrorCode.FileNotFound;
        case FileSystemProviderErrorCode.FileTooLarge: return FileSystemProviderErrorCode.FileTooLarge;
        case FileSystemProviderErrorCode.FileWriteLocked: return FileSystemProviderErrorCode.FileWriteLocked;
        case FileSystemProviderErrorCode.NoPermissions: return FileSystemProviderErrorCode.NoPermissions;
        case FileSystemProviderErrorCode.Unavailable: return FileSystemProviderErrorCode.Unavailable;
    }
    return FileSystemProviderErrorCode.Unknown;
}
function toFileOperationResult(error) {
    if (error instanceof FileOperationError) {
        return error.fileOperationResult;
    }
    switch (toFileSystemProviderErrorCode(error)) {
        case FileSystemProviderErrorCode.FileNotFound:
            return FileOperationResult.FILE_NOT_FOUND;
        case FileSystemProviderErrorCode.FileIsADirectory:
            return FileOperationResult.FILE_IS_DIRECTORY;
        case FileSystemProviderErrorCode.FileNotADirectory:
            return FileOperationResult.FILE_NOT_DIRECTORY;
        case FileSystemProviderErrorCode.FileWriteLocked:
            return FileOperationResult.FILE_WRITE_LOCKED;
        case FileSystemProviderErrorCode.NoPermissions:
            return FileOperationResult.FILE_PERMISSION_DENIED;
        case FileSystemProviderErrorCode.FileExists:
            return FileOperationResult.FILE_MOVE_CONFLICT;
        case FileSystemProviderErrorCode.FileTooLarge:
            return FileOperationResult.FILE_TOO_LARGE;
        default:
            return FileOperationResult.FILE_OTHER_ERROR;
    }
}
var FileOperation;
( ((function(FileOperation) {
    FileOperation[FileOperation["CREATE"] = 0] = "CREATE";
    FileOperation[FileOperation["DELETE"] = 1] = "DELETE";
    FileOperation[FileOperation["MOVE"] = 2] = "MOVE";
    FileOperation[FileOperation["COPY"] = 3] = "COPY";
    FileOperation[FileOperation["WRITE"] = 4] = "WRITE";
})(FileOperation || (FileOperation = {}))));
class FileOperationEvent {
    constructor(resource, operation, target) {
        this.resource = resource;
        this.operation = operation;
        this.target = target;
    }
    isOperation(operation) {
        return this.operation === operation;
    }
}
var FileChangeType;
( ((function(FileChangeType) {
    FileChangeType[FileChangeType["UPDATED"] = 0] = "UPDATED";
    FileChangeType[FileChangeType["ADDED"] = 1] = "ADDED";
    FileChangeType[FileChangeType["DELETED"] = 2] = "DELETED";
})(FileChangeType || (FileChangeType = {}))));
class FileChangesEvent {
    static { this.MIXED_CORRELATION = null; }
    constructor(changes, ignorePathCasing) {
        this.ignorePathCasing = ignorePathCasing;
        this.correlationId = undefined;
        this.added = ( (new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_8__.Lazy(() => {
            const added = _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_0__.TernarySearchTree.forUris(() => this.ignorePathCasing);
            added.fill(( (this.rawAdded.map(resource => [resource, true]))));
            return added;
        })));
        this.updated = ( (new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_8__.Lazy(() => {
            const updated = _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_0__.TernarySearchTree.forUris(() => this.ignorePathCasing);
            updated.fill(( (this.rawUpdated.map(resource => [resource, true]))));
            return updated;
        })));
        this.deleted = ( (new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_8__.Lazy(() => {
            const deleted = _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_0__.TernarySearchTree.forUris(() => this.ignorePathCasing);
            deleted.fill(( (this.rawDeleted.map(resource => [resource, true]))));
            return deleted;
        })));
        this.rawAdded = [];
        this.rawUpdated = [];
        this.rawDeleted = [];
        for (const change of changes) {
            switch (change.type) {
                case FileChangeType.ADDED:
                    this.rawAdded.push(change.resource);
                    break;
                case FileChangeType.UPDATED:
                    this.rawUpdated.push(change.resource);
                    break;
                case FileChangeType.DELETED:
                    this.rawDeleted.push(change.resource);
                    break;
            }
            if (this.correlationId !== FileChangesEvent.MIXED_CORRELATION) {
                if (typeof change.cId === 'number') {
                    if (this.correlationId === undefined) {
                        this.correlationId = change.cId;
                    }
                    else if (this.correlationId !== change.cId) {
                        this.correlationId = FileChangesEvent.MIXED_CORRELATION;
                    }
                }
                else {
                    if (this.correlationId !== undefined) {
                        this.correlationId = FileChangesEvent.MIXED_CORRELATION;
                    }
                }
            }
        }
    }
    contains(resource, ...types) {
        return this.doContains(resource, { includeChildren: false }, ...types);
    }
    affects(resource, ...types) {
        return this.doContains(resource, { includeChildren: true }, ...types);
    }
    doContains(resource, options, ...types) {
        if (!resource) {
            return false;
        }
        const hasTypesFilter = types.length > 0;
        if (!hasTypesFilter || types.includes(FileChangeType.ADDED)) {
            if (this.added.value.get(resource)) {
                return true;
            }
            if (options.includeChildren && this.added.value.findSuperstr(resource)) {
                return true;
            }
        }
        if (!hasTypesFilter || types.includes(FileChangeType.UPDATED)) {
            if (this.updated.value.get(resource)) {
                return true;
            }
            if (options.includeChildren && this.updated.value.findSuperstr(resource)) {
                return true;
            }
        }
        if (!hasTypesFilter || types.includes(FileChangeType.DELETED)) {
            if (this.deleted.value.findSubstr(resource) ) {
                return true;
            }
            if (options.includeChildren && this.deleted.value.findSuperstr(resource)) {
                return true;
            }
        }
        return false;
    }
    gotAdded() {
        return this.rawAdded.length > 0;
    }
    gotDeleted() {
        return this.rawDeleted.length > 0;
    }
    gotUpdated() {
        return this.rawUpdated.length > 0;
    }
    correlates(correlationId) {
        return this.correlationId === correlationId;
    }
    hasCorrelation() {
        return typeof this.correlationId === 'number';
    }
}
class FileOperationError extends Error {
    constructor(message, fileOperationResult, options) {
        super(message);
        this.fileOperationResult = fileOperationResult;
        this.options = options;
    }
}
class TooLargeFileOperationError extends FileOperationError {
    constructor(message, fileOperationResult, size, options) {
        super(message, fileOperationResult, options);
        this.fileOperationResult = fileOperationResult;
        this.size = size;
    }
}
class NotModifiedSinceFileOperationError extends FileOperationError {
    constructor(message, stat, options) {
        super(message, FileOperationResult.FILE_NOT_MODIFIED_SINCE, options);
        this.stat = stat;
    }
}
var FileOperationResult;
( ((function(FileOperationResult) {
    FileOperationResult[FileOperationResult["FILE_IS_DIRECTORY"] = 0] = "FILE_IS_DIRECTORY";
    FileOperationResult[FileOperationResult["FILE_NOT_FOUND"] = 1] = "FILE_NOT_FOUND";
    FileOperationResult[FileOperationResult["FILE_NOT_MODIFIED_SINCE"] = 2] = "FILE_NOT_MODIFIED_SINCE";
    FileOperationResult[FileOperationResult["FILE_MODIFIED_SINCE"] = 3] = "FILE_MODIFIED_SINCE";
    FileOperationResult[FileOperationResult["FILE_MOVE_CONFLICT"] = 4] = "FILE_MOVE_CONFLICT";
    FileOperationResult[FileOperationResult["FILE_WRITE_LOCKED"] = 5] = "FILE_WRITE_LOCKED";
    FileOperationResult[FileOperationResult["FILE_PERMISSION_DENIED"] = 6] = "FILE_PERMISSION_DENIED";
    FileOperationResult[FileOperationResult["FILE_TOO_LARGE"] = 7] = "FILE_TOO_LARGE";
    FileOperationResult[FileOperationResult["FILE_INVALID_PATH"] = 8] = "FILE_INVALID_PATH";
    FileOperationResult[FileOperationResult["FILE_NOT_DIRECTORY"] = 9] = "FILE_NOT_DIRECTORY";
    FileOperationResult[FileOperationResult["FILE_OTHER_ERROR"] = 10] = "FILE_OTHER_ERROR";
})(FileOperationResult || (FileOperationResult = {}))));
const AutoSaveConfiguration = {
    OFF: 'off',
    AFTER_DELAY: 'afterDelay',
    ON_FOCUS_CHANGE: 'onFocusChange',
    ON_WINDOW_CHANGE: 'onWindowChange'
};
const HotExitConfiguration = {
    OFF: 'off',
    ON_EXIT: 'onExit',
    ON_EXIT_AND_WINDOW_CLOSE: 'onExitAndWindowClose'
};
const FILES_ASSOCIATIONS_CONFIG = 'files.associations';
const FILES_EXCLUDE_CONFIG = 'files.exclude';
const FILES_READONLY_INCLUDE_CONFIG = 'files.readonlyInclude';
const FILES_READONLY_EXCLUDE_CONFIG = 'files.readonlyExclude';
const FILES_READONLY_FROM_PERMISSIONS_CONFIG = 'files.readonlyFromPermissions';
var FileKind;
( ((function(FileKind) {
    FileKind[FileKind["FILE"] = 0] = "FILE";
    FileKind[FileKind["FOLDER"] = 1] = "FOLDER";
    FileKind[FileKind["ROOT_FOLDER"] = 2] = "ROOT_FOLDER";
})(FileKind || (FileKind = {}))));
const ETAG_DISABLED = '';
function etag(stat) {
    if (typeof stat.size !== 'number' || typeof stat.mtime !== 'number') {
        return undefined;
    }
    return ( (stat.mtime.toString(29))) + ( (stat.size.toString(31)));
}
async function whenProviderRegistered(file, fileService) {
    if (fileService.hasProvider(( (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.from({ scheme: file.scheme }))))) {
        return;
    }
    return (
         (new Promise(resolve => {
            const disposable = fileService.onDidChangeFileSystemProviderRegistrations(e => {
                if (e.scheme === file.scheme && e.added) {
                    disposable.dispose();
                    resolve();
                }
            });
        }))
    );
}
class ByteSize {
    static { this.KB = 1024; }
    static { this.MB = ByteSize.KB * ByteSize.KB; }
    static { this.GB = ByteSize.MB * ByteSize.KB; }
    static { this.TB = ByteSize.GB * ByteSize.KB; }
    static formatSize(size) {
        if (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_3__.isNumber)(size)) {
            size = 0;
        }
        if (size < ByteSize.KB) {
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 1, "{0}B", size.toFixed(0)));
        }
        if (size < ByteSize.MB) {
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 2, "{0}KB", (size / ByteSize.KB).toFixed(2)));
        }
        if (size < ByteSize.GB) {
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 3, "{0}MB", (size / ByteSize.MB).toFixed(2)));
        }
        if (size < ByteSize.TB) {
            return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 4, "{0}GB", (size / ByteSize.GB).toFixed(2)));
        }
        return ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 5, "{0}TB", (size / ByteSize.TB).toFixed(2)));
    }
}
function getLargeFileConfirmationLimit(arg) {
    const isRemote = typeof arg === 'string' || arg?.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_7__.Schemas.vscodeRemote;
    const isLocal = typeof arg !== 'string' && arg?.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_7__.Schemas.file;
    if (isLocal) {
        return 1024 * ByteSize.MB;
    }
    if (isRemote) {
        return 10 * ByteSize.MB;
    }
    if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_6__.isWeb) {
        return 50 * ByteSize.MB;
    }
    return 1024 * ByteSize.MB;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.service.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/files/common/files.service.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IFileService: () => (/* binding */ IFileService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IFileService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('fileService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/descriptors.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/instantiation/common/descriptors.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SyncDescriptor: () => (/* binding */ SyncDescriptor)
/* harmony export */ });
class SyncDescriptor {
    constructor(ctor, staticArguments = [], supportsDelayedInstantiation = false) {
        this.ctor = ctor;
        this.staticArguments = staticArguments;
        this.supportsDelayedInstantiation = supportsDelayedInstantiation;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/extensions.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/instantiation/common/extensions.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstantiationType: () => (/* binding */ InstantiationType),
/* harmony export */   getSingletonServiceDescriptors: () => (/* binding */ getSingletonServiceDescriptors),
/* harmony export */   registerSingleton: () => (/* binding */ registerSingleton)
/* harmony export */ });
/* harmony import */ var _descriptors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./descriptors.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/descriptors.js");

const _registry = [];
var InstantiationType;
( (function(InstantiationType) {
    InstantiationType[InstantiationType["Eager"] = 0] = "Eager";
    InstantiationType[InstantiationType["Delayed"] = 1] = "Delayed";
})(InstantiationType || (InstantiationType = {})));
function registerSingleton(id, ctorOrDescriptor, supportsDelayedInstantiation) {
    if (!(ctorOrDescriptor instanceof _descriptors_js__WEBPACK_IMPORTED_MODULE_0__.SyncDescriptor)) {
        ctorOrDescriptor = ( new _descriptors_js__WEBPACK_IMPORTED_MODULE_0__.SyncDescriptor(ctorOrDescriptor, [], Boolean(supportsDelayedInstantiation)));
    }
    _registry.push([id, ctorOrDescriptor]);
}
function getSingletonServiceDescriptors() {
    return _registry;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/graph.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/instantiation/common/graph.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Graph: () => (/* binding */ Graph),
/* harmony export */   Node: () => (/* binding */ Node)
/* harmony export */ });
class Node {
    constructor(key, data) {
        this.key = key;
        this.data = data;
        this.incoming = ( new Map());
        this.outgoing = ( new Map());
    }
}
class Graph {
    constructor(_hashFn) {
        this._hashFn = _hashFn;
        this._nodes = ( new Map());
    }
    roots() {
        const ret = [];
        for (const node of ( this._nodes.values())) {
            if (node.outgoing.size === 0) {
                ret.push(node);
            }
        }
        return ret;
    }
    insertEdge(from, to) {
        const fromNode = this.lookupOrInsertNode(from);
        const toNode = this.lookupOrInsertNode(to);
        fromNode.outgoing.set(toNode.key, toNode);
        toNode.incoming.set(fromNode.key, fromNode);
    }
    removeNode(data) {
        const key = this._hashFn(data);
        this._nodes.delete(key);
        for (const node of ( this._nodes.values())) {
            node.outgoing.delete(key);
            node.incoming.delete(key);
        }
    }
    lookupOrInsertNode(data) {
        const key = this._hashFn(data);
        let node = this._nodes.get(key);
        if (!node) {
            node = ( new Node(key, data));
            this._nodes.set(key, node);
        }
        return node;
    }
    lookup(data) {
        return this._nodes.get(this._hashFn(data));
    }
    isEmpty() {
        return this._nodes.size === 0;
    }
    toString() {
        const data = [];
        for (const [key, value] of this._nodes) {
            data.push(`${key}\n\t(-> incoming)[${[...( value.incoming.keys())].join(', ')}]\n\t(outgoing ->)[${[...( value.outgoing.keys())].join(',')}]\n`);
        }
        return data.join('\n');
    }
    findCycleSlow() {
        for (const [id, node] of this._nodes) {
            const seen = ( new Set([id]));
            const res = this._findCycle(node, seen);
            if (res) {
                return res;
            }
        }
        return undefined;
    }
    _findCycle(node, seen) {
        for (const [id, outgoing] of node.outgoing) {
            if (( seen.has(id))) {
                return [...seen, id].join(' -> ');
            }
            seen.add(id);
            const value = this._findCycle(outgoing, seen);
            if (value) {
                return value;
            }
            seen.delete(id);
        }
        return undefined;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IInstantiationService: () => (/* binding */ IInstantiationService),
/* harmony export */   _util: () => (/* binding */ _util),
/* harmony export */   createDecorator: () => (/* binding */ createDecorator),
/* harmony export */   refineServiceDecorator: () => (/* binding */ refineServiceDecorator)
/* harmony export */ });
var _util;
( (function(_util) {
    _util.serviceIds = ( new Map());
    _util.DI_TARGET = '$di$target';
    _util.DI_DEPENDENCIES = '$di$dependencies';
    function getServiceDependencies(ctor) {
        return ctor[_util.DI_DEPENDENCIES] || [];
    }
    _util.getServiceDependencies = getServiceDependencies;
})(_util || (_util = {})));
const IInstantiationService = ( createDecorator('instantiationService'));
function storeServiceDependency(id, target, index) {
    if (target[_util.DI_TARGET] === target) {
        target[_util.DI_DEPENDENCIES].push({ id, index });
    }
    else {
        target[_util.DI_DEPENDENCIES] = [{ id, index }];
        target[_util.DI_TARGET] = target;
    }
}
function createDecorator(serviceId) {
    if (( _util.serviceIds.has(serviceId))) {
        return _util.serviceIds.get(serviceId);
    }
    const id = function (target, key, index) {
        if (arguments.length !== 3) {
            throw ( new Error('@IServiceName-decorator can only be used to decorate a parameter'));
        }
        storeServiceDependency(id, target, index);
    };
    id.toString = () => serviceId;
    _util.serviceIds.set(serviceId, id);
    return id;
}
function refineServiceDecorator(serviceIdentifier) {
    return serviceIdentifier;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiationService.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiationService.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstantiationService: () => (/* binding */ InstantiationService),
/* harmony export */   Trace: () => (/* binding */ Trace)
/* harmony export */ });
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _descriptors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./descriptors.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/descriptors.js");
/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./graph.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/graph.js");
/* harmony import */ var _instantiation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _serviceCollection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./serviceCollection.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/serviceCollection.js");
/* harmony import */ var _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/linkedList.js */ "./node_modules/vscode/vscode/src/vs/base/common/linkedList.js");








const _enableAllTracing = false;
class CyclicDependencyError extends Error {
    constructor(graph) {
        super('cyclic dependency between services');
        this.message = graph.findCycleSlow() ?? `UNABLE to detect cycle, dumping graph: \n${( graph.toString())}`;
    }
}
class InstantiationService {
    constructor(_services = ( new _serviceCollection_js__WEBPACK_IMPORTED_MODULE_6__.ServiceCollection()), _strict = false, _parent, _enableTracing = _enableAllTracing) {
        this._services = _services;
        this._strict = _strict;
        this._parent = _parent;
        this._enableTracing = _enableTracing;
        this._isDisposed = false;
        this._servicesToMaybeDispose = ( new Set());
        this._children = ( new Set());
        this._activeInstantiations = ( new Set());
        this._services.set(_instantiation_js__WEBPACK_IMPORTED_MODULE_5__.IInstantiationService, this);
        this._globalGraph = _enableTracing ? _parent?._globalGraph ?? ( new _graph_js__WEBPACK_IMPORTED_MODULE_4__.Graph(e => e)) : undefined;
    }
    dispose() {
        if (!this._isDisposed) {
            this._isDisposed = true;
            (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.dispose)(this._children);
            this._children.clear();
            for (const candidate of this._servicesToMaybeDispose) {
                if ((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.isDisposable)(candidate)) {
                    candidate.dispose();
                }
            }
            this._servicesToMaybeDispose.clear();
        }
    }
    _throwIfDisposed() {
        if (this._isDisposed) {
            throw ( new Error('InstantiationService has been disposed'));
        }
    }
    createChild(services, store) {
        this._throwIfDisposed();
        const that = this;
        const result = new (class extends InstantiationService {
            dispose() {
                that._children.delete(result);
                super.dispose();
            }
        })(services, this._strict, this, this._enableTracing);
        this._children.add(result);
        store?.add(result);
        return result;
    }
    invokeFunction(fn, ...args) {
        this._throwIfDisposed();
        const _trace = Trace.traceInvocation(this._enableTracing, fn);
        let _done = false;
        try {
            const accessor = {
                get: (id) => {
                    if (_done) {
                        throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.illegalState)('service accessor is only valid during the invocation of its target method');
                    }
                    const result = this._getOrCreateServiceInstance(id, _trace);
                    if (!result) {
                        throw ( new Error(`[invokeFunction] unknown service '${id}'`));
                    }
                    return result;
                }
            };
            return fn(accessor, ...args);
        }
        finally {
            _done = true;
            _trace.stop();
        }
    }
    createInstance(ctorOrDescriptor, ...rest) {
        this._throwIfDisposed();
        let _trace;
        let result;
        if (ctorOrDescriptor instanceof _descriptors_js__WEBPACK_IMPORTED_MODULE_3__.SyncDescriptor) {
            _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor.ctor);
            result = this._createInstance(ctorOrDescriptor.ctor, ctorOrDescriptor.staticArguments.concat(rest), _trace);
        }
        else {
            _trace = Trace.traceCreation(this._enableTracing, ctorOrDescriptor);
            result = this._createInstance(ctorOrDescriptor, rest, _trace);
        }
        _trace.stop();
        return result;
    }
    _createInstance(ctor, args = [], _trace) {
        const serviceDependencies = _instantiation_js__WEBPACK_IMPORTED_MODULE_5__._util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);
        const serviceArgs = [];
        for (const dependency of serviceDependencies) {
            const service = this._getOrCreateServiceInstance(dependency.id, _trace);
            if (!service) {
                this._throwIfStrict(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`, false);
            }
            serviceArgs.push(service);
        }
        const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;
        if (args.length !== firstServiceArgPos) {
            console.trace(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);
            const delta = firstServiceArgPos - args.length;
            if (delta > 0) {
                args = args.concat(( new Array(delta)));
            }
            else {
                args = args.slice(0, firstServiceArgPos);
            }
        }
        return Reflect.construct(ctor, args.concat(serviceArgs));
    }
    _setCreatedServiceInstance(id, instance) {
        if (this._services.get(id) instanceof _descriptors_js__WEBPACK_IMPORTED_MODULE_3__.SyncDescriptor) {
            this._services.set(id, instance);
        }
        else if (this._parent) {
            this._parent._setCreatedServiceInstance(id, instance);
        }
        else {
            throw ( new Error('illegalState - setting UNKNOWN service instance'));
        }
    }
    _getServiceInstanceOrDescriptor(id) {
        const instanceOrDesc = this._services.get(id);
        if (!instanceOrDesc && this._parent) {
            return this._parent._getServiceInstanceOrDescriptor(id);
        }
        else {
            return instanceOrDesc;
        }
    }
    _getOrCreateServiceInstance(id, _trace) {
        if (this._globalGraph && this._globalGraphImplicitDependency) {
            this._globalGraph.insertEdge(this._globalGraphImplicitDependency, String(id));
        }
        const thing = this._getServiceInstanceOrDescriptor(id);
        if (thing instanceof _descriptors_js__WEBPACK_IMPORTED_MODULE_3__.SyncDescriptor) {
            return this._safeCreateAndCacheServiceInstance(id, thing, _trace.branch(id, true));
        }
        else {
            _trace.branch(id, false);
            return thing;
        }
    }
    _safeCreateAndCacheServiceInstance(id, desc, _trace) {
        if (( this._activeInstantiations.has(id))) {
            throw ( new Error(`illegal state - RECURSIVELY instantiating service '${id}'`));
        }
        this._activeInstantiations.add(id);
        try {
            return this._createAndCacheServiceInstance(id, desc, _trace);
        }
        finally {
            this._activeInstantiations.delete(id);
        }
    }
    _createAndCacheServiceInstance(id, desc, _trace) {
        const graph = ( new _graph_js__WEBPACK_IMPORTED_MODULE_4__.Graph(data => ( data.id.toString())));
        let cycleCount = 0;
        const stack = [{ id, desc, _trace }];
        while (stack.length) {
            const item = stack.pop();
            graph.lookupOrInsertNode(item);
            if (cycleCount++ > 1000) {
                throw ( new CyclicDependencyError(graph));
            }
            for (const dependency of _instantiation_js__WEBPACK_IMPORTED_MODULE_5__._util.getServiceDependencies(item.desc.ctor)) {
                const instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);
                if (!instanceOrDesc) {
                    this._throwIfStrict(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`, true);
                }
                this._globalGraph?.insertEdge(String(item.id), String(dependency.id));
                if (instanceOrDesc instanceof _descriptors_js__WEBPACK_IMPORTED_MODULE_3__.SyncDescriptor) {
                    const d = { id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, true) };
                    if (!graph.lookup(d)) {
                        stack.push(d);
                    }
                    graph.insertEdge(item, d);
                }
            }
        }
        while (true) {
            const roots = graph.roots();
            if (roots.length === 0) {
                if (!graph.isEmpty()) {
                    throw ( new CyclicDependencyError(graph));
                }
                break;
            }
            for (const { data } of roots) {
                const instanceOrDesc = this._getServiceInstanceOrDescriptor(data.id);
                if (instanceOrDesc instanceof _descriptors_js__WEBPACK_IMPORTED_MODULE_3__.SyncDescriptor) {
                    const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);
                    this._setCreatedServiceInstance(data.id, instance);
                }
                graph.removeNode(data);
            }
        }
        return this._getServiceInstanceOrDescriptor(id);
    }
    _createServiceInstanceWithOwner(id, ctor, args = [], supportsDelayedInstantiation, _trace) {
        if (this._services.get(id) instanceof _descriptors_js__WEBPACK_IMPORTED_MODULE_3__.SyncDescriptor) {
            return this._createServiceInstance(id, ctor, args, supportsDelayedInstantiation, _trace, this._servicesToMaybeDispose);
        }
        else if (this._parent) {
            return this._parent._createServiceInstanceWithOwner(id, ctor, args, supportsDelayedInstantiation, _trace);
        }
        else {
            throw ( new Error(`illegalState - creating UNKNOWN service instance ${ctor.name}`));
        }
    }
    _createServiceInstance(id, ctor, args = [], supportsDelayedInstantiation, _trace, disposeBucket) {
        if (!supportsDelayedInstantiation) {
            const result = this._createInstance(ctor, args, _trace);
            disposeBucket.add(result);
            return result;
        }
        else {
            const child = ( new InstantiationService(undefined, this._strict, this, this._enableTracing));
            child._globalGraphImplicitDependency = String(id);
            const earlyListeners = ( new Map());
            const idle = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.GlobalIdleValue(() => {
                const result = child._createInstance(ctor, args, _trace);
                for (const [key, values] of earlyListeners) {
                    const candidate = result[key];
                    if (typeof candidate === 'function') {
                        for (const value of values) {
                            value.disposable = candidate.apply(result, value.listener);
                        }
                    }
                }
                earlyListeners.clear();
                disposeBucket.add(result);
                return result;
            }));
            return ( new Proxy(Object.create(null), {
                get(target, key) {
                    if (!idle.isInitialized) {
                        if (typeof key === 'string' && (key.startsWith('onDid') || key.startsWith('onWill'))) {
                            let list = earlyListeners.get(key);
                            if (!list) {
                                list = ( new _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_7__.LinkedList());
                                earlyListeners.set(key, list);
                            }
                            const event = (callback, thisArg, disposables) => {
                                if (idle.isInitialized) {
                                    return idle.value[key](callback, thisArg, disposables);
                                }
                                else {
                                    const entry = { listener: [callback, thisArg, disposables], disposable: undefined };
                                    const rm = list.push(entry);
                                    const result = (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {
                                        rm();
                                        entry.disposable?.dispose();
                                    });
                                    return result;
                                }
                            };
                            return event;
                        }
                    }
                    if (key in target) {
                        return target[key];
                    }
                    const obj = idle.value;
                    let prop = obj[key];
                    if (typeof prop !== 'function') {
                        return prop;
                    }
                    prop = prop.bind(obj);
                    target[key] = prop;
                    return prop;
                },
                set(_target, p, value) {
                    idle.value[p] = value;
                    return true;
                },
                getPrototypeOf(_target) {
                    return ctor.prototype;
                }
            }));
        }
    }
    _throwIfStrict(msg, printWarning) {
        if (printWarning) {
            console.warn(msg);
        }
        if (this._strict) {
            throw ( new Error(msg));
        }
    }
}
var TraceType;
( (function(TraceType) {
    TraceType[TraceType["None"] = 0] = "None";
    TraceType[TraceType["Creation"] = 1] = "Creation";
    TraceType[TraceType["Invocation"] = 2] = "Invocation";
    TraceType[TraceType["Branch"] = 3] = "Branch";
})(TraceType || (TraceType = {})));
class Trace {
    static { this.all = ( new Set()); }
    static { this._None = new (class extends Trace {
        constructor() { super(TraceType.None, null); }
        stop() { }
        branch() { return this; }
    }); }
    static traceInvocation(_enableTracing, ctor) {
        return !_enableTracing ? Trace._None : ( new Trace(TraceType.Invocation, ctor.name || ( new Error()).stack.split('\n').slice(3, 4).join('\n')));
    }
    static traceCreation(_enableTracing, ctor) {
        return !_enableTracing ? Trace._None : ( new Trace(TraceType.Creation, ctor.name));
    }
    static { this._totals = 0; }
    constructor(type, name) {
        this.type = type;
        this.name = name;
        this._start = Date.now();
        this._dep = [];
    }
    branch(id, first) {
        const child = ( new Trace(TraceType.Branch, ( id.toString())));
        this._dep.push([id, first, child]);
        return child;
    }
    stop() {
        const dur = Date.now() - this._start;
        Trace._totals += dur;
        let causedCreation = false;
        function printChild(n, trace) {
            const res = [];
            const prefix = ( new Array(n + 1)).join('\t');
            for (const [id, first, child] of trace._dep) {
                if (first && child) {
                    causedCreation = true;
                    res.push(`${prefix}CREATES -> ${id}`);
                    const nested = printChild(n + 1, child);
                    if (nested) {
                        res.push(nested);
                    }
                }
                else {
                    res.push(`${prefix}uses -> ${id}`);
                }
            }
            return res.join('\n');
        }
        const lines = [
            `${this.type === TraceType.Creation ? 'CREATE' : 'CALL'} ${this.name}`,
            `${printChild(1, this)}`,
            `DONE, took ${dur.toFixed(2)}ms (grand total ${Trace._totals.toFixed(2)}ms)`
        ];
        if (dur > 2 || causedCreation) {
            Trace.all.add(lines.join('\n'));
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/serviceCollection.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/instantiation/common/serviceCollection.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ServiceCollection: () => (/* binding */ ServiceCollection)
/* harmony export */ });
class ServiceCollection {
    constructor(...entries) {
        this._entries = ( new Map());
        for (const [id, service] of entries) {
            this.set(id, service);
        }
    }
    set(id, instanceOrDescriptor) {
        const result = this._entries.get(id);
        this._entries.set(id, instanceOrDescriptor);
        return result;
    }
    has(id) {
        return ( this._entries.has(id));
    }
    get(id) {
        return this._entries.get(id);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Extensions: () => (/* binding */ Extensions)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");


const Extensions = {
    JSONContribution: 'base.contributions.json'
};
function normalizeId(id) {
    if (id.length > 0 && id.charAt(id.length - 1) === '#') {
        return id.substring(0, id.length - 1);
    }
    return id;
}
class JSONContributionRegistry {
    constructor() {
        this._onDidChangeSchema = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidChangeSchema = this._onDidChangeSchema.event;
        this.schemasById = {};
    }
    registerSchema(uri, unresolvedSchemaContent) {
        this.schemasById[normalizeId(uri)] = unresolvedSchemaContent;
        this._onDidChangeSchema.fire(uri);
    }
    notifySchemaChanged(uri) {
        this._onDidChangeSchema.fire(uri);
    }
    getSchemaContributions() {
        return {
            schemas: this.schemasById,
        };
    }
}
const jsonContributionRegistry = ( new JSONContributionRegistry());
_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.Registry.add(Extensions.JSONContribution, jsonContributionRegistry);



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/log/common/log.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractLogger: () => (/* binding */ AbstractLogger),
/* harmony export */   AbstractLoggerService: () => (/* binding */ AbstractLoggerService),
/* harmony export */   AbstractMessageLogger: () => (/* binding */ AbstractMessageLogger),
/* harmony export */   CONTEXT_LOG_LEVEL: () => (/* binding */ CONTEXT_LOG_LEVEL),
/* harmony export */   ConsoleLogger: () => (/* binding */ ConsoleLogger),
/* harmony export */   DEFAULT_LOG_LEVEL: () => (/* binding */ DEFAULT_LOG_LEVEL),
/* harmony export */   LogLevel: () => (/* binding */ LogLevel),
/* harmony export */   LogLevelToLocalizedString: () => (/* binding */ LogLevelToLocalizedString),
/* harmony export */   LogLevelToString: () => (/* binding */ LogLevelToString),
/* harmony export */   MultiplexLogger: () => (/* binding */ MultiplexLogger),
/* harmony export */   NullLogService: () => (/* binding */ NullLogService),
/* harmony export */   NullLogger: () => (/* binding */ NullLogger),
/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),
/* harmony export */   isLogLevel: () => (/* binding */ isLogLevel),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   parseLogLevel: () => (/* binding */ parseLogLevel)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errorMessage.js */ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_hash_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/hash.js */ "./node_modules/vscode/vscode/src/vs/base/common/hash.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");











const _moduleId = "vs/platform/log/common/log";
function isLogLevel(thing) {
    return (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isNumber)(thing);
}
var LogLevel;
( ((function(LogLevel) {
    LogLevel[LogLevel["Off"] = 0] = "Off";
    LogLevel[LogLevel["Trace"] = 1] = "Trace";
    LogLevel[LogLevel["Debug"] = 2] = "Debug";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Warning"] = 4] = "Warning";
    LogLevel[LogLevel["Error"] = 5] = "Error";
})(LogLevel || (LogLevel = {}))));
const DEFAULT_LOG_LEVEL = LogLevel.Info;
function log(logger, level, message) {
    switch (level) {
        case LogLevel.Trace:
            logger.trace(message);
            break;
        case LogLevel.Debug:
            logger.debug(message);
            break;
        case LogLevel.Info:
            logger.info(message);
            break;
        case LogLevel.Warning:
            logger.warn(message);
            break;
        case LogLevel.Error:
            logger.error(message);
            break;
        case LogLevel.Off:  break;
        default: throw ( (new Error(`Invalid log level ${level}`)));
    }
}
function format(args, verbose = false) {
    let result = '';
    for (let i = 0; i < args.length; i++) {
        let a = args[i];
        if (a instanceof Error) {
            a = (0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_1__.toErrorMessage)(a, verbose);
        }
        if (typeof a === 'object') {
            try {
                a = JSON.stringify(a);
            }
            catch (e) { }
        }
        result += (i > 0 ? ' ' : '') + a;
    }
    return result;
}
class AbstractLogger extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.Disposable {
    constructor() {
        super(...arguments);
        this.level = DEFAULT_LOG_LEVEL;
        this._onDidChangeLogLevel = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;
    }
    setLevel(level) {
        if (this.level !== level) {
            this.level = level;
            this._onDidChangeLogLevel.fire(this.level);
        }
    }
    getLevel() {
        return this.level;
    }
    checkLogLevel(level) {
        return this.level !== LogLevel.Off && this.level <= level;
    }
}
class AbstractMessageLogger extends AbstractLogger {
    constructor(logAlways) {
        super();
        this.logAlways = logAlways;
    }
    checkLogLevel(level) {
        return this.logAlways || super.checkLogLevel(level);
    }
    trace(message, ...args) {
        if (this.checkLogLevel(LogLevel.Trace)) {
            this.log(LogLevel.Trace, format([message, ...args], true));
        }
    }
    debug(message, ...args) {
        if (this.checkLogLevel(LogLevel.Debug)) {
            this.log(LogLevel.Debug, format([message, ...args]));
        }
    }
    info(message, ...args) {
        if (this.checkLogLevel(LogLevel.Info)) {
            this.log(LogLevel.Info, format([message, ...args]));
        }
    }
    warn(message, ...args) {
        if (this.checkLogLevel(LogLevel.Warning)) {
            this.log(LogLevel.Warning, format([message, ...args]));
        }
    }
    error(message, ...args) {
        if (this.checkLogLevel(LogLevel.Error)) {
            if (message instanceof Error) {
                const array = Array.prototype.slice.call(arguments);
                array[0] = message.stack;
                this.log(LogLevel.Error, format(array));
            }
            else {
                this.log(LogLevel.Error, format([message, ...args]));
            }
        }
    }
    flush() { }
}
class ConsoleLogger extends AbstractLogger {
    constructor(logLevel = DEFAULT_LOG_LEVEL, useColors = true) {
        super();
        this.useColors = useColors;
        this.setLevel(logLevel);
    }
    trace(message, ...args) {
        if (this.checkLogLevel(LogLevel.Trace)) {
            if (this.useColors) {
                console.log('%cTRACE', 'color: #888', message, ...args);
            }
            else {
                console.log(message, ...args);
            }
        }
    }
    debug(message, ...args) {
        if (this.checkLogLevel(LogLevel.Debug)) {
            if (this.useColors) {
                console.log('%cDEBUG', 'background: #eee; color: #888', message, ...args);
            }
            else {
                console.log(message, ...args);
            }
        }
    }
    info(message, ...args) {
        if (this.checkLogLevel(LogLevel.Info)) {
            if (this.useColors) {
                console.log('%c INFO', 'color: #33f', message, ...args);
            }
            else {
                console.log(message, ...args);
            }
        }
    }
    warn(message, ...args) {
        if (this.checkLogLevel(LogLevel.Warning)) {
            if (this.useColors) {
                console.log('%c WARN', 'color: #993', message, ...args);
            }
            else {
                console.log(message, ...args);
            }
        }
    }
    error(message, ...args) {
        if (this.checkLogLevel(LogLevel.Error)) {
            if (this.useColors) {
                console.log('%c  ERR', 'color: #f33', message, ...args);
            }
            else {
                console.error(message, ...args);
            }
        }
    }
    flush() {
    }
}
class MultiplexLogger extends AbstractLogger {
    constructor(loggers) {
        super();
        this.loggers = loggers;
        if (loggers.length) {
            this.setLevel(loggers[0].getLevel());
        }
    }
    setLevel(level) {
        for (const logger of this.loggers) {
            logger.setLevel(level);
        }
        super.setLevel(level);
    }
    trace(message, ...args) {
        for (const logger of this.loggers) {
            logger.trace(message, ...args);
        }
    }
    debug(message, ...args) {
        for (const logger of this.loggers) {
            logger.debug(message, ...args);
        }
    }
    info(message, ...args) {
        for (const logger of this.loggers) {
            logger.info(message, ...args);
        }
    }
    warn(message, ...args) {
        for (const logger of this.loggers) {
            logger.warn(message, ...args);
        }
    }
    error(message, ...args) {
        for (const logger of this.loggers) {
            logger.error(message, ...args);
        }
    }
    flush() {
        for (const logger of this.loggers) {
            logger.flush();
        }
    }
    dispose() {
        for (const logger of this.loggers) {
            logger.dispose();
        }
        super.dispose();
    }
}
class AbstractLoggerService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.Disposable {
    constructor(logLevel, logsHome, loggerResources) {
        super();
        this.logLevel = logLevel;
        this.logsHome = logsHome;
        this._loggers = ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_5__.ResourceMap()));
        this._onDidChangeLoggers = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidChangeLoggers = this._onDidChangeLoggers.event;
        this._onDidChangeLogLevel = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidChangeLogLevel = this._onDidChangeLogLevel.event;
        this._onDidChangeVisibility = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidChangeVisibility = this._onDidChangeVisibility.event;
        if (loggerResources) {
            for (const loggerResource of loggerResources) {
                this._loggers.set(loggerResource.resource, { logger: undefined, info: loggerResource });
            }
        }
    }
    getLoggerEntry(resourceOrId) {
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isString)(resourceOrId)) {
            return [...( (this._loggers.values()))].find(logger => logger.info.id === resourceOrId);
        }
        return this._loggers.get(resourceOrId);
    }
    getLogger(resourceOrId) {
        return this.getLoggerEntry(resourceOrId)?.logger;
    }
    createLogger(idOrResource, options) {
        const resource = this.toResource(idOrResource);
        const id = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isString)(idOrResource) ? idOrResource : (options?.id ?? ( ((0,_base_common_hash_js__WEBPACK_IMPORTED_MODULE_3__.hash)(( (resource.toString()))).toString(16))));
        let logger = this._loggers.get(resource)?.logger;
        const logLevel = options?.logLevel === 'always' ? LogLevel.Trace : options?.logLevel;
        if (!logger) {
            logger = this.doCreateLogger(resource, logLevel ?? this.getLogLevel(resource) ?? this.logLevel, { ...options, id });
        }
        const loggerEntry = {
            logger,
            info: { resource, id, logLevel, name: options?.name, hidden: options?.hidden, extensionId: options?.extensionId, when: options?.when }
        };
        this.registerLogger(loggerEntry.info);
        this._loggers.set(resource, loggerEntry);
        return logger;
    }
    toResource(idOrResource) {
        return (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isString)(idOrResource) ? (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_7__.joinPath)(this.logsHome, `${idOrResource}.log`) : idOrResource;
    }
    setLogLevel(arg1, arg2) {
        if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_9__.URI.isUri(arg1)) {
            const resource = arg1;
            const logLevel = arg2;
            const logger = this._loggers.get(resource);
            if (logger && logLevel !== logger.info.logLevel) {
                logger.info.logLevel = logLevel === this.logLevel ? undefined : logLevel;
                logger.logger?.setLevel(logLevel);
                this._loggers.set(logger.info.resource, logger);
                this._onDidChangeLogLevel.fire([resource, logLevel]);
            }
        }
        else {
            this.logLevel = arg1;
            for (const [resource, logger] of this._loggers.entries()) {
                if (this._loggers.get(resource)?.info.logLevel === undefined) {
                    logger.logger?.setLevel(this.logLevel);
                }
            }
            this._onDidChangeLogLevel.fire(this.logLevel);
        }
    }
    setVisibility(resourceOrId, visibility) {
        const logger = this.getLoggerEntry(resourceOrId);
        if (logger && visibility !== !logger.info.hidden) {
            logger.info.hidden = !visibility;
            this._loggers.set(logger.info.resource, logger);
            this._onDidChangeVisibility.fire([logger.info.resource, visibility]);
        }
    }
    getLogLevel(resource) {
        let logLevel;
        if (resource) {
            logLevel = this._loggers.get(resource)?.info.logLevel;
        }
        return logLevel ?? this.logLevel;
    }
    registerLogger(resource) {
        const existing = this._loggers.get(resource.resource);
        if (existing) {
            if (existing.info.hidden !== resource.hidden) {
                this.setVisibility(resource.resource, !resource.hidden);
            }
        }
        else {
            this._loggers.set(resource.resource, { info: resource, logger: undefined });
            this._onDidChangeLoggers.fire({ added: [resource], removed: [] });
        }
    }
    deregisterLogger(resource) {
        const existing = this._loggers.get(resource);
        if (existing) {
            if (existing.logger) {
                existing.logger.dispose();
            }
            this._loggers.delete(resource);
            this._onDidChangeLoggers.fire({ added: [], removed: [existing.info] });
        }
    }
    *getRegisteredLoggers() {
        for (const entry of ( (this._loggers.values()))) {
            yield entry.info;
        }
    }
    getRegisteredLogger(resource) {
        return this._loggers.get(resource)?.info;
    }
    dispose() {
        this._loggers.forEach(logger => logger.logger?.dispose());
        this._loggers.clear();
        super.dispose();
    }
}
class NullLogger {
    constructor() {
        this.onDidChangeLogLevel = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())).event;
    }
    setLevel(level) { }
    getLevel() { return LogLevel.Info; }
    trace(message, ...args) { }
    debug(message, ...args) { }
    info(message, ...args) { }
    warn(message, ...args) { }
    error(message, ...args) { }
    critical(message, ...args) { }
    dispose() { }
    flush() { }
}
class NullLogService extends NullLogger {
}
function getLogLevel(environmentService) {
    if (environmentService.verbose) {
        return LogLevel.Trace;
    }
    if (typeof environmentService.logLevel === 'string') {
        const logLevel = parseLogLevel(environmentService.logLevel.toLowerCase());
        if (logLevel !== undefined) {
            return logLevel;
        }
    }
    return DEFAULT_LOG_LEVEL;
}
function LogLevelToString(logLevel) {
    switch (logLevel) {
        case LogLevel.Trace: return 'trace';
        case LogLevel.Debug: return 'debug';
        case LogLevel.Info: return 'info';
        case LogLevel.Warning: return 'warn';
        case LogLevel.Error: return 'error';
        case LogLevel.Off: return 'off';
    }
}
function LogLevelToLocalizedString(logLevel) {
    switch (logLevel) {
        case LogLevel.Trace: return { original: 'Trace', value: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 0, "Trace")) };
        case LogLevel.Debug: return { original: 'Debug', value: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 1, "Debug")) };
        case LogLevel.Info: return { original: 'Info', value: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 2, "Info")) };
        case LogLevel.Warning: return { original: 'Warning', value: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 3, "Warning")) };
        case LogLevel.Error: return { original: 'Error', value: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 4, "Error")) };
        case LogLevel.Off: return { original: 'Off', value: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 5, "Off")) };
    }
}
function parseLogLevel(logLevel) {
    switch (logLevel) {
        case 'trace':
            return LogLevel.Trace;
        case 'debug':
            return LogLevel.Debug;
        case 'info':
            return LogLevel.Info;
        case 'warn':
            return LogLevel.Warning;
        case 'error':
            return LogLevel.Error;
        case 'critical':
            return LogLevel.Error;
        case 'off':
            return LogLevel.Off;
    }
    return undefined;
}
const CONTEXT_LOG_LEVEL = ( (new _contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_10__.RawContextKey('logLevel', LogLevelToString(LogLevel.Info))));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ILogService: () => (/* binding */ ILogService),
/* harmony export */   ILoggerService: () => (/* binding */ ILoggerService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const ILogService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('logService'));
const ILoggerService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('loggerService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/log/common/logService.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/log/common/logService.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LogService: () => (/* binding */ LogService)
/* harmony export */ });
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./log.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.js");


class LogService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__.Disposable {
    constructor(primaryLogger, otherLoggers = []) {
        super();
        this.logger = ( new _log_js__WEBPACK_IMPORTED_MODULE_1__.MultiplexLogger([primaryLogger, ...otherLoggers]));
        this._register(primaryLogger.onDidChangeLogLevel(level => this.setLevel(level)));
    }
    get onDidChangeLogLevel() {
        return this.logger.onDidChangeLogLevel;
    }
    setLevel(level) {
        this.logger.setLevel(level);
    }
    getLevel() {
        return this.logger.getLevel();
    }
    trace(message, ...args) {
        this.logger.trace(message, ...args);
    }
    debug(message, ...args) {
        this.logger.debug(message, ...args);
    }
    info(message, ...args) {
        this.logger.info(message, ...args);
    }
    warn(message, ...args) {
        this.logger.warn(message, ...args);
    }
    error(message, ...args) {
        this.logger.error(message, ...args);
    }
    flush() {
        this.logger.flush();
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/markers/common/markers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/markers/common/markers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IMarkerData: () => (/* binding */ IMarkerData),
/* harmony export */   MarkerSeverity: () => (/* binding */ MarkerSeverity),
/* harmony export */   MarkerTag: () => (/* binding */ MarkerTag)
/* harmony export */ });
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");


const _moduleId = "vs/platform/markers/common/markers";
var MarkerTag;
( ((function(MarkerTag) {
    MarkerTag[MarkerTag["Unnecessary"] = 1] = "Unnecessary";
    MarkerTag[MarkerTag["Deprecated"] = 2] = "Deprecated";
})(MarkerTag || (MarkerTag = {}))));
var MarkerSeverity;
( ((function(MarkerSeverity) {
    MarkerSeverity[MarkerSeverity["Hint"] = 1] = "Hint";
    MarkerSeverity[MarkerSeverity["Info"] = 2] = "Info";
    MarkerSeverity[MarkerSeverity["Warning"] = 4] = "Warning";
    MarkerSeverity[MarkerSeverity["Error"] = 8] = "Error";
})(MarkerSeverity || (MarkerSeverity = {}))));
( ((function(MarkerSeverity) {
    function compare(a, b) {
        return b - a;
    }
    MarkerSeverity.compare = compare;
    const _displayStrings = Object.create(null);
    _displayStrings[MarkerSeverity.Error] = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 0, "Error"));
    _displayStrings[MarkerSeverity.Warning] = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 1, "Warning"));
    _displayStrings[MarkerSeverity.Info] = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 2, "Info"));
    function toString(a) {
        return _displayStrings[a] || '';
    }
    MarkerSeverity.toString = toString;
    function fromSeverity(severity) {
        switch (severity) {
            case _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Error: return MarkerSeverity.Error;
            case _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Warning: return MarkerSeverity.Warning;
            case _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Info: return MarkerSeverity.Info;
            case _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Ignore: return MarkerSeverity.Hint;
        }
    }
    MarkerSeverity.fromSeverity = fromSeverity;
    function toSeverity(severity) {
        switch (severity) {
            case MarkerSeverity.Error: return _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Error;
            case MarkerSeverity.Warning: return _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Warning;
            case MarkerSeverity.Info: return _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Info;
            case MarkerSeverity.Hint: return _base_common_severity_js__WEBPACK_IMPORTED_MODULE_0__["default"].Ignore;
        }
    }
    MarkerSeverity.toSeverity = toSeverity;
})(MarkerSeverity || (MarkerSeverity = {}))));
var IMarkerData;
( ((function(IMarkerData) {
    const emptyString = '';
    function makeKey(markerData) {
        return makeKeyOptionalMessage(markerData, true);
    }
    IMarkerData.makeKey = makeKey;
    function makeKeyOptionalMessage(markerData, useMessage) {
        const result = [emptyString];
        if (markerData.source) {
            result.push(markerData.source.replace('¦', '\\¦'));
        }
        else {
            result.push(emptyString);
        }
        if (markerData.code) {
            if (typeof markerData.code === 'string') {
                result.push(markerData.code.replace('¦', '\\¦'));
            }
            else {
                result.push(markerData.code.value.replace('¦', '\\¦'));
            }
        }
        else {
            result.push(emptyString);
        }
        if (markerData.severity !== undefined && markerData.severity !== null) {
            result.push(( (MarkerSeverity.toString(markerData.severity))));
        }
        else {
            result.push(emptyString);
        }
        if (markerData.message && useMessage) {
            result.push(markerData.message.replace('¦', '\\¦'));
        }
        else {
            result.push(emptyString);
        }
        if (markerData.startLineNumber !== undefined && markerData.startLineNumber !== null) {
            result.push(( (markerData.startLineNumber.toString())));
        }
        else {
            result.push(emptyString);
        }
        if (markerData.startColumn !== undefined && markerData.startColumn !== null) {
            result.push(( (markerData.startColumn.toString())));
        }
        else {
            result.push(emptyString);
        }
        if (markerData.endLineNumber !== undefined && markerData.endLineNumber !== null) {
            result.push(( (markerData.endLineNumber.toString())));
        }
        else {
            result.push(emptyString);
        }
        if (markerData.endColumn !== undefined && markerData.endColumn !== null) {
            result.push(( (markerData.endColumn.toString())));
        }
        else {
            result.push(emptyString);
        }
        result.push(emptyString);
        return result.join('¦');
    }
    IMarkerData.makeKeyOptionalMessage = makeKeyOptionalMessage;
})(IMarkerData || (IMarkerData = {}))));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/notification/common/notification.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/notification/common/notification.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NeverShowAgainScope: () => (/* binding */ NeverShowAgainScope),
/* harmony export */   NoOpNotification: () => (/* binding */ NoOpNotification),
/* harmony export */   NoOpProgress: () => (/* binding */ NoOpProgress),
/* harmony export */   NotificationPriority: () => (/* binding */ NotificationPriority),
/* harmony export */   NotificationsFilter: () => (/* binding */ NotificationsFilter),
/* harmony export */   Severity: () => (/* reexport safe */ _base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   isNotificationSource: () => (/* binding */ isNotificationSource)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");


var NotificationPriority;
( (function(NotificationPriority) {
    NotificationPriority[NotificationPriority["DEFAULT"] = 0] = "DEFAULT";
    NotificationPriority[NotificationPriority["SILENT"] = 1] = "SILENT";
    NotificationPriority[NotificationPriority["URGENT"] = 2] = "URGENT";
})(NotificationPriority || (NotificationPriority = {})));
var NeverShowAgainScope;
( (function(NeverShowAgainScope) {
    NeverShowAgainScope[NeverShowAgainScope["WORKSPACE"] = 0] = "WORKSPACE";
    NeverShowAgainScope[NeverShowAgainScope["PROFILE"] = 1] = "PROFILE";
    NeverShowAgainScope[NeverShowAgainScope["APPLICATION"] = 2] = "APPLICATION";
})(NeverShowAgainScope || (NeverShowAgainScope = {})));
function isNotificationSource(thing) {
    if (thing) {
        const candidate = thing;
        return typeof candidate.id === 'string' && typeof candidate.label === 'string';
    }
    return false;
}
var NotificationsFilter;
( (function(NotificationsFilter) {
    NotificationsFilter[NotificationsFilter["OFF"] = 0] = "OFF";
    NotificationsFilter[NotificationsFilter["ERROR"] = 1] = "ERROR";
})(NotificationsFilter || (NotificationsFilter = {})));
class NoOpNotification {
    constructor() {
        this.progress = ( new NoOpProgress());
        this.onDidClose = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
        this.onDidChangeVisibility = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
    }
    updateSeverity(severity) { }
    updateMessage(message) { }
    updateActions(actions) { }
    close() { }
}
class NoOpProgress {
    infinite() { }
    done() { }
    total(value) { }
    worked(value) { }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/product/common/productService.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/product/common/productService.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   productSchemaId: () => (/* binding */ productSchemaId)
/* harmony export */ });
const productSchemaId = 'vscode://schemas/vscode-product';



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/product/common/productService.service.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/product/common/productService.service.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IProductService: () => (/* binding */ IProductService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IProductService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('productService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LongRunningOperation: () => (/* binding */ LongRunningOperation),
/* harmony export */   Progress: () => (/* binding */ Progress),
/* harmony export */   ProgressLocation: () => (/* binding */ ProgressLocation),
/* harmony export */   UnmanagedProgress: () => (/* binding */ UnmanagedProgress),
/* harmony export */   emptyProgressRunner: () => (/* binding */ emptyProgressRunner)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _progress_service_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./progress.service.js */ "./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.service.js");





var ProgressLocation;
( (function(ProgressLocation) {
    ProgressLocation[ProgressLocation["Explorer"] = 1] = "Explorer";
    ProgressLocation[ProgressLocation["Scm"] = 3] = "Scm";
    ProgressLocation[ProgressLocation["Extensions"] = 5] = "Extensions";
    ProgressLocation[ProgressLocation["Window"] = 10] = "Window";
    ProgressLocation[ProgressLocation["Notification"] = 15] = "Notification";
    ProgressLocation[ProgressLocation["Dialog"] = 20] = "Dialog";
})(ProgressLocation || (ProgressLocation = {})));
const emptyProgressRunner = ( Object.freeze({
    total() { },
    worked() { },
    done() { }
}));
class Progress {
    static { this.None = ( Object.freeze({ report() { } })); }
    get value() { return this._value; }
    constructor(callback) {
        this.callback = callback;
    }
    report(item) {
        this._value = item;
        this.callback(this._value);
    }
}
let UnmanagedProgress = class UnmanagedProgress extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
    constructor(options, progressService) {
        super();
        this.deferred = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.DeferredPromise());
        progressService.withProgress(options, reporter => {
            this.reporter = reporter;
            if (this.lastStep) {
                reporter.report(this.lastStep);
            }
            return this.deferred.p;
        });
        this._register((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => this.deferred.complete()));
    }
    report(step) {
        if (this.reporter) {
            this.reporter.report(step);
        }
        else {
            this.lastStep = step;
        }
    }
};
UnmanagedProgress = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _progress_service_js__WEBPACK_IMPORTED_MODULE_4__.IProgressService))
], UnmanagedProgress));
class LongRunningOperation extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
    constructor(progressIndicator) {
        super();
        this.progressIndicator = progressIndicator;
        this.currentOperationId = 0;
        this.currentOperationDisposables = this._register(( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableStore()));
    }
    start(progressDelay) {
        this.stop();
        const newOperationId = ++this.currentOperationId;
        const newOperationToken = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationTokenSource());
        this.currentProgressTimeout = setTimeout(() => {
            if (newOperationId === this.currentOperationId) {
                this.currentProgressRunner = this.progressIndicator.show(true);
            }
        }, progressDelay);
        this.currentOperationDisposables.add((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => clearTimeout(this.currentProgressTimeout)));
        this.currentOperationDisposables.add((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => newOperationToken.cancel()));
        this.currentOperationDisposables.add((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => this.currentProgressRunner ? this.currentProgressRunner.done() : undefined));
        return {
            id: newOperationId,
            token: newOperationToken.token,
            stop: () => this.doStop(newOperationId),
            isCurrent: () => this.currentOperationId === newOperationId
        };
    }
    stop() {
        this.doStop(this.currentOperationId);
    }
    doStop(operationId) {
        if (this.currentOperationId === operationId) {
            this.currentOperationDisposables.clear();
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.service.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.service.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IEditorProgressService: () => (/* binding */ IEditorProgressService),
/* harmony export */   IProgressService: () => (/* binding */ IProgressService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IProgressService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('progressService'));
const IEditorProgressService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('editorProgressService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Registry: () => (/* binding */ Registry)
/* harmony export */ });
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/assert.js */ "./node_modules/vscode/vscode/src/vs/base/common/assert.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");


class RegistryImpl {
    constructor() {
        this.data = ( new Map());
    }
    add(id, data) {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(id));
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isObject)(data));
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!( this.data.has(id)), 'There is already an extension with this id');
        this.data.set(id, data);
    }
    knows(id) {
        return ( this.data.has(id));
    }
    as(id) {
        return this.data.get(id) || null;
    }
}
const Registry = ( new RegistryImpl());



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteAuthorityResolver.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteAuthorityResolver.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ManagedRemoteConnection: () => (/* binding */ ManagedRemoteConnection),
/* harmony export */   RemoteAuthorityResolverError: () => (/* binding */ RemoteAuthorityResolverError),
/* harmony export */   RemoteAuthorityResolverErrorCode: () => (/* binding */ RemoteAuthorityResolverErrorCode),
/* harmony export */   RemoteConnectionType: () => (/* binding */ RemoteConnectionType),
/* harmony export */   WebSocketRemoteConnection: () => (/* binding */ WebSocketRemoteConnection),
/* harmony export */   getRemoteAuthorityPrefix: () => (/* binding */ getRemoteAuthorityPrefix)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");

var RemoteConnectionType;
( (function(RemoteConnectionType) {
    RemoteConnectionType[RemoteConnectionType["WebSocket"] = 0] = "WebSocket";
    RemoteConnectionType[RemoteConnectionType["Managed"] = 1] = "Managed";
})(RemoteConnectionType || (RemoteConnectionType = {})));
class ManagedRemoteConnection {
    constructor(id) {
        this.id = id;
        this.type = RemoteConnectionType.Managed;
    }
    toString() {
        return `Managed(${this.id})`;
    }
}
class WebSocketRemoteConnection {
    constructor(host, port) {
        this.host = host;
        this.port = port;
        this.type = RemoteConnectionType.WebSocket;
    }
    toString() {
        return `WebSocket(${this.host}:${this.port})`;
    }
}
var RemoteAuthorityResolverErrorCode;
( (function(RemoteAuthorityResolverErrorCode) {
    RemoteAuthorityResolverErrorCode["Unknown"] = "Unknown";
    RemoteAuthorityResolverErrorCode["NotAvailable"] = "NotAvailable";
    RemoteAuthorityResolverErrorCode["TemporarilyNotAvailable"] = "TemporarilyNotAvailable";
    RemoteAuthorityResolverErrorCode["NoResolverFound"] = "NoResolverFound";
    RemoteAuthorityResolverErrorCode["InvalidAuthority"] = "InvalidAuthority";
})(
    RemoteAuthorityResolverErrorCode || (RemoteAuthorityResolverErrorCode = {})
));
class RemoteAuthorityResolverError extends _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.ErrorNoTelemetry {
    static isNotAvailable(err) {
        return (err instanceof RemoteAuthorityResolverError) && err._code === RemoteAuthorityResolverErrorCode.NotAvailable;
    }
    static isTemporarilyNotAvailable(err) {
        return (err instanceof RemoteAuthorityResolverError) && err._code === RemoteAuthorityResolverErrorCode.TemporarilyNotAvailable;
    }
    static isNoResolverFound(err) {
        return (err instanceof RemoteAuthorityResolverError) && err._code === RemoteAuthorityResolverErrorCode.NoResolverFound;
    }
    static isInvalidAuthority(err) {
        return (err instanceof RemoteAuthorityResolverError) && err._code === RemoteAuthorityResolverErrorCode.InvalidAuthority;
    }
    static isHandled(err) {
        return (err instanceof RemoteAuthorityResolverError) && err.isHandled;
    }
    constructor(message, code = RemoteAuthorityResolverErrorCode.Unknown, detail) {
        super(message);
        this._message = message;
        this._code = code;
        this._detail = detail;
        this.isHandled = (code === RemoteAuthorityResolverErrorCode.NotAvailable) && detail === true;
        Object.setPrototypeOf(this, RemoteAuthorityResolverError.prototype);
    }
}
function getRemoteAuthorityPrefix(remoteAuthority) {
    const plusIndex = remoteAuthority.indexOf('+');
    if (plusIndex === -1) {
        return remoteAuthority;
    }
    return remoteAuthority.substring(0, plusIndex);
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteHosts.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteHosts.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getRemoteAuthority: () => (/* binding */ getRemoteAuthority),
/* harmony export */   getRemoteName: () => (/* binding */ getRemoteName),
/* harmony export */   parseAuthorityWithOptionalPort: () => (/* binding */ parseAuthorityWithOptionalPort)
/* harmony export */ });
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");

function getRemoteAuthority(uri) {
    return uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_0__.Schemas.vscodeRemote ? uri.authority : undefined;
}
function getRemoteName(authority) {
    if (!authority) {
        return undefined;
    }
    const pos = authority.indexOf('+');
    if (pos < 0) {
        return authority;
    }
    return authority.substr(0, pos);
}
function parseAuthorityWithOptionalPort(authority, defaultPort) {
    let { host, port } = parseAuthority(authority);
    if (typeof port === 'undefined') {
        port = defaultPort;
    }
    return { host, port };
}
function parseAuthority(authority) {
    const m1 = authority.match(/^(\[[0-9a-z:]+\]):(\d+)$/);
    if (m1) {
        return { host: m1[1], port: parseInt(m1[2], 10) };
    }
    const m2 = authority.match(/^(\[[0-9a-z:]+\])$/);
    if (m2) {
        return { host: m2[1], port: undefined };
    }
    const m3 = authority.match(/(.*):(\d+)$/);
    if (m3) {
        return { host: m3[1], port: parseInt(m3[2], 10) };
    }
    return { host: authority, port: undefined };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/request/common/request.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/request/common/request.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractRequestService: () => (/* binding */ AbstractRequestService),
/* harmony export */   asJson: () => (/* binding */ asJson),
/* harmony export */   asText: () => (/* binding */ asText),
/* harmony export */   asTextOrError: () => (/* binding */ asTextOrError),
/* harmony export */   hasNoContent: () => (/* binding */ hasNoContent),
/* harmony export */   isSuccess: () => (/* binding */ isSuccess)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../configuration/common/configurationRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js");
/* harmony import */ var _log_common_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../log/common/log.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.js");
/* harmony import */ var _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");







const _moduleId = "vs/platform/request/common/request";
class LoggableHeaders {
    constructor(original) {
        this.original = original;
    }
    toJSON() {
        if (!this.headers) {
            const headers = Object.create(null);
            for (const key in this.original) {
                if (key.toLowerCase() === 'authorization' || key.toLowerCase() === 'proxy-authorization') {
                    headers[key] = '*****';
                }
                else {
                    headers[key] = this.original[key];
                }
            }
            this.headers = headers;
        }
        return this.headers;
    }
}
class AbstractRequestService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor(loggerService) {
        super();
        this.counter = 0;
        this.logger = loggerService.createLogger('network', {
            name: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 0, "Network Requests")),
            when: ( (_log_common_log_js__WEBPACK_IMPORTED_MODULE_5__.CONTEXT_LOG_LEVEL.isEqualTo((0,_log_common_log_js__WEBPACK_IMPORTED_MODULE_5__.LogLevelToString)(_log_common_log_js__WEBPACK_IMPORTED_MODULE_5__.LogLevel.Trace)))).serialize()
        });
    }
    async logAndRequest(stack, options, request) {
        const prefix = `${stack} #${++this.counter}: ${options.url}`;
        this.logger.trace(`${prefix} - begin`, options.type, ( (new LoggableHeaders(options.headers ?? {}))));
        try {
            const result = await request();
            this.logger.trace(`${prefix} - end`, options.type, result.res.statusCode, result.res.headers);
            return result;
        }
        catch (error) {
            this.logger.error(`${prefix} - error`, options.type, (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.getErrorMessage)(error));
            throw error;
        }
    }
}
function isSuccess(context) {
    return (context.res.statusCode && context.res.statusCode >= 200 && context.res.statusCode < 300) || context.res.statusCode === 1223;
}
function hasNoContent(context) {
    return context.res.statusCode === 204;
}
async function asText(context) {
    if (hasNoContent(context)) {
        return null;
    }
    const buffer = await (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.streamToBuffer)(context.stream);
    return (
         (buffer.toString())
    );
}
async function asTextOrError(context) {
    if (!isSuccess(context)) {
        throw ( (new Error('Server returned ' + context.res.statusCode)));
    }
    return asText(context);
}
async function asJson(context) {
    if (!isSuccess(context)) {
        throw ( (new Error('Server returned ' + context.res.statusCode)));
    }
    if (hasNoContent(context)) {
        return null;
    }
    const buffer = await (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.streamToBuffer)(context.stream);
    const str = ( (buffer.toString()));
    try {
        return JSON.parse(str);
    }
    catch (err) {
        err.message += ':\n' + str;
        throw err;
    }
}
let proxyConfiguration;
function registerProxyConfigurations(scope) {
    const configurationRegistry = ( (_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_6__.Registry.as(_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_4__.Extensions.Configuration)));
    const oldProxyConfiguration = proxyConfiguration;
    proxyConfiguration = {
        id: 'http',
        order: 15,
        title: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 1, "HTTP")),
        type: 'object',
        scope,
        properties: {
            'http.proxy': {
                type: 'string',
                pattern: '^(https?|socks|socks4a?|socks5h?)://([^:]*(:[^@]*)?@)?([^:]+|\\[[:0-9a-fA-F]+\\])(:\\d+)?/?$|^$',
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                    _moduleId,
                    2,
                    "The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables."
                )),
                restricted: true
            },
            'http.proxyStrictSSL': {
                type: 'boolean',
                default: true,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                    _moduleId,
                    3,
                    "Controls whether the proxy server certificate should be verified against the list of supplied CAs."
                )),
                restricted: true
            },
            'http.proxyKerberosServicePrincipal': {
                type: 'string',
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                    _moduleId,
                    4,
                    "Overrides the principal service name for Kerberos authentication with the HTTP proxy. A default based on the proxy hostname is used when this is not set."
                )),
                restricted: true
            },
            'http.noProxy': {
                type: 'array',
                items: { type: 'string' },
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                    _moduleId,
                    5,
                    "Specifies domain names for which proxy settings should be ignored for HTTP/HTTPS requests."
                )),
                restricted: true
            },
            'http.proxyAuthorization': {
                type: ['null', 'string'],
                default: null,
                markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                    _moduleId,
                    6,
                    "The value to send as the `Proxy-Authorization` header for every network request."
                )),
                restricted: true
            },
            'http.proxySupport': {
                type: 'string',
                enum: ['off', 'on', 'fallback', 'override'],
                enumDescriptions: [
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 7, "Disable proxy support for extensions.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 8, "Enable proxy support for extensions.")),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                        _moduleId,
                        9,
                        "Enable proxy support for extensions, fall back to request options, when no proxy found."
                    )),
                    ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                        _moduleId,
                        10,
                        "Enable proxy support for extensions, override request options."
                    )),
                ],
                default: 'override',
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(_moduleId, 11, "Use the proxy support for extensions.")),
                restricted: true
            },
            'http.systemCertificates': {
                type: 'boolean',
                default: true,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                    _moduleId,
                    12,
                    "Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)"
                )),
                restricted: true
            },
            'http.experimental.systemCertificatesV2': {
                type: 'boolean',
                tags: ['experimental'],
                default: false,
                description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_3__.localizeWithPath)(
                    _moduleId,
                    13,
                    "Controls whether experimental loading of CA certificates from the OS should be enabled. This uses a more general approach than the default implemenation."
                )),
                restricted: true
            }
        }
    };
    configurationRegistry.updateConfigurations({ add: [proxyConfiguration], remove: oldProxyConfiguration ? [oldProxyConfiguration] : [] });
}
registerProxyConfigurations(_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_4__.ConfigurationScope.APPLICATION);



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/request/common/request.service.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/request/common/request.service.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IRequestService: () => (/* binding */ IRequestService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IRequestService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('requestService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/storage/common/storage.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/storage/common/storage.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractStorageService: () => (/* binding */ AbstractStorageService),
/* harmony export */   IS_NEW_KEY: () => (/* binding */ IS_NEW_KEY),
/* harmony export */   InMemoryStorageService: () => (/* binding */ InMemoryStorageService),
/* harmony export */   StorageScope: () => (/* binding */ StorageScope),
/* harmony export */   StorageTarget: () => (/* binding */ StorageTarget),
/* harmony export */   TARGET_KEY: () => (/* binding */ TARGET_KEY),
/* harmony export */   WillSaveStateReason: () => (/* binding */ WillSaveStateReason),
/* harmony export */   isProfileUsingDefaultStorage: () => (/* binding */ isProfileUsingDefaultStorage),
/* harmony export */   loadKeyTargets: () => (/* binding */ loadKeyTargets),
/* harmony export */   logStorage: () => (/* binding */ logStorage)
/* harmony export */ });
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/performance.js */ "./node_modules/vscode/vscode/src/vs/base/common/performance.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/parts/storage/common/storage.js */ "./node_modules/vscode/vscode/src/vs/base/parts/storage/common/storage.js");
/* harmony import */ var _userDataProfile_common_userDataProfile_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../userDataProfile/common/userDataProfile.js */ "./node_modules/vscode/vscode/src/vs/platform/userDataProfile/common/userDataProfile.js");







const IS_NEW_KEY = '__$__isNewStorageMarker';
const TARGET_KEY = '__$__targetStorageMarker';
var WillSaveStateReason;
( (function(WillSaveStateReason) {
    WillSaveStateReason[WillSaveStateReason["NONE"] = 0] = "NONE";
    WillSaveStateReason[WillSaveStateReason["SHUTDOWN"] = 1] = "SHUTDOWN";
})(WillSaveStateReason || (WillSaveStateReason = {})));
var StorageScope;
( (function(StorageScope) {
    StorageScope[StorageScope["APPLICATION"] = -1] = "APPLICATION";
    StorageScope[StorageScope["PROFILE"] = 0] = "PROFILE";
    StorageScope[StorageScope["WORKSPACE"] = 1] = "WORKSPACE";
})(StorageScope || (StorageScope = {})));
var StorageTarget;
( (function(StorageTarget) {
    StorageTarget[StorageTarget["USER"] = 0] = "USER";
    StorageTarget[StorageTarget["MACHINE"] = 1] = "MACHINE";
})(StorageTarget || (StorageTarget = {})));
function loadKeyTargets(storage) {
    const keysRaw = storage.get(TARGET_KEY);
    if (keysRaw) {
        try {
            return JSON.parse(keysRaw);
        }
        catch (error) {
        }
    }
    return Object.create(null);
}
class AbstractStorageService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    static { this.DEFAULT_FLUSH_INTERVAL = 60 * 1000; }
    constructor(options = { flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL }) {
        super();
        this.options = options;
        this._onDidChangeValue = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.PauseableEmitter()));
        this._onDidChangeTarget = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.PauseableEmitter()));
        this.onDidChangeTarget = this._onDidChangeTarget.event;
        this._onWillSaveState = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onWillSaveState = this._onWillSaveState.event;
        this.flushWhenIdleScheduler = this._register(( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.RunOnceScheduler(() => this.doFlushWhenIdle(), this.options.flushInterval)));
        this.runFlushWhenIdle = this._register(( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable()));
        this._workspaceKeyTargets = undefined;
        this._profileKeyTargets = undefined;
        this._applicationKeyTargets = undefined;
    }
    onDidChangeValue(scope, key, disposable) {
        return _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Event.filter(this._onDidChangeValue.event, e => e.scope === scope && (key === undefined || e.key === key), disposable);
    }
    doFlushWhenIdle() {
        this.runFlushWhenIdle.value = (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.runWhenGlobalIdle)(() => {
            if (this.shouldFlushWhenIdle()) {
                this.flush();
            }
            this.flushWhenIdleScheduler.schedule();
        });
    }
    shouldFlushWhenIdle() {
        return true;
    }
    stopFlushWhenIdle() {
        (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.dispose)([this.runFlushWhenIdle, this.flushWhenIdleScheduler]);
    }
    initialize() {
        if (!this.initializationPromise) {
            this.initializationPromise = (async () => {
                (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)('code/willInitStorage');
                try {
                    await this.doInitialize();
                }
                finally {
                    (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)('code/didInitStorage');
                }
                this.flushWhenIdleScheduler.schedule();
            })();
        }
        return this.initializationPromise;
    }
    emitDidChangeValue(scope, event) {
        const { key, external } = event;
        if (key === TARGET_KEY) {
            switch (scope) {
                case StorageScope.APPLICATION:
                    this._applicationKeyTargets = undefined;
                    break;
                case StorageScope.PROFILE:
                    this._profileKeyTargets = undefined;
                    break;
                case StorageScope.WORKSPACE:
                    this._workspaceKeyTargets = undefined;
                    break;
            }
            this._onDidChangeTarget.fire({ scope });
        }
        else {
            this._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key], external });
        }
    }
    emitWillSaveState(reason) {
        this._onWillSaveState.fire({ reason });
    }
    get(key, scope, fallbackValue) {
        return this.getStorage(scope)?.get(key, fallbackValue);
    }
    getBoolean(key, scope, fallbackValue) {
        return this.getStorage(scope)?.getBoolean(key, fallbackValue);
    }
    getNumber(key, scope, fallbackValue) {
        return this.getStorage(scope)?.getNumber(key, fallbackValue);
    }
    getObject(key, scope, fallbackValue) {
        return this.getStorage(scope)?.getObject(key, fallbackValue);
    }
    storeAll(entries, external) {
        this.withPausedEmitters(() => {
            for (const entry of entries) {
                this.store(entry.key, entry.value, entry.scope, entry.target, external);
            }
        });
    }
    store(key, value, scope, target, external = false) {
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_4__.isUndefinedOrNull)(value)) {
            this.remove(key, scope, external);
            return;
        }
        this.withPausedEmitters(() => {
            this.updateKeyTarget(key, scope, target);
            this.getStorage(scope)?.set(key, value, external);
        });
    }
    remove(key, scope, external = false) {
        this.withPausedEmitters(() => {
            this.updateKeyTarget(key, scope, undefined);
            this.getStorage(scope)?.delete(key, external);
        });
    }
    withPausedEmitters(fn) {
        this._onDidChangeValue.pause();
        this._onDidChangeTarget.pause();
        try {
            fn();
        }
        finally {
            this._onDidChangeValue.resume();
            this._onDidChangeTarget.resume();
        }
    }
    keys(scope, target) {
        const keys = [];
        const keyTargets = this.getKeyTargets(scope);
        for (const key of ( Object.keys(keyTargets))) {
            const keyTarget = keyTargets[key];
            if (keyTarget === target) {
                keys.push(key);
            }
        }
        return keys;
    }
    updateKeyTarget(key, scope, target, external = false) {
        const keyTargets = this.getKeyTargets(scope);
        if (typeof target === 'number') {
            if (keyTargets[key] !== target) {
                keyTargets[key] = target;
                this.getStorage(scope)?.set(TARGET_KEY, JSON.stringify(keyTargets), external);
            }
        }
        else {
            if (typeof keyTargets[key] === 'number') {
                delete keyTargets[key];
                this.getStorage(scope)?.set(TARGET_KEY, JSON.stringify(keyTargets), external);
            }
        }
    }
    get workspaceKeyTargets() {
        if (!this._workspaceKeyTargets) {
            this._workspaceKeyTargets = this.loadKeyTargets(StorageScope.WORKSPACE);
        }
        return this._workspaceKeyTargets;
    }
    get profileKeyTargets() {
        if (!this._profileKeyTargets) {
            this._profileKeyTargets = this.loadKeyTargets(StorageScope.PROFILE);
        }
        return this._profileKeyTargets;
    }
    get applicationKeyTargets() {
        if (!this._applicationKeyTargets) {
            this._applicationKeyTargets = this.loadKeyTargets(StorageScope.APPLICATION);
        }
        return this._applicationKeyTargets;
    }
    getKeyTargets(scope) {
        switch (scope) {
            case StorageScope.APPLICATION:
                return this.applicationKeyTargets;
            case StorageScope.PROFILE:
                return this.profileKeyTargets;
            default:
                return this.workspaceKeyTargets;
        }
    }
    loadKeyTargets(scope) {
        const storage = this.getStorage(scope);
        return storage ? loadKeyTargets(storage) : Object.create(null);
    }
    isNew(scope) {
        return this.getBoolean(IS_NEW_KEY, scope) === true;
    }
    async flush(reason = WillSaveStateReason.NONE) {
        this._onWillSaveState.fire({ reason });
        const applicationStorage = this.getStorage(StorageScope.APPLICATION);
        const profileStorage = this.getStorage(StorageScope.PROFILE);
        const workspaceStorage = this.getStorage(StorageScope.WORKSPACE);
        switch (reason) {
            case WillSaveStateReason.NONE:
                await _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.Promises.settled([
                    applicationStorage?.whenFlushed() ?? Promise.resolve(),
                    profileStorage?.whenFlushed() ?? Promise.resolve(),
                    workspaceStorage?.whenFlushed() ?? Promise.resolve()
                ]);
                break;
            case WillSaveStateReason.SHUTDOWN:
                await _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.Promises.settled([
                    applicationStorage?.flush(0) ?? Promise.resolve(),
                    profileStorage?.flush(0) ?? Promise.resolve(),
                    workspaceStorage?.flush(0) ?? Promise.resolve()
                ]);
                break;
        }
    }
    async log() {
        const applicationItems = this.getStorage(StorageScope.APPLICATION)?.items ?? ( new Map());
        const profileItems = this.getStorage(StorageScope.PROFILE)?.items ?? ( new Map());
        const workspaceItems = this.getStorage(StorageScope.WORKSPACE)?.items ?? ( new Map());
        return logStorage(applicationItems, profileItems, workspaceItems, this.getLogDetails(StorageScope.APPLICATION) ?? '', this.getLogDetails(StorageScope.PROFILE) ?? '', this.getLogDetails(StorageScope.WORKSPACE) ?? '');
    }
    async optimize(scope) {
        await this.flush();
        return this.getStorage(scope)?.optimize();
    }
    async switch(to, preserveData) {
        this.emitWillSaveState(WillSaveStateReason.NONE);
        if ((0,_userDataProfile_common_userDataProfile_js__WEBPACK_IMPORTED_MODULE_6__.isUserDataProfile)(to)) {
            return this.switchToProfile(to, preserveData);
        }
        return this.switchToWorkspace(to, preserveData);
    }
    canSwitchProfile(from, to) {
        if (from.id === to.id) {
            return false;
        }
        if (isProfileUsingDefaultStorage(to) && isProfileUsingDefaultStorage(from)) {
            return false;
        }
        return true;
    }
    switchData(oldStorage, newStorage, scope) {
        this.withPausedEmitters(() => {
            const handledkeys = ( new Set());
            for (const [key, oldValue] of oldStorage) {
                handledkeys.add(key);
                const newValue = newStorage.get(key);
                if (newValue !== oldValue) {
                    this.emitDidChangeValue(scope, { key, external: true });
                }
            }
            for (const [key] of newStorage.items) {
                if (!( handledkeys.has(key))) {
                    this.emitDidChangeValue(scope, { key, external: true });
                }
            }
        });
    }
}
function isProfileUsingDefaultStorage(profile) {
    return profile.isDefault || !!profile.useDefaultFlags?.globalState;
}
class InMemoryStorageService extends AbstractStorageService {
    constructor() {
        super();
        this.applicationStorage = this._register(( new _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.Storage(( new _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.InMemoryStorageDatabase()), { hint: _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.StorageHint.STORAGE_IN_MEMORY })));
        this.profileStorage = this._register(( new _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.Storage(( new _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.InMemoryStorageDatabase()), { hint: _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.StorageHint.STORAGE_IN_MEMORY })));
        this.workspaceStorage = this._register(( new _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.Storage(( new _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.InMemoryStorageDatabase()), { hint: _base_parts_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_5__.StorageHint.STORAGE_IN_MEMORY })));
        this._register(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));
        this._register(this.profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.PROFILE, e)));
        this._register(this.applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.APPLICATION, e)));
    }
    getStorage(scope) {
        switch (scope) {
            case StorageScope.APPLICATION:
                return this.applicationStorage;
            case StorageScope.PROFILE:
                return this.profileStorage;
            default:
                return this.workspaceStorage;
        }
    }
    getLogDetails(scope) {
        switch (scope) {
            case StorageScope.APPLICATION:
                return 'inMemory (application)';
            case StorageScope.PROFILE:
                return 'inMemory (profile)';
            default:
                return 'inMemory (workspace)';
        }
    }
    async doInitialize() { }
    async switchToProfile() {
    }
    async switchToWorkspace() {
    }
    shouldFlushWhenIdle() {
        return false;
    }
    hasScope(scope) {
        return false;
    }
}
async function logStorage(application, profile, workspace, applicationPath, profilePath, workspacePath) {
    const safeParse = (value) => {
        try {
            return JSON.parse(value);
        }
        catch (error) {
            return value;
        }
    };
    const applicationItems = ( new Map());
    const applicationItemsParsed = ( new Map());
    application.forEach((value, key) => {
        applicationItems.set(key, value);
        applicationItemsParsed.set(key, safeParse(value));
    });
    const profileItems = ( new Map());
    const profileItemsParsed = ( new Map());
    profile.forEach((value, key) => {
        profileItems.set(key, value);
        profileItemsParsed.set(key, safeParse(value));
    });
    const workspaceItems = ( new Map());
    const workspaceItemsParsed = ( new Map());
    workspace.forEach((value, key) => {
        workspaceItems.set(key, value);
        workspaceItemsParsed.set(key, safeParse(value));
    });
    if (applicationPath !== profilePath) {
        console.group(`Storage: Application (path: ${applicationPath})`);
    }
    else {
        console.group(`Storage: Application & Profile (path: ${applicationPath}, default profile)`);
    }
    const applicationValues = [];
    applicationItems.forEach((value, key) => {
        applicationValues.push({ key, value });
    });
    console.table(applicationValues);
    console.groupEnd();
    console.log(applicationItemsParsed);
    if (applicationPath !== profilePath) {
        console.group(`Storage: Profile (path: ${profilePath}, profile specific)`);
        const profileValues = [];
        profileItems.forEach((value, key) => {
            profileValues.push({ key, value });
        });
        console.table(profileValues);
        console.groupEnd();
        console.log(profileItemsParsed);
    }
    console.group(`Storage: Workspace (path: ${workspacePath})`);
    const workspaceValues = [];
    workspaceItems.forEach((value, key) => {
        workspaceValues.push({ key, value });
    });
    console.table(workspaceValues);
    console.groupEnd();
    console.log(workspaceItemsParsed);
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/storage/common/storage.service.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/storage/common/storage.service.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IStorageService: () => (/* binding */ IStorageService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IStorageService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('storageService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetry.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetry.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TELEMETRY_CRASH_REPORTER_SETTING_ID: () => (/* binding */ TELEMETRY_CRASH_REPORTER_SETTING_ID),
/* harmony export */   TELEMETRY_OLD_SETTING_ID: () => (/* binding */ TELEMETRY_OLD_SETTING_ID),
/* harmony export */   TELEMETRY_SETTING_ID: () => (/* binding */ TELEMETRY_SETTING_ID),
/* harmony export */   TelemetryConfiguration: () => (/* binding */ TelemetryConfiguration),
/* harmony export */   TelemetryLevel: () => (/* binding */ TelemetryLevel),
/* harmony export */   firstSessionDateStorageKey: () => (/* binding */ firstSessionDateStorageKey)
/* harmony export */ });
const firstSessionDateStorageKey = 'telemetry.firstSessionDate';
const TELEMETRY_SETTING_ID = 'telemetry.telemetryLevel';
const TELEMETRY_CRASH_REPORTER_SETTING_ID = 'telemetry.enableCrashReporter';
const TELEMETRY_OLD_SETTING_ID = 'telemetry.enableTelemetry';
var TelemetryLevel;
( (function(TelemetryLevel) {
    TelemetryLevel[TelemetryLevel["NONE"] = 0] = "NONE";
    TelemetryLevel[TelemetryLevel["CRASH"] = 1] = "CRASH";
    TelemetryLevel[TelemetryLevel["ERROR"] = 2] = "ERROR";
    TelemetryLevel[TelemetryLevel["USAGE"] = 3] = "USAGE";
})(TelemetryLevel || (TelemetryLevel = {})));
var TelemetryConfiguration;
( (function(TelemetryConfiguration) {
    TelemetryConfiguration["OFF"] = "off";
    TelemetryConfiguration["CRASH"] = "crash";
    TelemetryConfiguration["ERROR"] = "error";
    TelemetryConfiguration["ON"] = "all";
})(TelemetryConfiguration || (TelemetryConfiguration = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NullEndpointTelemetryService: () => (/* binding */ NullEndpointTelemetryService),
/* harmony export */   TelemetryTrustedValue: () => (/* binding */ TelemetryTrustedValue),
/* harmony export */   cleanData: () => (/* binding */ cleanData),
/* harmony export */   cleanRemoteAuthority: () => (/* binding */ cleanRemoteAuthority),
/* harmony export */   extensionTelemetryLogChannelId: () => (/* binding */ extensionTelemetryLogChannelId),
/* harmony export */   getTelemetryLevel: () => (/* binding */ getTelemetryLevel),
/* harmony export */   isLoggingOnly: () => (/* binding */ isLoggingOnly),
/* harmony export */   supportsTelemetry: () => (/* binding */ supportsTelemetry),
/* harmony export */   telemetryLogId: () => (/* binding */ telemetryLogId)
/* harmony export */ });
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../remote/common/remoteHosts.js */ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteHosts.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_process_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/process.js */ "./node_modules/vscode/vscode/src/vs/base/common/process.js");
/* harmony import */ var _telemetry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./telemetry.js */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetry.js");





class TelemetryTrustedValue {
    constructor(value) {
        this.value = value;
        this.isTrustedTelemetryValue = true;
    }
}
class NullEndpointTelemetryService {
    async publicLog(_endpoint, _eventName, _data) {
    }
    async publicLogError(_endpoint, _errorEventName, _data) {
    }
}
const telemetryLogId = 'telemetry';
const extensionTelemetryLogChannelId = 'extensionTelemetryLog';
function supportsTelemetry(productService, environmentService) {
    if (!environmentService.isBuilt && !environmentService.disableTelemetry) {
        return true;
    }
    return !(environmentService.disableTelemetry || !productService.enableTelemetry);
}
function isLoggingOnly(productService, environmentService) {
    if (environmentService.extensionTestsLocationURI) {
        return true;
    }
    if (environmentService.isBuilt) {
        return false;
    }
    if (environmentService.disableTelemetry) {
        return false;
    }
    if (productService.enableTelemetry && productService.aiConfig?.ariaKey) {
        return false;
    }
    return true;
}
function getTelemetryLevel(configurationService) {
    const newConfig = configurationService.getValue(_telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TELEMETRY_SETTING_ID);
    const crashReporterConfig = configurationService.getValue(_telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TELEMETRY_CRASH_REPORTER_SETTING_ID);
    const oldConfig = configurationService.getValue(_telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TELEMETRY_OLD_SETTING_ID);
    if (oldConfig === false || crashReporterConfig === false) {
        return _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryLevel.NONE;
    }
    switch (newConfig ?? _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryConfiguration.ON) {
        case _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryConfiguration.ON:
            return _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryLevel.USAGE;
        case _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryConfiguration.ERROR:
            return _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryLevel.ERROR;
        case _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryConfiguration.CRASH:
            return _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryLevel.CRASH;
        case _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryConfiguration.OFF:
            return _telemetry_js__WEBPACK_IMPORTED_MODULE_4__.TelemetryLevel.NONE;
    }
}
const telemetryAllowedAuthorities = ( new Set(
    ['ssh-remote', 'dev-container', 'attached-container', 'wsl', 'tunnel', 'codespaces', 'amlext']
));
function cleanRemoteAuthority(remoteAuthority) {
    if (!remoteAuthority) {
        return 'none';
    }
    const remoteName = (0,_remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_1__.getRemoteName)(remoteAuthority);
    return ( telemetryAllowedAuthorities.has(remoteName)) ? remoteName : 'other';
}
function anonymizeFilePaths(stack, cleanupPatterns) {
    if (!stack || (!stack.includes('/') && !stack.includes('\\'))) {
        return stack;
    }
    let updatedStack = stack;
    const cleanUpIndexes = [];
    for (const regexp of cleanupPatterns) {
        while (true) {
            const result = regexp.exec(stack);
            if (!result) {
                break;
            }
            cleanUpIndexes.push([result.index, regexp.lastIndex]);
        }
    }
    const nodeModulesRegex = /^[\\\/]?(node_modules|node_modules\.asar)[\\\/]/;
    const fileRegex = /(file:\/\/)?([a-zA-Z]:(\\\\|\\|\/)|(\\\\|\\|\/))?([\w-\._]+(\\\\|\\|\/))+[\w-\._]*/g;
    let lastIndex = 0;
    updatedStack = '';
    while (true) {
        const result = fileRegex.exec(stack);
        if (!result) {
            break;
        }
        const overlappingRange = ( cleanUpIndexes.some(([start, end]) => result.index < end && start < fileRegex.lastIndex));
        if (!nodeModulesRegex.test(result[0]) && !overlappingRange) {
            updatedStack += stack.substring(lastIndex, result.index) + '<REDACTED: user-file-path>';
            lastIndex = fileRegex.lastIndex;
        }
    }
    if (lastIndex < stack.length) {
        updatedStack += stack.substr(lastIndex);
    }
    return updatedStack;
}
function removePropertiesWithPossibleUserInfo(property) {
    if (!property) {
        return property;
    }
    const userDataRegexes = [
        { label: 'Google API Key', regex: /AIza[A-Za-z0-9_\\\-]{35}/ },
        { label: 'Slack Token', regex: /xox[pbar]\-[A-Za-z0-9]/ },
        { label: 'GitHub Token', regex: /(gh[psuro]_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9]{22}_[a-zA-Z0-9]{59})/ },
        { label: 'Generic Secret', regex: /(key|token|sig|secret|signature|password|passwd|pwd|android:value)[^a-zA-Z0-9]/i },
        { label: 'CLI Credentials', regex: /((login|psexec|(certutil|psexec)\.exe).{1,50}(\s-u(ser(name)?)?\s+.{3,100})?\s-(admin|user|vm|root)?p(ass(word)?)?\s+["']?[^$\-\/\s]|(^|[\s\r\n\\])net(\.exe)?.{1,5}(user\s+|share\s+\/user:| user -? secrets ? set) \s + [^ $\s \/])/ },
        { label: 'Email', regex: /@[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+/ }
    ];
    for (const secretRegex of userDataRegexes) {
        if (secretRegex.regex.test(property)) {
            return `<REDACTED: ${secretRegex.label}>`;
        }
    }
    return property;
}
function cleanData(data, cleanUpPatterns) {
    return (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_0__.cloneAndChange)(data, value => {
        if (value instanceof TelemetryTrustedValue || Object.hasOwnProperty.call(value, 'isTrustedTelemetryValue')) {
            return value.value;
        }
        if (typeof value === 'string') {
            let updatedProperty = value.replaceAll('%20', ' ');
            updatedProperty = anonymizeFilePaths(updatedProperty, cleanUpPatterns);
            for (const regexp of cleanUpPatterns) {
                updatedProperty = updatedProperty.replace(regexp, '');
            }
            updatedProperty = removePropertiesWithPossibleUserInfo(updatedProperty);
            return updatedProperty;
        }
        return undefined;
    });
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/terminal/common/environmentVariableShared.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/terminal/common/environmentVariableShared.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deserializeEnvironmentDescriptionMap: () => (/* binding */ deserializeEnvironmentDescriptionMap),
/* harmony export */   deserializeEnvironmentVariableCollection: () => (/* binding */ deserializeEnvironmentVariableCollection),
/* harmony export */   deserializeEnvironmentVariableCollections: () => (/* binding */ deserializeEnvironmentVariableCollections),
/* harmony export */   serializeEnvironmentDescriptionMap: () => (/* binding */ serializeEnvironmentDescriptionMap),
/* harmony export */   serializeEnvironmentVariableCollection: () => (/* binding */ serializeEnvironmentVariableCollection),
/* harmony export */   serializeEnvironmentVariableCollections: () => (/* binding */ serializeEnvironmentVariableCollections)
/* harmony export */ });
function serializeEnvironmentVariableCollection(collection) {
    return [...collection.entries()];
}
function serializeEnvironmentDescriptionMap(descriptionMap) {
    return descriptionMap ? [...descriptionMap.entries()] : [];
}
function deserializeEnvironmentVariableCollection(serializedCollection) {
    return ( new Map(serializedCollection));
}
function deserializeEnvironmentDescriptionMap(serializableEnvironmentDescription) {
    return ( new Map(serializableEnvironmentDescription ?? []));
}
function serializeEnvironmentVariableCollections(collections) {
    return ( Array.from(collections.entries()).map(e => {
        return [e[0], serializeEnvironmentVariableCollection(e[1].map), serializeEnvironmentDescriptionMap(e[1].descriptionMap)];
    }));
}
function deserializeEnvironmentVariableCollections(serializedCollection) {
    return ( new Map(( serializedCollection.map(e => {
        return [e[0], { map: deserializeEnvironmentVariableCollection(e[1]), descriptionMap: deserializeEnvironmentDescriptionMap(e[2]) }];
    }))));
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/terminal/common/terminal.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/terminal/common/terminal.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FlowControlConstants: () => (/* binding */ FlowControlConstants),
/* harmony export */   PosixShellType: () => (/* binding */ PosixShellType),
/* harmony export */   ProcessPropertyType: () => (/* binding */ ProcessPropertyType),
/* harmony export */   ShellIntegrationStatus: () => (/* binding */ ShellIntegrationStatus),
/* harmony export */   TerminalBackendChangeEvent: () => (/* binding */ TerminalBackendChangeEvent),
/* harmony export */   TerminalExitReason: () => (/* binding */ TerminalExitReason),
/* harmony export */   TerminalExtensions: () => (/* binding */ TerminalExtensions),
/* harmony export */   TerminalLocation: () => (/* binding */ TerminalLocation),
/* harmony export */   TerminalLocationString: () => (/* binding */ TerminalLocationString),
/* harmony export */   TerminalSettingId: () => (/* binding */ TerminalSettingId),
/* harmony export */   TerminalSettingPrefix: () => (/* binding */ TerminalSettingPrefix),
/* harmony export */   TitleEventSource: () => (/* binding */ TitleEventSource),
/* harmony export */   WindowsShellType: () => (/* binding */ WindowsShellType)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");
/* harmony import */ var _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");



var TerminalSettingPrefix;
( (function(TerminalSettingPrefix) {
    TerminalSettingPrefix["AutomationProfile"] = "terminal.integrated.automationProfile.";
    TerminalSettingPrefix["DefaultProfile"] = "terminal.integrated.defaultProfile.";
    TerminalSettingPrefix["Profiles"] = "terminal.integrated.profiles.";
})(TerminalSettingPrefix || (TerminalSettingPrefix = {})));
var TerminalSettingId;
( (function(TerminalSettingId) {
    TerminalSettingId["SendKeybindingsToShell"] = "terminal.integrated.sendKeybindingsToShell";
    TerminalSettingId["AutomationProfileLinux"] = "terminal.integrated.automationProfile.linux";
    TerminalSettingId["AutomationProfileMacOs"] = "terminal.integrated.automationProfile.osx";
    TerminalSettingId["AutomationProfileWindows"] = "terminal.integrated.automationProfile.windows";
    TerminalSettingId["ProfilesWindows"] = "terminal.integrated.profiles.windows";
    TerminalSettingId["ProfilesMacOs"] = "terminal.integrated.profiles.osx";
    TerminalSettingId["ProfilesLinux"] = "terminal.integrated.profiles.linux";
    TerminalSettingId["DefaultProfileLinux"] = "terminal.integrated.defaultProfile.linux";
    TerminalSettingId["DefaultProfileMacOs"] = "terminal.integrated.defaultProfile.osx";
    TerminalSettingId["DefaultProfileWindows"] = "terminal.integrated.defaultProfile.windows";
    TerminalSettingId["UseWslProfiles"] = "terminal.integrated.useWslProfiles";
    TerminalSettingId["TabsDefaultColor"] = "terminal.integrated.tabs.defaultColor";
    TerminalSettingId["TabsDefaultIcon"] = "terminal.integrated.tabs.defaultIcon";
    TerminalSettingId["TabsEnabled"] = "terminal.integrated.tabs.enabled";
    TerminalSettingId["TabsEnableAnimation"] = "terminal.integrated.tabs.enableAnimation";
    TerminalSettingId["TabsHideCondition"] = "terminal.integrated.tabs.hideCondition";
    TerminalSettingId["TabsShowActiveTerminal"] = "terminal.integrated.tabs.showActiveTerminal";
    TerminalSettingId["TabsShowActions"] = "terminal.integrated.tabs.showActions";
    TerminalSettingId["TabsLocation"] = "terminal.integrated.tabs.location";
    TerminalSettingId["TabsFocusMode"] = "terminal.integrated.tabs.focusMode";
    TerminalSettingId["MacOptionIsMeta"] = "terminal.integrated.macOptionIsMeta";
    TerminalSettingId["MacOptionClickForcesSelection"] = "terminal.integrated.macOptionClickForcesSelection";
    TerminalSettingId["AltClickMovesCursor"] = "terminal.integrated.altClickMovesCursor";
    TerminalSettingId["CopyOnSelection"] = "terminal.integrated.copyOnSelection";
    TerminalSettingId["EnableMultiLinePasteWarning"] = "terminal.integrated.enableMultiLinePasteWarning";
    TerminalSettingId["DrawBoldTextInBrightColors"] = "terminal.integrated.drawBoldTextInBrightColors";
    TerminalSettingId["FontFamily"] = "terminal.integrated.fontFamily";
    TerminalSettingId["FontSize"] = "terminal.integrated.fontSize";
    TerminalSettingId["LetterSpacing"] = "terminal.integrated.letterSpacing";
    TerminalSettingId["LineHeight"] = "terminal.integrated.lineHeight";
    TerminalSettingId["MinimumContrastRatio"] = "terminal.integrated.minimumContrastRatio";
    TerminalSettingId["TabStopWidth"] = "terminal.integrated.tabStopWidth";
    TerminalSettingId["FastScrollSensitivity"] = "terminal.integrated.fastScrollSensitivity";
    TerminalSettingId["MouseWheelScrollSensitivity"] = "terminal.integrated.mouseWheelScrollSensitivity";
    TerminalSettingId["BellDuration"] = "terminal.integrated.bellDuration";
    TerminalSettingId["FontWeight"] = "terminal.integrated.fontWeight";
    TerminalSettingId["FontWeightBold"] = "terminal.integrated.fontWeightBold";
    TerminalSettingId["CursorBlinking"] = "terminal.integrated.cursorBlinking";
    TerminalSettingId["CursorStyle"] = "terminal.integrated.cursorStyle";
    TerminalSettingId["CursorStyleInactive"] = "terminal.integrated.cursorStyleInactive";
    TerminalSettingId["CursorWidth"] = "terminal.integrated.cursorWidth";
    TerminalSettingId["Scrollback"] = "terminal.integrated.scrollback";
    TerminalSettingId["DetectLocale"] = "terminal.integrated.detectLocale";
    TerminalSettingId["DefaultLocation"] = "terminal.integrated.defaultLocation";
    TerminalSettingId["GpuAcceleration"] = "terminal.integrated.gpuAcceleration";
    TerminalSettingId["TerminalTitleSeparator"] = "terminal.integrated.tabs.separator";
    TerminalSettingId["TerminalTitle"] = "terminal.integrated.tabs.title";
    TerminalSettingId["TerminalDescription"] = "terminal.integrated.tabs.description";
    TerminalSettingId["RightClickBehavior"] = "terminal.integrated.rightClickBehavior";
    TerminalSettingId["MiddleClickBehavior"] = "terminal.integrated.middleClickBehavior";
    TerminalSettingId["Cwd"] = "terminal.integrated.cwd";
    TerminalSettingId["ConfirmOnExit"] = "terminal.integrated.confirmOnExit";
    TerminalSettingId["ConfirmOnKill"] = "terminal.integrated.confirmOnKill";
    TerminalSettingId["EnableBell"] = "terminal.integrated.enableBell";
    TerminalSettingId["EnableVisualBell"] = "terminal.integrated.enableVisualBell";
    TerminalSettingId["CommandsToSkipShell"] = "terminal.integrated.commandsToSkipShell";
    TerminalSettingId["AllowChords"] = "terminal.integrated.allowChords";
    TerminalSettingId["AllowMnemonics"] = "terminal.integrated.allowMnemonics";
    TerminalSettingId["TabFocusMode"] = "terminal.integrated.tabFocusMode";
    TerminalSettingId["EnvMacOs"] = "terminal.integrated.env.osx";
    TerminalSettingId["EnvLinux"] = "terminal.integrated.env.linux";
    TerminalSettingId["EnvWindows"] = "terminal.integrated.env.windows";
    TerminalSettingId["EnvironmentChangesIndicator"] = "terminal.integrated.environmentChangesIndicator";
    TerminalSettingId["EnvironmentChangesRelaunch"] = "terminal.integrated.environmentChangesRelaunch";
    TerminalSettingId["ShowExitAlert"] = "terminal.integrated.showExitAlert";
    TerminalSettingId["SplitCwd"] = "terminal.integrated.splitCwd";
    TerminalSettingId["WindowsEnableConpty"] = "terminal.integrated.windowsEnableConpty";
    TerminalSettingId["WordSeparators"] = "terminal.integrated.wordSeparators";
    TerminalSettingId["EnableFileLinks"] = "terminal.integrated.enableFileLinks";
    TerminalSettingId["AllowedLinkSchemes"] = "terminal.integrated.allowedLinkSchemes";
    TerminalSettingId["UnicodeVersion"] = "terminal.integrated.unicodeVersion";
    TerminalSettingId["EnablePersistentSessions"] = "terminal.integrated.enablePersistentSessions";
    TerminalSettingId["PersistentSessionReviveProcess"] = "terminal.integrated.persistentSessionReviveProcess";
    TerminalSettingId["HideOnStartup"] = "terminal.integrated.hideOnStartup";
    TerminalSettingId["CustomGlyphs"] = "terminal.integrated.customGlyphs";
    TerminalSettingId["RescaleOverlappingGlyphs"] = "terminal.integrated.rescaleOverlappingGlyphs";
    TerminalSettingId["PersistentSessionScrollback"] = "terminal.integrated.persistentSessionScrollback";
    TerminalSettingId["InheritEnv"] = "terminal.integrated.inheritEnv";
    TerminalSettingId["ShowLinkHover"] = "terminal.integrated.showLinkHover";
    TerminalSettingId["IgnoreProcessNames"] = "terminal.integrated.ignoreProcessNames";
    TerminalSettingId["AutoReplies"] = "terminal.integrated.autoReplies";
    TerminalSettingId["ShellIntegrationEnabled"] = "terminal.integrated.shellIntegration.enabled";
    TerminalSettingId["ShellIntegrationShowWelcome"] = "terminal.integrated.shellIntegration.showWelcome";
    TerminalSettingId["ShellIntegrationDecorationsEnabled"] = "terminal.integrated.shellIntegration.decorationsEnabled";
    TerminalSettingId["ShellIntegrationCommandHistory"] = "terminal.integrated.shellIntegration.history";
    TerminalSettingId["EnableImages"] = "terminal.integrated.enableImages";
    TerminalSettingId["SmoothScrolling"] = "terminal.integrated.smoothScrolling";
    TerminalSettingId["IgnoreBracketedPasteMode"] = "terminal.integrated.ignoreBracketedPasteMode";
    TerminalSettingId["FocusAfterRun"] = "terminal.integrated.focusAfterRun";
    TerminalSettingId["DeveloperPtyHostLatency"] = "terminal.integrated.developer.ptyHost.latency";
    TerminalSettingId["DeveloperPtyHostStartupDelay"] = "terminal.integrated.developer.ptyHost.startupDelay";
    TerminalSettingId["DevMode"] = "terminal.integrated.developer.devMode";
})(TerminalSettingId || (TerminalSettingId = {})));
var PosixShellType;
( (function(PosixShellType) {
    PosixShellType["PowerShell"] = "pwsh";
    PosixShellType["Bash"] = "bash";
    PosixShellType["Fish"] = "fish";
    PosixShellType["Sh"] = "sh";
    PosixShellType["Csh"] = "csh";
    PosixShellType["Ksh"] = "ksh";
    PosixShellType["Zsh"] = "zsh";
    PosixShellType["Python"] = "python";
})(PosixShellType || (PosixShellType = {})));
var WindowsShellType;
( (function(WindowsShellType) {
    WindowsShellType["CommandPrompt"] = "cmd";
    WindowsShellType["PowerShell"] = "pwsh";
    WindowsShellType["Wsl"] = "wsl";
    WindowsShellType["GitBash"] = "gitbash";
    WindowsShellType["Python"] = "python";
})(WindowsShellType || (WindowsShellType = {})));
var TitleEventSource;
( (function(TitleEventSource) {
    TitleEventSource[TitleEventSource["Api"] = 0] = "Api";
    TitleEventSource[TitleEventSource["Process"] = 1] = "Process";
    TitleEventSource[TitleEventSource["Sequence"] = 2] = "Sequence";
    TitleEventSource[TitleEventSource["Config"] = 3] = "Config";
})(TitleEventSource || (TitleEventSource = {})));
var ProcessPropertyType;
( (function(ProcessPropertyType) {
    ProcessPropertyType["Cwd"] = "cwd";
    ProcessPropertyType["InitialCwd"] = "initialCwd";
    ProcessPropertyType["FixedDimensions"] = "fixedDimensions";
    ProcessPropertyType["Title"] = "title";
    ProcessPropertyType["ShellType"] = "shellType";
    ProcessPropertyType["HasChildProcesses"] = "hasChildProcesses";
    ProcessPropertyType["ResolvedShellLaunchConfig"] = "resolvedShellLaunchConfig";
    ProcessPropertyType["OverrideDimensions"] = "overrideDimensions";
    ProcessPropertyType["FailedShellIntegrationActivation"] = "failedShellIntegrationActivation";
    ProcessPropertyType["UsedShellIntegrationInjection"] = "usedShellIntegrationInjection";
})(ProcessPropertyType || (ProcessPropertyType = {})));
var TerminalLocation;
( (function(TerminalLocation) {
    TerminalLocation[TerminalLocation["Panel"] = 1] = "Panel";
    TerminalLocation[TerminalLocation["Editor"] = 2] = "Editor";
})(TerminalLocation || (TerminalLocation = {})));
var TerminalLocationString;
( (function(TerminalLocationString) {
    TerminalLocationString["TerminalView"] = "view";
    TerminalLocationString["Editor"] = "editor";
})(TerminalLocationString || (TerminalLocationString = {})));
var FlowControlConstants;
( (function(FlowControlConstants) {
    FlowControlConstants[FlowControlConstants["HighWatermarkChars"] = 100000] = "HighWatermarkChars";
    FlowControlConstants[FlowControlConstants["LowWatermarkChars"] = 5000] = "LowWatermarkChars";
    FlowControlConstants[FlowControlConstants["CharCountAckSize"] = 5000] = "CharCountAckSize";
})(FlowControlConstants || (FlowControlConstants = {})));
var ShellIntegrationStatus;
( (function(ShellIntegrationStatus) {
    ShellIntegrationStatus[ShellIntegrationStatus["Off"] = 0] = "Off";
    ShellIntegrationStatus[ShellIntegrationStatus["FinalTerm"] = 1] = "FinalTerm";
    ShellIntegrationStatus[ShellIntegrationStatus["VSCode"] = 2] = "VSCode";
})(ShellIntegrationStatus || (ShellIntegrationStatus = {})));
var TerminalExitReason;
( (function(TerminalExitReason) {
    TerminalExitReason[TerminalExitReason["Unknown"] = 0] = "Unknown";
    TerminalExitReason[TerminalExitReason["Shutdown"] = 1] = "Shutdown";
    TerminalExitReason[TerminalExitReason["Process"] = 2] = "Process";
    TerminalExitReason[TerminalExitReason["User"] = 3] = "User";
    TerminalExitReason[TerminalExitReason["Extension"] = 4] = "Extension";
})(TerminalExitReason || (TerminalExitReason = {})));
const TerminalExtensions = {
    Backend: 'workbench.contributions.terminal.processBackend'
};
function sanitizeRemoteAuthority(remoteAuthority) {
    return remoteAuthority?.toLowerCase() ?? '';
}
class TerminalBackendChangeEvent {
    constructor(remoteAuthority) {
        this.remoteAuthority = remoteAuthority;
    }
    affects(remoteAuthority) {
        return sanitizeRemoteAuthority(remoteAuthority) === this.remoteAuthority;
    }
}
class TerminalBackendRegistry {
    constructor() {
        this._backends = ( new Map());
        this._onDidChangeBackends = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidChangeBackends = this._onDidChangeBackends.event;
    }
    get backends() { return this._backends; }
    registerTerminalBackend(backend) {
        const key = sanitizeRemoteAuthority(backend.remoteAuthority);
        if (( this._backends.has(key))) {
            throw ( new Error(
                `A terminal backend with remote authority '${key}' was already registered.`
            ));
        }
        this._backends.set(key, backend);
        this._onDidChangeBackends.fire(( new TerminalBackendChangeEvent(key)));
    }
    getTerminalBackend(remoteAuthority) {
        return this._backends.get(sanitizeRemoteAuthority(remoteAuthority));
    }
}
_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_2__.Registry.add(TerminalExtensions.Backend, ( new TerminalBackendRegistry()));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/terminal/common/terminalDataBuffering.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/terminal/common/terminalDataBuffering.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TerminalDataBufferer: () => (/* binding */ TerminalDataBufferer)
/* harmony export */ });
class TerminalDataBufferer {
    constructor(_callback) {
        this._callback = _callback;
        this._terminalBufferMap = ( new Map());
    }
    dispose() {
        for (const buffer of ( this._terminalBufferMap.values())) {
            buffer.dispose();
        }
    }
    startBuffering(id, event, throttleBy = 5) {
        const disposable = event((e) => {
            const data = (typeof e === 'string' ? e : e.data);
            let buffer = this._terminalBufferMap.get(id);
            if (buffer) {
                buffer.data.push(data);
                return;
            }
            const timeoutId = setTimeout(() => this.flushBuffer(id), throttleBy);
            buffer = {
                data: [data],
                timeoutId: timeoutId,
                dispose: () => {
                    clearTimeout(timeoutId);
                    this.flushBuffer(id);
                    disposable.dispose();
                }
            };
            this._terminalBufferMap.set(id, buffer);
        });
        return disposable;
    }
    stopBuffering(id) {
        const buffer = this._terminalBufferMap.get(id);
        buffer?.dispose();
    }
    flushBuffer(id) {
        const buffer = this._terminalBufferMap.get(id);
        if (buffer) {
            this._terminalBufferMap.delete(id);
            this._callback(id, buffer.data.join(''));
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/theme/common/iconRegistry.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/theme/common/iconRegistry.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Extensions: () => (/* binding */ Extensions),
/* harmony export */   IconFontDefinition: () => (/* binding */ IconFontDefinition),
/* harmony export */   getIconRegistry: () => (/* binding */ getIconRegistry),
/* harmony export */   gotoNextLocation: () => (/* binding */ gotoNextLocation),
/* harmony export */   gotoPreviousLocation: () => (/* binding */ gotoPreviousLocation),
/* harmony export */   iconsSchemaId: () => (/* binding */ iconsSchemaId),
/* harmony export */   registerIcon: () => (/* binding */ registerIcon),
/* harmony export */   spinningLoading: () => (/* binding */ spinningLoading),
/* harmony export */   syncing: () => (/* binding */ syncing),
/* harmony export */   widgetClose: () => (/* binding */ widgetClose)
/* harmony export */ });
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/codicons.js */ "./node_modules/vscode/vscode/src/vs/base/common/codicons.js");
/* harmony import */ var _base_common_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/codiconsUtil.js */ "./node_modules/vscode/vscode/src/vs/base/common/codiconsUtil.js");
/* harmony import */ var _base_common_themables_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _jsonschemas_common_jsonContributionRegistry_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../jsonschemas/common/jsonContributionRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.js");
/* harmony import */ var _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");










const _moduleId = "vs/platform/theme/common/iconRegistry";
const Extensions = {
    IconContribution: 'base.contributions.icons'
};
var IconFontDefinition;
( ((function(IconFontDefinition) {
    function toJSONObject(iconFont) {
        return {
            weight: iconFont.weight,
            style: iconFont.style,
            src: ( (iconFont.src.map(
                s => ({ format: s.format, location: ( (s.location.toString())) })
            )))
        };
    }
    IconFontDefinition.toJSONObject = toJSONObject;
    function fromJSONObject(json) {
        const stringOrUndef = (s) => (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__.isString)(s) ? s : undefined;
        if (json && Array.isArray(json.src) && json.src.every((s) => (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__.isString)(s.format) && (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__.isString)(s.location))) {
            return {
                weight: stringOrUndef(json.weight),
                style: stringOrUndef(json.style),
                src: ( (json.src.map(
                    (s) => ({ format: s.format, location: ( (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.parse(s.location))) })
                )))
            };
        }
        return undefined;
    }
    IconFontDefinition.fromJSONObject = fromJSONObject;
})(IconFontDefinition || (IconFontDefinition = {}))));
class IconRegistry {
    constructor() {
        this._onDidChange = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter()));
        this.onDidChange = this._onDidChange.event;
        this.iconSchema = {
            definitions: {
                icons: {
                    type: 'object',
                    properties: {
                        fontId: { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(
                            _moduleId,
                            0,
                            'The id of the font to use. If not set, the font that is defined first is used.'
                        )) },
                        fontCharacter: { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 1, 'The font character associated with the icon definition.')) }
                    },
                    additionalProperties: false,
                    defaultSnippets: [{ body: { fontCharacter: '\\\\e030' } }]
                }
            },
            type: 'object',
            properties: {}
        };
        this.iconReferenceSchema = { type: 'string', pattern: `^${_base_common_themables_js__WEBPACK_IMPORTED_MODULE_3__.ThemeIcon.iconNameExpression}$`, enum: [], enumDescriptions: [] };
        this.iconsById = {};
        this.iconFontsById = {};
    }
    registerIcon(id, defaults, description, deprecationMessage) {
        const existing = this.iconsById[id];
        if (existing) {
            if (description && !existing.description) {
                existing.description = description;
                this.iconSchema.properties[id].markdownDescription = `${description} $(${id})`;
                const enumIndex = this.iconReferenceSchema.enum.indexOf(id);
                if (enumIndex !== -1) {
                    this.iconReferenceSchema.enumDescriptions[enumIndex] = description;
                }
                this._onDidChange.fire();
            }
            return existing;
        }
        const iconContribution = { id, description, defaults, deprecationMessage };
        this.iconsById[id] = iconContribution;
        const propertySchema = { $ref: '#/definitions/icons' };
        if (deprecationMessage) {
            propertySchema.deprecationMessage = deprecationMessage;
        }
        if (description) {
            propertySchema.markdownDescription = `${description}: $(${id})`;
        }
        this.iconSchema.properties[id] = propertySchema;
        this.iconReferenceSchema.enum.push(id);
        this.iconReferenceSchema.enumDescriptions.push(description || '');
        this._onDidChange.fire();
        return { id };
    }
    deregisterIcon(id) {
        delete this.iconsById[id];
        delete this.iconSchema.properties[id];
        const index = this.iconReferenceSchema.enum.indexOf(id);
        if (index !== -1) {
            this.iconReferenceSchema.enum.splice(index, 1);
            this.iconReferenceSchema.enumDescriptions.splice(index, 1);
        }
        this._onDidChange.fire();
    }
    getIcons() {
        return (
             (( (Object.keys(this.iconsById))).map(id => this.iconsById[id]))
        );
    }
    getIcon(id) {
        return this.iconsById[id];
    }
    getIconSchema() {
        return this.iconSchema;
    }
    getIconReferenceSchema() {
        return this.iconReferenceSchema;
    }
    registerIconFont(id, definition) {
        const existing = this.iconFontsById[id];
        if (existing) {
            return existing;
        }
        this.iconFontsById[id] = definition;
        this._onDidChange.fire();
        return definition;
    }
    deregisterIconFont(id) {
        delete this.iconFontsById[id];
    }
    getIconFont(id) {
        return this.iconFontsById[id];
    }
    toString() {
        const sorter = (i1, i2) => {
            return i1.id.localeCompare(i2.id);
        };
        const classNames = (i) => {
            while (_base_common_themables_js__WEBPACK_IMPORTED_MODULE_3__.ThemeIcon.isThemeIcon(i.defaults)) {
                i = this.iconsById[i.defaults.id];
            }
            return `codicon codicon-${i ? i.id : ''}`;
        };
        const reference = [];
        reference.push(`| preview     | identifier                        | default codicon ID                | description`);
        reference.push(`| ----------- | --------------------------------- | --------------------------------- | --------------------------------- |`);
        const contributions = ( (( (Object.keys(this.iconsById))).map(key => this.iconsById[key])));
        for (const i of contributions.filter(i => !!i.description).sort(sorter)) {
            reference.push(`|<i class="${classNames(i)}"></i>|${i.id}|${_base_common_themables_js__WEBPACK_IMPORTED_MODULE_3__.ThemeIcon.isThemeIcon(i.defaults) ? i.defaults.id : i.id}|${i.description || ''}|`);
        }
        reference.push(`| preview     | identifier                        `);
        reference.push(`| ----------- | --------------------------------- |`);
        for (const i of contributions.filter(i => !_base_common_themables_js__WEBPACK_IMPORTED_MODULE_3__.ThemeIcon.isThemeIcon(i.defaults)).sort(sorter)) {
            reference.push(`|<i class="${classNames(i)}"></i>|${i.id}|`);
        }
        return reference.join('\n');
    }
}
const iconRegistry = ( (new IconRegistry()));
_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_9__.Registry.add(Extensions.IconContribution, iconRegistry);
function registerIcon(id, defaults, description, deprecationMessage) {
    return iconRegistry.registerIcon(id, defaults, description, deprecationMessage);
}
function getIconRegistry() {
    return iconRegistry;
}
function initialize() {
    const codiconFontCharacters = (0,_base_common_codiconsUtil_js__WEBPACK_IMPORTED_MODULE_2__.getCodiconFontCharacters)();
    for (const icon in codiconFontCharacters) {
        const fontCharacter = '\\' + ( (codiconFontCharacters[icon].toString(16)));
        iconRegistry.registerIcon(icon, { fontCharacter });
    }
}
initialize();
const iconsSchemaId = 'vscode://schemas/icons';
const schemaRegistry = ( _registry_common_platform_js__WEBPACK_IMPORTED_MODULE_9__.Registry.as(_jsonschemas_common_jsonContributionRegistry_js__WEBPACK_IMPORTED_MODULE_8__.Extensions.JSONContribution));
schemaRegistry.registerSchema(iconsSchemaId, iconRegistry.getIconSchema());
const delayer = ( (new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.RunOnceScheduler(() => schemaRegistry.notifySchemaChanged(iconsSchemaId), 200)));
iconRegistry.onDidChange(() => {
    if (!delayer.isScheduled()) {
        delayer.schedule();
    }
});
const widgetClose = registerIcon('widget-close', _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_1__.Codicon.close, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 2, 'Icon for the close action in widgets.')));
const gotoPreviousLocation = registerIcon('goto-previous-location', _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_1__.Codicon.arrowUp, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 3, 'Icon for goto previous editor location.')));
const gotoNextLocation = registerIcon('goto-next-location', _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_1__.Codicon.arrowDown, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_7__.localizeWithPath)(_moduleId, 4, 'Icon for goto next editor location.')));
const syncing = _base_common_themables_js__WEBPACK_IMPORTED_MODULE_3__.ThemeIcon.modify(_base_common_codicons_js__WEBPACK_IMPORTED_MODULE_1__.Codicon.sync, 'spin');
const spinningLoading = _base_common_themables_js__WEBPACK_IMPORTED_MODULE_3__.ThemeIcon.modify(_base_common_codicons_js__WEBPACK_IMPORTED_MODULE_1__.Codicon.loading, 'spin');



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/tunnel/common/tunnel.js":
/*!****************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/tunnel/common/tunnel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ALL_INTERFACES_ADDRESSES: () => (/* binding */ ALL_INTERFACES_ADDRESSES),
/* harmony export */   AbstractTunnelService: () => (/* binding */ AbstractTunnelService),
/* harmony export */   DisposableTunnel: () => (/* binding */ DisposableTunnel),
/* harmony export */   LOCALHOST_ADDRESSES: () => (/* binding */ LOCALHOST_ADDRESSES),
/* harmony export */   ProvidedOnAutoForward: () => (/* binding */ ProvidedOnAutoForward),
/* harmony export */   TunnelPrivacyId: () => (/* binding */ TunnelPrivacyId),
/* harmony export */   TunnelProtocol: () => (/* binding */ TunnelProtocol),
/* harmony export */   extractLocalHostUriMetaDataForPortMapping: () => (/* binding */ extractLocalHostUriMetaDataForPortMapping),
/* harmony export */   isAllInterfaces: () => (/* binding */ isAllInterfaces),
/* harmony export */   isLocalhost: () => (/* binding */ isLocalhost),
/* harmony export */   isTunnelProvider: () => (/* binding */ isTunnelProvider)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../configuration/common/configuration.service.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js");
/* harmony import */ var _log_common_log_service_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");









var TunnelProtocol;
( (function(TunnelProtocol) {
    TunnelProtocol["Http"] = "http";
    TunnelProtocol["Https"] = "https";
})(TunnelProtocol || (TunnelProtocol = {})));
var TunnelPrivacyId;
( (function(TunnelPrivacyId) {
    TunnelPrivacyId["ConstantPrivate"] = "constantPrivate";
    TunnelPrivacyId["Private"] = "private";
    TunnelPrivacyId["Public"] = "public";
})(TunnelPrivacyId || (TunnelPrivacyId = {})));
function isTunnelProvider(addressOrTunnelProvider) {
    return !!addressOrTunnelProvider.forwardPort;
}
var ProvidedOnAutoForward;
( (function(ProvidedOnAutoForward) {
    ProvidedOnAutoForward[ProvidedOnAutoForward["Notify"] = 1] = "Notify";
    ProvidedOnAutoForward[ProvidedOnAutoForward["OpenBrowser"] = 2] = "OpenBrowser";
    ProvidedOnAutoForward[ProvidedOnAutoForward["OpenPreview"] = 3] = "OpenPreview";
    ProvidedOnAutoForward[ProvidedOnAutoForward["Silent"] = 4] = "Silent";
    ProvidedOnAutoForward[ProvidedOnAutoForward["Ignore"] = 5] = "Ignore";
    ProvidedOnAutoForward[ProvidedOnAutoForward["OpenBrowserOnce"] = 6] = "OpenBrowserOnce";
})(ProvidedOnAutoForward || (ProvidedOnAutoForward = {})));
function extractLocalHostUriMetaDataForPortMapping(uri) {
    if (uri.scheme !== 'http' && uri.scheme !== 'https') {
        return undefined;
    }
    const localhostMatch = /^(localhost|127\.0\.0\.1|0\.0\.0\.0):(\d+)$/.exec(uri.authority);
    if (!localhostMatch) {
        return undefined;
    }
    return {
        address: localhostMatch[1],
        port: +localhostMatch[2],
    };
}
const LOCALHOST_ADDRESSES = ['localhost', '127.0.0.1', '0:0:0:0:0:0:0:1', '::1'];
function isLocalhost(host) {
    return LOCALHOST_ADDRESSES.indexOf(host) >= 0;
}
const ALL_INTERFACES_ADDRESSES = ['0.0.0.0', '0:0:0:0:0:0:0:0', '::'];
function isAllInterfaces(host) {
    return ALL_INTERFACES_ADDRESSES.indexOf(host) >= 0;
}
class DisposableTunnel {
    constructor(remoteAddress, localAddress, _dispose) {
        this.remoteAddress = remoteAddress;
        this.localAddress = localAddress;
        this._dispose = _dispose;
        this._onDispose = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidDispose = this._onDispose.event;
    }
    dispose() {
        this._onDispose.fire();
        return this._dispose();
    }
}
let AbstractTunnelService = class AbstractTunnelService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor(logService, configurationService) {
        super();
        this.logService = logService;
        this.configurationService = configurationService;
        this._onTunnelOpened = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onTunnelOpened = this._onTunnelOpened.event;
        this._onTunnelClosed = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onTunnelClosed = this._onTunnelClosed.event;
        this._onAddedTunnelProvider = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onAddedTunnelProvider = this._onAddedTunnelProvider.event;
        this._tunnels = ( new Map());
        this._canElevate = false;
        this._canChangeProtocol = true;
        this._privacyOptions = [];
        this._factoryInProgress = ( new Set());
    }
    get hasTunnelProvider() {
        return !!this._tunnelProvider;
    }
    get defaultTunnelHost() {
        const settingValue = this.configurationService.getValue('remote.localPortHost');
        return (!settingValue || settingValue === 'localhost') ? '127.0.0.1' : '0.0.0.0';
    }
    setTunnelProvider(provider) {
        this._tunnelProvider = provider;
        if (!provider) {
            this._canElevate = false;
            this._privacyOptions = [];
            this._onAddedTunnelProvider.fire();
            return {
                dispose: () => { }
            };
        }
        this._onAddedTunnelProvider.fire();
        return {
            dispose: () => {
                this._tunnelProvider = undefined;
                this._canElevate = false;
                this._privacyOptions = [];
            }
        };
    }
    setTunnelFeatures(features) {
        this._canElevate = features.elevation;
        this._privacyOptions = features.privacyOptions;
        this._canChangeProtocol = features.protocol;
    }
    get canChangeProtocol() {
        return this._canChangeProtocol;
    }
    get canElevate() {
        return this._canElevate;
    }
    get canChangePrivacy() {
        return this._privacyOptions.length > 0;
    }
    get privacyOptions() {
        return this._privacyOptions;
    }
    get tunnels() {
        return this.getTunnels();
    }
    async getTunnels() {
        const tunnels = [];
        const tunnelArray = Array.from(( this._tunnels.values()));
        for (const portMap of tunnelArray) {
            const portArray = Array.from(( portMap.values()));
            for (const x of portArray) {
                const tunnelValue = await x.value;
                if (tunnelValue && (typeof tunnelValue !== 'string')) {
                    tunnels.push(tunnelValue);
                }
            }
        }
        return tunnels;
    }
    async dispose() {
        super.dispose();
        for (const portMap of ( this._tunnels.values())) {
            for (const { value } of ( portMap.values())) {
                await value.then(tunnel => typeof tunnel !== 'string' ? tunnel?.dispose() : undefined);
            }
            portMap.clear();
        }
        this._tunnels.clear();
    }
    setEnvironmentTunnel(remoteHost, remotePort, localAddress, privacy, protocol) {
        this.addTunnelToMap(remoteHost, remotePort, Promise.resolve({
            tunnelRemoteHost: remoteHost,
            tunnelRemotePort: remotePort,
            localAddress,
            privacy,
            protocol,
            dispose: () => Promise.resolve()
        }));
    }
    async getExistingTunnel(remoteHost, remotePort) {
        if (isAllInterfaces(remoteHost) || isLocalhost(remoteHost)) {
            remoteHost = LOCALHOST_ADDRESSES[0];
        }
        const existing = this.getTunnelFromMap(remoteHost, remotePort);
        if (existing) {
            ++existing.refcount;
            return existing.value;
        }
        return undefined;
    }
    openTunnel(addressProvider, remoteHost, remotePort, localHost, localPort, elevateIfNeeded = false, privacy, protocol) {
        this.logService.trace(`ForwardedPorts: (TunnelService) openTunnel request for ${remoteHost}:${remotePort} on local port ${localPort}.`);
        const addressOrTunnelProvider = this._tunnelProvider ?? addressProvider;
        if (!addressOrTunnelProvider) {
            return undefined;
        }
        if (!remoteHost) {
            remoteHost = 'localhost';
        }
        if (!localHost) {
            localHost = this.defaultTunnelHost;
        }
        if (this._tunnelProvider && ( this._factoryInProgress.has(remotePort))) {
            this.logService.debug(`ForwardedPorts: (TunnelService) Another call to create a tunnel with the same address has occurred before the last one completed. This call will be ignored.`);
            return;
        }
        const resolvedTunnel = this.retainOrCreateTunnel(addressOrTunnelProvider, remoteHost, remotePort, localHost, localPort, elevateIfNeeded, privacy, protocol);
        if (!resolvedTunnel) {
            this.logService.trace(`ForwardedPorts: (TunnelService) Tunnel was not created.`);
            return resolvedTunnel;
        }
        return resolvedTunnel.then(tunnel => {
            if (!tunnel) {
                this.logService.trace('ForwardedPorts: (TunnelService) New tunnel is undefined.');
                this.removeEmptyOrErrorTunnelFromMap(remoteHost, remotePort);
                return undefined;
            }
            else if (typeof tunnel === 'string') {
                this.logService.trace('ForwardedPorts: (TunnelService) The tunnel provider returned an error when creating the tunnel.');
                this.removeEmptyOrErrorTunnelFromMap(remoteHost, remotePort);
                return tunnel;
            }
            this.logService.trace('ForwardedPorts: (TunnelService) New tunnel established.');
            const newTunnel = this.makeTunnel(tunnel);
            if (tunnel.tunnelRemoteHost !== remoteHost || tunnel.tunnelRemotePort !== remotePort) {
                this.logService.warn('ForwardedPorts: (TunnelService) Created tunnel does not match requirements of requested tunnel. Host or port mismatch.');
            }
            if (privacy && tunnel.privacy !== privacy) {
                this.logService.warn('ForwardedPorts: (TunnelService) Created tunnel does not match requirements of requested tunnel. Privacy mismatch.');
            }
            this._onTunnelOpened.fire(newTunnel);
            return newTunnel;
        });
    }
    makeTunnel(tunnel) {
        return {
            tunnelRemotePort: tunnel.tunnelRemotePort,
            tunnelRemoteHost: tunnel.tunnelRemoteHost,
            tunnelLocalPort: tunnel.tunnelLocalPort,
            localAddress: tunnel.localAddress,
            privacy: tunnel.privacy,
            protocol: tunnel.protocol,
            dispose: async () => {
                this.logService.trace(`ForwardedPorts: (TunnelService) dispose request for ${tunnel.tunnelRemoteHost}:${tunnel.tunnelRemotePort} `);
                const existingHost = this._tunnels.get(tunnel.tunnelRemoteHost);
                if (existingHost) {
                    const existing = existingHost.get(tunnel.tunnelRemotePort);
                    if (existing) {
                        existing.refcount--;
                        await this.tryDisposeTunnel(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort, existing);
                    }
                }
            }
        };
    }
    async tryDisposeTunnel(remoteHost, remotePort, tunnel) {
        if (tunnel.refcount <= 0) {
            this.logService.trace(`ForwardedPorts: (TunnelService) Tunnel is being disposed ${remoteHost}:${remotePort}.`);
            const disposePromise = tunnel.value.then(async (tunnel) => {
                if (tunnel && (typeof tunnel !== 'string')) {
                    await tunnel.dispose(true);
                    this._onTunnelClosed.fire({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort });
                }
            });
            if (( this._tunnels.has(remoteHost))) {
                this._tunnels.get(remoteHost).delete(remotePort);
            }
            return disposePromise;
        }
    }
    async closeTunnel(remoteHost, remotePort) {
        this.logService.trace(`ForwardedPorts: (TunnelService) close request for ${remoteHost}:${remotePort} `);
        const portMap = this._tunnels.get(remoteHost);
        if (portMap && ( portMap.has(remotePort))) {
            const value = portMap.get(remotePort);
            value.refcount = 0;
            await this.tryDisposeTunnel(remoteHost, remotePort, value);
        }
    }
    addTunnelToMap(remoteHost, remotePort, tunnel) {
        if (!( this._tunnels.has(remoteHost))) {
            this._tunnels.set(remoteHost, ( new Map()));
        }
        this._tunnels.get(remoteHost).set(remotePort, { refcount: 1, value: tunnel });
    }
    async removeEmptyOrErrorTunnelFromMap(remoteHost, remotePort) {
        const hostMap = this._tunnels.get(remoteHost);
        if (hostMap) {
            const tunnel = hostMap.get(remotePort);
            const tunnelResult = tunnel ? await tunnel.value : undefined;
            if (!tunnelResult || (typeof tunnelResult === 'string')) {
                hostMap.delete(remotePort);
            }
            if (hostMap.size === 0) {
                this._tunnels.delete(remoteHost);
            }
        }
    }
    getTunnelFromMap(remoteHost, remotePort) {
        const hosts = [remoteHost];
        if (isLocalhost(remoteHost)) {
            hosts.push(...LOCALHOST_ADDRESSES);
            hosts.push(...ALL_INTERFACES_ADDRESSES);
        }
        else if (isAllInterfaces(remoteHost)) {
            hosts.push(...ALL_INTERFACES_ADDRESSES);
        }
        const existingPortMaps = ( hosts.map(host => this._tunnels.get(host)));
        for (const map of existingPortMaps) {
            const existingTunnel = map?.get(remotePort);
            if (existingTunnel) {
                return existingTunnel;
            }
        }
        return undefined;
    }
    canTunnel(uri) {
        return !!extractLocalHostUriMetaDataForPortMapping(uri);
    }
    createWithProvider(tunnelProvider, remoteHost, remotePort, localPort, elevateIfNeeded, privacy, protocol) {
        this.logService.trace(`ForwardedPorts: (TunnelService) Creating tunnel with provider ${remoteHost}:${remotePort} on local port ${localPort}.`);
        const key = remotePort;
        this._factoryInProgress.add(key);
        const preferredLocalPort = localPort === undefined ? remotePort : localPort;
        const creationInfo = { elevationRequired: elevateIfNeeded ? this.isPortPrivileged(preferredLocalPort) : false };
        const tunnelOptions = { remoteAddress: { host: remoteHost, port: remotePort }, localAddressPort: localPort, privacy, public: privacy ? (privacy !== TunnelPrivacyId.Private) : undefined, protocol };
        const tunnel = tunnelProvider.forwardPort(tunnelOptions, creationInfo);
        if (tunnel) {
            this.addTunnelToMap(remoteHost, remotePort, tunnel);
            tunnel.finally(() => {
                this.logService.trace('ForwardedPorts: (TunnelService) Tunnel created by provider.');
                this._factoryInProgress.delete(key);
            });
        }
        else {
            this._factoryInProgress.delete(key);
        }
        return tunnel;
    }
};
AbstractTunnelService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _log_common_log_service_js__WEBPACK_IMPORTED_MODULE_8__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_7__.IConfigurationService))
], AbstractTunnelService));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/uriIdentity/common/uriIdentity.service.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/uriIdentity/common/uriIdentity.service.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IUriIdentityService: () => (/* binding */ IUriIdentityService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IUriIdentityService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('IUriIdentityService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/userDataProfile/common/userDataProfile.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/userDataProfile/common/userDataProfile.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProfileResourceType: () => (/* binding */ ProfileResourceType),
/* harmony export */   UserDataProfilesService: () => (/* binding */ UserDataProfilesService),
/* harmony export */   isUserDataProfile: () => (/* binding */ isUserDataProfile),
/* harmony export */   reviveProfile: () => (/* binding */ reviveProfile),
/* harmony export */   toUserDataProfile: () => (/* binding */ toUserDataProfile)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/hash.js */ "./node_modules/vscode/vscode/src/vs/base/common/hash.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _environment_common_environment_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../environment/common/environment.service.js */ "./node_modules/vscode/vscode/src/vs/platform/environment/common/environment.service.js");
/* harmony import */ var _files_common_files_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _files_common_files_service_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../files/common/files.service.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.service.js");
/* harmony import */ var _log_common_log_service_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../workspace/common/workspace.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _uriIdentity_common_uriIdentity_service_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../uriIdentity/common/uriIdentity.service.js */ "./node_modules/vscode/vscode/src/vs/platform/uriIdentity/common/uriIdentity.service.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_uuid_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../base/common/uuid.js */ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");


















const _moduleId = "vs/platform/userDataProfile/common/userDataProfile";
var ProfileResourceType;
( ((function(ProfileResourceType) {
    ProfileResourceType["Settings"] = "settings";
    ProfileResourceType["Keybindings"] = "keybindings";
    ProfileResourceType["Snippets"] = "snippets";
    ProfileResourceType["Tasks"] = "tasks";
    ProfileResourceType["Extensions"] = "extensions";
    ProfileResourceType["GlobalState"] = "globalState";
})(ProfileResourceType || (ProfileResourceType = {}))));
function isUserDataProfile(thing) {
    const candidate = thing;
    return !!(candidate && typeof candidate === 'object'
        && typeof candidate.id === 'string'
        && typeof candidate.isDefault === 'boolean'
        && typeof candidate.name === 'string'
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(candidate.location)
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(candidate.globalStorageHome)
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(candidate.settingsResource)
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(candidate.keybindingsResource)
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(candidate.tasksResource)
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(candidate.snippetsHome)
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(candidate.extensionsResource));
}
function reviveProfile(profile, scheme) {
    return {
        id: profile.id,
        isDefault: profile.isDefault,
        name: profile.name,
        shortName: profile.shortName,
        icon: profile.icon,
        location: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.location).with({ scheme }),
        globalStorageHome: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.globalStorageHome).with({ scheme }),
        settingsResource: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.settingsResource).with({ scheme }),
        keybindingsResource: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.keybindingsResource).with({ scheme }),
        tasksResource: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.tasksResource).with({ scheme }),
        snippetsHome: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.snippetsHome).with({ scheme }),
        extensionsResource: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.extensionsResource).with({ scheme }),
        cacheHome: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(profile.cacheHome).with({ scheme }),
        useDefaultFlags: profile.useDefaultFlags,
        isTransient: profile.isTransient,
    };
}
function toUserDataProfile(id, name, location, profilesCacheHome, options, defaultProfile) {
    return {
        id,
        name,
        location,
        isDefault: false,
        shortName: options?.shortName,
        icon: options?.icon,
        globalStorageHome: defaultProfile && options?.useDefaultFlags?.globalState ? defaultProfile.globalStorageHome : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(location, 'globalStorage'),
        settingsResource: defaultProfile && options?.useDefaultFlags?.settings ? defaultProfile.settingsResource : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(location, 'settings.json'),
        keybindingsResource: defaultProfile && options?.useDefaultFlags?.keybindings ? defaultProfile.keybindingsResource : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(location, 'keybindings.json'),
        tasksResource: defaultProfile && options?.useDefaultFlags?.tasks ? defaultProfile.tasksResource : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(location, 'tasks.json'),
        snippetsHome: defaultProfile && options?.useDefaultFlags?.snippets ? defaultProfile.snippetsHome : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(location, 'snippets'),
        extensionsResource: defaultProfile && options?.useDefaultFlags?.extensions ? defaultProfile.extensionsResource : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(location, 'extensions.json'),
        cacheHome: (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(profilesCacheHome, id),
        useDefaultFlags: options?.useDefaultFlags,
        isTransient: options?.transient
    };
}
let UserDataProfilesService = class UserDataProfilesService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
    static { this.PROFILES_KEY = 'userDataProfiles'; }
    static { this.PROFILE_ASSOCIATIONS_KEY = 'profileAssociations'; }
    get defaultProfile() { return this.profiles[0]; }
    get profiles() { return [...this.profilesObject.profiles, ...this.transientProfilesObject.profiles]; }
    constructor(environmentService, fileService, uriIdentityService, logService) {
        super();
        this.environmentService = environmentService;
        this.fileService = fileService;
        this.uriIdentityService = uriIdentityService;
        this.logService = logService;
        this.enabled = true;
        this._onDidChangeProfiles = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidChangeProfiles = this._onDidChangeProfiles.event;
        this._onWillCreateProfile = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onWillCreateProfile = this._onWillCreateProfile.event;
        this._onWillRemoveProfile = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onWillRemoveProfile = this._onWillRemoveProfile.event;
        this._onDidResetWorkspaces = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidResetWorkspaces = this._onDidResetWorkspaces.event;
        this.profileCreationPromises = ( (new Map()));
        this.transientProfilesObject = {
            profiles: [],
            folders: ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_12__.ResourceMap())),
            workspaces: ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_12__.ResourceMap())),
            emptyWindows: ( (new Map()))
        };
        this.profilesHome = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(this.environmentService.userRoamingDataHome, 'profiles');
        this.profilesCacheHome = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(this.environmentService.cacheHome, 'CachedProfilesData');
    }
    init() {
        this._profilesObject = undefined;
    }
    setEnablement(enabled) {
        if (this.enabled !== enabled) {
            this._profilesObject = undefined;
            this.enabled = enabled;
        }
    }
    isEnabled() {
        return this.enabled;
    }
    get profilesObject() {
        if (!this._profilesObject) {
            const defaultProfile = this.createDefaultProfile();
            const profiles = [defaultProfile];
            if (this.enabled) {
                try {
                    for (const storedProfile of this.getStoredProfiles()) {
                        if (!storedProfile.name || !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_17__.isString)(storedProfile.name) || !storedProfile.location) {
                            this.logService.warn('Skipping the invalid stored profile', storedProfile.location || storedProfile.name);
                            continue;
                        }
                        profiles.push(toUserDataProfile((0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.basename)(storedProfile.location), storedProfile.name, storedProfile.location, this.profilesCacheHome, { shortName: storedProfile.shortName, icon: storedProfile.icon, useDefaultFlags: storedProfile.useDefaultFlags }, defaultProfile));
                    }
                }
                catch (error) {
                    this.logService.error(error);
                }
            }
            const workspaces = ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_12__.ResourceMap()));
            const emptyWindows = ( (new Map()));
            if (profiles.length) {
                try {
                    const profileAssociaitions = this.getStoredProfileAssociations();
                    if (profileAssociaitions.workspaces) {
                        for (const [workspacePath, profileId] of Object.entries(profileAssociaitions.workspaces)) {
                            const workspace = ( (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.parse(workspacePath)));
                            const profile = profiles.find(p => p.id === profileId);
                            if (profile) {
                                workspaces.set(workspace, profile);
                            }
                        }
                    }
                    if (profileAssociaitions.emptyWindows) {
                        for (const [windowId, profileId] of Object.entries(profileAssociaitions.emptyWindows)) {
                            const profile = profiles.find(p => p.id === profileId);
                            if (profile) {
                                emptyWindows.set(windowId, profile);
                            }
                        }
                    }
                }
                catch (error) {
                    this.logService.error(error);
                }
            }
            this._profilesObject = { profiles, workspaces, emptyWindows };
        }
        return this._profilesObject;
    }
    createDefaultProfile() {
        const defaultProfile = toUserDataProfile('__default__profile__', ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(_moduleId, 0, "Default")), this.environmentService.userRoamingDataHome, this.profilesCacheHome);
        return { ...defaultProfile, extensionsResource: this.getDefaultProfileExtensionsLocation() ?? defaultProfile.extensionsResource, isDefault: true };
    }
    async createTransientProfile(workspaceIdentifier) {
        const namePrefix = `Temp`;
        const nameRegEx = ( (new RegExp(`${(0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_16__.escapeRegExpCharacters)(namePrefix)}\\s(\\d+)`)));
        let nameIndex = 0;
        for (const profile of this.profiles) {
            const matches = nameRegEx.exec(profile.name);
            const index = matches ? parseInt(matches[1]) : 0;
            nameIndex = index > nameIndex ? index : nameIndex;
        }
        const name = `${namePrefix} ${nameIndex + 1}`;
        return this.createProfile(( ((0,_base_common_hash_js__WEBPACK_IMPORTED_MODULE_1__.hash)((0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_15__.generateUuid)()).toString(16))), name, { transient: true }, workspaceIdentifier);
    }
    async createNamedProfile(name, options, workspaceIdentifier) {
        return this.createProfile(( ((0,_base_common_hash_js__WEBPACK_IMPORTED_MODULE_1__.hash)((0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_15__.generateUuid)()).toString(16))), name, options, workspaceIdentifier);
    }
    async createProfile(id, name, options, workspaceIdentifier) {
        if (!this.enabled) {
            throw ( (new Error(`Profiles are disabled in the current environment.`)));
        }
        const profile = await this.doCreateProfile(id, name, options);
        if (workspaceIdentifier) {
            await this.setProfileForWorkspace(workspaceIdentifier, profile);
        }
        return profile;
    }
    async doCreateProfile(id, name, options) {
        if (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_17__.isString)(name) || !name) {
            throw ( (new Error('Name of the profile is mandatory and must be of type `string`')));
        }
        let profileCreationPromise = this.profileCreationPromises.get(name);
        if (!profileCreationPromise) {
            profileCreationPromise = (async () => {
                try {
                    const existing = this.profiles.find(p => p.name === name || p.id === id);
                    if (existing) {
                        throw ( (new Error(`Profile with ${name} name already exists`)));
                    }
                    const profile = toUserDataProfile(id, name, (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(this.profilesHome, id), this.profilesCacheHome, options, this.defaultProfile);
                    await this.fileService.createFolder(profile.location);
                    const joiners = [];
                    this._onWillCreateProfile.fire({
                        profile,
                        join(promise) {
                            joiners.push(promise);
                        }
                    });
                    await _base_common_async_js__WEBPACK_IMPORTED_MODULE_14__.Promises.settled(joiners);
                    this.updateProfiles([profile], [], []);
                    return profile;
                }
                finally {
                    this.profileCreationPromises.delete(name);
                }
            })();
            this.profileCreationPromises.set(name, profileCreationPromise);
        }
        return profileCreationPromise;
    }
    async updateProfile(profileToUpdate, options) {
        if (!this.enabled) {
            throw ( (new Error(`Profiles are disabled in the current environment.`)));
        }
        let profile = this.profiles.find(p => p.id === profileToUpdate.id);
        if (!profile) {
            throw ( (new Error(`Profile '${profileToUpdate.name}' does not exist`)));
        }
        profile = toUserDataProfile(profile.id, options.name ?? profile.name, profile.location, this.profilesCacheHome, {
            shortName: options.shortName ?? profile.shortName,
            icon: options.icon === null ? undefined : options.icon ?? profile.icon,
            transient: options.transient ?? profile.isTransient,
            useDefaultFlags: options.useDefaultFlags ?? profile.useDefaultFlags
        }, this.defaultProfile);
        this.updateProfiles([], [], [profile]);
        return profile;
    }
    async removeProfile(profileToRemove) {
        if (!this.enabled) {
            throw ( (new Error(`Profiles are disabled in the current environment.`)));
        }
        if (profileToRemove.isDefault) {
            throw ( (new Error('Cannot remove default profile')));
        }
        const profile = this.profiles.find(p => p.id === profileToRemove.id);
        if (!profile) {
            throw ( (new Error(`Profile '${profileToRemove.name}' does not exist`)));
        }
        const joiners = [];
        this._onWillRemoveProfile.fire({
            profile,
            join(promise) {
                joiners.push(promise);
            }
        });
        try {
            await Promise.allSettled(joiners);
        }
        catch (error) {
            this.logService.error(error);
        }
        for (const windowId of [...( (this.profilesObject.emptyWindows.keys()))]) {
            if (profile.id === this.profilesObject.emptyWindows.get(windowId)?.id) {
                this.profilesObject.emptyWindows.delete(windowId);
            }
        }
        for (const workspace of [...( (this.profilesObject.workspaces.keys()))]) {
            if (profile.id === this.profilesObject.workspaces.get(workspace)?.id) {
                this.profilesObject.workspaces.delete(workspace);
            }
        }
        this.updateStoredProfileAssociations();
        this.updateProfiles([], [profile], []);
        try {
            await this.fileService.del(profile.cacheHome, { recursive: true });
        }
        catch (error) {
            if ((0,_files_common_files_js__WEBPACK_IMPORTED_MODULE_8__.toFileOperationResult)(error) !== _files_common_files_js__WEBPACK_IMPORTED_MODULE_8__.FileOperationResult.FILE_NOT_FOUND) {
                this.logService.error(error);
            }
        }
    }
    async setProfileForWorkspace(workspaceIdentifier, profileToSet) {
        if (!this.enabled) {
            throw ( (new Error(`Profiles are disabled in the current environment.`)));
        }
        const profile = this.profiles.find(p => p.id === profileToSet.id);
        if (!profile) {
            throw ( (new Error(`Profile '${profileToSet.name}' does not exist`)));
        }
        this.updateWorkspaceAssociation(workspaceIdentifier, profile);
    }
    unsetWorkspace(workspaceIdentifier, transient) {
        if (!this.enabled) {
            throw ( (new Error(`Profiles are disabled in the current environment.`)));
        }
        this.updateWorkspaceAssociation(workspaceIdentifier, undefined, transient);
    }
    async resetWorkspaces() {
        this.transientProfilesObject.folders.clear();
        this.transientProfilesObject.workspaces.clear();
        this.transientProfilesObject.emptyWindows.clear();
        this.profilesObject.workspaces.clear();
        this.profilesObject.emptyWindows.clear();
        this.updateStoredProfileAssociations();
        this._onDidResetWorkspaces.fire();
    }
    async cleanUp() {
        if (!this.enabled) {
            return;
        }
        if (await this.fileService.exists(this.profilesHome)) {
            const stat = await this.fileService.resolve(this.profilesHome);
            await Promise.all(( ((stat.children || [])
                .filter(child => child.isDirectory && this.profiles.every(p => !this.uriIdentityService.extUri.isEqual(p.location, child.resource)))
                .map(child => this.fileService.del(child.resource, { recursive: true })))));
        }
    }
    async cleanUpTransientProfiles() {
        if (!this.enabled) {
            return;
        }
        const unAssociatedTransientProfiles = this.transientProfilesObject.profiles.filter(p => !this.isProfileAssociatedToWorkspace(p));
        await Promise.allSettled(( (unAssociatedTransientProfiles.map(p => this.removeProfile(p)))));
    }
    getProfileForWorkspace(workspaceIdentifier) {
        const workspace = this.getWorkspace(workspaceIdentifier);
        const profile = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(workspace) ? this.profilesObject.workspaces.get(workspace) : this.profilesObject.emptyWindows.get(workspace);
        if (profile) {
            return profile;
        }
        if ((0,_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_11__.isSingleFolderWorkspaceIdentifier)(workspaceIdentifier)) {
            return this.transientProfilesObject.folders.get(workspaceIdentifier.uri);
        }
        if ((0,_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_11__.isWorkspaceIdentifier)(workspaceIdentifier)) {
            return this.transientProfilesObject.workspaces.get(workspaceIdentifier.configPath);
        }
        return this.transientProfilesObject.emptyWindows.get(workspaceIdentifier.id);
    }
    getWorkspace(workspaceIdentifier) {
        if ((0,_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_11__.isSingleFolderWorkspaceIdentifier)(workspaceIdentifier)) {
            return workspaceIdentifier.uri;
        }
        if ((0,_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_11__.isWorkspaceIdentifier)(workspaceIdentifier)) {
            return workspaceIdentifier.configPath;
        }
        return workspaceIdentifier.id;
    }
    isProfileAssociatedToWorkspace(profile) {
        if (( ([...( (this.profilesObject.emptyWindows.values()))].some(
            windowProfile => this.uriIdentityService.extUri.isEqual(windowProfile.location, profile.location)
        )))) {
            return true;
        }
        if (( ([...( (this.profilesObject.workspaces.values()))].some(
            workspaceProfile => this.uriIdentityService.extUri.isEqual(workspaceProfile.location, profile.location)
        )))) {
            return true;
        }
        if (( ([...( (this.transientProfilesObject.emptyWindows.values()))].some(
            windowProfile => this.uriIdentityService.extUri.isEqual(windowProfile.location, profile.location)
        )))) {
            return true;
        }
        if (( ([...( (this.transientProfilesObject.workspaces.values()))].some(
            workspaceProfile => this.uriIdentityService.extUri.isEqual(workspaceProfile.location, profile.location)
        )))) {
            return true;
        }
        if (( ([...( (this.transientProfilesObject.folders.values()))].some(
            workspaceProfile => this.uriIdentityService.extUri.isEqual(workspaceProfile.location, profile.location)
        )))) {
            return true;
        }
        return false;
    }
    updateProfiles(added, removed, updated) {
        const allProfiles = [...this.profiles, ...added];
        const storedProfiles = [];
        const transientProfiles = this.transientProfilesObject.profiles;
        this.transientProfilesObject.profiles = [];
        for (let profile of allProfiles) {
            if (profile.isDefault) {
                continue;
            }
            if (( (removed.some(p => profile.id === p.id)))) {
                continue;
            }
            profile = updated.find(p => profile.id === p.id) ?? profile;
            const transientProfile = transientProfiles.find(p => profile.id === p.id);
            if (profile.isTransient) {
                this.transientProfilesObject.profiles.push(profile);
            }
            else {
                if (transientProfile) {
                    for (const [windowId, p] of this.transientProfilesObject.emptyWindows.entries()) {
                        if (profile.id === p.id) {
                            this.updateWorkspaceAssociation({ id: windowId }, profile);
                            break;
                        }
                    }
                    for (const [workspace, p] of this.transientProfilesObject.workspaces.entries()) {
                        if (profile.id === p.id) {
                            this.updateWorkspaceAssociation({ id: '', configPath: workspace }, profile);
                            break;
                        }
                    }
                    for (const [folder, p] of this.transientProfilesObject.folders.entries()) {
                        if (profile.id === p.id) {
                            this.updateWorkspaceAssociation({ id: '', uri: folder }, profile);
                            break;
                        }
                    }
                }
                storedProfiles.push({ location: profile.location, name: profile.name, shortName: profile.shortName, icon: profile.icon, useDefaultFlags: profile.useDefaultFlags });
            }
        }
        this.saveStoredProfiles(storedProfiles);
        this._profilesObject = undefined;
        this.triggerProfilesChanges(added, removed, updated);
    }
    triggerProfilesChanges(added, removed, updated) {
        this._onDidChangeProfiles.fire({ added, removed, updated, all: this.profiles });
    }
    updateWorkspaceAssociation(workspaceIdentifier, newProfile, transient) {
        transient = newProfile?.isTransient ? true : transient;
        if (transient) {
            if ((0,_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_11__.isSingleFolderWorkspaceIdentifier)(workspaceIdentifier)) {
                this.transientProfilesObject.folders.delete(workspaceIdentifier.uri);
                if (newProfile) {
                    this.transientProfilesObject.folders.set(workspaceIdentifier.uri, newProfile);
                }
            }
            else if ((0,_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_11__.isWorkspaceIdentifier)(workspaceIdentifier)) {
                this.transientProfilesObject.workspaces.delete(workspaceIdentifier.configPath);
                if (newProfile) {
                    this.transientProfilesObject.workspaces.set(workspaceIdentifier.configPath, newProfile);
                }
            }
            else {
                this.transientProfilesObject.emptyWindows.delete(workspaceIdentifier.id);
                if (newProfile) {
                    this.transientProfilesObject.emptyWindows.set(workspaceIdentifier.id, newProfile);
                }
            }
        }
        else {
            this.updateWorkspaceAssociation(workspaceIdentifier, undefined, true);
            const workspace = this.getWorkspace(workspaceIdentifier);
            if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.isUri(workspace)) {
                this.profilesObject.workspaces.delete(workspace);
                if (newProfile) {
                    this.profilesObject.workspaces.set(workspace, newProfile);
                }
            }
            else {
                this.profilesObject.emptyWindows.delete(workspace);
                if (newProfile) {
                    this.profilesObject.emptyWindows.set(workspace, newProfile);
                }
            }
            this.updateStoredProfileAssociations();
        }
    }
    updateStoredProfileAssociations() {
        const workspaces = {};
        for (const [workspace, profile] of this.profilesObject.workspaces.entries()) {
            workspaces[( (workspace.toString()))] = profile.id;
        }
        const emptyWindows = {};
        for (const [windowId, profile] of this.profilesObject.emptyWindows.entries()) {
            emptyWindows[( (windowId.toString()))] = profile.id;
        }
        this.saveStoredProfileAssociations({ workspaces, emptyWindows });
        this._profilesObject = undefined;
    }
    migrateStoredProfileAssociations(storedProfileAssociations) {
        const workspaces = {};
        const defaultProfile = this.createDefaultProfile();
        if (storedProfileAssociations.workspaces) {
            for (const [workspace, location] of Object.entries(storedProfileAssociations.workspaces)) {
                const uri = ( (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.parse(location)));
                workspaces[workspace] = this.uriIdentityService.extUri.isEqual(uri, defaultProfile.location) ? defaultProfile.id : this.uriIdentityService.extUri.basename(uri);
            }
        }
        const emptyWindows = {};
        if (storedProfileAssociations.emptyWindows) {
            for (const [workspace, location] of Object.entries(storedProfileAssociations.emptyWindows)) {
                const uri = ( (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.parse(location)));
                emptyWindows[workspace] = this.uriIdentityService.extUri.isEqual(uri, defaultProfile.location) ? defaultProfile.id : this.uriIdentityService.extUri.basename(uri);
            }
        }
        return { workspaces, emptyWindows };
    }
    getStoredProfiles() { return []; }
    saveStoredProfiles(storedProfiles) { throw ( (new Error('not implemented'))); }
    getStoredProfileAssociations() { return {}; }
    saveStoredProfileAssociations(storedProfileAssociations) { throw ( (new Error('not implemented'))); }
    getDefaultProfileExtensionsLocation() { return undefined; }
};
UserDataProfilesService = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _environment_common_environment_service_js__WEBPACK_IMPORTED_MODULE_7__.IEnvironmentService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _files_common_files_service_js__WEBPACK_IMPORTED_MODULE_9__.IFileService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _uriIdentity_common_uriIdentity_service_js__WEBPACK_IMPORTED_MODULE_13__.IUriIdentityService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _log_common_log_service_js__WEBPACK_IMPORTED_MODULE_10__.ILogService)))
], UserDataProfilesService)));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/userDataProfile/common/userDataProfile.service.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/userDataProfile/common/userDataProfile.service.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IUserDataProfilesService: () => (/* binding */ IUserDataProfilesService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IUserDataProfilesService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('IUserDataProfilesService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/editSessions.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/workspace/common/editSessions.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EditSessionIdentityMatch: () => (/* binding */ EditSessionIdentityMatch)
/* harmony export */ });
var EditSessionIdentityMatch;
( (function(EditSessionIdentityMatch) {
    EditSessionIdentityMatch[EditSessionIdentityMatch["Complete"] = 100] = "Complete";
    EditSessionIdentityMatch[EditSessionIdentityMatch["Partial"] = 50] = "Partial";
    EditSessionIdentityMatch[EditSessionIdentityMatch["None"] = 0] = "None";
})(EditSessionIdentityMatch || (EditSessionIdentityMatch = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   STANDALONE_EDITOR_WORKSPACE_ID: () => (/* binding */ STANDALONE_EDITOR_WORKSPACE_ID),
/* harmony export */   UNKNOWN_EMPTY_WINDOW_WORKSPACE: () => (/* binding */ UNKNOWN_EMPTY_WINDOW_WORKSPACE),
/* harmony export */   UNTITLED_WORKSPACE_NAME: () => (/* binding */ UNTITLED_WORKSPACE_NAME),
/* harmony export */   WORKSPACE_EXTENSION: () => (/* binding */ WORKSPACE_EXTENSION),
/* harmony export */   WORKSPACE_FILTER: () => (/* binding */ WORKSPACE_FILTER),
/* harmony export */   WORKSPACE_SUFFIX: () => (/* binding */ WORKSPACE_SUFFIX),
/* harmony export */   WorkbenchState: () => (/* binding */ WorkbenchState),
/* harmony export */   Workspace: () => (/* binding */ Workspace$1),
/* harmony export */   WorkspaceFolder: () => (/* binding */ WorkspaceFolder),
/* harmony export */   hasWorkspaceFileExtension: () => (/* binding */ hasWorkspaceFileExtension),
/* harmony export */   isEmptyWorkspaceIdentifier: () => (/* binding */ isEmptyWorkspaceIdentifier),
/* harmony export */   isSavedWorkspace: () => (/* binding */ isSavedWorkspace),
/* harmony export */   isSingleFolderWorkspaceIdentifier: () => (/* binding */ isSingleFolderWorkspaceIdentifier),
/* harmony export */   isStandaloneEditorWorkspace: () => (/* binding */ isStandaloneEditorWorkspace),
/* harmony export */   isTemporaryWorkspace: () => (/* binding */ isTemporaryWorkspace),
/* harmony export */   isUntitledWorkspace: () => (/* binding */ isUntitledWorkspace),
/* harmony export */   isWorkspace: () => (/* binding */ isWorkspace),
/* harmony export */   isWorkspaceFolder: () => (/* binding */ isWorkspaceFolder),
/* harmony export */   isWorkspaceIdentifier: () => (/* binding */ isWorkspaceIdentifier),
/* harmony export */   toWorkspaceFolder: () => (/* binding */ toWorkspaceFolder),
/* harmony export */   toWorkspaceIdentifier: () => (/* binding */ toWorkspaceIdentifier)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/ternarySearchTree.js */ "./node_modules/vscode/vscode/src/vs/base/common/ternarySearchTree.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");






const _moduleId = "vs/platform/workspace/common/workspace";
function isSingleFolderWorkspaceIdentifier(obj) {
    const singleFolderIdentifier = obj;
    return typeof singleFolderIdentifier?.id === 'string' && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.isUri(singleFolderIdentifier.uri);
}
function isEmptyWorkspaceIdentifier(obj) {
    const emptyWorkspaceIdentifier = obj;
    return typeof emptyWorkspaceIdentifier?.id === 'string'
        && !isSingleFolderWorkspaceIdentifier(obj)
        && !isWorkspaceIdentifier(obj);
}
const UNKNOWN_EMPTY_WINDOW_WORKSPACE = { id: 'empty-window' };
function toWorkspaceIdentifier(arg0, isExtensionDevelopment) {
    if (typeof arg0 === 'string' || typeof arg0 === 'undefined') {
        if (typeof arg0 === 'string') {
            return {
                id: (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_1__.basename)(arg0)
            };
        }
        return UNKNOWN_EMPTY_WINDOW_WORKSPACE;
    }
    const workspace = arg0;
    if (workspace.configuration) {
        return {
            id: workspace.id,
            configPath: workspace.configuration
        };
    }
    if (workspace.folders.length === 1) {
        return {
            id: workspace.id,
            uri: workspace.folders[0].uri
        };
    }
    return {
        id: workspace.id
    };
}
function isWorkspaceIdentifier(obj) {
    const workspaceIdentifier = obj;
    return typeof workspaceIdentifier?.id === 'string' && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.isUri(workspaceIdentifier.configPath);
}
var WorkbenchState;
( ((function(WorkbenchState) {
    WorkbenchState[WorkbenchState["EMPTY"] = 1] = "EMPTY";
    WorkbenchState[WorkbenchState["FOLDER"] = 2] = "FOLDER";
    WorkbenchState[WorkbenchState["WORKSPACE"] = 3] = "WORKSPACE";
})(WorkbenchState || (WorkbenchState = {}))));
function isWorkspace(thing) {
    const candidate = thing;
    return !!(candidate && typeof candidate === 'object'
        && typeof candidate.id === 'string'
        && Array.isArray(candidate.folders));
}
function isWorkspaceFolder(thing) {
    const candidate = thing;
    return !!(candidate && typeof candidate === 'object'
        && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.isUri(candidate.uri)
        && typeof candidate.name === 'string'
        && typeof candidate.toResource === 'function');
}
let Workspace$1 = class Workspace {
    constructor(_id, folders, _transient, _configuration, _ignorePathCasing) {
        this._id = _id;
        this._transient = _transient;
        this._configuration = _configuration;
        this._ignorePathCasing = _ignorePathCasing;
        this._foldersMap = _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_2__.TernarySearchTree.forUris(this._ignorePathCasing, () => true);
        this.folders = folders;
    }
    update(workspace) {
        this._id = workspace.id;
        this._configuration = workspace.configuration;
        this._transient = workspace.transient;
        this._ignorePathCasing = workspace._ignorePathCasing;
        this.folders = workspace.folders;
    }
    get folders() {
        return this._folders;
    }
    set folders(folders) {
        this._folders = folders;
        this.updateFoldersMap();
    }
    get id() {
        return this._id;
    }
    get transient() {
        return this._transient;
    }
    get configuration() {
        return this._configuration;
    }
    set configuration(configuration) {
        this._configuration = configuration;
    }
    getFolder(resource) {
        if (!resource) {
            return null;
        }
        return this._foldersMap.findSubstr(resource) || null;
    }
    updateFoldersMap() {
        this._foldersMap = _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_2__.TernarySearchTree.forUris(this._ignorePathCasing, () => true);
        for (const folder of this.folders) {
            this._foldersMap.set(folder.uri, folder);
        }
    }
    toJSON() {
        return { id: this.id, folders: this.folders, transient: this.transient, configuration: this.configuration };
    }
};
class WorkspaceFolder {
    constructor(data,
    raw) {
        this.raw = raw;
        this.uri = data.uri;
        this.index = data.index;
        this.name = data.name;
    }
    toResource(relativePath) {
        return (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_3__.joinPath)(this.uri, relativePath);
    }
    toJSON() {
        return { uri: this.uri, name: this.name, index: this.index };
    }
}
function toWorkspaceFolder(resource) {
    return (
         (new WorkspaceFolder(
            { uri: resource, index: 0, name: (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_3__.basenameOrAuthority)(resource) },
            { uri: ( (resource.toString())) }
        ))
    );
}
const WORKSPACE_EXTENSION = 'code-workspace';
const WORKSPACE_SUFFIX = `.${WORKSPACE_EXTENSION}`;
const WORKSPACE_FILTER = [{ name: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 0, "Code Workspace")), extensions: [WORKSPACE_EXTENSION] }];
const UNTITLED_WORKSPACE_NAME = 'workspace.json';
function isUntitledWorkspace(path, environmentService) {
    return _base_common_resources_js__WEBPACK_IMPORTED_MODULE_3__.extUriBiasedIgnorePathCase.isEqualOrParent(path, environmentService.untitledWorkspacesHome);
}
function isTemporaryWorkspace(arg1) {
    let path;
    if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.isUri(arg1)) {
        path = arg1;
    }
    else {
        path = arg1.configuration;
    }
    return path?.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_5__.Schemas.tmp;
}
const STANDALONE_EDITOR_WORKSPACE_ID = '4064f6ec-cb38-4ad0-af64-ee6467e63c82';
function isStandaloneEditorWorkspace(workspace) {
    return workspace.id === STANDALONE_EDITOR_WORKSPACE_ID;
}
function isSavedWorkspace(path, environmentService) {
    return !isUntitledWorkspace(path, environmentService) && !isTemporaryWorkspace(path);
}
function hasWorkspaceFileExtension(path) {
    const ext = (typeof path === 'string') ? (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_1__.extname)(path) : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_3__.extname)(path);
    return ext === WORKSPACE_SUFFIX;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.service.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.service.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IWorkspaceContextService: () => (/* binding */ IWorkspaceContextService)
/* harmony export */ });
/* harmony import */ var _instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IWorkspaceContextService = ( (0,_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('contextService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/cache.js":
/*!*************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/cache.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Cache: () => (/* binding */ Cache)
/* harmony export */ });
class Cache {
    static { this.enableDebugLogging = false; }
    constructor(id) {
        this.id = id;
        this._data = ( new Map());
        this._idPool = 1;
    }
    add(item) {
        const id = this._idPool++;
        this._data.set(id, item);
        this.logDebugInfo();
        return id;
    }
    get(pid, id) {
        return ( this._data.has(pid)) ? this._data.get(pid)[id] : undefined;
    }
    delete(id) {
        this._data.delete(id);
        this.logDebugInfo();
    }
    logDebugInfo() {
        if (!Cache.enableDebugLogging) {
            return;
        }
        console.log(`${this.id} cache size - ${this._data.size}`);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.api.impl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.api.impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createApiFactoryAndRegisterActors: () => (/* binding */ createApiFactoryAndRegisterActors)
/* harmony export */ });
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../editor/common/config/editorOptions.js */ "./node_modules/vscode/vscode/src/vs/editor/common/config/editorOptions.js");
/* harmony import */ var _editor_common_languageSelector_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../editor/common/languageSelector.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languageSelector.js");
/* harmony import */ var _editor_common_languages_languageConfiguration_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../editor/common/languages/languageConfiguration.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages/languageConfiguration.js");
/* harmony import */ var _editor_common_model_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../editor/common/model.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../platform/log/common/log.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../platform/remote/common/remoteHosts.js */ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteHosts.js");
/* harmony import */ var _platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../platform/telemetry/common/telemetryUtils.js */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js");
/* harmony import */ var _platform_workspace_common_editSessions_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../platform/workspace/common/editSessions.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/editSessions.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostAiRelatedInformation_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./extHostAiRelatedInformation.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAiRelatedInformation.js");
/* harmony import */ var _extHostApiCommands_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./extHostApiCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiCommands.js");
/* harmony import */ var _extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./extHostApiDeprecationService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiDeprecationService.js");
/* harmony import */ var _extHostAuthentication_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./extHostAuthentication.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAuthentication.js");
/* harmony import */ var _extHostBulkEdits_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./extHostBulkEdits.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostBulkEdits.js");
/* harmony import */ var _extHostChatAgents2_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./extHostChatAgents2.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostChatAgents2.js");
/* harmony import */ var _extHostChatVariables_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./extHostChatVariables.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostChatVariables.js");
/* harmony import */ var _extHostClipboard_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./extHostClipboard.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostClipboard.js");
/* harmony import */ var _extHostCodeInsets_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./extHostCodeInsets.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCodeInsets.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _extHostComments_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./extHostComments.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostComments.js");
/* harmony import */ var _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./extHostConfiguration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js");
/* harmony import */ var _extHostCustomEditors_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./extHostCustomEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCustomEditors.js");
/* harmony import */ var _extHostDebugService_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./extHostDebugService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDebugService.js");
/* harmony import */ var _extHostDecorations_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./extHostDecorations.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDecorations.js");
/* harmony import */ var _extHostDiagnostics_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./extHostDiagnostics.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDiagnostics.js");
/* harmony import */ var _extHostDialogs_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./extHostDialogs.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDialogs.js");
/* harmony import */ var _extHostDocumentContentProviders_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./extHostDocumentContentProviders.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentContentProviders.js");
/* harmony import */ var _extHostDocumentSaveParticipant_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./extHostDocumentSaveParticipant.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentSaveParticipant.js");
/* harmony import */ var _extHostDocuments_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./extHostDocuments.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocuments.js");
/* harmony import */ var _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./extHostDocumentsAndEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentsAndEditors.js");
/* harmony import */ var _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./extHostEditorTabs.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEditorTabs.js");
/* harmony import */ var _extHostEmbedding_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./extHostEmbedding.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEmbedding.js");
/* harmony import */ var _extHostEmbeddingVector_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./extHostEmbeddingVector.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEmbeddingVector.js");
/* harmony import */ var _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js");
/* harmony import */ var _extHostFileSystem_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./extHostFileSystem.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystem.js");
/* harmony import */ var _extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./extHostFileSystemConsumer.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemConsumer.js");
/* harmony import */ var _extHostFileSystemEventService_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./extHostFileSystemEventService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemEventService.js");
/* harmony import */ var _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./extHostFileSystemInfo.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostInteractive_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./extHostInteractive.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInteractive.js");
/* harmony import */ var _extHostLabelService_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./extHostLabelService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLabelService.js");
/* harmony import */ var _extHostLanguageFeatures_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./extHostLanguageFeatures.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageFeatures.js");
/* harmony import */ var _extHostLanguageModelTools_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./extHostLanguageModelTools.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModelTools.js");
/* harmony import */ var _extHostLanguageModels_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./extHostLanguageModels.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModels.js");
/* harmony import */ var _extHostLanguages_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./extHostLanguages.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguages.js");
/* harmony import */ var _extHostLocalizationService_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./extHostLocalizationService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLocalizationService.js");
/* harmony import */ var _extHostManagedSockets_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./extHostManagedSockets.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostManagedSockets.js");
/* harmony import */ var _extHostMessageService_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./extHostMessageService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostMessageService.js");
/* harmony import */ var _extHostNotebook_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./extHostNotebook.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebook.js");
/* harmony import */ var _extHostNotebookDocumentSaveParticipant_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./extHostNotebookDocumentSaveParticipant.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocumentSaveParticipant.js");
/* harmony import */ var _extHostNotebookDocuments_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./extHostNotebookDocuments.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocuments.js");
/* harmony import */ var _extHostNotebookEditors_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./extHostNotebookEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookEditors.js");
/* harmony import */ var _extHostNotebookKernels_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./extHostNotebookKernels.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookKernels.js");
/* harmony import */ var _extHostNotebookRenderers_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./extHostNotebookRenderers.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookRenderers.js");
/* harmony import */ var _extHostOutput_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./extHostOutput.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostOutput.js");
/* harmony import */ var _extHostProfileContentHandler_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./extHostProfileContentHandler.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostProfileContentHandler.js");
/* harmony import */ var _extHostProgress_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ./extHostProgress.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostProgress.js");
/* harmony import */ var _extHostQuickDiff_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ./extHostQuickDiff.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostQuickDiff.js");
/* harmony import */ var _extHostQuickOpen_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ./extHostQuickOpen.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostQuickOpen.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostSCM_js__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./extHostSCM.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSCM.js");
/* harmony import */ var _extHostSearch_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./extHostSearch.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSearch.js");
/* harmony import */ var _extHostSecretState_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./extHostSecretState.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecretState.js");
/* harmony import */ var _extHostShare_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./extHostShare.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostShare.js");
/* harmony import */ var _extHostSpeech_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./extHostSpeech.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSpeech.js");
/* harmony import */ var _extHostStatusBar_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./extHostStatusBar.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStatusBar.js");
/* harmony import */ var _extHostStorage_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./extHostStorage.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStorage.js");
/* harmony import */ var _extHostStoragePaths_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./extHostStoragePaths.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStoragePaths.js");
/* harmony import */ var _extHostTask_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ./extHostTask.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTask.js");
/* harmony import */ var _extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ./extHostTelemetry.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTelemetry.js");
/* harmony import */ var _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ./extHostTerminalService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalService.js");
/* harmony import */ var _extHostTerminalShellIntegration_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ./extHostTerminalShellIntegration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalShellIntegration.js");
/* harmony import */ var _extHostTesting_js__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ./extHostTesting.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTesting.js");
/* harmony import */ var _extHostTextEditors_js__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ./extHostTextEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTextEditors.js");
/* harmony import */ var _extHostTheming_js__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ./extHostTheming.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTheming.js");
/* harmony import */ var _extHostTimeline_js__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ./extHostTimeline.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTimeline.js");
/* harmony import */ var _extHostTreeViews_js__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ./extHostTreeViews.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTreeViews.js");
/* harmony import */ var _extHostTunnelService_js__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ./extHostTunnelService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTunnelService.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostUriOpener_js__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ./extHostUriOpener.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriOpener.js");
/* harmony import */ var _extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ./extHostUriTransformerService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriTransformerService.js");
/* harmony import */ var _extHostUrls_js__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ./extHostUrls.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUrls.js");
/* harmony import */ var _extHostWebview_js__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ./extHostWebview.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebview.js");
/* harmony import */ var _extHostWebviewPanels_js__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ./extHostWebviewPanels.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewPanels.js");
/* harmony import */ var _extHostWebviewView_js__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ./extHostWebviewView.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewView.js");
/* harmony import */ var _extHostWindow_js__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ./extHostWindow.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWindow.js");
/* harmony import */ var _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ./extHostWorkspace.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js");
/* harmony import */ var _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ../../contrib/debug/common/debug.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debug.js");
/* harmony import */ var _services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ../../services/extensions/common/extensionHostProtocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionHostProtocol.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _services_search_common_searchExtTypes_js__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ../../services/search/common/searchExtTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/searchExtTypes.js");






































































































function createApiFactoryAndRegisterActors(accessor) {
    const initData = accessor.get(_extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_48__.IExtHostInitDataService);
    const extHostFileSystemInfo = accessor.get(_extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_47__.IExtHostFileSystemInfo);
    const extHostConsumerFileSystem = accessor.get(_extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_45__.IExtHostConsumerFileSystem);
    const extensionService = accessor.get(_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_43__.IExtHostExtensionService);
    const extHostWorkspace = accessor.get(_extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_97__.IExtHostWorkspace);
    const extHostTelemetry = accessor.get(_extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_79__.IExtHostTelemetry);
    const extHostConfiguration = accessor.get(_extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_30__.IExtHostConfiguration);
    const uriTransformer = accessor.get(_extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_91__.IURITransformerService);
    const rpcProtocol = accessor.get(_extHostRpcService_js__WEBPACK_IMPORTED_MODULE_69__.IExtHostRpcService);
    const extHostStorage = accessor.get(_extHostStorage_js__WEBPACK_IMPORTED_MODULE_76__.IExtHostStorage);
    const extensionStoragePaths = accessor.get(_extHostStoragePaths_js__WEBPACK_IMPORTED_MODULE_77__.IExtensionStoragePaths);
    const extHostLoggerService = accessor.get(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_14__.ILoggerService);
    const extHostLogService = accessor.get(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_14__.ILogService);
    const extHostTunnelService = accessor.get(_extHostTunnelService_js__WEBPACK_IMPORTED_MODULE_87__.IExtHostTunnelService);
    const extHostApiDeprecation = accessor.get(_extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_21__.IExtHostApiDeprecationService);
    const extHostWindow = accessor.get(_extHostWindow_js__WEBPACK_IMPORTED_MODULE_96__.IExtHostWindow);
    const extHostSecretState = accessor.get(_extHostSecretState_js__WEBPACK_IMPORTED_MODULE_72__.IExtHostSecretState);
    const extHostEditorTabs = accessor.get(_extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_40__.IExtHostEditorTabs);
    const extHostManagedSockets = accessor.get(_extHostManagedSockets_js__WEBPACK_IMPORTED_MODULE_56__.IExtHostManagedSockets);
    const extHostAuthentication = accessor.get(_extHostAuthentication_js__WEBPACK_IMPORTED_MODULE_22__.IExtHostAuthentication);
    const extHostLanguageModels = accessor.get(_extHostLanguageModels_js__WEBPACK_IMPORTED_MODULE_53__.IExtHostLanguageModels);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostFileSystemInfo, extHostFileSystemInfo);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostLogLevelServiceShape, extHostLoggerService);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostWorkspace, extHostWorkspace);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostConfiguration, extHostConfiguration);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostExtensionService, extensionService);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostStorage, extHostStorage);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTunnelService, extHostTunnelService);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostWindow, extHostWindow);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostSecretState, extHostSecretState);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTelemetry, extHostTelemetry);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostEditorTabs, extHostEditorTabs);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostManagedSockets, extHostManagedSockets);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostAuthentication, extHostAuthentication);
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostChatProvider, extHostLanguageModels);
    const extHostDecorations = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostDecorations, accessor.get(_extHostDecorations_js__WEBPACK_IMPORTED_MODULE_33__.IExtHostDecorations));
    const extHostDocumentsAndEditors = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostDocumentsAndEditors, accessor.get(_extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_39__.IExtHostDocumentsAndEditors));
    const extHostCommands = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostCommands, accessor.get(_extHostCommands_js__WEBPACK_IMPORTED_MODULE_28__.IExtHostCommands));
    const extHostTerminalService = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTerminalService, accessor.get(_extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_80__.IExtHostTerminalService));
    const extHostTerminalShellIntegration = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTerminalShellIntegration, accessor.get(_extHostTerminalShellIntegration_js__WEBPACK_IMPORTED_MODULE_81__.IExtHostTerminalShellIntegration));
    const extHostDebugService = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostDebugService, accessor.get(_extHostDebugService_js__WEBPACK_IMPORTED_MODULE_32__.IExtHostDebugService));
    const extHostSearch = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostSearch, accessor.get(_extHostSearch_js__WEBPACK_IMPORTED_MODULE_71__.IExtHostSearch));
    const extHostTask = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTask, accessor.get(_extHostTask_js__WEBPACK_IMPORTED_MODULE_78__.IExtHostTask));
    const extHostOutputService = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostOutputService, accessor.get(_extHostOutput_js__WEBPACK_IMPORTED_MODULE_64__.IExtHostOutputService));
    const extHostLocalization = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostLocalization, accessor.get(_extHostLocalizationService_js__WEBPACK_IMPORTED_MODULE_55__.IExtHostLocalizationService));
    const extHostUrls = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostUrls, ( new _extHostUrls_js__WEBPACK_IMPORTED_MODULE_92__.ExtHostUrls(rpcProtocol)));
    const extHostDocuments = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostDocuments, ( new _extHostDocuments_js__WEBPACK_IMPORTED_MODULE_38__.ExtHostDocuments(rpcProtocol, extHostDocumentsAndEditors)));
    const extHostDocumentContentProviders = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostDocumentContentProviders, ( new _extHostDocumentContentProviders_js__WEBPACK_IMPORTED_MODULE_36__.ExtHostDocumentContentProvider(rpcProtocol, extHostDocumentsAndEditors, extHostLogService)));
    const extHostDocumentSaveParticipant = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostDocumentSaveParticipant, ( new _extHostDocumentSaveParticipant_js__WEBPACK_IMPORTED_MODULE_37__.ExtHostDocumentSaveParticipant(extHostLogService, extHostDocuments, ( rpcProtocol.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.MainContext.MainThreadBulkEdits)))));
    const extHostNotebook = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostNotebook, ( new _extHostNotebook_js__WEBPACK_IMPORTED_MODULE_58__.ExtHostNotebookController(
        rpcProtocol,
        extHostCommands,
        extHostDocumentsAndEditors,
        extHostDocuments,
        extHostConsumerFileSystem,
        extHostSearch,
        extHostLogService
    )));
    const extHostNotebookDocuments = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostNotebookDocuments, ( new _extHostNotebookDocuments_js__WEBPACK_IMPORTED_MODULE_60__.ExtHostNotebookDocuments(extHostNotebook)));
    const extHostNotebookEditors = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostNotebookEditors, ( new _extHostNotebookEditors_js__WEBPACK_IMPORTED_MODULE_61__.ExtHostNotebookEditors(extHostLogService, extHostNotebook)));
    const extHostNotebookKernels = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostNotebookKernels, ( new _extHostNotebookKernels_js__WEBPACK_IMPORTED_MODULE_62__.ExtHostNotebookKernels(rpcProtocol, initData, extHostNotebook, extHostCommands, extHostLogService)));
    const extHostNotebookRenderers = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostNotebookRenderers, ( new _extHostNotebookRenderers_js__WEBPACK_IMPORTED_MODULE_63__.ExtHostNotebookRenderers(rpcProtocol, extHostNotebook)));
    const extHostNotebookDocumentSaveParticipant = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostNotebookDocumentSaveParticipant, ( new _extHostNotebookDocumentSaveParticipant_js__WEBPACK_IMPORTED_MODULE_59__.ExtHostNotebookDocumentSaveParticipant(extHostLogService, extHostNotebook, ( rpcProtocol.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.MainContext.MainThreadBulkEdits)))));
    const extHostEditors = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostEditors, ( new _extHostTextEditors_js__WEBPACK_IMPORTED_MODULE_83__.ExtHostEditors(rpcProtocol, extHostDocumentsAndEditors)));
    const extHostTreeViews = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTreeViews, ( new _extHostTreeViews_js__WEBPACK_IMPORTED_MODULE_86__.ExtHostTreeViews(( rpcProtocol.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.MainContext.MainThreadTreeViews)), extHostCommands, extHostLogService)));
    const extHostEditorInsets = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostEditorInsets, ( new _extHostCodeInsets_js__WEBPACK_IMPORTED_MODULE_27__.ExtHostEditorInsets(( rpcProtocol.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.MainContext.MainThreadEditorInsets)), extHostEditors, initData.remote)));
    const extHostDiagnostics = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostDiagnostics, ( new _extHostDiagnostics_js__WEBPACK_IMPORTED_MODULE_34__.ExtHostDiagnostics(
        rpcProtocol,
        extHostLogService,
        extHostFileSystemInfo,
        extHostDocumentsAndEditors
    )));
    const extHostLanguages = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostLanguages, ( new _extHostLanguages_js__WEBPACK_IMPORTED_MODULE_54__.ExtHostLanguages(rpcProtocol, extHostDocuments, extHostCommands.converter, uriTransformer)));
    const extHostLanguageFeatures = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostLanguageFeatures, ( new _extHostLanguageFeatures_js__WEBPACK_IMPORTED_MODULE_51__.ExtHostLanguageFeatures(
        rpcProtocol,
        uriTransformer,
        extHostDocuments,
        extHostCommands,
        extHostDiagnostics,
        extHostLogService,
        extHostApiDeprecation,
        extHostTelemetry
    )));
    const extHostFileSystem = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostFileSystem, ( new _extHostFileSystem_js__WEBPACK_IMPORTED_MODULE_44__.ExtHostFileSystem(rpcProtocol, extHostLanguageFeatures)));
    const extHostFileSystemEvent = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostFileSystemEventService, ( new _extHostFileSystemEventService_js__WEBPACK_IMPORTED_MODULE_46__.ExtHostFileSystemEventService(rpcProtocol, extHostLogService, extHostDocumentsAndEditors)));
    const extHostQuickOpen = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostQuickOpen, (0,_extHostQuickOpen_js__WEBPACK_IMPORTED_MODULE_68__.createExtHostQuickOpen)(rpcProtocol, extHostWorkspace, extHostCommands));
    const extHostSCM = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostSCM, ( new _extHostSCM_js__WEBPACK_IMPORTED_MODULE_70__.ExtHostSCM(rpcProtocol, extHostCommands, extHostDocuments, extHostLogService)));
    const extHostQuickDiff = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostQuickDiff, ( new _extHostQuickDiff_js__WEBPACK_IMPORTED_MODULE_67__.ExtHostQuickDiff(rpcProtocol, uriTransformer)));
    const extHostShare = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostShare, ( new _extHostShare_js__WEBPACK_IMPORTED_MODULE_73__.ExtHostShare(rpcProtocol, uriTransformer)));
    const extHostComment = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostComments, (0,_extHostComments_js__WEBPACK_IMPORTED_MODULE_29__.createExtHostComments)(rpcProtocol, extHostCommands, extHostDocuments));
    const extHostProgress = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostProgress, ( new _extHostProgress_js__WEBPACK_IMPORTED_MODULE_66__.ExtHostProgress(( rpcProtocol.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.MainContext.MainThreadProgress)))));
    const extHostLabelService = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostLabelService, ( new _extHostLabelService_js__WEBPACK_IMPORTED_MODULE_50__.ExtHostLabelService(rpcProtocol)));
    const extHostTheming = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTheming, ( new _extHostTheming_js__WEBPACK_IMPORTED_MODULE_84__.ExtHostTheming(rpcProtocol)));
    const extHostTimeline = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTimeline, ( new _extHostTimeline_js__WEBPACK_IMPORTED_MODULE_85__.ExtHostTimeline(rpcProtocol, extHostCommands)));
    const extHostWebviews = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostWebviews, ( new _extHostWebview_js__WEBPACK_IMPORTED_MODULE_93__.ExtHostWebviews(
        rpcProtocol,
        initData.remote,
        extHostWorkspace,
        extHostLogService,
        extHostApiDeprecation
    )));
    const extHostWebviewPanels = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostWebviewPanels, ( new _extHostWebviewPanels_js__WEBPACK_IMPORTED_MODULE_94__.ExtHostWebviewPanels(rpcProtocol, extHostWebviews, extHostWorkspace)));
    const extHostCustomEditors = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostCustomEditors, ( new _extHostCustomEditors_js__WEBPACK_IMPORTED_MODULE_31__.ExtHostCustomEditors(
        rpcProtocol,
        extHostDocuments,
        extensionStoragePaths,
        extHostWebviews,
        extHostWebviewPanels
    )));
    const extHostWebviewViews = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostWebviewViews, ( new _extHostWebviewView_js__WEBPACK_IMPORTED_MODULE_95__.ExtHostWebviewViews(rpcProtocol, extHostWebviews)));
    const extHostTesting = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostTesting, accessor.get(_extHostTesting_js__WEBPACK_IMPORTED_MODULE_82__.IExtHostTesting));
    const extHostUriOpeners = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostUriOpeners, ( new _extHostUriOpener_js__WEBPACK_IMPORTED_MODULE_90__.ExtHostUriOpeners(rpcProtocol)));
    const extHostProfileContentHandlers = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostProfileContentHandlers, ( new _extHostProfileContentHandler_js__WEBPACK_IMPORTED_MODULE_65__.ExtHostProfileContentHandlers(rpcProtocol)));
    rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostInteractive, ( new _extHostInteractive_js__WEBPACK_IMPORTED_MODULE_49__.ExtHostInteractive(
        rpcProtocol,
        extHostNotebook,
        extHostDocumentsAndEditors,
        extHostCommands,
        extHostLogService
    )));
    const extHostChatAgents2 = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostChatAgents2, ( new _extHostChatAgents2_js__WEBPACK_IMPORTED_MODULE_24__.ExtHostChatAgents2(rpcProtocol, extHostLogService, extHostCommands)));
    const extHostChatVariables = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostChatVariables, ( new _extHostChatVariables_js__WEBPACK_IMPORTED_MODULE_25__.ExtHostChatVariables(rpcProtocol)));
    const extHostLanguageModelTools = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostLanguageModelTools, ( new _extHostLanguageModelTools_js__WEBPACK_IMPORTED_MODULE_52__.ExtHostLanguageModelTools(rpcProtocol)));
    const extHostAiRelatedInformation = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostAiRelatedInformation, ( new _extHostAiRelatedInformation_js__WEBPACK_IMPORTED_MODULE_19__.ExtHostRelatedInformation(rpcProtocol)));
    const extHostAiEmbeddingVector = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostAiEmbeddingVector, ( new _extHostEmbeddingVector_js__WEBPACK_IMPORTED_MODULE_42__.ExtHostAiEmbeddingVector(rpcProtocol)));
    const extHostStatusBar = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostStatusBar, ( new _extHostStatusBar_js__WEBPACK_IMPORTED_MODULE_75__.ExtHostStatusBar(rpcProtocol, extHostCommands.converter)));
    const extHostSpeech = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostSpeech, ( new _extHostSpeech_js__WEBPACK_IMPORTED_MODULE_74__.ExtHostSpeech(rpcProtocol)));
    const extHostEmbeddings = rpcProtocol.set(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext.ExtHostEmbeddings, ( new _extHostEmbedding_js__WEBPACK_IMPORTED_MODULE_41__.ExtHostEmbeddings(rpcProtocol)));
    const expected = ( Object.values(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostContext));
    rpcProtocol.assertRegistered(expected);
    const extHostBulkEdits = ( new _extHostBulkEdits_js__WEBPACK_IMPORTED_MODULE_23__.ExtHostBulkEdits(rpcProtocol, extHostDocumentsAndEditors));
    const extHostClipboard = ( new _extHostClipboard_js__WEBPACK_IMPORTED_MODULE_26__.ExtHostClipboard(rpcProtocol));
    const extHostMessageService = ( new _extHostMessageService_js__WEBPACK_IMPORTED_MODULE_57__.ExtHostMessageService(rpcProtocol, extHostLogService));
    const extHostDialogs = ( new _extHostDialogs_js__WEBPACK_IMPORTED_MODULE_35__.ExtHostDialogs(rpcProtocol));
    _extHostApiCommands_js__WEBPACK_IMPORTED_MODULE_20__.ExtHostApiCommands.register(extHostCommands);
    return function (extension, extensionInfo, configProvider) {
        function _asExtensionEvent(actual) {
            return (listener, thisArgs, disposables) => {
                const handle = actual(e => {
                    try {
                        listener.call(thisArgs, e);
                    }
                    catch (err) {
                        (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.onUnexpectedExternalError)(( new Error(
                            `[ExtensionListenerError] Extension '${extension.identifier.value}' FAILED to handle event: ${( err.toString())}`,
                            { cause: err }
                        )));
                        extHostTelemetry.onExtensionError(extension.identifier, err);
                    }
                });
                disposables?.push(handle);
                return handle;
            };
        }
        const checkSelector = ( (function() {
            let done = !extension.isUnderDevelopment;
            function informOnce() {
                if (!done) {
                    extHostLogService.info(`Extension '${extension.identifier.value}' uses a document selector without scheme. Learn more about this: https://go.microsoft.com/fwlink/?linkid=872305`);
                    done = true;
                }
            }
            return function perform(selector) {
                if (Array.isArray(selector)) {
                    selector.forEach(perform);
                }
                else if (typeof selector === 'string') {
                    informOnce();
                }
                else {
                    const filter = selector;
                    if (typeof filter.scheme === 'undefined') {
                        informOnce();
                    }
                    if (typeof filter.exclusive === 'boolean') {
                        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'documentFiltersExclusive');
                    }
                }
                return selector;
            };
        })());
        const authentication = {
            getSession(providerId, scopes, options) {
                if (typeof options?.forceNewSession === 'object' && options.forceNewSession.learnMore) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'authLearnMore');
                }
                if (options?.account) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'authGetSessions');
                }
                return extHostAuthentication.getSession(extension, providerId, scopes, options);
            },
            getAccounts(providerId) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'authGetSessions');
                return extHostAuthentication.getAccounts(providerId);
            },
            async hasSession(providerId, scopes) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'authSession');
                return !!(await extHostAuthentication.getSession(extension, providerId, scopes, { silent: true }));
            },
            get onDidChangeSessions() {
                return _asExtensionEvent(extHostAuthentication.onDidChangeSessions);
            },
            registerAuthenticationProvider(id, label, provider, options) {
                return extHostAuthentication.registerAuthenticationProvider(id, label, provider, options);
            }
        };
        const commands = {
            registerCommand(id, command, thisArgs) {
                return extHostCommands.registerCommand(true, id, command, thisArgs, undefined, extension);
            },
            registerTextEditorCommand(id, callback, thisArg) {
                return extHostCommands.registerCommand(true, id, (...args) => {
                    const activeTextEditor = extHostEditors.getActiveTextEditor();
                    if (!activeTextEditor) {
                        extHostLogService.warn('Cannot execute ' + id + ' because there is no active text editor.');
                        return undefined;
                    }
                    return activeTextEditor.edit((edit) => {
                        callback.apply(thisArg, [activeTextEditor, edit, ...args]);
                    }).then((result) => {
                        if (!result) {
                            extHostLogService.warn('Edits from command ' + id + ' were not applied.');
                        }
                    }, (err) => {
                        extHostLogService.warn('An error occurred while running command ' + id, err);
                    });
                }, undefined, undefined, extension);
            },
            registerDiffInformationCommand: (id, callback, thisArg) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'diffCommand');
                return extHostCommands.registerCommand(true, id, async (...args) => {
                    const activeTextEditor = extHostDocumentsAndEditors.activeEditor(true);
                    if (!activeTextEditor) {
                        extHostLogService.warn('Cannot execute ' + id + ' because there is no active text editor.');
                        return undefined;
                    }
                    const diff = await extHostEditors.getDiffInformation(activeTextEditor.id);
                    callback.apply(thisArg, [diff, ...args]);
                }, undefined, undefined, extension);
            },
            executeCommand(id, ...args) {
                return extHostCommands.executeCommand(id, ...args);
            },
            getCommands(filterInternal = false) {
                return extHostCommands.getCommands(filterInternal);
            }
        };
        const env = {
            get machineId() { return initData.telemetryInfo.machineId; },
            get sessionId() { return initData.telemetryInfo.sessionId; },
            get language() { return initData.environment.appLanguage; },
            get appName() { return initData.environment.appName; },
            get appRoot() { return initData.environment.appRoot?.fsPath ?? ''; },
            get appHost() { return initData.environment.appHost; },
            get uriScheme() { return initData.environment.appUriScheme; },
            get clipboard() { return extHostClipboard.value; },
            get shell() {
                return extHostTerminalService.getDefaultShell(false);
            },
            get onDidChangeShell() {
                return _asExtensionEvent(extHostTerminalService.onDidChangeShell);
            },
            get isTelemetryEnabled() {
                return extHostTelemetry.getTelemetryConfiguration();
            },
            get onDidChangeTelemetryEnabled() {
                return _asExtensionEvent(extHostTelemetry.onDidChangeTelemetryEnabled);
            },
            get telemetryConfiguration() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'telemetry');
                return extHostTelemetry.getTelemetryDetails();
            },
            get onDidChangeTelemetryConfiguration() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'telemetry');
                return _asExtensionEvent(extHostTelemetry.onDidChangeTelemetryConfiguration);
            },
            get isNewAppInstall() {
                return (0,_extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_79__.isNewAppInstall)(initData.telemetryInfo.firstSessionDate);
            },
            createTelemetryLogger(sender, options) {
                _extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_79__.ExtHostTelemetryLogger.validateSender(sender);
                return extHostTelemetry.instantiateLogger(extension, sender, options);
            },
            openExternal(uri, options) {
                return extHostWindow.openUri(uri, {
                    allowTunneling: !!initData.remote.authority,
                    allowContributedOpeners: options?.allowContributedOpeners,
                });
            },
            async asExternalUri(uri) {
                if (uri.scheme === initData.environment.appUriScheme) {
                    return extHostUrls.createAppUri(uri);
                }
                try {
                    return await extHostWindow.asExternalUri(uri, { allowTunneling: !!initData.remote.authority });
                }
                catch (err) {
                    if ((0,_base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.matchesScheme)(uri, _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.http) || (0,_base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.matchesScheme)(uri, _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.https)) {
                        return uri;
                    }
                    throw err;
                }
            },
            get remoteName() {
                return (0,_platform_remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_15__.getRemoteName)(initData.remote.authority);
            },
            get remoteAuthority() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'resolvers');
                return initData.remote.authority;
            },
            get uiKind() {
                return initData.uiKind;
            },
            get logLevel() {
                return extHostLogService.getLevel();
            },
            get onDidChangeLogLevel() {
                return _asExtensionEvent(extHostLogService.onDidChangeLogLevel);
            },
            get appQuality() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'resolvers');
                return initData.quality;
            },
            get appCommit() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'resolvers');
                return initData.commit;
            },
        };
        const tests = {
            createTestController(provider, label, refreshHandler) {
                return extHostTesting.createTestController(extension, provider, label, refreshHandler);
            },
            createTestObserver() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'testObserver');
                return extHostTesting.createTestObserver();
            },
            runTests(provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'testObserver');
                return extHostTesting.runTests(provider);
            },
            registerTestFollowupProvider(provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'testObserver');
                return extHostTesting.registerTestFollowupProvider(provider);
            },
            get onDidChangeTestResults() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'testObserver');
                return _asExtensionEvent(extHostTesting.onResultsChanged);
            },
            get testResults() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'testObserver');
                return extHostTesting.results;
            },
        };
        const extensionKind = initData.remote.isRemote
            ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ExtensionKind.Workspace
            : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ExtensionKind.UI;
        const extensions = {
            getExtension(extensionId, includeFromDifferentExtensionHosts) {
                if (!(0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.isProposedApiEnabled)(extension, 'extensionsAny')) {
                    includeFromDifferentExtensionHosts = false;
                }
                const mine = extensionInfo.mine.getExtensionDescription(extensionId);
                if (mine) {
                    return ( new _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_43__.Extension(extensionService, extension.identifier, mine, extensionKind, false));
                }
                if (includeFromDifferentExtensionHosts) {
                    const foreign = extensionInfo.all.getExtensionDescription(extensionId);
                    if (foreign) {
                        return ( new _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_43__.Extension(
                            extensionService,
                            extension.identifier,
                            foreign,
                            extensionKind ,
                            true
                        ));
                    }
                }
                return undefined;
            },
            get all() {
                const result = [];
                for (const desc of extensionInfo.mine.getAllExtensionDescriptions()) {
                    result.push(( new _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_43__.Extension(extensionService, extension.identifier, desc, extensionKind, false)));
                }
                return result;
            },
            get allAcrossExtensionHosts() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'extensionsAny');
                const local = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_11__.ExtensionIdentifierSet(( extensionInfo.mine.getAllExtensionDescriptions().map(desc => desc.identifier))));
                const result = [];
                for (const desc of extensionInfo.all.getAllExtensionDescriptions()) {
                    const isFromDifferentExtensionHost = !( local.has(desc.identifier));
                    result.push(( new _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_43__.Extension(
                        extensionService,
                        extension.identifier,
                        desc,
                        extensionKind ,
                        isFromDifferentExtensionHost
                    )));
                }
                return result;
            },
            get onDidChange() {
                if ((0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.isProposedApiEnabled)(extension, 'extensionsAny')) {
                    return _asExtensionEvent(_base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Event.any(extensionInfo.mine.onDidChange, extensionInfo.all.onDidChange));
                }
                return _asExtensionEvent(extensionInfo.mine.onDidChange);
            }
        };
        const languages = {
            createDiagnosticCollection(name) {
                return extHostDiagnostics.createDiagnosticCollection(extension.identifier, name);
            },
            get onDidChangeDiagnostics() {
                return _asExtensionEvent(extHostDiagnostics.onDidChangeDiagnostics);
            },
            getDiagnostics: (resource) => {
                return extHostDiagnostics.getDiagnostics(resource);
            },
            getLanguages() {
                return extHostLanguages.getLanguages();
            },
            setTextDocumentLanguage(document, languageId) {
                return extHostLanguages.changeLanguage(document.uri, languageId);
            },
            match(selector, document) {
                const interalSelector = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_88__.LanguageSelector.from(selector);
                let notebook;
                if ((0,_editor_common_languageSelector_js__WEBPACK_IMPORTED_MODULE_8__.targetsNotebooks)(interalSelector)) {
                    notebook = extHostNotebook.notebookDocuments.find(value => value.apiNotebook.getCells().find(c => c.document === document))?.apiNotebook;
                }
                return (0,_editor_common_languageSelector_js__WEBPACK_IMPORTED_MODULE_8__.score)(interalSelector, document.uri, document.languageId, true, notebook?.uri, notebook?.notebookType);
            },
            registerCodeActionsProvider(selector, provider, metadata) {
                return extHostLanguageFeatures.registerCodeActionProvider(extension, checkSelector(selector), provider, metadata);
            },
            registerDocumentPasteEditProvider(selector, provider, metadata) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'documentPaste');
                return extHostLanguageFeatures.registerDocumentPasteEditProvider(extension, checkSelector(selector), provider, metadata);
            },
            registerCodeLensProvider(selector, provider) {
                return extHostLanguageFeatures.registerCodeLensProvider(extension, checkSelector(selector), provider);
            },
            registerDefinitionProvider(selector, provider) {
                return extHostLanguageFeatures.registerDefinitionProvider(extension, checkSelector(selector), provider);
            },
            registerDeclarationProvider(selector, provider) {
                return extHostLanguageFeatures.registerDeclarationProvider(extension, checkSelector(selector), provider);
            },
            registerImplementationProvider(selector, provider) {
                return extHostLanguageFeatures.registerImplementationProvider(extension, checkSelector(selector), provider);
            },
            registerTypeDefinitionProvider(selector, provider) {
                return extHostLanguageFeatures.registerTypeDefinitionProvider(extension, checkSelector(selector), provider);
            },
            registerHoverProvider(selector, provider) {
                return extHostLanguageFeatures.registerHoverProvider(extension, checkSelector(selector), provider, extension.identifier);
            },
            registerEvaluatableExpressionProvider(selector, provider) {
                return extHostLanguageFeatures.registerEvaluatableExpressionProvider(extension, checkSelector(selector), provider, extension.identifier);
            },
            registerInlineValuesProvider(selector, provider) {
                return extHostLanguageFeatures.registerInlineValuesProvider(extension, checkSelector(selector), provider, extension.identifier);
            },
            registerDocumentHighlightProvider(selector, provider) {
                return extHostLanguageFeatures.registerDocumentHighlightProvider(extension, checkSelector(selector), provider);
            },
            registerMultiDocumentHighlightProvider(selector, provider) {
                return extHostLanguageFeatures.registerMultiDocumentHighlightProvider(extension, checkSelector(selector), provider);
            },
            registerLinkedEditingRangeProvider(selector, provider) {
                return extHostLanguageFeatures.registerLinkedEditingRangeProvider(extension, checkSelector(selector), provider);
            },
            registerReferenceProvider(selector, provider) {
                return extHostLanguageFeatures.registerReferenceProvider(extension, checkSelector(selector), provider);
            },
            registerRenameProvider(selector, provider) {
                return extHostLanguageFeatures.registerRenameProvider(extension, checkSelector(selector), provider);
            },
            registerNewSymbolNamesProvider(selector, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'newSymbolNamesProvider');
                return extHostLanguageFeatures.registerNewSymbolNamesProvider(extension, checkSelector(selector), provider);
            },
            registerDocumentSymbolProvider(selector, provider, metadata) {
                return extHostLanguageFeatures.registerDocumentSymbolProvider(extension, checkSelector(selector), provider, metadata);
            },
            registerWorkspaceSymbolProvider(provider) {
                return extHostLanguageFeatures.registerWorkspaceSymbolProvider(extension, provider);
            },
            registerDocumentFormattingEditProvider(selector, provider) {
                return extHostLanguageFeatures.registerDocumentFormattingEditProvider(extension, checkSelector(selector), provider);
            },
            registerDocumentRangeFormattingEditProvider(selector, provider) {
                return extHostLanguageFeatures.registerDocumentRangeFormattingEditProvider(extension, checkSelector(selector), provider);
            },
            registerOnTypeFormattingEditProvider(selector, provider, firstTriggerCharacter, ...moreTriggerCharacters) {
                return extHostLanguageFeatures.registerOnTypeFormattingEditProvider(extension, checkSelector(selector), provider, [firstTriggerCharacter].concat(moreTriggerCharacters));
            },
            registerDocumentSemanticTokensProvider(selector, provider, legend) {
                return extHostLanguageFeatures.registerDocumentSemanticTokensProvider(extension, checkSelector(selector), provider, legend);
            },
            registerDocumentRangeSemanticTokensProvider(selector, provider, legend) {
                return extHostLanguageFeatures.registerDocumentRangeSemanticTokensProvider(extension, checkSelector(selector), provider, legend);
            },
            registerSignatureHelpProvider(selector, provider, firstItem, ...remaining) {
                if (typeof firstItem === 'object') {
                    return extHostLanguageFeatures.registerSignatureHelpProvider(extension, checkSelector(selector), provider, firstItem);
                }
                return extHostLanguageFeatures.registerSignatureHelpProvider(extension, checkSelector(selector), provider, typeof firstItem === 'undefined' ? [] : [firstItem, ...remaining]);
            },
            registerCompletionItemProvider(selector, provider, ...triggerCharacters) {
                return extHostLanguageFeatures.registerCompletionItemProvider(extension, checkSelector(selector), provider, triggerCharacters);
            },
            registerInlineCompletionItemProvider(selector, provider, metadata) {
                if (provider.handleDidShowCompletionItem) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'inlineCompletionsAdditions');
                }
                if (provider.handleDidPartiallyAcceptCompletionItem) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'inlineCompletionsAdditions');
                }
                if (metadata) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'inlineCompletionsAdditions');
                }
                return extHostLanguageFeatures.registerInlineCompletionsProvider(extension, checkSelector(selector), provider, metadata);
            },
            registerInlineEditProvider(selector, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'inlineEdit');
                return extHostLanguageFeatures.registerInlineEditProvider(extension, checkSelector(selector), provider);
            },
            registerDocumentLinkProvider(selector, provider) {
                return extHostLanguageFeatures.registerDocumentLinkProvider(extension, checkSelector(selector), provider);
            },
            registerColorProvider(selector, provider) {
                return extHostLanguageFeatures.registerColorProvider(extension, checkSelector(selector), provider);
            },
            registerFoldingRangeProvider(selector, provider) {
                return extHostLanguageFeatures.registerFoldingRangeProvider(extension, checkSelector(selector), provider);
            },
            registerSelectionRangeProvider(selector, provider) {
                return extHostLanguageFeatures.registerSelectionRangeProvider(extension, selector, provider);
            },
            registerCallHierarchyProvider(selector, provider) {
                return extHostLanguageFeatures.registerCallHierarchyProvider(extension, selector, provider);
            },
            registerTypeHierarchyProvider(selector, provider) {
                return extHostLanguageFeatures.registerTypeHierarchyProvider(extension, selector, provider);
            },
            setLanguageConfiguration: (language, configuration) => {
                return extHostLanguageFeatures.setLanguageConfiguration(extension, language, configuration);
            },
            getTokenInformationAtPosition(doc, pos) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'tokenInformation');
                return extHostLanguages.tokenAtPosition(doc, pos);
            },
            registerInlayHintsProvider(selector, provider) {
                return extHostLanguageFeatures.registerInlayHintsProvider(extension, selector, provider);
            },
            createLanguageStatusItem(id, selector) {
                return extHostLanguages.createLanguageStatusItem(extension, id, selector);
            },
            registerDocumentDropEditProvider(selector, provider, metadata) {
                return extHostLanguageFeatures.registerDocumentOnDropEditProvider(extension, selector, provider, (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.isProposedApiEnabled)(extension, 'documentPaste') ? metadata : undefined);
            }
        };
        const window = {
            get activeTextEditor() {
                return extHostEditors.getActiveTextEditor();
            },
            get visibleTextEditors() {
                return extHostEditors.getVisibleTextEditors();
            },
            get activeTerminal() {
                return extHostTerminalService.activeTerminal;
            },
            get terminals() {
                return extHostTerminalService.terminals;
            },
            async showTextDocument(documentOrUri, columnOrOptions, preserveFocus) {
                if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.isUri(documentOrUri) && documentOrUri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.vscodeRemote && !documentOrUri.authority) {
                    extHostApiDeprecation.report('workspace.showTextDocument', extension, `A URI of 'vscode-remote' scheme requires an authority.`);
                }
                const document = await (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.isUri(documentOrUri)
                    ? Promise.resolve(workspace.openTextDocument(documentOrUri))
                    : Promise.resolve(documentOrUri));
                return extHostEditors.showTextDocument(document, columnOrOptions, preserveFocus);
            },
            createTextEditorDecorationType(options) {
                return extHostEditors.createTextEditorDecorationType(extension, options);
            },
            onDidChangeActiveTextEditor(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostEditors.onDidChangeActiveTextEditor)(listener, thisArg, disposables);
            },
            onDidChangeVisibleTextEditors(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostEditors.onDidChangeVisibleTextEditors)(listener, thisArg, disposables);
            },
            onDidChangeTextEditorSelection(listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostEditors.onDidChangeTextEditorSelection)(listener, thisArgs, disposables);
            },
            onDidChangeTextEditorOptions(listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostEditors.onDidChangeTextEditorOptions)(listener, thisArgs, disposables);
            },
            onDidChangeTextEditorVisibleRanges(listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostEditors.onDidChangeTextEditorVisibleRanges)(listener, thisArgs, disposables);
            },
            onDidChangeTextEditorViewColumn(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostEditors.onDidChangeTextEditorViewColumn)(listener, thisArg, disposables);
            },
            onDidCloseTerminal(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostTerminalService.onDidCloseTerminal)(listener, thisArg, disposables);
            },
            onDidOpenTerminal(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostTerminalService.onDidOpenTerminal)(listener, thisArg, disposables);
            },
            onDidChangeActiveTerminal(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostTerminalService.onDidChangeActiveTerminal)(listener, thisArg, disposables);
            },
            onDidChangeTerminalDimensions(listener, thisArg, disposables) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'terminalDimensions');
                return _asExtensionEvent(extHostTerminalService.onDidChangeTerminalDimensions)(listener, thisArg, disposables);
            },
            onDidChangeTerminalState(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostTerminalService.onDidChangeTerminalState)(listener, thisArg, disposables);
            },
            onDidWriteTerminalData(listener, thisArg, disposables) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'terminalDataWriteEvent');
                return _asExtensionEvent(extHostTerminalService.onDidWriteTerminalData)(listener, thisArg, disposables);
            },
            onDidExecuteTerminalCommand(listener, thisArg, disposables) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'terminalExecuteCommandEvent');
                return _asExtensionEvent(extHostTerminalService.onDidExecuteTerminalCommand)(listener, thisArg, disposables);
            },
            onDidChangeTerminalShellIntegration(listener, thisArg, disposables) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'terminalShellIntegration');
                return _asExtensionEvent(extHostTerminalShellIntegration.onDidChangeTerminalShellIntegration)(listener, thisArg, disposables);
            },
            onDidStartTerminalShellExecution(listener, thisArg, disposables) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'terminalShellIntegration');
                return _asExtensionEvent(extHostTerminalShellIntegration.onDidStartTerminalShellExecution)(listener, thisArg, disposables);
            },
            onDidEndTerminalShellExecution(listener, thisArg, disposables) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'terminalShellIntegration');
                return _asExtensionEvent(extHostTerminalShellIntegration.onDidEndTerminalShellExecution)(listener, thisArg, disposables);
            },
            get state() {
                return extHostWindow.getState();
            },
            onDidChangeWindowState(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostWindow.onDidChangeWindowState)(listener, thisArg, disposables);
            },
            showInformationMessage(message, ...rest) {
                return extHostMessageService.showMessage(extension, _base_common_severity_js__WEBPACK_IMPORTED_MODULE_5__["default"].Info, message, rest[0], rest.slice(1));
            },
            showWarningMessage(message, ...rest) {
                return extHostMessageService.showMessage(extension, _base_common_severity_js__WEBPACK_IMPORTED_MODULE_5__["default"].Warning, message, rest[0], rest.slice(1));
            },
            showErrorMessage(message, ...rest) {
                return extHostMessageService.showMessage(extension, _base_common_severity_js__WEBPACK_IMPORTED_MODULE_5__["default"].Error, message, rest[0], rest.slice(1));
            },
            showQuickPick(items, options, token) {
                return extHostQuickOpen.showQuickPick(extension, items, options, token);
            },
            showWorkspaceFolderPick(options) {
                return extHostQuickOpen.showWorkspaceFolderPick(options);
            },
            showInputBox(options, token) {
                return extHostQuickOpen.showInput(options, token);
            },
            showOpenDialog(options) {
                return extHostDialogs.showOpenDialog(extension, options);
            },
            showSaveDialog(options) {
                return extHostDialogs.showSaveDialog(options);
            },
            createStatusBarItem(alignmentOrId, priorityOrAlignment, priorityArg) {
                let id;
                let alignment;
                let priority;
                if (typeof alignmentOrId === 'string') {
                    id = alignmentOrId;
                    alignment = priorityOrAlignment;
                    priority = priorityArg;
                }
                else {
                    alignment = alignmentOrId;
                    priority = priorityOrAlignment;
                }
                return extHostStatusBar.createStatusBarEntry(extension, id, alignment, priority);
            },
            setStatusBarMessage(text, timeoutOrThenable) {
                return extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);
            },
            withScmProgress(task) {
                extHostApiDeprecation.report('window.withScmProgress', extension, `Use 'withProgress' instead.`);
                return extHostProgress.withProgress(extension, { location: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ProgressLocation.SourceControl }, (progress, token) => task({ report(n) { } }));
            },
            withProgress(options, task) {
                return extHostProgress.withProgress(extension, options, task);
            },
            createOutputChannel(name, options) {
                return extHostOutputService.createOutputChannel(name, options, extension);
            },
            createWebviewPanel(viewType, title, showOptions, options) {
                return extHostWebviewPanels.createWebviewPanel(extension, viewType, title, showOptions, options);
            },
            createWebviewTextEditorInset(editor, line, height, options) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'editorInsets');
                return extHostEditorInsets.createWebviewEditorInset(editor, line, height, options, extension);
            },
            createTerminal(nameOrOptions, shellPath, shellArgs) {
                if (typeof nameOrOptions === 'object') {
                    if ('pty' in nameOrOptions) {
                        return extHostTerminalService.createExtensionTerminal(nameOrOptions);
                    }
                    return extHostTerminalService.createTerminalFromOptions(nameOrOptions);
                }
                return extHostTerminalService.createTerminal(nameOrOptions, shellPath, shellArgs);
            },
            registerTerminalLinkProvider(provider) {
                return extHostTerminalService.registerLinkProvider(provider);
            },
            registerTerminalProfileProvider(id, provider) {
                return extHostTerminalService.registerProfileProvider(extension, id, provider);
            },
            registerTerminalQuickFixProvider(id, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'terminalQuickFixProvider');
                return extHostTerminalService.registerTerminalQuickFixProvider(id, extension.identifier.value, provider);
            },
            registerTreeDataProvider(viewId, treeDataProvider) {
                return extHostTreeViews.registerTreeDataProvider(viewId, treeDataProvider, extension);
            },
            createTreeView(viewId, options) {
                return extHostTreeViews.createTreeView(viewId, options, extension);
            },
            registerWebviewPanelSerializer: (viewType, serializer) => {
                return extHostWebviewPanels.registerWebviewPanelSerializer(extension, viewType, serializer);
            },
            registerCustomEditorProvider: (viewType, provider, options = {}) => {
                return extHostCustomEditors.registerCustomEditorProvider(extension, viewType, provider, options);
            },
            registerFileDecorationProvider(provider) {
                return extHostDecorations.registerFileDecorationProvider(provider, extension);
            },
            registerUriHandler(handler) {
                return extHostUrls.registerUriHandler(extension, handler);
            },
            createQuickPick() {
                return extHostQuickOpen.createQuickPick(extension);
            },
            createInputBox() {
                return extHostQuickOpen.createInputBox(extension);
            },
            get activeColorTheme() {
                return extHostTheming.activeColorTheme;
            },
            onDidChangeActiveColorTheme(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostTheming.onDidChangeActiveColorTheme)(listener, thisArg, disposables);
            },
            registerWebviewViewProvider(viewId, provider, options) {
                return extHostWebviewViews.registerWebviewViewProvider(extension, viewId, provider, options?.webviewOptions);
            },
            get activeNotebookEditor() {
                return extHostNotebook.activeNotebookEditor;
            },
            onDidChangeActiveNotebookEditor(listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostNotebook.onDidChangeActiveNotebookEditor)(listener, thisArgs, disposables);
            },
            get visibleNotebookEditors() {
                return extHostNotebook.visibleNotebookEditors;
            },
            get onDidChangeVisibleNotebookEditors() {
                return _asExtensionEvent(extHostNotebook.onDidChangeVisibleNotebookEditors);
            },
            onDidChangeNotebookEditorSelection(listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostNotebookEditors.onDidChangeNotebookEditorSelection)(listener, thisArgs, disposables);
            },
            onDidChangeNotebookEditorVisibleRanges(listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostNotebookEditors.onDidChangeNotebookEditorVisibleRanges)(listener, thisArgs, disposables);
            },
            showNotebookDocument(document, options) {
                return extHostNotebook.showNotebookDocument(document, options);
            },
            registerExternalUriOpener(id, opener, metadata) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'externalUriOpener');
                return extHostUriOpeners.registerExternalUriOpener(extension.identifier, id, opener, metadata);
            },
            registerProfileContentHandler(id, handler) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'profileContentHandlers');
                return extHostProfileContentHandlers.registerProfileContentHandler(extension, id, handler);
            },
            registerQuickDiffProvider(selector, quickDiffProvider, label, rootUri) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'quickDiffProvider');
                return extHostQuickDiff.registerQuickDiffProvider(checkSelector(selector), quickDiffProvider, label, rootUri);
            },
            get tabGroups() {
                return extHostEditorTabs.tabGroups;
            },
            registerShareProvider(selector, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'shareProvider');
                return extHostShare.registerShareProvider(checkSelector(selector), provider);
            }
        };
        const workspace = {
            get rootPath() {
                extHostApiDeprecation.report('workspace.rootPath', extension, `Please use 'workspace.workspaceFolders' instead. More details: https://aka.ms/vscode-eliminating-rootpath`);
                return extHostWorkspace.getPath();
            },
            set rootPath(value) {
                throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.ReadonlyError('rootPath');
            },
            getWorkspaceFolder(resource) {
                return extHostWorkspace.getWorkspaceFolder(resource);
            },
            get workspaceFolders() {
                return extHostWorkspace.getWorkspaceFolders();
            },
            get name() {
                return extHostWorkspace.name;
            },
            set name(value) {
                throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.ReadonlyError('name');
            },
            get workspaceFile() {
                return extHostWorkspace.workspaceFile;
            },
            set workspaceFile(value) {
                throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.ReadonlyError('workspaceFile');
            },
            updateWorkspaceFolders: (index, deleteCount, ...workspaceFoldersToAdd) => {
                return extHostWorkspace.updateWorkspaceFolders(extension, index, deleteCount || 0, ...workspaceFoldersToAdd);
            },
            onDidChangeWorkspaceFolders: function (listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostWorkspace.onDidChangeWorkspace)(listener, thisArgs, disposables);
            },
            asRelativePath: (pathOrUri, includeWorkspace) => {
                return extHostWorkspace.getRelativePath(pathOrUri, includeWorkspace);
            },
            findFiles: (include, exclude, maxResults, token) => {
                return extHostWorkspace.findFiles(include, exclude, maxResults, extension.identifier, token);
            },
            findFiles2: (filePattern, options, token) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'findFiles2');
                return extHostWorkspace.findFiles2(filePattern, options, extension.identifier, token);
            },
            findTextInFiles: (query, optionsOrCallback, callbackOrToken, token) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'findTextInFiles');
                let options;
                let callback;
                if (typeof optionsOrCallback === 'object') {
                    options = optionsOrCallback;
                    callback = callbackOrToken;
                }
                else {
                    options = {};
                    callback = optionsOrCallback;
                    token = callbackOrToken;
                }
                return extHostWorkspace.findTextInFiles(query, options || {}, callback, extension.identifier, token);
            },
            save: (uri) => {
                return extHostWorkspace.save(uri);
            },
            saveAs: (uri) => {
                return extHostWorkspace.saveAs(uri);
            },
            saveAll: (includeUntitled) => {
                return extHostWorkspace.saveAll(includeUntitled);
            },
            applyEdit(edit, metadata) {
                return extHostBulkEdits.applyWorkspaceEdit(edit, extension, metadata);
            },
            createFileSystemWatcher: (pattern, optionsOrIgnoreCreate, ignoreChange, ignoreDelete) => {
                let options = undefined;
                if (typeof optionsOrIgnoreCreate === 'boolean') {
                    options = {
                        ignoreCreateEvents: Boolean(optionsOrIgnoreCreate),
                        ignoreChangeEvents: Boolean(ignoreChange),
                        ignoreDeleteEvents: Boolean(ignoreDelete),
                        correlate: false
                    };
                }
                else if (optionsOrIgnoreCreate) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'createFileSystemWatcher');
                    options = {
                        ...optionsOrIgnoreCreate,
                        correlate: true
                    };
                }
                return extHostFileSystemEvent.createFileSystemWatcher(extHostWorkspace, extension, pattern, options);
            },
            get textDocuments() {
                return ( extHostDocuments.getAllDocumentData().map(data => data.document));
            },
            set textDocuments(value) {
                throw new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.ReadonlyError('textDocuments');
            },
            openTextDocument(uriOrFileNameOrOptions) {
                let uriPromise;
                const options = uriOrFileNameOrOptions;
                if (typeof uriOrFileNameOrOptions === 'string') {
                    uriPromise = Promise.resolve(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.file(uriOrFileNameOrOptions));
                }
                else if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.isUri(uriOrFileNameOrOptions)) {
                    uriPromise = Promise.resolve(uriOrFileNameOrOptions);
                }
                else if (!options || typeof options === 'object') {
                    uriPromise = extHostDocuments.createDocumentData(options);
                }
                else {
                    throw ( new Error('illegal argument - uriOrFileNameOrOptions'));
                }
                return uriPromise.then(uri => {
                    if (uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.vscodeRemote && !uri.authority) {
                        extHostApiDeprecation.report('workspace.openTextDocument', extension, `A URI of 'vscode-remote' scheme requires an authority.`);
                    }
                    return extHostDocuments.ensureDocumentData(uri).then(documentData => {
                        return documentData.document;
                    });
                });
            },
            onDidOpenTextDocument: (listener, thisArgs, disposables) => {
                return _asExtensionEvent(extHostDocuments.onDidAddDocument)(listener, thisArgs, disposables);
            },
            onDidCloseTextDocument: (listener, thisArgs, disposables) => {
                return _asExtensionEvent(extHostDocuments.onDidRemoveDocument)(listener, thisArgs, disposables);
            },
            onDidChangeTextDocument: (listener, thisArgs, disposables) => {
                return _asExtensionEvent(extHostDocuments.onDidChangeDocument)(listener, thisArgs, disposables);
            },
            onDidSaveTextDocument: (listener, thisArgs, disposables) => {
                return _asExtensionEvent(extHostDocuments.onDidSaveDocument)(listener, thisArgs, disposables);
            },
            onWillSaveTextDocument: (listener, thisArgs, disposables) => {
                return _asExtensionEvent(extHostDocumentSaveParticipant.getOnWillSaveTextDocumentEvent(extension))(listener, thisArgs, disposables);
            },
            get notebookDocuments() {
                return ( extHostNotebook.notebookDocuments.map(d => d.apiNotebook));
            },
            async openNotebookDocument(uriOrType, content) {
                let uri;
                if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.isUri(uriOrType)) {
                    uri = uriOrType;
                    await extHostNotebook.openNotebookDocument(uriOrType);
                }
                else if (typeof uriOrType === 'string') {
                    uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.revive(await extHostNotebook.createNotebookDocument({ viewType: uriOrType, content }));
                }
                else {
                    throw ( new Error('Invalid arguments'));
                }
                return extHostNotebook.getNotebookDocument(uri).apiNotebook;
            },
            onDidSaveNotebookDocument(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostNotebookDocuments.onDidSaveNotebookDocument)(listener, thisArg, disposables);
            },
            onDidChangeNotebookDocument(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostNotebookDocuments.onDidChangeNotebookDocument)(listener, thisArg, disposables);
            },
            onWillSaveNotebookDocument(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostNotebookDocumentSaveParticipant.getOnWillSaveNotebookDocumentEvent(extension))(listener, thisArg, disposables);
            },
            get onDidOpenNotebookDocument() {
                return _asExtensionEvent(extHostNotebook.onDidOpenNotebookDocument);
            },
            get onDidCloseNotebookDocument() {
                return _asExtensionEvent(extHostNotebook.onDidCloseNotebookDocument);
            },
            registerNotebookSerializer(viewType, serializer, options, registration) {
                return extHostNotebook.registerNotebookSerializer(extension, viewType, serializer, options, (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.isProposedApiEnabled)(extension, 'notebookLiveShare') ? registration : undefined);
            },
            onDidChangeConfiguration: (listener, thisArgs, disposables) => {
                return _asExtensionEvent(configProvider.onDidChangeConfiguration)(listener, thisArgs, disposables);
            },
            getConfiguration(section, scope) {
                scope = arguments.length === 1 ? undefined : scope;
                return configProvider.getConfiguration(section, scope, extension);
            },
            registerTextDocumentContentProvider(scheme, provider) {
                return extHostDocumentContentProviders.registerTextDocumentContentProvider(scheme, provider);
            },
            registerTaskProvider: (type, provider) => {
                extHostApiDeprecation.report('window.registerTaskProvider', extension, `Use the corresponding function on the 'tasks' namespace instead`);
                return extHostTask.registerTaskProvider(extension, type, provider);
            },
            registerFileSystemProvider(scheme, provider, options) {
                return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.combinedDisposable)(extHostFileSystem.registerFileSystemProvider(extension, scheme, provider, options), extHostConsumerFileSystem.addFileSystemProvider(scheme, provider, options));
            },
            get fs() {
                return extHostConsumerFileSystem.value;
            },
            registerFileSearchProvider: (scheme, provider) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'fileSearchProvider');
                return extHostSearch.registerFileSearchProvider(scheme, provider);
            },
            registerTextSearchProvider: (scheme, provider) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'textSearchProvider');
                return extHostSearch.registerTextSearchProvider(scheme, provider);
            },
            registerAITextSearchProvider: (scheme, provider) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'aiTextSearchProvider');
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'textSearchProvider');
                return extHostSearch.registerAITextSearchProvider(scheme, provider);
            },
            registerRemoteAuthorityResolver: (authorityPrefix, resolver) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'resolvers');
                return extensionService.registerRemoteAuthorityResolver(authorityPrefix, resolver);
            },
            registerResourceLabelFormatter: (formatter) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'resolvers');
                return extHostLabelService.$registerResourceLabelFormatter(formatter);
            },
            getRemoteExecServer: (authority) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'resolvers');
                return extensionService.getRemoteExecServer(authority);
            },
            onDidCreateFiles: (listener, thisArg, disposables) => {
                return _asExtensionEvent(extHostFileSystemEvent.onDidCreateFile)(listener, thisArg, disposables);
            },
            onDidDeleteFiles: (listener, thisArg, disposables) => {
                return _asExtensionEvent(extHostFileSystemEvent.onDidDeleteFile)(listener, thisArg, disposables);
            },
            onDidRenameFiles: (listener, thisArg, disposables) => {
                return _asExtensionEvent(extHostFileSystemEvent.onDidRenameFile)(listener, thisArg, disposables);
            },
            onWillCreateFiles: (listener, thisArg, disposables) => {
                return _asExtensionEvent(extHostFileSystemEvent.getOnWillCreateFileEvent(extension))(listener, thisArg, disposables);
            },
            onWillDeleteFiles: (listener, thisArg, disposables) => {
                return _asExtensionEvent(extHostFileSystemEvent.getOnWillDeleteFileEvent(extension))(listener, thisArg, disposables);
            },
            onWillRenameFiles: (listener, thisArg, disposables) => {
                return _asExtensionEvent(extHostFileSystemEvent.getOnWillRenameFileEvent(extension))(listener, thisArg, disposables);
            },
            openTunnel: (forward) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'tunnels');
                return extHostTunnelService.openTunnel(extension, forward).then(value => {
                    if (!value) {
                        throw ( new Error('cannot open tunnel'));
                    }
                    return value;
                });
            },
            get tunnels() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'tunnels');
                return extHostTunnelService.getTunnels();
            },
            onDidChangeTunnels: (listener, thisArg, disposables) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'tunnels');
                return _asExtensionEvent(extHostTunnelService.onDidChangeTunnels)(listener, thisArg, disposables);
            },
            registerPortAttributesProvider: (portSelector, provider) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'portsAttributes');
                return extHostTunnelService.registerPortsAttributesProvider(portSelector, provider);
            },
            registerTunnelProvider: (tunnelProvider, information) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'tunnelFactory');
                return extHostTunnelService.registerTunnelProvider(tunnelProvider, information);
            },
            registerTimelineProvider: (scheme, provider) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'timeline');
                return extHostTimeline.registerTimelineProvider(scheme, provider, extension.identifier, extHostCommands.converter);
            },
            get isTrusted() {
                return extHostWorkspace.trusted;
            },
            requestWorkspaceTrust: (options) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'workspaceTrust');
                return extHostWorkspace.requestWorkspaceTrust(options);
            },
            onDidGrantWorkspaceTrust: (listener, thisArgs, disposables) => {
                return _asExtensionEvent(extHostWorkspace.onDidGrantWorkspaceTrust)(listener, thisArgs, disposables);
            },
            registerEditSessionIdentityProvider: (scheme, provider) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'editSessionIdentityProvider');
                return extHostWorkspace.registerEditSessionIdentityProvider(scheme, provider);
            },
            onWillCreateEditSessionIdentity: (listener, thisArgs, disposables) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'editSessionIdentityProvider');
                return _asExtensionEvent(extHostWorkspace.getOnWillCreateEditSessionIdentityEvent(extension))(listener, thisArgs, disposables);
            },
            registerCanonicalUriProvider: (scheme, provider) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'canonicalUriProvider');
                return extHostWorkspace.registerCanonicalUriProvider(scheme, provider);
            },
            getCanonicalUri: (uri, options, token) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'canonicalUriProvider');
                return extHostWorkspace.provideCanonicalUri(uri, options, token);
            }
        };
        const scm = {
            get inputBox() {
                extHostApiDeprecation.report('scm.inputBox', extension, `Use 'SourceControl.inputBox' instead`);
                return extHostSCM.getLastInputBox(extension);
            },
            createSourceControl(id, label, rootUri) {
                return extHostSCM.createSourceControl(extension, id, label, rootUri);
            }
        };
        const comments = {
            createCommentController(id, label) {
                return extHostComment.createCommentController(extension, id, label);
            }
        };
        const debug = {
            get activeDebugSession() {
                return extHostDebugService.activeDebugSession;
            },
            get activeDebugConsole() {
                return extHostDebugService.activeDebugConsole;
            },
            get breakpoints() {
                return extHostDebugService.breakpoints;
            },
            get activeStackItem() {
                return extHostDebugService.activeStackItem;
            },
            registerDebugVisualizationProvider(id, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'debugVisualization');
                return extHostDebugService.registerDebugVisualizationProvider(extension, id, provider);
            },
            registerDebugVisualizationTreeProvider(id, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'debugVisualization');
                return extHostDebugService.registerDebugVisualizationTree(extension, id, provider);
            },
            onDidStartDebugSession(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostDebugService.onDidStartDebugSession)(listener, thisArg, disposables);
            },
            onDidTerminateDebugSession(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostDebugService.onDidTerminateDebugSession)(listener, thisArg, disposables);
            },
            onDidChangeActiveDebugSession(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostDebugService.onDidChangeActiveDebugSession)(listener, thisArg, disposables);
            },
            onDidReceiveDebugSessionCustomEvent(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostDebugService.onDidReceiveDebugSessionCustomEvent)(listener, thisArg, disposables);
            },
            onDidChangeBreakpoints(listener, thisArgs, disposables) {
                return _asExtensionEvent(extHostDebugService.onDidChangeBreakpoints)(listener, thisArgs, disposables);
            },
            onDidChangeActiveStackItem(listener, thisArg, disposables) {
                return _asExtensionEvent(extHostDebugService.onDidChangeActiveStackItem)(listener, thisArg, disposables);
            },
            registerDebugConfigurationProvider(debugType, provider, triggerKind) {
                return extHostDebugService.registerDebugConfigurationProvider(debugType, provider, triggerKind || _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_98__.DebugConfigurationProviderTriggerKind.Initial);
            },
            registerDebugAdapterDescriptorFactory(debugType, factory) {
                return extHostDebugService.registerDebugAdapterDescriptorFactory(extension, debugType, factory);
            },
            registerDebugAdapterTrackerFactory(debugType, factory) {
                return extHostDebugService.registerDebugAdapterTrackerFactory(debugType, factory);
            },
            startDebugging(folder, nameOrConfig, parentSessionOrOptions) {
                if (!parentSessionOrOptions || (typeof parentSessionOrOptions === 'object' && 'configuration' in parentSessionOrOptions)) {
                    return extHostDebugService.startDebugging(folder, nameOrConfig, { parentSession: parentSessionOrOptions });
                }
                return extHostDebugService.startDebugging(folder, nameOrConfig, parentSessionOrOptions || {});
            },
            stopDebugging(session) {
                return extHostDebugService.stopDebugging(session);
            },
            addBreakpoints(breakpoints) {
                return extHostDebugService.addBreakpoints(breakpoints);
            },
            removeBreakpoints(breakpoints) {
                return extHostDebugService.removeBreakpoints(breakpoints);
            },
            asDebugSourceUri(source, session) {
                return extHostDebugService.asDebugSourceUri(source, session);
            }
        };
        const tasks = {
            registerTaskProvider: (type, provider) => {
                return extHostTask.registerTaskProvider(extension, type, provider);
            },
            fetchTasks: (filter) => {
                return extHostTask.fetchTasks(filter);
            },
            executeTask: (task) => {
                return extHostTask.executeTask(extension, task);
            },
            get taskExecutions() {
                return extHostTask.taskExecutions;
            },
            onDidStartTask: (listeners, thisArgs, disposables) => {
                return _asExtensionEvent(extHostTask.onDidStartTask)(listeners, thisArgs, disposables);
            },
            onDidEndTask: (listeners, thisArgs, disposables) => {
                return _asExtensionEvent(extHostTask.onDidEndTask)(listeners, thisArgs, disposables);
            },
            onDidStartTaskProcess: (listeners, thisArgs, disposables) => {
                return _asExtensionEvent(extHostTask.onDidStartTaskProcess)(listeners, thisArgs, disposables);
            },
            onDidEndTaskProcess: (listeners, thisArgs, disposables) => {
                return _asExtensionEvent(extHostTask.onDidEndTaskProcess)(listeners, thisArgs, disposables);
            }
        };
        const notebooks = {
            createNotebookController(id, notebookType, label, handler, rendererScripts) {
                return extHostNotebookKernels.createNotebookController(extension, id, notebookType, label, handler, (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.isProposedApiEnabled)(extension, 'notebookMessaging') ? rendererScripts : undefined);
            },
            registerNotebookCellStatusBarItemProvider: (notebookType, provider) => {
                return extHostNotebook.registerNotebookCellStatusBarItemProvider(extension, notebookType, provider);
            },
            createRendererMessaging(rendererId) {
                return extHostNotebookRenderers.createRendererMessaging(extension, rendererId);
            },
            createNotebookControllerDetectionTask(notebookType) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'notebookKernelSource');
                return extHostNotebookKernels.createNotebookControllerDetectionTask(extension, notebookType);
            },
            registerKernelSourceActionProvider(notebookType, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'notebookKernelSource');
                return extHostNotebookKernels.registerKernelSourceActionProvider(extension, notebookType, provider);
            },
            onDidChangeNotebookCellExecutionState(listener, thisArgs, disposables) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'notebookCellExecutionState');
                return _asExtensionEvent(extHostNotebookKernels.onDidChangeNotebookCellExecutionState)(listener, thisArgs, disposables);
            }
        };
        const l10n = {
            t(...params) {
                if (typeof params[0] === 'string') {
                    const key = params.shift();
                    const argsFormatted = !params || typeof params[0] !== 'object' ? params : params[0];
                    return extHostLocalization.getMessage(extension.identifier.value, { message: key, args: argsFormatted });
                }
                return extHostLocalization.getMessage(extension.identifier.value, params[0]);
            },
            get bundle() {
                return extHostLocalization.getBundle(extension.identifier.value);
            },
            get uri() {
                return extHostLocalization.getBundleUri(extension.identifier.value);
            }
        };
        const interactive = {
            _version: 1,
            transferActiveChat(toWorkspace) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'interactive');
                return extHostChatAgents2.transferActiveChat(toWorkspace);
            }
        };
        const ai = {
            getRelatedInformation(query, types) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'aiRelatedInformation');
                return extHostAiRelatedInformation.getRelatedInformation(extension, query, types);
            },
            registerRelatedInformationProvider(type, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'aiRelatedInformation');
                return extHostAiRelatedInformation.registerRelatedInformationProvider(extension, type, provider);
            },
            registerEmbeddingVectorProvider(model, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'aiRelatedInformation');
                return extHostAiEmbeddingVector.registerEmbeddingVectorProvider(extension, model, provider);
            }
        };
        const chat = {
            _version: 1,
            registerChatResponseProvider(id, provider, metadata) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'chatProvider');
                return extHostLanguageModels.registerLanguageModel(extension, id, provider, metadata);
            },
            registerChatVariableResolver(id, name, userDescription, modelDescription, isSlow, resolver, fullName, icon) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'chatVariableResolver');
                return extHostChatVariables.registerVariableResolver(extension, id, name, userDescription, modelDescription, isSlow, resolver, fullName, icon?.id);
            },
            registerMappedEditsProvider(selector, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'mappedEditsProvider');
                return extHostLanguageFeatures.registerMappedEditsProvider(extension, selector, provider);
            },
            createChatParticipant(id, handler) {
                return extHostChatAgents2.createChatAgent(extension, id, handler);
            },
            createDynamicChatParticipant(id, dynamicProps, handler) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'chatParticipantPrivate');
                return extHostChatAgents2.createDynamicChatAgent(extension, id, dynamicProps, handler);
            },
        };
        const lm = {
            selectChatModels: (selector) => {
                return extHostLanguageModels.selectLanguageModels(extension, selector ?? {});
            },
            onDidChangeChatModels: (listener, thisArgs, disposables) => {
                return extHostLanguageModels.onDidChangeProviders(listener, thisArgs, disposables);
            },
            registerChatModelProvider: (id, provider, metadata) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'chatProvider');
                return extHostLanguageModels.registerLanguageModel(extension, id, provider, metadata);
            },
            get embeddingModels() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'embeddings');
                return extHostEmbeddings.embeddingsModels;
            },
            onDidChangeEmbeddingModels: (listener, thisArgs, disposables) => {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'embeddings');
                return extHostEmbeddings.onDidChange(listener, thisArgs, disposables);
            },
            registerEmbeddingsProvider(embeddingsModel, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'embeddings');
                return extHostEmbeddings.registerEmbeddingsProvider(extension, embeddingsModel, provider);
            },
            async computeEmbeddings(embeddingsModel, input, token) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'embeddings');
                if (typeof input === 'string') {
                    return extHostEmbeddings.computeEmbeddings(embeddingsModel, input, token);
                }
                else {
                    return extHostEmbeddings.computeEmbeddings(embeddingsModel, input, token);
                }
            },
            registerTool(toolId, tool) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'lmTools');
                return extHostLanguageModelTools.registerTool(extension, toolId, tool);
            },
            invokeTool(toolId, parameters, token) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'lmTools');
                return extHostLanguageModelTools.invokeTool(toolId, parameters, token);
            },
            get tools() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'lmTools');
                return extHostLanguageModelTools.tools;
            },
        };
        const speech = {
            registerSpeechProvider(id, provider) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_100__.checkProposedApiEnabled)(extension, 'speech');
                return extHostSpeech.registerProvider(extension.identifier, id, provider);
            }
        };
        return {
            version: initData.version,
            ai,
            authentication,
            commands,
            comments,
            chat,
            debug,
            env,
            extensions,
            interactive,
            l10n,
            languages,
            lm,
            notebooks,
            scm,
            speech,
            tasks,
            tests,
            window,
            workspace,
            Breakpoint: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Breakpoint,
            TerminalOutputAnchor: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalOutputAnchor,
            ChatResultFeedbackKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResultFeedbackKind,
            ChatVariableLevel: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatVariableLevel,
            ChatCompletionItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatCompletionItem,
            CallHierarchyIncomingCall: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CallHierarchyIncomingCall,
            CallHierarchyItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CallHierarchyItem,
            CallHierarchyOutgoingCall: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CallHierarchyOutgoingCall,
            CancellationError: _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.CancellationError,
            CancellationTokenSource: _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource,
            CandidatePortSource: _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_18__.CandidatePortSource,
            CodeAction: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CodeAction,
            CodeActionKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CodeActionKind,
            CodeActionTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CodeActionTriggerKind,
            CodeLens: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CodeLens,
            Color: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Color,
            ColorInformation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ColorInformation,
            ColorPresentation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ColorPresentation,
            ColorThemeKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ColorThemeKind,
            CommentMode: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CommentMode,
            CommentState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CommentState,
            CommentThreadCollapsibleState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CommentThreadCollapsibleState,
            CommentThreadState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CommentThreadState,
            CommentThreadApplicability: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CommentThreadApplicability,
            CompletionItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CompletionItem,
            CompletionItemKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CompletionItemKind,
            CompletionItemTag: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CompletionItemTag,
            CompletionList: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CompletionList,
            CompletionTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CompletionTriggerKind,
            ConfigurationTarget: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ConfigurationTarget,
            CustomExecution: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CustomExecution,
            DebugAdapterExecutable: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugAdapterExecutable,
            DebugAdapterInlineImplementation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugAdapterInlineImplementation,
            DebugAdapterNamedPipeServer: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugAdapterNamedPipeServer,
            DebugAdapterServer: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugAdapterServer,
            DebugConfigurationProviderTriggerKind: _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_98__.DebugConfigurationProviderTriggerKind,
            DebugConsoleMode: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugConsoleMode,
            DebugVisualization: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugVisualization,
            DecorationRangeBehavior: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DecorationRangeBehavior,
            Diagnostic: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Diagnostic,
            DiagnosticRelatedInformation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DiagnosticRelatedInformation,
            DiagnosticSeverity: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DiagnosticSeverity,
            DiagnosticTag: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DiagnosticTag,
            Disposable: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Disposable,
            DocumentHighlight: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentHighlight,
            DocumentHighlightKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentHighlightKind,
            MultiDocumentHighlight: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.MultiDocumentHighlight,
            DocumentLink: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentLink,
            DocumentSymbol: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentSymbol,
            EndOfLine: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.EndOfLine,
            EnvironmentVariableMutatorType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.EnvironmentVariableMutatorType,
            EvaluatableExpression: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.EvaluatableExpression,
            InlineValueText: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineValueText,
            InlineValueVariableLookup: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineValueVariableLookup,
            InlineValueEvaluatableExpression: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineValueEvaluatableExpression,
            InlineCompletionTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineCompletionTriggerKind,
            EventEmitter: _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter,
            ExtensionKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ExtensionKind,
            ExtensionMode: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ExtensionMode,
            ExternalUriOpenerPriority: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ExternalUriOpenerPriority,
            FileChangeType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FileChangeType,
            FileDecoration: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FileDecoration,
            FileDecoration2: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FileDecoration,
            FileSystemError: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FileSystemError,
            FileType: _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_12__.FileType,
            FilePermission: _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_12__.FilePermission,
            FoldingRange: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FoldingRange,
            FoldingRangeKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FoldingRangeKind,
            FunctionBreakpoint: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FunctionBreakpoint,
            InlineCompletionItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineSuggestion,
            InlineCompletionList: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineSuggestionList,
            Hover: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Hover,
            VerboseHover: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.VerboseHover,
            HoverVerbosityAction: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.HoverVerbosityAction,
            IndentAction: _editor_common_languages_languageConfiguration_js__WEBPACK_IMPORTED_MODULE_9__.IndentAction,
            Location: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Location,
            MarkdownString: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.MarkdownString,
            OverviewRulerLane: _editor_common_model_js__WEBPACK_IMPORTED_MODULE_10__.OverviewRulerLane,
            ParameterInformation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ParameterInformation,
            PortAutoForwardAction: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.PortAutoForwardAction,
            Position: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Position,
            ProcessExecution: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ProcessExecution,
            ProgressLocation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ProgressLocation,
            QuickInputButtons: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.QuickInputButtons,
            Range: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Range,
            RelativePattern: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.RelativePattern,
            Selection: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Selection,
            SelectionRange: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SelectionRange,
            SemanticTokens: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SemanticTokens,
            SemanticTokensBuilder: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SemanticTokensBuilder,
            SemanticTokensEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SemanticTokensEdit,
            SemanticTokensEdits: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SemanticTokensEdits,
            SemanticTokensLegend: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SemanticTokensLegend,
            ShellExecution: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ShellExecution,
            ShellQuoting: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ShellQuoting,
            SignatureHelp: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SignatureHelp,
            SignatureHelpTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SignatureHelpTriggerKind,
            SignatureInformation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SignatureInformation,
            SnippetString: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SnippetString,
            SourceBreakpoint: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SourceBreakpoint,
            StandardTokenType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.StandardTokenType,
            StatusBarAlignment: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.StatusBarAlignment,
            SymbolInformation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SymbolInformation,
            SymbolKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SymbolKind,
            SymbolTag: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SymbolTag,
            Task: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.Task,
            TaskGroup: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TaskGroup,
            TaskPanelKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TaskPanelKind,
            TaskRevealKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TaskRevealKind,
            TaskScope: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TaskScope,
            TerminalLink: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalLink,
            TerminalQuickFixTerminalCommand: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalQuickFixCommand,
            TerminalQuickFixOpener: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalQuickFixOpener,
            TerminalLocation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalLocation,
            TerminalProfile: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalProfile,
            TerminalExitReason: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalExitReason,
            TerminalShellExecutionCommandLineConfidence: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalShellExecutionCommandLineConfidence,
            TextDocumentSaveReason: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextDocumentSaveReason,
            TextEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextEdit,
            SnippetTextEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SnippetTextEdit,
            TextEditorCursorStyle: _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_7__.TextEditorCursorStyle,
            TextEditorLineNumbersStyle: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextEditorLineNumbersStyle,
            TextEditorRevealType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextEditorRevealType,
            TextEditorSelectionChangeKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextEditorSelectionChangeKind,
            SyntaxTokenType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SyntaxTokenType,
            TextDocumentChangeReason: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextDocumentChangeReason,
            ThemeColor: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ThemeColor,
            ThemeIcon: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ThemeIcon,
            TreeItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TreeItem,
            TreeItemCheckboxState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TreeItemCheckboxState,
            TreeItemCollapsibleState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TreeItemCollapsibleState,
            TypeHierarchyItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TypeHierarchyItem,
            UIKind: _services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_99__.UIKind,
            Uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI,
            ViewColumn: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ViewColumn,
            WorkspaceEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.WorkspaceEdit,
            DocumentPasteTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentPasteTriggerKind,
            DocumentDropEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentDropEdit,
            DocumentDropOrPasteEditKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentDropOrPasteEditKind,
            DocumentPasteEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DocumentPasteEdit,
            InlayHint: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlayHint,
            InlayHintLabelPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlayHintLabelPart,
            InlayHintKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlayHintKind,
            RemoteAuthorityResolverError: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.RemoteAuthorityResolverError,
            ResolvedAuthority: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ResolvedAuthority,
            ManagedResolvedAuthority: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ManagedResolvedAuthority,
            SourceControlInputBoxValidationType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SourceControlInputBoxValidationType,
            ExtensionRuntime: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ExtensionRuntime,
            TimelineItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TimelineItem,
            NotebookRange: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookRange,
            NotebookCellKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookCellKind,
            NotebookCellExecutionState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookCellExecutionState,
            NotebookCellData: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookCellData,
            NotebookData: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookData,
            NotebookRendererScript: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookRendererScript,
            NotebookCellStatusBarAlignment: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookCellStatusBarAlignment,
            NotebookEditorRevealType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookEditorRevealType,
            NotebookCellOutput: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookCellOutput,
            NotebookCellOutputItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookCellOutputItem,
            NotebookCellStatusBarItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookCellStatusBarItem,
            NotebookControllerAffinity: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookControllerAffinity,
            NotebookControllerAffinity2: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookControllerAffinity2,
            NotebookEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookEdit,
            NotebookKernelSourceAction: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookKernelSourceAction,
            NotebookVariablesRequestKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookVariablesRequestKind,
            PortAttributes: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.PortAttributes,
            LinkedEditingRanges: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LinkedEditingRanges,
            TestResultState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TestResultState,
            TestRunRequest: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TestRunRequest,
            TestMessage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TestMessage,
            TestTag: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TestTag,
            TestRunProfileKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TestRunProfileKind,
            TextSearchCompleteMessageType: _services_search_common_searchExtTypes_js__WEBPACK_IMPORTED_MODULE_101__.TextSearchCompleteMessageType,
            DataTransfer: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DataTransfer,
            DataTransferItem: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DataTransferItem,
            TestCoverageCount: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TestCoverageCount,
            FileCoverage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FileCoverage,
            FileCoverage2: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.FileCoverage,
            StatementCoverage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.StatementCoverage,
            BranchCoverage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.BranchCoverage,
            DeclarationCoverage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DeclarationCoverage,
            WorkspaceTrustState: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.WorkspaceTrustState,
            LanguageStatusSeverity: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageStatusSeverity,
            QuickPickItemKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.QuickPickItemKind,
            InputBoxValidationSeverity: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InputBoxValidationSeverity,
            TabInputText: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextTabInput,
            TabInputTextDiff: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextDiffTabInput,
            TabInputTextMerge: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextMergeTabInput,
            TabInputCustom: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.CustomEditorTabInput,
            TabInputNotebook: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookEditorTabInput,
            TabInputNotebookDiff: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NotebookDiffEditorTabInput,
            TabInputWebview: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.WebviewEditorTabInput,
            TabInputTerminal: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TerminalEditorTabInput,
            TabInputInteractiveWindow: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InteractiveWindowInput,
            TabInputChat: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatEditorTabInput,
            TabInputTextMultiDiff: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextMultiDiffTabInput,
            TelemetryTrustedValue: _platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_16__.TelemetryTrustedValue,
            LogLevel: _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_13__.LogLevel,
            EditSessionIdentityMatch: _platform_workspace_common_editSessions_js__WEBPACK_IMPORTED_MODULE_17__.EditSessionIdentityMatch,
            InteractiveSessionVoteDirection: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InteractiveSessionVoteDirection,
            ChatCopyKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatCopyKind,
            InteractiveEditorResponseFeedbackKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InteractiveEditorResponseFeedbackKind,
            DebugStackFrame: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugStackFrame,
            DebugThread: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.DebugThread,
            RelatedInformationType: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.RelatedInformationType,
            SpeechToTextStatus: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.SpeechToTextStatus,
            TextToSpeechStatus: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.TextToSpeechStatus,
            PartialAcceptTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.PartialAcceptTriggerKind,
            KeywordRecognitionStatus: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.KeywordRecognitionStatus,
            ChatResponseMarkdownPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseMarkdownPart,
            ChatResponseFileTreePart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseFileTreePart,
            ChatResponseAnchorPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseAnchorPart,
            ChatResponseProgressPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseProgressPart,
            ChatResponseProgressPart2: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseProgressPart2,
            ChatResponseReferencePart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseReferencePart,
            ChatResponseWarningPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseWarningPart,
            ChatResponseTextEditPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseTextEditPart,
            ChatResponseMarkdownWithVulnerabilitiesPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseMarkdownWithVulnerabilitiesPart,
            ChatResponseCommandButtonPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseCommandButtonPart,
            ChatResponseDetectedParticipantPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseDetectedParticipantPart,
            ChatResponseConfirmationPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseConfirmationPart,
            ChatRequestTurn: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatRequestTurn,
            ChatResponseTurn: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatResponseTurn,
            ChatLocation: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.ChatLocation,
            LanguageModelChatMessageRole: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelChatMessageRole,
            LanguageModelChatMessage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelChatMessage,
            LanguageModelChatMessageFunctionResultPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelFunctionResultPart,
            LanguageModelChatResponseTextPart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelTextPart,
            LanguageModelChatResponseFunctionUsePart: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelFunctionUsePart,
            LanguageModelChatMessage2: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelChatMessage,
            LanguageModelChatSystemMessage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelChatSystemMessage,
            LanguageModelChatUserMessage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelChatUserMessage,
            LanguageModelChatAssistantMessage: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelChatAssistantMessage,
            LanguageModelError: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.LanguageModelError,
            NewSymbolName: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NewSymbolName,
            NewSymbolNameTag: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NewSymbolNameTag,
            NewSymbolNameTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.NewSymbolNameTriggerKind,
            InlineEdit: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineEdit,
            InlineEditTriggerKind: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_89__.InlineEditTriggerKind,
        };
    };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.common.services.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.common.services.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../platform/instantiation/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/extensions.js");
/* harmony import */ var _extHostOutput_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostOutput.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostOutput.js");
/* harmony import */ var _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostWorkspace.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js");
/* harmony import */ var _extHostDecorations_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostDecorations.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDecorations.js");
/* harmony import */ var _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostConfiguration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostDocumentsAndEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentsAndEditors.js");
/* harmony import */ var _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostTerminalService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalService.js");
/* harmony import */ var _extHostTask_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostTask.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTask.js");
/* harmony import */ var _extHostDebugService_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHostDebugService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDebugService.js");
/* harmony import */ var _extHostSearch_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostSearch.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSearch.js");
/* harmony import */ var _extHostStorage_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostStorage.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStorage.js");
/* harmony import */ var _extHostTunnelService_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostTunnelService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTunnelService.js");
/* harmony import */ var _extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHostApiDeprecationService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiDeprecationService.js");
/* harmony import */ var _extHostWindow_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./extHostWindow.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWindow.js");
/* harmony import */ var _extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./extHostFileSystemConsumer.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemConsumer.js");
/* harmony import */ var _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./extHostFileSystemInfo.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js");
/* harmony import */ var _extHostSecretState_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostSecretState.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecretState.js");
/* harmony import */ var _extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./extHostTelemetry.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTelemetry.js");
/* harmony import */ var _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./extHostEditorTabs.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEditorTabs.js");
/* harmony import */ var _extHostLoggerService_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./extHostLoggerService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLoggerService.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHostVariableResolverService_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./extHostVariableResolverService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostVariableResolverService.js");
/* harmony import */ var _extHostLocalizationService_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./extHostLocalizationService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLocalizationService.js");
/* harmony import */ var _extHostManagedSockets_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./extHostManagedSockets.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostManagedSockets.js");
/* harmony import */ var _extHostAuthentication_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./extHostAuthentication.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAuthentication.js");
/* harmony import */ var _extHostLanguageModels_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./extHostLanguageModels.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModels.js");
/* harmony import */ var _extHostTerminalShellIntegration_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./extHostTerminalShellIntegration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalShellIntegration.js");
/* harmony import */ var _extHostTesting_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./extHostTesting.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTesting.js");





























(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostLocalizationService_js__WEBPACK_IMPORTED_MODULE_23__.IExtHostLocalizationService, _extHostLocalizationService_js__WEBPACK_IMPORTED_MODULE_23__.ExtHostLocalizationService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Delayed);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_21__.ILoggerService, _extHostLoggerService_js__WEBPACK_IMPORTED_MODULE_20__.ExtHostLoggerService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Delayed);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_13__.IExtHostApiDeprecationService, _extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_13__.ExtHostApiDeprecationService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Delayed);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostCommands_js__WEBPACK_IMPORTED_MODULE_5__.IExtHostCommands, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_5__.ExtHostCommands, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostAuthentication_js__WEBPACK_IMPORTED_MODULE_25__.IExtHostAuthentication, _extHostAuthentication_js__WEBPACK_IMPORTED_MODULE_25__.ExtHostAuthentication, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostLanguageModels_js__WEBPACK_IMPORTED_MODULE_26__.IExtHostLanguageModels, _extHostLanguageModels_js__WEBPACK_IMPORTED_MODULE_26__.ExtHostLanguageModels, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostConfiguration, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_4__.ExtHostConfiguration, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_15__.IExtHostConsumerFileSystem, _extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_15__.ExtHostConsumerFileSystem, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostTesting_js__WEBPACK_IMPORTED_MODULE_28__.IExtHostTesting, _extHostTesting_js__WEBPACK_IMPORTED_MODULE_28__.ExtHostTesting, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostDebugService_js__WEBPACK_IMPORTED_MODULE_9__.IExtHostDebugService, _extHostDebugService_js__WEBPACK_IMPORTED_MODULE_9__.WorkerExtHostDebugService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostDecorations_js__WEBPACK_IMPORTED_MODULE_3__.IExtHostDecorations, _extHostDecorations_js__WEBPACK_IMPORTED_MODULE_3__.ExtHostDecorations, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostDocumentsAndEditors, _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_6__.ExtHostDocumentsAndEditors, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostManagedSockets_js__WEBPACK_IMPORTED_MODULE_24__.IExtHostManagedSockets, _extHostManagedSockets_js__WEBPACK_IMPORTED_MODULE_24__.ExtHostManagedSockets, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_16__.IExtHostFileSystemInfo, _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_16__.ExtHostFileSystemInfo, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostOutput_js__WEBPACK_IMPORTED_MODULE_1__.IExtHostOutputService, _extHostOutput_js__WEBPACK_IMPORTED_MODULE_1__.ExtHostOutputService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Delayed);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostSearch_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostSearch, _extHostSearch_js__WEBPACK_IMPORTED_MODULE_10__.ExtHostSearch, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostStorage_js__WEBPACK_IMPORTED_MODULE_11__.IExtHostStorage, _extHostStorage_js__WEBPACK_IMPORTED_MODULE_11__.ExtHostStorage, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostTask_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostTask, _extHostTask_js__WEBPACK_IMPORTED_MODULE_8__.WorkerExtHostTask, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostTerminalService, _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_7__.WorkerExtHostTerminalService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostTerminalShellIntegration_js__WEBPACK_IMPORTED_MODULE_27__.IExtHostTerminalShellIntegration, _extHostTerminalShellIntegration_js__WEBPACK_IMPORTED_MODULE_27__.ExtHostTerminalShellIntegration, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostTunnelService_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostTunnelService, _extHostTunnelService_js__WEBPACK_IMPORTED_MODULE_12__.ExtHostTunnelService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostWindow_js__WEBPACK_IMPORTED_MODULE_14__.IExtHostWindow, _extHostWindow_js__WEBPACK_IMPORTED_MODULE_14__.ExtHostWindow, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_2__.IExtHostWorkspace, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_2__.ExtHostWorkspace, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostSecretState_js__WEBPACK_IMPORTED_MODULE_17__.IExtHostSecretState, _extHostSecretState_js__WEBPACK_IMPORTED_MODULE_17__.ExtHostSecretState, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_18__.IExtHostTelemetry, _extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_18__.ExtHostTelemetry, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_19__.IExtHostEditorTabs, _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_19__.ExtHostEditorTabs, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_extHostVariableResolverService_js__WEBPACK_IMPORTED_MODULE_22__.IExtHostVariableResolverProvider, _extHostVariableResolverService_js__WEBPACK_IMPORTED_MODULE_22__.ExtHostVariableResolverProviderService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);


/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CandidatePortSource: () => (/* binding */ CandidatePortSource),
/* harmony export */   ExtHostContext: () => (/* binding */ ExtHostContext),
/* harmony export */   ISuggestDataDtoField: () => (/* binding */ ISuggestDataDtoField),
/* harmony export */   ISuggestResultDtoField: () => (/* binding */ ISuggestResultDtoField),
/* harmony export */   MainContext: () => (/* binding */ MainContext),
/* harmony export */   NotebookEditorRevealType: () => (/* binding */ NotebookEditorRevealType),
/* harmony export */   TabInputKind: () => (/* binding */ TabInputKind),
/* harmony export */   TabModelOperationKind: () => (/* binding */ TabModelOperationKind),
/* harmony export */   TextEditorRevealType: () => (/* binding */ TextEditorRevealType),
/* harmony export */   WebviewMessageArrayBufferViewType: () => (/* binding */ WebviewMessageArrayBufferViewType)
/* harmony export */ });
/* harmony import */ var _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/extensions/common/proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");

var TextEditorRevealType;
( (function(TextEditorRevealType) {
    TextEditorRevealType[TextEditorRevealType["Default"] = 0] = "Default";
    TextEditorRevealType[TextEditorRevealType["InCenter"] = 1] = "InCenter";
    TextEditorRevealType[TextEditorRevealType["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
    TextEditorRevealType[TextEditorRevealType["AtTop"] = 3] = "AtTop";
})(TextEditorRevealType || (TextEditorRevealType = {})));
var TabInputKind;
( (function(TabInputKind) {
    TabInputKind[TabInputKind["UnknownInput"] = 0] = "UnknownInput";
    TabInputKind[TabInputKind["TextInput"] = 1] = "TextInput";
    TabInputKind[TabInputKind["TextDiffInput"] = 2] = "TextDiffInput";
    TabInputKind[TabInputKind["TextMergeInput"] = 3] = "TextMergeInput";
    TabInputKind[TabInputKind["NotebookInput"] = 4] = "NotebookInput";
    TabInputKind[TabInputKind["NotebookDiffInput"] = 5] = "NotebookDiffInput";
    TabInputKind[TabInputKind["CustomEditorInput"] = 6] = "CustomEditorInput";
    TabInputKind[TabInputKind["WebviewEditorInput"] = 7] = "WebviewEditorInput";
    TabInputKind[TabInputKind["TerminalEditorInput"] = 8] = "TerminalEditorInput";
    TabInputKind[TabInputKind["InteractiveEditorInput"] = 9] = "InteractiveEditorInput";
    TabInputKind[TabInputKind["ChatEditorInput"] = 10] = "ChatEditorInput";
    TabInputKind[TabInputKind["MultiDiffEditorInput"] = 11] = "MultiDiffEditorInput";
})(TabInputKind || (TabInputKind = {})));
var TabModelOperationKind;
( (function(TabModelOperationKind) {
    TabModelOperationKind[TabModelOperationKind["TAB_OPEN"] = 0] = "TAB_OPEN";
    TabModelOperationKind[TabModelOperationKind["TAB_CLOSE"] = 1] = "TAB_CLOSE";
    TabModelOperationKind[TabModelOperationKind["TAB_UPDATE"] = 2] = "TAB_UPDATE";
    TabModelOperationKind[TabModelOperationKind["TAB_MOVE"] = 3] = "TAB_MOVE";
})(TabModelOperationKind || (TabModelOperationKind = {})));
var WebviewMessageArrayBufferViewType;
( (function(WebviewMessageArrayBufferViewType) {
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Int8Array"] = 1] = "Int8Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Uint8Array"] = 2] = "Uint8Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Uint8ClampedArray"] = 3] = "Uint8ClampedArray";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Int16Array"] = 4] = "Int16Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Uint16Array"] = 5] = "Uint16Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Int32Array"] = 6] = "Int32Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Uint32Array"] = 7] = "Uint32Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Float32Array"] = 8] = "Float32Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["Float64Array"] = 9] = "Float64Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["BigInt64Array"] = 10] = "BigInt64Array";
    WebviewMessageArrayBufferViewType[WebviewMessageArrayBufferViewType["BigUint64Array"] = 11] = "BigUint64Array";
})(
    WebviewMessageArrayBufferViewType || (WebviewMessageArrayBufferViewType = {})
));
var NotebookEditorRevealType;
( (function(NotebookEditorRevealType) {
    NotebookEditorRevealType[NotebookEditorRevealType["Default"] = 0] = "Default";
    NotebookEditorRevealType[NotebookEditorRevealType["InCenter"] = 1] = "InCenter";
    NotebookEditorRevealType[NotebookEditorRevealType["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
    NotebookEditorRevealType[NotebookEditorRevealType["AtTop"] = 3] = "AtTop";
})(NotebookEditorRevealType || (NotebookEditorRevealType = {})));
var CandidatePortSource;
( (function(CandidatePortSource) {
    CandidatePortSource[CandidatePortSource["None"] = 0] = "None";
    CandidatePortSource[CandidatePortSource["Process"] = 1] = "Process";
    CandidatePortSource[CandidatePortSource["Output"] = 2] = "Output";
    CandidatePortSource[CandidatePortSource["Hybrid"] = 3] = "Hybrid";
})(CandidatePortSource || (CandidatePortSource = {})));
var ISuggestDataDtoField;
( (function(ISuggestDataDtoField) {
    ISuggestDataDtoField["label"] = "a";
    ISuggestDataDtoField["kind"] = "b";
    ISuggestDataDtoField["detail"] = "c";
    ISuggestDataDtoField["documentation"] = "d";
    ISuggestDataDtoField["sortText"] = "e";
    ISuggestDataDtoField["filterText"] = "f";
    ISuggestDataDtoField["preselect"] = "g";
    ISuggestDataDtoField["insertText"] = "h";
    ISuggestDataDtoField["insertTextRules"] = "i";
    ISuggestDataDtoField["range"] = "j";
    ISuggestDataDtoField["commitCharacters"] = "k";
    ISuggestDataDtoField["additionalTextEdits"] = "l";
    ISuggestDataDtoField["kindModifier"] = "m";
    ISuggestDataDtoField["commandIdent"] = "n";
    ISuggestDataDtoField["commandId"] = "o";
    ISuggestDataDtoField["commandArguments"] = "p";
})(ISuggestDataDtoField || (ISuggestDataDtoField = {})));
var ISuggestResultDtoField;
( (function(ISuggestResultDtoField) {
    ISuggestResultDtoField["defaultRanges"] = "a";
    ISuggestResultDtoField["completions"] = "b";
    ISuggestResultDtoField["isIncomplete"] = "c";
    ISuggestResultDtoField["duration"] = "d";
})(ISuggestResultDtoField || (ISuggestResultDtoField = {})));
const MainContext = {
    MainThreadAuthentication: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadAuthentication')),
    MainThreadBulkEdits: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadBulkEdits')),
    MainThreadLanguageModels: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadLanguageModels')),
    MainThreadEmbeddings: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadEmbeddings')),
    MainThreadChatAgents2: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadChatAgents2')),
    MainThreadChatVariables: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadChatVariables')),
    MainThreadLanguageModelTools: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadChatSkills')),
    MainThreadClipboard: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadClipboard')),
    MainThreadCommands: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadCommands')),
    MainThreadComments: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadComments')),
    MainThreadConfiguration: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadConfiguration')),
    MainThreadConsole: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadConsole')),
    MainThreadDebugService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadDebugService')),
    MainThreadDecorations: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadDecorations')),
    MainThreadDiagnostics: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadDiagnostics')),
    MainThreadDialogs: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadDiaglogs')),
    MainThreadDocuments: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadDocuments')),
    MainThreadDocumentContentProviders: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadDocumentContentProviders')),
    MainThreadTextEditors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTextEditors')),
    MainThreadEditorInsets: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadEditorInsets')),
    MainThreadEditorTabs: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadEditorTabs')),
    MainThreadErrors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadErrors')),
    MainThreadTreeViews: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTreeViews')),
    MainThreadDownloadService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadDownloadService')),
    MainThreadLanguageFeatures: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadLanguageFeatures')),
    MainThreadLanguages: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadLanguages')),
    MainThreadLogger: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadLogger')),
    MainThreadMessageService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadMessageService')),
    MainThreadOutputService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadOutputService')),
    MainThreadProgress: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadProgress')),
    MainThreadQuickDiff: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadQuickDiff')),
    MainThreadQuickOpen: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadQuickOpen')),
    MainThreadStatusBar: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadStatusBar')),
    MainThreadSecretState: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadSecretState')),
    MainThreadStorage: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadStorage')),
    MainThreadSpeech: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadSpeechProvider')),
    MainThreadTelemetry: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTelemetry')),
    MainThreadTerminalService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTerminalService')),
    MainThreadTerminalShellIntegration: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTerminalShellIntegration')),
    MainThreadWebviews: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadWebviews')),
    MainThreadWebviewPanels: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadWebviewPanels')),
    MainThreadWebviewViews: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadWebviewViews')),
    MainThreadCustomEditors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadCustomEditors')),
    MainThreadUrls: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadUrls')),
    MainThreadUriOpeners: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadUriOpeners')),
    MainThreadProfileContentHandlers: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadProfileContentHandlers')),
    MainThreadWorkspace: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadWorkspace')),
    MainThreadFileSystem: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadFileSystem')),
    MainThreadFileSystemEventService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadFileSystemEventService')),
    MainThreadExtensionService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadExtensionService')),
    MainThreadSCM: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadSCM')),
    MainThreadSearch: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadSearch')),
    MainThreadShare: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadShare')),
    MainThreadTask: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTask')),
    MainThreadWindow: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadWindow')),
    MainThreadLabelService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadLabelService')),
    MainThreadNotebook: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadNotebook')),
    MainThreadNotebookDocuments: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadNotebookDocumentsShape')),
    MainThreadNotebookEditors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadNotebookEditorsShape')),
    MainThreadNotebookKernels: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadNotebookKernels')),
    MainThreadNotebookRenderers: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadNotebookRenderers')),
    MainThreadInteractive: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadInteractive')),
    MainThreadTheming: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTheming')),
    MainThreadTunnelService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTunnelService')),
    MainThreadManagedSockets: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadManagedSockets')),
    MainThreadTimeline: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTimeline')),
    MainThreadTesting: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadTesting')),
    MainThreadLocalization: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadLocalizationShape')),
    MainThreadAiRelatedInformation: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadAiRelatedInformation')),
    MainThreadAiEmbeddingVector: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('MainThreadAiEmbeddingVector'))
};
const ExtHostContext = {
    ExtHostCommands: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostCommands')),
    ExtHostConfiguration: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostConfiguration')),
    ExtHostDiagnostics: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostDiagnostics')),
    ExtHostDebugService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostDebugService')),
    ExtHostDecorations: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostDecorations')),
    ExtHostDocumentsAndEditors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostDocumentsAndEditors')),
    ExtHostDocuments: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostDocuments')),
    ExtHostDocumentContentProviders: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostDocumentContentProviders')),
    ExtHostDocumentSaveParticipant: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostDocumentSaveParticipant')),
    ExtHostEditors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostEditors')),
    ExtHostTreeViews: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTreeViews')),
    ExtHostFileSystem: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostFileSystem')),
    ExtHostFileSystemInfo: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostFileSystemInfo')),
    ExtHostFileSystemEventService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostFileSystemEventService')),
    ExtHostLanguages: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostLanguages')),
    ExtHostLanguageFeatures: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostLanguageFeatures')),
    ExtHostQuickOpen: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostQuickOpen')),
    ExtHostQuickDiff: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostQuickDiff')),
    ExtHostStatusBar: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostStatusBar')),
    ExtHostShare: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostShare')),
    ExtHostExtensionService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostExtensionService')),
    ExtHostLogLevelServiceShape: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostLogLevelServiceShape')),
    ExtHostTerminalService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTerminalService')),
    ExtHostTerminalShellIntegration: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTerminalShellIntegration')),
    ExtHostSCM: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostSCM')),
    ExtHostSearch: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostSearch')),
    ExtHostTask: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTask')),
    ExtHostWorkspace: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostWorkspace')),
    ExtHostWindow: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostWindow')),
    ExtHostWebviews: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostWebviews')),
    ExtHostWebviewPanels: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostWebviewPanels')),
    ExtHostCustomEditors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostCustomEditors')),
    ExtHostWebviewViews: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostWebviewViews')),
    ExtHostEditorInsets: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostEditorInsets')),
    ExtHostEditorTabs: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostEditorTabs')),
    ExtHostProgress: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostProgress')),
    ExtHostComments: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostComments')),
    ExtHostSecretState: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostSecretState')),
    ExtHostStorage: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostStorage')),
    ExtHostUrls: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostUrls')),
    ExtHostUriOpeners: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostUriOpeners')),
    ExtHostProfileContentHandlers: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostProfileContentHandlers')),
    ExtHostOutputService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostOutputService')),
    ExtHostLabelService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostLabelService')),
    ExtHostNotebook: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostNotebook')),
    ExtHostNotebookDocuments: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostNotebookDocuments')),
    ExtHostNotebookEditors: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostNotebookEditors')),
    ExtHostNotebookKernels: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostNotebookKernels')),
    ExtHostNotebookRenderers: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostNotebookRenderers')),
    ExtHostNotebookDocumentSaveParticipant: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostNotebookDocumentSaveParticipant')),
    ExtHostInteractive: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostInteractive')),
    ExtHostChatAgents2: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostChatAgents')),
    ExtHostChatVariables: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostChatVariables')),
    ExtHostLanguageModelTools: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostChatSkills')),
    ExtHostChatProvider: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostChatProvider')),
    ExtHostSpeech: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostSpeech')),
    ExtHostEmbeddings: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostEmbeddings')),
    ExtHostAiRelatedInformation: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostAiRelatedInformation')),
    ExtHostAiEmbeddingVector: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostAiEmbeddingVector')),
    ExtHostTheming: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTheming')),
    ExtHostTunnelService: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTunnelService')),
    ExtHostManagedSockets: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostManagedSockets')),
    ExtHostAuthentication: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostAuthentication')),
    ExtHostTimeline: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTimeline')),
    ExtHostTesting: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTesting')),
    ExtHostTelemetry: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostTelemetry')),
    ExtHostLocalization: ( (0,_services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_0__.createProxyIdentifier)('ExtHostLocalization'))
};



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAiRelatedInformation.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAiRelatedInformation.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostRelatedInformation: () => (/* binding */ ExtHostRelatedInformation)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");


class ExtHostRelatedInformation {
    constructor(mainContext) {
        this._relatedInformationProviders = ( new Map());
        this._nextHandle = 0;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadAiRelatedInformation));
    }
    async $provideAiRelatedInformation(handle, query, token) {
        if (this._relatedInformationProviders.size === 0) {
            throw ( new Error('No related information providers registered'));
        }
        const provider = this._relatedInformationProviders.get(handle);
        if (!provider) {
            throw ( new Error('related information provider not found'));
        }
        const result = (await provider.provideRelatedInformation(query, token)) ?? [];
        return result;
    }
    getRelatedInformation(extension, query, types) {
        return this._proxy.$getAiRelatedInformation(query, types);
    }
    registerRelatedInformationProvider(extension, type, provider) {
        const handle = this._nextHandle;
        this._nextHandle++;
        this._relatedInformationProviders.set(handle, provider);
        this._proxy.$registerAiRelatedInformationProvider(handle, type);
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.Disposable(() => {
            this._proxy.$unregisterAiRelatedInformationProvider(handle);
            this._relatedInformationProviders.delete(handle);
        }));
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiCommands.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiCommands.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostApiCommands: () => (/* binding */ ExtHostApiCommands)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../editor/common/languages.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages.js");
/* harmony import */ var _editor_common_services_semanticTokensDto_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../editor/common/services/semanticTokensDto.js */ "./node_modules/vscode/vscode/src/vs/editor/common/services/semanticTokensDto.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");









const newCommands = [
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeDocumentHighlights',
        '_executeDocumentHighlights',
        'Execute document highlight provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of DocumentHighlight-instances.',
            tryMapWith(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.DocumentHighlight.to)
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeDocumentSymbolProvider',
        '_executeDocumentSymbolProvider',
        'Execute document symbol provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of SymbolInformation and DocumentSymbol instances.',
            (value, apiArgs) => {
                if ((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isFalsyOrEmpty)(value)) {
                    return undefined;
                }
                class MergedInfo extends _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.SymbolInformation {
                    static to(symbol) {
                        const res = ( new MergedInfo(
                            symbol.name,
                            _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.SymbolKind.to(symbol.kind),
                            symbol.containerName || '',
                            new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.Location(apiArgs[0], _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(symbol.range))
                        ));
                        res.detail = symbol.detail;
                        res.range = res.location.range;
                        res.selectionRange = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(symbol.selectionRange);
                        res.children = symbol.children ? ( symbol.children.map(MergedInfo.to)) : [];
                        return res;
                    }
                }
                return ( value.map(MergedInfo.to));
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeFormatDocumentProvider',
        '_executeFormatDocumentProvider',
        'Execute document format provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument('options', 'Formatting options', _ => true, v => v))],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of TextEdits.',
            tryMapWith(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TextEdit.to)
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeFormatRangeProvider',
        '_executeFormatRangeProvider',
        'Execute range format provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Range, ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument('options', 'Formatting options', _ => true, v => v))],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of TextEdits.',
            tryMapWith(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TextEdit.to)
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeFormatOnTypeProvider',
        '_executeFormatOnTypeProvider',
        'Execute format on type provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position, ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument('ch', 'Trigger character', v => typeof v === 'string', v => v)), ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument('options', 'Formatting options', _ => true, v => v))],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of TextEdits.',
            tryMapWith(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TextEdit.to)
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeDefinitionProvider',
        '_executeDefinitionProvider',
        'Execute all definition providers.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Location or LocationLink instances.',
            mapLocationOrLocationLink
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeTypeDefinitionProvider',
        '_executeTypeDefinitionProvider',
        'Execute all type definition providers.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Location or LocationLink instances.',
            mapLocationOrLocationLink
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeDeclarationProvider',
        '_executeDeclarationProvider',
        'Execute all declaration providers.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Location or LocationLink instances.',
            mapLocationOrLocationLink
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeImplementationProvider',
        '_executeImplementationProvider',
        'Execute all implementation providers.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Location or LocationLink instances.',
            mapLocationOrLocationLink
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeReferenceProvider',
        '_executeReferenceProvider',
        'Execute all reference providers.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Location-instances.',
            tryMapWith(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.location.to)
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeHoverProvider',
        '_executeHoverProvider',
        'Execute all hover providers.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Hover-instances.',
            tryMapWith(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Hover.to)
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeSelectionRangeProvider',
        '_executeSelectionRangeProvider',
        'Execute selection range provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
            'position',
            'A position in a text document',
            v => Array.isArray(v) && v.every(v => _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.Position.isPosition(v)),
            v => ( v.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Position.from))
        ))],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to an array of ranges.', result => {
            return ( result.map(ranges => {
                let node;
                for (const range of ranges.reverse()) {
                    node = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.SelectionRange(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(range), node);
                }
                return node;
            }));
        }))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeWorkspaceSymbolProvider',
        '_executeWorkspaceSymbolProvider',
        'Execute all workspace symbol providers.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('query', 'Search string')],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of SymbolInformation-instances.',
            value => {
                return ( value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.WorkspaceSymbol.to));
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.prepareCallHierarchy',
        '_executePrepareCallHierarchy',
        'Prepare call hierarchy at a position inside a document',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of CallHierarchyItem-instances',
            v => ( v.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.CallHierarchyItem.to))
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideIncomingCalls',
        '_executeProvideIncomingCalls',
        'Compute incoming calls for an item',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.CallHierarchyItem],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of CallHierarchyIncomingCall-instances',
            v => ( v.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.CallHierarchyIncomingCall.to))
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideOutgoingCalls',
        '_executeProvideOutgoingCalls',
        'Compute outgoing calls for an item',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.CallHierarchyItem],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of CallHierarchyOutgoingCall-instances',
            v => ( v.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.CallHierarchyOutgoingCall.to))
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.prepareRename',
        '_executePrepareRename',
        'Execute the prepareRename of rename provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to a range and placeholder text.', value => {
            if (!value) {
                return undefined;
            }
            return {
                range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(value.range),
                placeholder: value.text
            };
        }))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeDocumentRenameProvider',
        '_executeDocumentRenameProvider',
        'Execute rename provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('newName', 'The new symbol name')],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to a WorkspaceEdit.', value => {
            if (!value) {
                return undefined;
            }
            if (value.rejectReason) {
                throw ( new Error(value.rejectReason));
            }
            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.WorkspaceEdit.to(value);
        }))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeLinkProvider',
        '_executeLinkProvider',
        'Execute document link provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Number.with('linkResolveCount', 'Number of links that should be resolved, only when links are unresolved.').optional()],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of DocumentLink-instances.',
            value => ( value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.DocumentLink.to))
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideDocumentSemanticTokensLegend',
        '_provideDocumentSemanticTokensLegend',
        'Provide semantic tokens legend for a document',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to SemanticTokensLegend.', value => {
            if (!value) {
                return undefined;
            }
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.SemanticTokensLegend(value.tokenTypes, value.tokenModifiers);
        }))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideDocumentSemanticTokens',
        '_provideDocumentSemanticTokens',
        'Provide semantic tokens for a document',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to SemanticTokens.', value => {
            if (!value) {
                return undefined;
            }
            const semanticTokensDto = (0,_editor_common_services_semanticTokensDto_js__WEBPACK_IMPORTED_MODULE_4__.decodeSemanticTokensDto)(value);
            if (semanticTokensDto.type !== 'full') {
                return undefined;
            }
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.SemanticTokens(semanticTokensDto.data, undefined);
        }))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideDocumentRangeSemanticTokensLegend',
        '_provideDocumentRangeSemanticTokensLegend',
        'Provide semantic tokens legend for a document range',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Range.optional()],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to SemanticTokensLegend.', value => {
            if (!value) {
                return undefined;
            }
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.SemanticTokensLegend(value.tokenTypes, value.tokenModifiers);
        }))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideDocumentRangeSemanticTokens',
        '_provideDocumentRangeSemanticTokens',
        'Provide semantic tokens for a document range',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Range],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to SemanticTokens.', value => {
            if (!value) {
                return undefined;
            }
            const semanticTokensDto = (0,_editor_common_services_semanticTokensDto_js__WEBPACK_IMPORTED_MODULE_4__.decodeSemanticTokensDto)(value);
            if (semanticTokensDto.type !== 'full') {
                return undefined;
            }
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.SemanticTokens(semanticTokensDto.data, undefined);
        }))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeCompletionItemProvider',
        '_executeCompletionItemProvider',
        'Execute completion item provider.',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri,
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position,
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('triggerCharacter', 'Trigger completion when the user types the character, like `,` or `(`').optional(),
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Number.with('itemResolveCount', 'Number of completions to resolve (too large numbers slow down completions)').optional()
        ],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to a CompletionList-instance.',
            (value, _args, converter) => {
                if (!value) {
                    return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CompletionList([]);
                }
                const items = ( value.suggestions.map(suggestion => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.CompletionItem.to(suggestion, converter)));
                return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CompletionList(items, value.incomplete);
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeSignatureHelpProvider',
        '_executeSignatureHelpProvider',
        'Execute signature help provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('triggerCharacter', 'Trigger signature help when the user types the character, like `,` or `(`').optional()],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to SignatureHelp.', value => {
            if (value) {
                return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.SignatureHelp.to(value);
            }
            return undefined;
        }))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeCodeLensProvider',
        '_executeCodeLensProvider',
        'Execute code lens provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Number.with('itemResolveCount', 'Number of lenses that should be resolved and returned. Will only return resolved lenses, will impact performance)').optional()],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of CodeLens-instances.',
            (value, _args, converter) => {
                return tryMapWith(item => {
                    return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CodeLens(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(item.range), item.command && converter.fromInternal(item.command));
                })(value);
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeCodeActionProvider',
        '_executeCodeActionProvider',
        'Execute code action provider.',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri,
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'rangeOrSelection',
                'Range in a text document. Some refactoring provider requires Selection object.',
                v => _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.Range.isRange(v),
                v => _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.Selection.isSelection(v) ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Selection.from(v) : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.from(v)
            )),
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('kind', 'Code action kind to return code actions for').optional(),
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Number.with('itemResolveCount', 'Number of code actions to resolve (too large numbers slow down code actions)').optional()
        ],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Command-instances.',
            (value, _args, converter) => {
                return tryMapWith((codeAction) => {
                    if (codeAction._isSynthetic) {
                        if (!codeAction.command) {
                            throw ( new Error('Synthetic code actions must have a command'));
                        }
                        return converter.fromInternal(codeAction.command);
                    }
                    else {
                        const ret = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CodeAction(codeAction.title, codeAction.kind ? new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CodeActionKind(codeAction.kind) : undefined);
                        if (codeAction.edit) {
                            ret.edit = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.WorkspaceEdit.to(codeAction.edit);
                        }
                        if (codeAction.command) {
                            ret.command = converter.fromInternal(codeAction.command);
                        }
                        ret.isPreferred = codeAction.isPreferred;
                        return ret;
                    }
                })(value);
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeDocumentColorProvider',
        '_executeDocumentColorProvider',
        'Execute document color provider.',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of ColorInformation objects.',
            result => {
                if (result) {
                    return ( result.map(
                        ci => new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.ColorInformation(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(ci.range), _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Color.to(ci.color))
                    ));
                }
                return [];
            }
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeColorPresentationProvider',
        '_executeColorPresentationProvider',
        'Execute color presentation provider.',
        [
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'color',
                'The color to show and insert',
                v => v instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.Color,
                _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Color.from
            )),
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'context',
                'Context object with uri and range',
                _v => true,
                v => ({ uri: v.uri, range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.from(v.range) })
            )),
        ],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of ColorPresentation objects.',
            result => {
                if (result) {
                    return ( result.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.ColorPresentation.to));
                }
                return [];
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeInlayHintProvider',
        '_executeInlayHintProvider',
        'Execute inlay hints provider',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Range],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of Inlay objects',
            (result, args, converter) => {
                return ( result.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.InlayHint.to.bind(undefined, converter)));
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeFoldingRangeProvider',
        '_executeFoldingRangeProvider',
        'Execute folding range provider',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of FoldingRange objects',
            (result, args) => {
                if (result) {
                    return ( result.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.FoldingRange.to));
                }
                return undefined;
            }
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.resolveNotebookContentProviders',
        '_resolveNotebookContentProvider',
        'Resolve Notebook Content Providers',
        [
        ],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of NotebookContentProvider static info objects.',
            tryMapWith(item => {
                return {
                    viewType: item.viewType,
                    displayName: item.displayName,
                    options: {
                        transientOutputs: item.options.transientOutputs,
                        transientCellMetadata: item.options.transientCellMetadata,
                        transientDocumentMetadata: item.options.transientDocumentMetadata
                    },
                    filenamePattern: ( item.filenamePattern.map(pattern => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.NotebookExclusiveDocumentPattern.to(pattern)))
                };
            })
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeInlineValueProvider',
        '_executeInlineValueProvider',
        'Execute inline value provider',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri,
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Range,
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'context',
                'An InlineValueContext',
                v => v && typeof v.frameId === 'number' && v.stoppedLocation instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.Range,
                v => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.InlineValueContext.from(v)
            ))
        ],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to an array of InlineValue objects', result => {
            return ( result.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.InlineValue.to));
        }))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.open',
        '_workbench.open',
        'Opens the provided resource in the editor. Can be a text or binary file, or an http(s) URL. If you need more control over the options for opening a text file, use vscode.window.showTextDocument instead.',
        [
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'uriOrString',
                'Uri-instance or string (only http/https)',
                v => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(v) || (typeof v === 'string' && (0,_base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.matchesSomeScheme)(v, _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.http, _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.https)),
                v => v
            )),
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'columnOrOptions',
                'Either the column in which to open or editor options, see vscode.TextDocumentShowOptions',
                v => v === undefined || typeof v === 'number' || typeof v === 'object',
                v => !v ? v : typeof v === 'number' ? [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.ViewColumn.from(v), undefined] : [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.ViewColumn.from(v.viewColumn), _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TextEditorOpenOptions.from(v)]
            )).optional(),
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('label', '').optional()
        ],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.openWith',
        '_workbench.openWith',
        'Opens the provided resource with a specific editor.',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri.with('resource', 'Resource to open'),
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('viewId', 'Custom editor view id. This should be the viewType string for custom editors or the notebookType string for notebooks. Use \'default\' to use VS Code\'s default text editor'),
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'columnOrOptions',
                'Either the column in which to open or editor options, see vscode.TextDocumentShowOptions',
                v => v === undefined || typeof v === 'number' || typeof v === 'object',
                v => !v ? v : typeof v === 'number' ? [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.ViewColumn.from(v), undefined] : [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.ViewColumn.from(v.viewColumn), _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TextEditorOpenOptions.from(v)]
            )).optional()
        ],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.diff',
        '_workbench.diff',
        'Opens the provided resources in the diff editor to compare their contents.',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri.with('left', 'Left-hand side resource of the diff editor'),
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri.with('right', 'Right-hand side resource of the diff editor'),
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('title', 'Human readable title for the diff editor').optional(),
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'columnOrOptions',
                'Either the column in which to open or editor options, see vscode.TextDocumentShowOptions',
                v => v === undefined || typeof v === 'object',
                v => v && [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.ViewColumn.from(v.viewColumn), _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TextEditorOpenOptions.from(v)]
            )).optional(),
        ],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.changes',
        '_workbench.changes',
        'Opens a list of resources in the changes editor to compare their contents.',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('title', 'Human readable title for the changes editor'),
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument('resourceList', 'List of resources to compare', resources => {
                for (const resource of resources) {
                    if (resource.length !== 3) {
                        return false;
                    }
                    const [label, left, right] = resource;
                    if (!_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(label) ||
                        (!_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(left) && left !== undefined && left !== null) ||
                        (!_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(right) && right !== undefined && right !== null)) {
                        return false;
                    }
                }
                return true;
            }, v => v))
        ],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.prepareTypeHierarchy',
        '_executePrepareTypeHierarchy',
        'Prepare type hierarchy at a position inside a document',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Position],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of TypeHierarchyItem-instances',
            v => ( v.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TypeHierarchyItem.to))
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideSupertypes',
        '_executeProvideSupertypes',
        'Compute supertypes for an item',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.TypeHierarchyItem],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of TypeHierarchyItem-instances',
            v => ( v.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TypeHierarchyItem.to))
        ))
    )),
    ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.provideSubtypes',
        '_executeProvideSubtypes',
        'Compute subtypes for an item',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.TypeHierarchyItem],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult(
            'A promise that resolves to an array of TypeHierarchyItem-instances',
            v => ( v.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.TypeHierarchyItem.to))
        ))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.revealTestInExplorer',
        '_revealTestInExplorer',
        'Reveals a test instance in the explorer',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.TestItem],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.experimental.editSession.continue',
        '_workbench.editSessions.actions.continueEditSession',
        'Continue the current edit session in a different workspace',
        [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri.with('workspaceUri', 'The target workspace to continue the current edit session in')],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'setContext',
        '_setContext',
        'Set a custom context key value that can be used in when clauses.',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.String.with('name', 'The context key name'),
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument('value', 'The context key value', () => true, v => v)),
        ],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.executeMappedEditsProvider',
        '_executeMappedEditsProvider',
        'Execute Mapped Edits Provider',
        [
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.Uri,
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument.StringArray,
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument(
                'MappedEditsContext',
                'Mapped Edits Context',
                (v) => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.MappedEditsContext.is(v),
                (v) => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.MappedEditsContext.from(v)
            ))
        ],
        ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult('A promise that resolves to a workspace edit or null', (value) => {
            return value ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.WorkspaceEdit.to(value) : null;
        }))
    )),
    (
    new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommand(
        'vscode.editorChat.start',
        'inlineChat.start',
        'Invoke a new editor chat session',
        [( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandArgument('Run arguments', '', _v => true, v => {
                if (!v) {
                    return undefined;
                }
                return {
                    initialRange: v.initialRange ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.from(v.initialRange) : undefined,
                    initialSelection: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.Selection.isSelection(v.initialSelection) ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Selection.from(v.initialSelection) : undefined,
                    message: v.message,
                    autoSend: v.autoSend,
                    position: v.position ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Position.from(v.position) : undefined,
                };
            }))],
        _extHostCommands_js__WEBPACK_IMPORTED_MODULE_6__.ApiCommandResult.Void
    ))
];
class ExtHostApiCommands {
    static register(commands) {
        newCommands.forEach(commands.registerApiCommand, commands);
        this._registerValidateWhenClausesCommand(commands);
    }
    static _registerValidateWhenClausesCommand(commands) {
        commands.registerCommand(false, '_validateWhenClauses', _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_5__.validateWhenClauses);
    }
}
function tryMapWith(f) {
    return (value) => {
        if (Array.isArray(value)) {
            return ( value.map(f));
        }
        return undefined;
    };
}
function mapLocationOrLocationLink(values) {
    if (!Array.isArray(values)) {
        return undefined;
    }
    const result = [];
    for (const item of values) {
        if ((0,_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_3__.isLocationLink)(item)) {
            result.push(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.DefinitionLink.to(item));
        }
        else {
            result.push(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.location.to(item));
        }
    }
    return result;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiDeprecationService.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiDeprecationService.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostApiDeprecationService: () => (/* binding */ ExtHostApiDeprecationService),
/* harmony export */   IExtHostApiDeprecationService: () => (/* binding */ IExtHostApiDeprecationService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");





const IExtHostApiDeprecationService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_1__.createDecorator)('IExtHostApiDeprecationService'));
let ExtHostApiDeprecationService = class ExtHostApiDeprecationService {
    constructor(rpc, _extHostLogService) {
        this._extHostLogService = _extHostLogService;
        this._reportedUsages = ( new Set());
        this._telemetryShape = ( rpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadTelemetry));
    }
    report(apiId, extension, migrationSuggestion) {
        const key = this.getUsageKey(apiId, extension);
        if (( this._reportedUsages.has(key))) {
            return;
        }
        this._reportedUsages.add(key);
        if (extension.isUnderDevelopment) {
            this._extHostLogService.warn(`[Deprecation Warning] '${apiId}' is deprecated. ${migrationSuggestion}`);
        }
        this._telemetryShape.$publicLog2('extHostDeprecatedApiUsage', {
            extensionId: extension.identifier.value,
            apiId: apiId,
        });
    }
    getUsageKey(apiId, extension) {
        return `${apiId}-${extension.identifier.value}`;
    }
};
ExtHostApiDeprecationService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__.ILogService))
], ExtHostApiDeprecationService));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAuthentication.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAuthentication.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostAuthentication: () => (/* binding */ ExtHostAuthentication),
/* harmony export */   IExtHostAuthentication: () => (/* binding */ IExtHostAuthentication)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _services_authentication_common_authentication_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/authentication/common/authentication.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/authentication/common/authentication.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");








const IExtHostAuthentication = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_6__.createDecorator)('IExtHostAuthentication'));
let ExtHostAuthentication = class ExtHostAuthentication {
    constructor(extHostRpc) {
        this._authenticationProviders = ( new Map());
        this._onDidChangeSessions = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChangeSessions = this._onDidChangeSessions.event;
        this._getSessionTaskSingler = ( new TaskSingler());
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadAuthentication));
    }
    async getSession(requestingExtension, providerId, scopes, options = {}) {
        const extensionId = _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifier.toKey(requestingExtension.identifier);
        const sortedScopes = [...scopes].sort().join(' ');
        return await this._getSessionTaskSingler.getOrCreate(`${extensionId} ${providerId} ${sortedScopes}`, async () => {
            await this._proxy.$ensureProvider(providerId);
            const extensionName = requestingExtension.displayName || requestingExtension.name;
            return this._proxy.$getSession(providerId, scopes, extensionId, extensionName, options);
        });
    }
    async getAccounts(providerId) {
        await this._proxy.$ensureProvider(providerId);
        return await this._proxy.$getAccounts(providerId);
    }
    async removeSession(providerId, sessionId) {
        const providerData = this._authenticationProviders.get(providerId);
        if (!providerData) {
            return this._proxy.$removeSession(providerId, sessionId);
        }
        return providerData.provider.removeSession(sessionId);
    }
    registerAuthenticationProvider(id, label, provider, options) {
        if (this._authenticationProviders.get(id)) {
            throw ( new Error(`An authentication provider with id '${id}' is already registered.`));
        }
        this._authenticationProviders.set(id, { label, provider, options: options ?? { supportsMultipleAccounts: false } });
        const listener = provider.onDidChangeSessions(e => this._proxy.$sendDidChangeSessions(id, e));
        this._proxy.$registerAuthenticationProvider(id, label, options?.supportsMultipleAccounts ?? false);
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.Disposable(() => {
            listener.dispose();
            this._authenticationProviders.delete(id);
            this._proxy.$unregisterAuthenticationProvider(id);
        }));
    }
    async $createSession(providerId, scopes, options) {
        const providerData = this._authenticationProviders.get(providerId);
        if (providerData) {
            return await providerData.provider.createSession(scopes, options);
        }
        throw ( new Error(`Unable to find authentication provider with handle: ${providerId}`));
    }
    async $removeSession(providerId, sessionId) {
        const providerData = this._authenticationProviders.get(providerId);
        if (providerData) {
            return await providerData.provider.removeSession(sessionId);
        }
        throw ( new Error(`Unable to find authentication provider with handle: ${providerId}`));
    }
    async $getSessions(providerId, scopes, options) {
        const providerData = this._authenticationProviders.get(providerId);
        if (providerData) {
            return await providerData.provider.getSessions(scopes, options);
        }
        throw ( new Error(`Unable to find authentication provider with handle: ${providerId}`));
    }
    $onDidChangeAuthenticationSessions(id, label) {
        if (!id.startsWith(_services_authentication_common_authentication_js__WEBPACK_IMPORTED_MODULE_5__.INTERNAL_AUTH_PROVIDER_PREFIX)) {
            this._onDidChangeSessions.fire({ provider: { id, label } });
        }
        return Promise.resolve();
    }
};
ExtHostAuthentication = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostRpcService))
], ExtHostAuthentication));
class TaskSingler {
    constructor() {
        this._inFlightPromises = ( new Map());
    }
    getOrCreate(key, promiseFactory) {
        const inFlight = this._inFlightPromises.get(key);
        if (inFlight) {
            return inFlight;
        }
        const promise = promiseFactory().finally(() => this._inFlightPromises.delete(key));
        this._inFlightPromises.set(key, promise);
        return promise;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostBulkEdits.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostBulkEdits.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostBulkEdits: () => (/* binding */ ExtHostBulkEdits)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/extensions/common/proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");





let ExtHostBulkEdits = class ExtHostBulkEdits {
    constructor(extHostRpc, extHostDocumentsAndEditors) {
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadBulkEdits));
        this._versionInformationProvider = {
            getTextDocumentVersion: uri => extHostDocumentsAndEditors.getDocument(uri)?.version,
            getNotebookDocumentVersion: () => undefined
        };
    }
    applyWorkspaceEdit(edit, extension, metadata) {
        const dto = ( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_4__.SerializableObjectWithBuffers(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.WorkspaceEdit.from(edit, this._versionInformationProvider)));
        return this._proxy.$tryApplyWorkspaceEdit(dto, undefined, metadata?.isRefactoring ?? false);
    }
};
ExtHostBulkEdits = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_2__.IExtHostRpcService))
], ExtHostBulkEdits));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostChatAgents2.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostChatAgents2.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostChatAgents2: () => (/* binding */ ExtHostChatAgents2)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/errorMessage.js */ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ "./node_modules/vscode/vscode/src/vs/base/common/stopwatch.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _contrib_chat_common_chatService_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../contrib/chat/common/chatService.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatService.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");















class ChatAgentResponseStream {
    constructor(_extension, _request, _proxy, _commandsConverter, _sessionDisposables) {
        this._extension = _extension;
        this._request = _request;
        this._proxy = _proxy;
        this._commandsConverter = _commandsConverter;
        this._sessionDisposables = _sessionDisposables;
        this._stopWatch = _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_6__.StopWatch.create(false);
        this._isClosed = false;
    }
    close() {
        this._isClosed = true;
    }
    get timings() {
        return {
            firstProgress: this._firstProgress,
            totalElapsed: this._stopWatch.elapsed()
        };
    }
    get apiObject() {
        if (!this._apiObject) {
            const that = this;
            this._stopWatch.reset();
            function throwIfDone(source) {
                if (that._isClosed) {
                    const err = ( new Error('Response stream has been closed'));
                    Error.captureStackTrace(err, source);
                    throw err;
                }
            }
            const _report = (progress, task) => {
                if (typeof this._firstProgress === 'undefined' && 'content' in progress) {
                    this._firstProgress = this._stopWatch.elapsed();
                }
                if (task) {
                    const progressReporterPromise = this._proxy.$handleProgressChunk(this._request.requestId, progress);
                    const progressReporter = {
                        report: (p) => {
                            progressReporterPromise?.then((handle) => {
                                if (handle) {
                                    if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.MarkdownString.isMarkdownString(p.value)) {
                                        this._proxy.$handleProgressChunk(this._request.requestId, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseWarningPart.from(p), handle);
                                    }
                                    else {
                                        this._proxy.$handleProgressChunk(this._request.requestId, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseReferencePart.from(p), handle);
                                    }
                                }
                            });
                        }
                    };
                    Promise.all([progressReporterPromise, task?.(progressReporter)]).then(([handle, res]) => {
                        if (handle !== undefined && res !== undefined) {
                            this._proxy.$handleProgressChunk(this._request.requestId, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatTaskResult.from(res), handle);
                        }
                    });
                }
                else {
                    this._proxy.$handleProgressChunk(this._request.requestId, progress);
                }
            };
            this._apiObject = {
                markdown(value) {
                    throwIfDone(this.markdown);
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseMarkdownPart(value);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseMarkdownPart.from(part);
                    _report(dto);
                    return this;
                },
                markdownWithVulnerabilities(value, vulnerabilities) {
                    throwIfDone(this.markdown);
                    if (vulnerabilities) {
                        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that._extension, 'chatParticipantAdditions');
                    }
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseMarkdownWithVulnerabilitiesPart(value, vulnerabilities);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseMarkdownWithVulnerabilitiesPart.from(part);
                    _report(dto);
                    return this;
                },
                filetree(value, baseUri) {
                    throwIfDone(this.filetree);
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseFileTreePart(value, baseUri);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseFilesPart.from(part);
                    _report(dto);
                    return this;
                },
                anchor(value, title) {
                    throwIfDone(this.anchor);
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseAnchorPart(value, title);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseAnchorPart.from(part);
                    _report(dto);
                    return this;
                },
                button(value) {
                    throwIfDone(this.anchor);
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseCommandButtonPart(value);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseCommandButtonPart.from(part, that._commandsConverter, that._sessionDisposables);
                    _report(dto);
                    return this;
                },
                progress(value, task) {
                    throwIfDone(this.progress);
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseProgressPart2(value, task);
                    const dto = task ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatTask.from(part) : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseProgressPart.from(part);
                    _report(dto, task);
                    return this;
                },
                warning(value) {
                    throwIfDone(this.progress);
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that._extension, 'chatParticipantAdditions');
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseWarningPart(value);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseWarningPart.from(part);
                    _report(dto);
                    return this;
                },
                reference(value, iconPath) {
                    throwIfDone(this.reference);
                    if ('variableName' in value) {
                        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that._extension, 'chatParticipantAdditions');
                    }
                    if ('variableName' in value && !value.value) {
                        const matchingVarData = that._request.variables.variables.find(v => v.name === value.variableName);
                        if (matchingVarData) {
                            let references;
                            if (matchingVarData.references?.length) {
                                references = ( matchingVarData.references.map(r => ({
                                    kind: 'reference',
                                    reference: { variableName: value.variableName, value: r.reference }
                                })));
                            }
                            else {
                                const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseReferencePart(value, iconPath);
                                const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseReferencePart.from(part);
                                references = [dto];
                            }
                            references.forEach(r => _report(r));
                            return this;
                        }
                    }
                    else {
                        const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseReferencePart(value, iconPath);
                        const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseReferencePart.from(part);
                        _report(dto);
                    }
                    return this;
                },
                textEdit(target, edits) {
                    throwIfDone(this.textEdit);
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that._extension, 'chatParticipantAdditions');
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseTextEditPart(target, edits);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseTextEditPart.from(part);
                    _report(dto);
                    return this;
                },
                detectedParticipant(participant, command) {
                    throwIfDone(this.detectedParticipant);
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that._extension, 'chatParticipantAdditions');
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseDetectedParticipantPart(participant, command);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseDetectedParticipantPart.from(part);
                    _report(dto);
                    return this;
                },
                confirmation(title, message, data) {
                    throwIfDone(this.confirmation);
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that._extension, 'chatParticipantAdditions');
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseConfirmationPart(title, message, data);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponseConfirmationPart.from(part);
                    _report(dto);
                    return this;
                },
                push(part) {
                    throwIfDone(this.push);
                    if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseTextEditPart ||
                        part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseMarkdownWithVulnerabilitiesPart ||
                        part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseDetectedParticipantPart ||
                        part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseWarningPart ||
                        part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseConfirmationPart) {
                        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that._extension, 'chatParticipantAdditions');
                    }
                    if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseReferencePart) {
                        this.reference(part.value, part.iconPath);
                    }
                    else {
                        const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponsePart.from(part, that._commandsConverter, that._sessionDisposables);
                        _report(dto);
                    }
                    return this;
                },
            };
        }
        return this._apiObject;
    }
}
class ExtHostChatAgents2 extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.Disposable {
    static { this._idPool = 0; }
    constructor(mainContext, _logService, commands) {
        super();
        this._logService = _logService;
        this.commands = commands;
        this._agents = ( new Map());
        this._sessionDisposables = this._register(( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableMap()));
        this._completionDisposables = this._register(( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableMap()));
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__.MainContext.MainThreadChatAgents2));
    }
    transferActiveChat(newWorkspace) {
        this._proxy.$transferActiveChatSession(newWorkspace);
    }
    createChatAgent(extension, id, handler) {
        const handle = ExtHostChatAgents2._idPool++;
        const agent = ( new ExtHostChatAgent(extension, id, this._proxy, handle, handler));
        this._agents.set(handle, agent);
        this._proxy.$registerAgent(handle, extension.identifier, id, {}, undefined);
        return agent.apiAgent;
    }
    createDynamicChatAgent(extension, id, dynamicProps, handler) {
        const handle = ExtHostChatAgents2._idPool++;
        const agent = ( new ExtHostChatAgent(extension, id, this._proxy, handle, handler));
        this._agents.set(handle, agent);
        this._proxy.$registerAgent(handle, extension.identifier, id, { isSticky: true }, dynamicProps);
        return agent.apiAgent;
    }
    async $invokeAgent(handle, request, context, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            throw ( new Error(
                `[CHAT](${handle}) CANNOT invoke agent because the agent is not registered`
            ));
        }
        let sessionDisposables = this._sessionDisposables.get(request.sessionId);
        if (!sessionDisposables) {
            sessionDisposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore());
            this._sessionDisposables.set(request.sessionId, sessionDisposables);
        }
        const stream = ( new ChatAgentResponseStream(
            agent.extension,
            request,
            this._proxy,
            this.commands.converter,
            sessionDisposables
        ));
        try {
            const convertedHistory = await this.prepareHistoryTurns(request.agentId, context);
            const task = agent.invoke(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatAgentRequest.to(request), { history: convertedHistory }, stream.apiObject, token);
            return await (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.raceCancellation)(Promise.resolve(task).then((result) => {
                if (result?.metadata) {
                    try {
                        JSON.stringify(result.metadata);
                    }
                    catch (err) {
                        const msg = `result.metadata MUST be JSON.stringify-able. Got error: ${err.message}`;
                        this._logService.error(`[${agent.extension.identifier.value}] [@${agent.id}] ${msg}`, agent.extension);
                        return { errorDetails: { message: msg }, timings: stream.timings };
                    }
                }
                let errorDetails;
                if (result?.errorDetails) {
                    errorDetails = {
                        ...result.errorDetails,
                        responseIsIncomplete: true
                    };
                }
                if (errorDetails?.responseIsRedacted) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(agent.extension, 'chatParticipantPrivate');
                }
                return { errorDetails, timings: stream.timings, metadata: result?.metadata };
            }), token);
        }
        catch (e) {
            this._logService.error(e, agent.extension);
            if (e instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.LanguageModelError && e.cause) {
                e = e.cause;
            }
            return { errorDetails: { message: (0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_2__.toErrorMessage)(e), responseIsIncomplete: true } };
        }
        finally {
            stream.close();
        }
    }
    async prepareHistoryTurns(agentId, context) {
        const res = [];
        for (const h of context.history) {
            const ehResult = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatAgentResult.to(h.result);
            const result = agentId === h.request.agentId ?
                ehResult :
                { ...ehResult, metadata: undefined };
            res.push(new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatRequestTurn(h.request.message, h.request.command, ( h.request.variables.variables.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatAgentValueReference.to)), h.request.agentId));
            const parts = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( h.response.map(r => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatResponsePart.toContent(r, this.commands.converter))));
            res.push(new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResponseTurn(parts, result, h.request.agentId, h.request.command));
        }
        return res;
    }
    $releaseSession(sessionId) {
        this._sessionDisposables.deleteAndDispose(sessionId);
    }
    async $provideFollowups(request, handle, result, context, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return Promise.resolve([]);
        }
        const convertedHistory = await this.prepareHistoryTurns(agent.id, context);
        const ehResult = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatAgentResult.to(result);
        return ( (await agent.provideFollowups(ehResult, { history: convertedHistory }, token))
            .filter(f => {
            const isValid = !f.participant || ( _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_4__.Iterable.some(( this._agents.values()), a => a.id === f.participant && _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier.equals(a.extension.identifier, agent.extension.identifier)));
            if (!isValid) {
                this._logService.warn(`[@${agent.id}] ChatFollowup refers to an unknown participant: ${f.participant}`);
            }
            return isValid;
        })
            .map(f => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatFollowup.from(f, request)));
    }
    $acceptFeedback(handle, result, vote, reportIssue) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        const ehResult = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatAgentResult.to(result);
        let kind;
        switch (vote) {
            case _contrib_chat_common_chatService_js__WEBPACK_IMPORTED_MODULE_13__.ChatAgentVoteDirection.Down:
                kind = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResultFeedbackKind.Unhelpful;
                break;
            case _contrib_chat_common_chatService_js__WEBPACK_IMPORTED_MODULE_13__.ChatAgentVoteDirection.Up:
                kind = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ChatResultFeedbackKind.Helpful;
                break;
        }
        agent.acceptFeedback(reportIssue ?
            ( Object.freeze({ result: ehResult, kind, reportIssue })) :
            ( Object.freeze({ result: ehResult, kind })));
    }
    $acceptAction(handle, result, event) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        if (event.action.kind === 'vote') {
            return;
        }
        const ehAction = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatAgentUserActionEvent.to(result, event, this.commands.converter);
        if (ehAction) {
            agent.acceptAction(( Object.freeze(ehAction)));
        }
    }
    async $invokeCompletionProvider(handle, query, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return [];
        }
        let disposables = this._completionDisposables.get(handle);
        if (disposables) {
            disposables.clear();
        }
        else {
            disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore());
            this._completionDisposables.set(handle, disposables);
        }
        const items = await agent.invokeCompletionProvider(query, token);
        return ( items.map(
            (i) => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatAgentCompletionItem.from(i, this.commands.converter, disposables)
        ));
    }
    async $provideWelcomeMessage(handle, location, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        return await agent.provideWelcomeMessage(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatLocation.to(location), token);
    }
    async $provideSampleQuestions(handle, location, token) {
        const agent = this._agents.get(handle);
        if (!agent) {
            return;
        }
        return ( (await agent.provideSampleQuestions(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatLocation.to(location), token))
            .map(f => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.ChatFollowup.from(f, undefined)));
    }
}
class ExtHostChatAgent {
    constructor(extension, id, _proxy, _handle, _requestHandler) {
        this.extension = extension;
        this.id = id;
        this._proxy = _proxy;
        this._handle = _handle;
        this._requestHandler = _requestHandler;
        this._onDidReceiveFeedback = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter());
        this._onDidPerformAction = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter());
    }
    acceptFeedback(feedback) {
        this._onDidReceiveFeedback.fire(feedback);
    }
    acceptAction(event) {
        this._onDidPerformAction.fire(event);
    }
    async invokeCompletionProvider(query, token) {
        if (!this._agentVariableProvider) {
            return [];
        }
        return (await this._agentVariableProvider.provider.provideCompletionItems(query, token)) ?? [];
    }
    async provideFollowups(result, context, token) {
        if (!this._followupProvider) {
            return [];
        }
        const followups = await this._followupProvider.provideFollowups(result, context, token);
        if (!followups) {
            return [];
        }
        return followups
            .filter(f => !(f && 'commandId' in f))
            .filter(f => !(f && 'message' in f));
    }
    async provideWelcomeMessage(location, token) {
        if (!this._welcomeMessageProvider) {
            return [];
        }
        const content = await this._welcomeMessageProvider.provideWelcomeMessage(location, token);
        if (!content) {
            return [];
        }
        return ( content.map(item => {
            if (typeof item === 'string') {
                return item;
            }
            else {
                return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.MarkdownString.from(item);
            }
        }));
    }
    async provideSampleQuestions(location, token) {
        if (!this._welcomeMessageProvider || !this._welcomeMessageProvider.provideSampleQuestions) {
            return [];
        }
        const content = await this._welcomeMessageProvider.provideSampleQuestions(location, token);
        if (!content) {
            return [];
        }
        return content;
    }
    get apiAgent() {
        let disposed = false;
        let updateScheduled = false;
        const updateMetadataSoon = () => {
            if (disposed) {
                return;
            }
            if (updateScheduled) {
                return;
            }
            updateScheduled = true;
            queueMicrotask(() => {
                this._proxy.$updateAgent(this._handle, {
                    icon: !this._iconPath ? undefined :
                        this._iconPath instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI ? this._iconPath :
                            'light' in this._iconPath ? this._iconPath.light :
                                undefined,
                    iconDark: !this._iconPath ? undefined :
                        'dark' in this._iconPath ? this._iconPath.dark :
                            undefined,
                    themeIcon: this._iconPath instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_12__.ThemeIcon ? this._iconPath : undefined,
                    hasFollowups: this._followupProvider !== undefined,
                    isSecondary: this._isSecondary,
                    helpTextPrefix: (!this._helpTextPrefix || typeof this._helpTextPrefix === 'string') ? this._helpTextPrefix : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.MarkdownString.from(this._helpTextPrefix),
                    helpTextVariablesPrefix: (!this._helpTextVariablesPrefix || typeof this._helpTextVariablesPrefix === 'string') ? this._helpTextVariablesPrefix : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.MarkdownString.from(this._helpTextVariablesPrefix),
                    helpTextPostfix: (!this._helpTextPostfix || typeof this._helpTextPostfix === 'string') ? this._helpTextPostfix : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.MarkdownString.from(this._helpTextPostfix),
                    supportIssueReporting: this._supportIssueReporting,
                    requester: this._requester,
                    supportsSlowVariables: this._supportsSlowReferences,
                });
                updateScheduled = false;
            });
        };
        const that = this;
        return {
            get id() {
                return that.id;
            },
            get iconPath() {
                return that._iconPath;
            },
            set iconPath(v) {
                that._iconPath = v;
                updateMetadataSoon();
            },
            get requestHandler() {
                return that._requestHandler;
            },
            set requestHandler(v) {
                (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.assertType)(typeof v === 'function', 'Invalid request handler');
                that._requestHandler = v;
            },
            get followupProvider() {
                return that._followupProvider;
            },
            set followupProvider(v) {
                that._followupProvider = v;
                updateMetadataSoon();
            },
            get isDefault() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                return that._isDefault;
            },
            set isDefault(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                that._isDefault = v;
                updateMetadataSoon();
            },
            get helpTextPrefix() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                return that._helpTextPrefix;
            },
            set helpTextPrefix(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                that._helpTextPrefix = v;
                updateMetadataSoon();
            },
            get helpTextVariablesPrefix() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                return that._helpTextVariablesPrefix;
            },
            set helpTextVariablesPrefix(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                that._helpTextVariablesPrefix = v;
                updateMetadataSoon();
            },
            get helpTextPostfix() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                return that._helpTextPostfix;
            },
            set helpTextPostfix(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                that._helpTextPostfix = v;
                updateMetadataSoon();
            },
            get isSecondary() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                return that._isSecondary;
            },
            set isSecondary(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                that._isSecondary = v;
                updateMetadataSoon();
            },
            get supportIssueReporting() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'chatParticipantPrivate');
                return that._supportIssueReporting;
            },
            set supportIssueReporting(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'chatParticipantPrivate');
                that._supportIssueReporting = v;
                updateMetadataSoon();
            },
            get onDidReceiveFeedback() {
                return that._onDidReceiveFeedback.event;
            },
            set participantVariableProvider(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'chatParticipantAdditions');
                that._agentVariableProvider = v;
                if (v) {
                    if (!v.triggerCharacters.length) {
                        throw ( new Error('triggerCharacters are required'));
                    }
                    that._proxy.$registerAgentCompletionsProvider(that._handle, that.id, v.triggerCharacters);
                }
                else {
                    that._proxy.$unregisterAgentCompletionsProvider(that._handle, that.id);
                }
            },
            get participantVariableProvider() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'chatParticipantAdditions');
                return that._agentVariableProvider;
            },
            set welcomeMessageProvider(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                that._welcomeMessageProvider = v;
                updateMetadataSoon();
            },
            get welcomeMessageProvider() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'defaultChatParticipant');
                return that._welcomeMessageProvider;
            },
            onDidPerformAction: !(0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.isProposedApiEnabled)(this.extension, 'chatParticipantAdditions')
                ? undefined
                : this._onDidPerformAction.event,
            set requester(v) {
                that._requester = v;
                updateMetadataSoon();
            },
            get requester() {
                return that._requester;
            },
            set supportsSlowReferences(v) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'chatParticipantPrivate');
                that._supportsSlowReferences = v;
                updateMetadataSoon();
            },
            get supportsSlowReferences() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(that.extension, 'chatParticipantPrivate');
                return that._supportsSlowReferences;
            },
            dispose() {
                disposed = true;
                that._followupProvider = undefined;
                that._onDidReceiveFeedback.dispose();
                that._proxy.$unregisterAgent(that._handle);
            },
        };
    }
    invoke(request, context, response, token) {
        return this._requestHandler(request, context, response, token);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostChatVariables.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostChatVariables.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostChatVariables: () => (/* binding */ ExtHostChatVariables)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_themables_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");







class ExtHostChatVariables {
    static { this._idPool = 0; }
    constructor(mainContext) {
        this._resolver = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadChatVariables));
    }
    async $resolveVariable(handle, requestId, messageText, token) {
        const item = this._resolver.get(handle);
        if (!item) {
            return undefined;
        }
        try {
            if (item.resolver.resolve2) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.checkProposedApiEnabled)(item.extension, 'chatParticipantAdditions');
                const stream = ( new ChatVariableResolverResponseStream(requestId, this._proxy));
                const value = await item.resolver.resolve2(item.data.name, { prompt: messageText }, stream.apiObject, token);
                if (value && value[0]) {
                    return value[0].value;
                }
            }
            else {
                const value = await item.resolver.resolve(item.data.name, { prompt: messageText }, token);
                if (value && value[0]) {
                    return value[0].value;
                }
            }
        }
        catch (err) {
            (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedExternalError)(err);
        }
        return undefined;
    }
    registerVariableResolver(extension, id, name, userDescription, modelDescription, isSlow, resolver, fullName, themeIconId) {
        const handle = ExtHostChatVariables._idPool++;
        const icon = themeIconId ? _base_common_themables_js__WEBPACK_IMPORTED_MODULE_2__.ThemeIcon.fromId(themeIconId) : undefined;
        this._resolver.set(handle, { extension, data: { id, name, description: userDescription, modelDescription, icon }, resolver: resolver });
        this._proxy.$registerVariable(handle, { id, name, description: userDescription, modelDescription, isSlow, fullName, icon });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            this._resolver.delete(handle);
            this._proxy.$unregisterVariable(handle);
        });
    }
}
class ChatVariableResolverResponseStream {
    constructor(_requestId, _proxy) {
        this._requestId = _requestId;
        this._proxy = _proxy;
        this._isClosed = false;
    }
    close() {
        this._isClosed = true;
    }
    get apiObject() {
        if (!this._apiObject) {
            const that = this;
            function throwIfDone(source) {
                if (that._isClosed) {
                    const err = ( new Error('Response stream has been closed'));
                    Error.captureStackTrace(err, source);
                    throw err;
                }
            }
            const _report = (progress) => {
                this._proxy.$handleProgressChunk(this._requestId, progress);
            };
            this._apiObject = {
                progress(value) {
                    throwIfDone(this.progress);
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ChatResponseProgressPart(value);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.ChatResponseProgressPart.from(part);
                    _report(dto);
                    return this;
                },
                reference(value) {
                    throwIfDone(this.reference);
                    const part = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ChatResponseReferencePart(value);
                    const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.ChatResponseReferencePart.from(part);
                    _report(dto);
                    return this;
                },
                push(part) {
                    throwIfDone(this.push);
                    if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ChatResponseReferencePart) {
                        _report(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.ChatResponseReferencePart.from(part));
                    }
                    else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ChatResponseProgressPart) {
                        _report(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.ChatResponseProgressPart.from(part));
                    }
                    return this;
                }
            };
        }
        return this._apiObject;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostClipboard.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostClipboard.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostClipboard: () => (/* binding */ ExtHostClipboard)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");

class ExtHostClipboard {
    constructor(mainContext) {
        const proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadClipboard));
        this.value = ( Object.freeze({
            readText() {
                return proxy.$readText();
            },
            writeText(value) {
                return proxy.$writeText(value);
            }
        }));
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCodeInsets.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCodeInsets.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostEditorInsets: () => (/* binding */ ExtHostEditorInsets)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../contrib/webview/common/webview.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/webview/common/webview.js");



class ExtHostEditorInsets {
    constructor(_proxy, _editors, _remoteInfo) {
        this._proxy = _proxy;
        this._editors = _editors;
        this._remoteInfo = _remoteInfo;
        this._handlePool = 0;
        this._disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
        this._insets = ( new Map());
        this._disposables.add(_editors.onDidChangeVisibleTextEditors(() => {
            const visibleEditor = _editors.getVisibleTextEditors();
            for (const value of ( this._insets.values())) {
                if (visibleEditor.indexOf(value.editor) < 0) {
                    value.inset.dispose();
                }
            }
        }));
    }
    dispose() {
        this._insets.forEach(value => value.inset.dispose());
        this._disposables.dispose();
    }
    createWebviewEditorInset(editor, line, height, options, extension) {
        let apiEditor;
        for (const candidate of this._editors.getVisibleTextEditors(true)) {
            if (candidate.value === editor) {
                apiEditor = candidate;
                break;
            }
        }
        if (!apiEditor) {
            throw ( new Error('not a visible editor'));
        }
        const that = this;
        const handle = this._handlePool++;
        const onDidReceiveMessage = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        const onDidDispose = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        const webview = new (class {
            constructor() {
                this._html = '';
                this._options = Object.create(null);
            }
            asWebviewUri(resource) {
                return (0,_contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_2__.asWebviewUri)(resource, that._remoteInfo);
            }
            get cspSource() {
                return _contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_2__.webviewGenericCspSource;
            }
            set options(value) {
                this._options = value;
                that._proxy.$setOptions(handle, value);
            }
            get options() {
                return this._options;
            }
            set html(value) {
                this._html = value;
                that._proxy.$setHtml(handle, value);
            }
            get html() {
                return this._html;
            }
            get onDidReceiveMessage() {
                return onDidReceiveMessage.event;
            }
            postMessage(message) {
                return that._proxy.$postMessage(handle, message);
            }
        });
        const inset = new (class {
            constructor() {
                this.editor = editor;
                this.line = line;
                this.height = height;
                this.webview = webview;
                this.onDidDispose = onDidDispose.event;
            }
            dispose() {
                if (( that._insets.has(handle))) {
                    that._insets.delete(handle);
                    that._proxy.$disposeEditorInset(handle);
                    onDidDispose.fire();
                    onDidDispose.dispose();
                    onDidReceiveMessage.dispose();
                }
            }
        });
        this._proxy.$createEditorInset(handle, apiEditor.id, apiEditor.value.document.uri, line + 1, height, options || {}, extension.identifier, extension.extensionLocation);
        this._insets.set(handle, { editor, inset, onDidReceiveMessage });
        return inset;
    }
    $onDidDispose(handle) {
        const value = this._insets.get(handle);
        if (value) {
            value.inset.dispose();
        }
    }
    $onDidReceiveMessage(handle, message) {
        const value = this._insets.get(handle);
        value?.onDidReceiveMessage.fire(message);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApiCommand: () => (/* binding */ ApiCommand),
/* harmony export */   ApiCommandArgument: () => (/* binding */ ApiCommandArgument),
/* harmony export */   ApiCommandResult: () => (/* binding */ ApiCommandResult),
/* harmony export */   CommandsConverter: () => (/* binding */ CommandsConverter),
/* harmony export */   ExtHostCommands: () => (/* binding */ ExtHostCommands),
/* harmony export */   IExtHostCommands: () => (/* binding */ IExtHostCommands)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/marshalling.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshalling.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _editor_common_core_position_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../editor/common/core/position.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/position.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTestItem_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./extHostTestItem.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestItem.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../services/extensions/common/proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");
/* harmony import */ var _base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../base/common/errorMessage.js */ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js");
/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ "./node_modules/vscode/vscode/src/vs/base/common/stopwatch.js");
/* harmony import */ var _platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../platform/telemetry/common/telemetryUtils.js */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js");
/* harmony import */ var _extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./extHostTelemetry.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTelemetry.js");
/* harmony import */ var _base_common_uuid_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../base/common/uuid.js */ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js");























let ExtHostCommands = class ExtHostCommands {
    #proxy;
    #telemetry;
    #extHostTelemetry;
    constructor(extHostRpc, logService, extHostTelemetry) {
        this._commands = ( new Map());
        this._apiCommands = ( new Map());
        this.#proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_5__.MainContext.MainThreadCommands));
        this._logService = logService;
        this.#extHostTelemetry = extHostTelemetry;
        this.#telemetry = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_5__.MainContext.MainThreadTelemetry));
        this.converter = ( new CommandsConverter(this, id => {
            const candidate = this._apiCommands.get(id);
            return candidate?.result === ApiCommandResult.Void
                ? candidate : undefined;
        }, logService));
        this._argumentProcessors = [
            {
                processArgument(a) {
                    return (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_8__.revive)(a);
                }
            },
            {
                processArgument(arg) {
                    return (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_4__.cloneAndChange)(arg, function (obj) {
                        if (_editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_9__.Range.isIRange(obj)) {
                            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.to(obj);
                        }
                        if (_editor_common_core_position_js__WEBPACK_IMPORTED_MODULE_10__.Position.isIPosition(obj)) {
                            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Position.to(obj);
                        }
                        if (_editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_9__.Range.isIRange(obj.range) && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.isUri(obj.uri)) {
                            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.location.to(obj);
                        }
                        if (obj instanceof _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_16__.VSBuffer) {
                            return obj.buffer.buffer;
                        }
                        if (!Array.isArray(obj)) {
                            return obj;
                        }
                    });
                }
            }
        ];
    }
    registerArgumentProcessor(processor) {
        this._argumentProcessors.push(processor);
    }
    registerApiCommand(apiCommand) {
        const registration = this.registerCommand(false, apiCommand.id, async (...apiArgs) => {
            const internalArgs = ( apiCommand.args.map((arg, i) => {
                if (!arg.validate(apiArgs[i])) {
                    throw ( new Error(
                        `Invalid argument '${arg.name}' when running '${apiCommand.id}', received: ${typeof apiArgs[i] === 'object' ? JSON.stringify(apiArgs[i], null, '\t') : apiArgs[i]} `
                    ));
                }
                return arg.convert(apiArgs[i]);
            }));
            const internalResult = await this.executeCommand(apiCommand.internalId, ...internalArgs);
            return apiCommand.result.convert(internalResult, apiArgs, this.converter);
        }, undefined, {
            description: apiCommand.description,
            args: apiCommand.args,
            returns: apiCommand.result.description
        });
        this._apiCommands.set(apiCommand.id, apiCommand);
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Disposable(() => {
            registration.dispose();
            this._apiCommands.delete(apiCommand.id);
        });
    }
    registerCommand(global, id, callback, thisArg, metadata, extension) {
        this._logService.trace('ExtHostCommands#registerCommand', id);
        if (!id.trim().length) {
            throw ( new Error('invalid id'));
        }
        if (( this._commands.has(id))) {
            throw ( new Error(`command '${id}' already exists`));
        }
        this._commands.set(id, { callback, thisArg, metadata, extension });
        if (global) {
            this.#proxy.$registerCommand(id);
        }
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Disposable(() => {
            if (this._commands.delete(id)) {
                if (global) {
                    this.#proxy.$unregisterCommand(id);
                }
            }
        });
    }
    executeCommand(id, ...args) {
        this._logService.trace('ExtHostCommands#executeCommand', id);
        return this._doExecuteCommand(id, args, true);
    }
    async _doExecuteCommand(id, args, retry) {
        if (( this._commands.has(id))) {
            this.#proxy.$fireCommandActivationEvent(id);
            return this._executeContributedCommand(id, args, false);
        }
        else {
            let hasBuffers = false;
            const toArgs = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_4__.cloneAndChange)(args, function (value) {
                if (value instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Position) {
                    return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Position.from(value);
                }
                else if (value instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Range) {
                    return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from(value);
                }
                else if (value instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Location) {
                    return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.location.from(value);
                }
                else if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.NotebookRange.isNotebookRange(value)) {
                    return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.NotebookRange.from(value);
                }
                else if (value instanceof ArrayBuffer) {
                    hasBuffers = true;
                    return _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_16__.VSBuffer.wrap(( new Uint8Array(value)));
                }
                else if (value instanceof Uint8Array) {
                    hasBuffers = true;
                    return _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_16__.VSBuffer.wrap(value);
                }
                else if (value instanceof _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_16__.VSBuffer) {
                    hasBuffers = true;
                    return value;
                }
                if (!Array.isArray(value)) {
                    return value;
                }
            });
            try {
                const result = await this.#proxy.$executeCommand(id, hasBuffers ? ( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_17__.SerializableObjectWithBuffers(toArgs)) : toArgs, retry);
                return (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_8__.revive)(result);
            }
            catch (e) {
                if (e instanceof Error && e.message === '$executeCommand:retry') {
                    return this._doExecuteCommand(id, args, false);
                }
                else {
                    throw e;
                }
            }
        }
    }
    async _executeContributedCommand(id, args, annotateError) {
        const command = this._commands.get(id);
        if (!command) {
            throw ( new Error('Unknown command'));
        }
        const { callback, thisArg, metadata } = command;
        if (metadata?.args) {
            for (let i = 0; i < metadata.args.length; i++) {
                try {
                    (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.validateConstraint)(args[i], metadata.args[i].constraint);
                }
                catch (err) {
                    throw ( new Error(
                        `Running the contributed command: '${id}' failed. Illegal argument '${metadata.args[i].name}' - ${metadata.args[i].description}`
                    ));
                }
            }
        }
        const stopWatch = _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_19__.StopWatch.create();
        try {
            return await callback.apply(thisArg, args);
        }
        catch (err) {
            if (id === this.converter.delegatingCommandId) {
                const actual = this.converter.getActualCommand(...args);
                if (actual) {
                    id = actual.command;
                }
            }
            this._logService.error(err, id, command.extension?.identifier);
            if (!annotateError) {
                throw err;
            }
            if (command.extension?.identifier) {
                const reported = this.#extHostTelemetry.onExtensionError(command.extension.identifier, err);
                this._logService.trace('forwarded error to extension?', reported, command.extension?.identifier);
            }
            throw new (class CommandError extends Error {
                constructor() {
                    super((0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_18__.toErrorMessage)(err));
                    this.id = id;
                    this.source = command.extension?.displayName ?? command.extension?.name;
                }
            });
        }
        finally {
            this._reportTelemetry(command, id, stopWatch.elapsed());
        }
    }
    _reportTelemetry(command, id, duration) {
        if (!command.extension) {
            return;
        }
        this.#telemetry.$publicLog2('Extension:ActionExecuted', {
            extensionId: command.extension.identifier.value,
            id: ( new _platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_20__.TelemetryTrustedValue(id)),
            duration: duration,
        });
    }
    $executeContributedCommand(id, ...args) {
        this._logService.trace('ExtHostCommands#$executeContributedCommand', id);
        const cmdHandler = this._commands.get(id);
        if (!cmdHandler) {
            return Promise.reject(( new Error(`Contributed command '${id}' does not exist.`)));
        }
        else {
            args = ( args.map(
                arg => this._argumentProcessors.reduce((r, p) => p.processArgument(r, cmdHandler.extension?.identifier), arg)
            ));
            return this._executeContributedCommand(id, args, true);
        }
    }
    getCommands(filterUnderscoreCommands = false) {
        this._logService.trace('ExtHostCommands#getCommands', filterUnderscoreCommands);
        return this.#proxy.$getCommands().then(result => {
            if (filterUnderscoreCommands) {
                result = result.filter(command => command[0] !== '_');
            }
            return result;
        });
    }
    $getContributedCommandMetadata() {
        const result = Object.create(null);
        for (const [id, command] of this._commands) {
            const { metadata } = command;
            if (metadata) {
                result[id] = metadata;
            }
        }
        return Promise.resolve(result);
    }
};
ExtHostCommands = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_14__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_7__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_21__.IExtHostTelemetry))
], ExtHostCommands));
const IExtHostCommands = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_13__.createDecorator)('IExtHostCommands'));
class CommandsConverter {
    constructor(_commands, _lookupApiCommand, _logService) {
        this._commands = _commands;
        this._lookupApiCommand = _lookupApiCommand;
        this._logService = _logService;
        this.delegatingCommandId = `__vsc${(0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_22__.generateUuid)()}`;
        this._cache = ( new Map());
        this._cachIdPool = 0;
        this._commands.registerCommand(true, this.delegatingCommandId, this._executeConvertedCommand, this);
    }
    toInternal(command, disposables) {
        if (!command) {
            return undefined;
        }
        const result = {
            $ident: undefined,
            id: command.command,
            title: command.title,
            tooltip: command.tooltip
        };
        if (!command.command) {
            return result;
        }
        const apiCommand = this._lookupApiCommand(command.command);
        if (apiCommand) {
            result.id = apiCommand.internalId;
            result.arguments = ( apiCommand.args.map((arg, i) => arg.convert(command.arguments && command.arguments[i])));
        }
        else if ((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyArray)(command.arguments)) {
            const id = `${command.command} /${++this._cachIdPool}`;
            this._cache.set(id, command);
            disposables.add((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_12__.toDisposable)(() => {
                this._cache.delete(id);
                this._logService.trace('CommandsConverter#DISPOSE', id);
            }));
            result.$ident = id;
            result.id = this.delegatingCommandId;
            result.arguments = [id];
            this._logService.trace('CommandsConverter#CREATE', command.command, id);
        }
        return result;
    }
    fromInternal(command) {
        if (typeof command.$ident === 'string') {
            return this._cache.get(command.$ident);
        }
        else {
            return {
                command: command.id,
                title: command.title,
                arguments: command.arguments
            };
        }
    }
    getActualCommand(...args) {
        return this._cache.get(args[0]);
    }
    _executeConvertedCommand(...args) {
        const actualCmd = this.getActualCommand(...args);
        this._logService.trace('CommandsConverter#EXECUTE', args[0], actualCmd ? actualCmd.command : 'MISSING');
        if (!actualCmd) {
            return Promise.reject(`Actual command not found, wanted to execute ${args[0]}`);
        }
        return this._commands.executeCommand(actualCmd.command, ...(actualCmd.arguments || []));
    }
}
class ApiCommandArgument {
    static { this.Uri = ( new ApiCommandArgument('uri', 'Uri of a text document', v => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.isUri(v), v => v)); }
    static { this.Position = ( new ApiCommandArgument(
        'position',
        'A position in a text document',
        v => _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Position.isPosition(v),
        _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Position.from
    )); }
    static { this.Range = ( new ApiCommandArgument(
        'range',
        'A range in a text document',
        v => _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Range.isRange(v),
        _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from
    )); }
    static { this.Selection = ( new ApiCommandArgument(
        'selection',
        'A selection in a text document',
        v => _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Selection.isSelection(v),
        _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Selection.from
    )); }
    static { this.Number = ( new ApiCommandArgument('number', '', v => typeof v === 'number', v => v)); }
    static { this.String = ( new ApiCommandArgument('string', '', v => typeof v === 'string', v => v)); }
    static { this.StringArray = ApiCommandArgument.Arr(ApiCommandArgument.String); }
    static Arr(element) {
        return ( new ApiCommandArgument(
            `${element.name}_array`,
            `Array of ${element.name}, ${element.description}`,
            (v) => Array.isArray(v) && v.every(e => element.validate(e)),
            (v) => ( v.map(e => element.convert(e)))
        ));
    }
    static { this.CallHierarchyItem = ( new ApiCommandArgument(
        'item',
        'A call hierarchy item',
        v => v instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.CallHierarchyItem,
        _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.CallHierarchyItem.from
    )); }
    static { this.TypeHierarchyItem = ( new ApiCommandArgument(
        'item',
        'A type hierarchy item',
        v => v instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.TypeHierarchyItem,
        _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.TypeHierarchyItem.from
    )); }
    static { this.TestItem = ( new ApiCommandArgument(
        'testItem',
        'A VS Code TestItem',
        v => v instanceof _extHostTestItem_js__WEBPACK_IMPORTED_MODULE_15__.TestItemImpl,
        _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.TestItem.from
    )); }
    constructor(name, description, validate, convert) {
        this.name = name;
        this.description = description;
        this.validate = validate;
        this.convert = convert;
    }
    optional() {
        return ( new ApiCommandArgument(
            this.name,
            `(optional) ${this.description}`,
            value => value === undefined || value === null || this.validate(value),
            value => value === undefined ? undefined : value === null ? null : this.convert(value)
        ));
    }
    with(name, description) {
        return ( new ApiCommandArgument(
            name ?? this.name,
            description ?? this.description,
            this.validate,
            this.convert
        ));
    }
}
class ApiCommandResult {
    static { this.Void = ( new ApiCommandResult('no result', v => v)); }
    constructor(description, convert) {
        this.description = description;
        this.convert = convert;
    }
}
class ApiCommand {
    constructor(id, internalId, description, args, result) {
        this.id = id;
        this.internalId = internalId;
        this.description = description;
        this.args = args;
        this.result = result;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostComments.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostComments.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createExtHostComments: () => (/* binding */ createExtHostComments)
/* harmony export */ });
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../editor/common/languages.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");











function createExtHostComments(mainContext, commands, documents) {
    const proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_9__.MainContext.MainThreadComments));
    class ExtHostCommentsImpl {
        static { this.handlePool = 0; }
        constructor() {
            this._commentControllers = ( new Map());
            this._commentControllersByExtension = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.ExtensionIdentifierMap());
            commands.registerArgumentProcessor({
                processArgument: arg => {
                    if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__.MarshalledId.CommentController) {
                        const commentController = this._commentControllers.get(arg.handle);
                        if (!commentController) {
                            return arg;
                        }
                        return commentController.value;
                    }
                    else if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__.MarshalledId.CommentThread) {
                        const marshalledCommentThread = arg;
                        const commentController = this._commentControllers.get(marshalledCommentThread.commentControlHandle);
                        if (!commentController) {
                            return marshalledCommentThread;
                        }
                        const commentThread = commentController.getCommentThread(marshalledCommentThread.commentThreadHandle);
                        if (!commentThread) {
                            return marshalledCommentThread;
                        }
                        return commentThread.value;
                    }
                    else if (arg && (arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__.MarshalledId.CommentThreadReply || arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__.MarshalledId.CommentThreadInstance)) {
                        const commentController = this._commentControllers.get(arg.thread.commentControlHandle);
                        if (!commentController) {
                            return arg;
                        }
                        const commentThread = commentController.getCommentThread(arg.thread.commentThreadHandle);
                        if (!commentThread) {
                            return arg;
                        }
                        if (arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__.MarshalledId.CommentThreadInstance) {
                            return commentThread.value;
                        }
                        return {
                            thread: commentThread.value,
                            text: arg.text
                        };
                    }
                    else if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__.MarshalledId.CommentNode) {
                        const commentController = this._commentControllers.get(arg.thread.commentControlHandle);
                        if (!commentController) {
                            return arg;
                        }
                        const commentThread = commentController.getCommentThread(arg.thread.commentThreadHandle);
                        if (!commentThread) {
                            return arg;
                        }
                        const commentUniqueId = arg.commentUniqueId;
                        const comment = commentThread.getCommentByUniqueId(commentUniqueId);
                        if (!comment) {
                            return arg;
                        }
                        return comment;
                    }
                    else if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_3__.MarshalledId.CommentThreadNode) {
                        const commentController = this._commentControllers.get(arg.thread.commentControlHandle);
                        if (!commentController) {
                            return arg;
                        }
                        const commentThread = commentController.getCommentThread(arg.thread.commentThreadHandle);
                        if (!commentThread) {
                            return arg;
                        }
                        const body = arg.text;
                        const commentUniqueId = arg.commentUniqueId;
                        const comment = commentThread.getCommentByUniqueId(commentUniqueId);
                        if (!comment) {
                            return arg;
                        }
                        if (typeof comment.body === 'string') {
                            comment.body = body;
                        }
                        else {
                            comment.body = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.MarkdownString(body);
                        }
                        return comment;
                    }
                    return arg;
                }
            });
        }
        createCommentController(extension, id, label) {
            const handle = ExtHostCommentsImpl.handlePool++;
            const commentController = ( new ExtHostCommentController(extension, handle, id, label));
            this._commentControllers.set(commentController.handle, commentController);
            const commentControllers = this._commentControllersByExtension.get(extension.identifier) || [];
            commentControllers.push(commentController);
            this._commentControllersByExtension.set(extension.identifier, commentControllers);
            return commentController.value;
        }
        async $createCommentThreadTemplate(commentControllerHandle, uriComponents, range, editorId) {
            const commentController = this._commentControllers.get(commentControllerHandle);
            if (!commentController) {
                return;
            }
            commentController.$createCommentThreadTemplate(uriComponents, range, editorId);
        }
        async $setActiveComment(controllerHandle, commentInfo) {
            const commentController = this._commentControllers.get(controllerHandle);
            if (!commentController) {
                return;
            }
            commentController.$setActiveComment(commentInfo ?? undefined);
        }
        async $updateCommentThreadTemplate(commentControllerHandle, threadHandle, range) {
            const commentController = this._commentControllers.get(commentControllerHandle);
            if (!commentController) {
                return;
            }
            commentController.$updateCommentThreadTemplate(threadHandle, range);
        }
        $deleteCommentThread(commentControllerHandle, commentThreadHandle) {
            const commentController = this._commentControllers.get(commentControllerHandle);
            commentController?.$deleteCommentThread(commentThreadHandle);
        }
        async $provideCommentingRanges(commentControllerHandle, uriComponents, token) {
            const commentController = this._commentControllers.get(commentControllerHandle);
            if (!commentController || !commentController.commentingRangeProvider) {
                return Promise.resolve(undefined);
            }
            const document = await documents.ensureDocumentData(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(uriComponents));
            return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.asPromise)(async () => {
                const rangesResult = await commentController.commentingRangeProvider.provideCommentingRanges(document.document, token);
                let ranges;
                if (Array.isArray(rangesResult)) {
                    ranges = {
                        ranges: rangesResult,
                        fileComments: false
                    };
                }
                else if (rangesResult) {
                    ranges = {
                        ranges: rangesResult.ranges || [],
                        fileComments: rangesResult.enableFileComments || false
                    };
                }
                else {
                    ranges = rangesResult ?? undefined;
                }
                return ranges;
            }).then(ranges => {
                let convertedResult = undefined;
                if (ranges) {
                    convertedResult = {
                        ranges: ( ranges.ranges.map(x => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.from(x))),
                        fileComments: ranges.fileComments
                    };
                }
                return convertedResult;
            });
        }
        $toggleReaction(commentControllerHandle, threadHandle, uri, comment, reaction) {
            const commentController = this._commentControllers.get(commentControllerHandle);
            if (!commentController || !commentController.reactionHandler) {
                return Promise.resolve(undefined);
            }
            return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.asPromise)(() => {
                const commentThread = commentController.getCommentThread(threadHandle);
                if (commentThread) {
                    const vscodeComment = commentThread.getCommentByUniqueId(comment.uniqueIdInThread);
                    if (commentController !== undefined && vscodeComment) {
                        if (commentController.reactionHandler) {
                            return commentController.reactionHandler(vscodeComment, convertFromReaction(reaction));
                        }
                    }
                }
                return Promise.resolve(undefined);
            });
        }
    }
    class ExtHostCommentThread {
        static { this._handlePool = 0; }
        set threadId(id) {
            this._id = id;
        }
        get threadId() {
            return this._id;
        }
        get id() {
            return this._id;
        }
        get resource() {
            return this._uri;
        }
        get uri() {
            return this._uri;
        }
        set range(range) {
            if (((range === undefined) !== (this._range === undefined)) || (!range || !this._range || !range.isEqual(this._range))) {
                this._range = range;
                this.modifications.range = range;
                this._onDidUpdateCommentThread.fire();
            }
        }
        get range() {
            return this._range;
        }
        set canReply(state) {
            if (this._canReply !== state) {
                this._canReply = state;
                this.modifications.canReply = state;
                this._onDidUpdateCommentThread.fire();
            }
        }
        get canReply() {
            return this._canReply;
        }
        get label() {
            return this._label;
        }
        set label(label) {
            this._label = label;
            this.modifications.label = label;
            this._onDidUpdateCommentThread.fire();
        }
        get contextValue() {
            return this._contextValue;
        }
        set contextValue(context) {
            this._contextValue = context;
            this.modifications.contextValue = context;
            this._onDidUpdateCommentThread.fire();
        }
        get comments() {
            return this._comments;
        }
        set comments(newComments) {
            this._comments = newComments;
            this.modifications.comments = newComments;
            this._onDidUpdateCommentThread.fire();
        }
        get collapsibleState() {
            return this._collapseState;
        }
        set collapsibleState(newState) {
            this._collapseState = newState;
            this.modifications.collapsibleState = newState;
            this._onDidUpdateCommentThread.fire();
        }
        get state() {
            return this._state;
        }
        set state(newState) {
            this._state = newState;
            if (typeof newState === 'object') {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(this.extensionDescription, 'commentThreadApplicability');
                this.modifications.state = newState.resolved;
                this.modifications.applicability = newState.applicability;
            }
            else {
                this.modifications.state = newState;
            }
            this._onDidUpdateCommentThread.fire();
        }
        get isDisposed() {
            return this._isDiposed;
        }
        constructor(commentControllerId, _commentControllerHandle, _id, _uri, _range, _comments, extensionDescription, _isTemplate, editorId) {
            this._commentControllerHandle = _commentControllerHandle;
            this._id = _id;
            this._uri = _uri;
            this._range = _range;
            this._comments = _comments;
            this.extensionDescription = extensionDescription;
            this._isTemplate = _isTemplate;
            this.handle = ExtHostCommentThread._handlePool++;
            this.commentHandle = 0;
            this.modifications = Object.create(null);
            this._onDidUpdateCommentThread = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this.onDidUpdateCommentThread = this._onDidUpdateCommentThread.event;
            this._canReply = true;
            this._commentsMap = ( new Map());
            this._acceptInputDisposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.MutableDisposable());
            this._acceptInputDisposables.value = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore());
            if (this._id === undefined) {
                this._id = `${commentControllerId}.${this.handle}`;
            }
            proxy.$createCommentThread(_commentControllerHandle, this.handle, this._id, this._uri, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.from(this._range), ( this._comments.map(
                cmt => convertToDTOComment(this, cmt, this._commentsMap, this.extensionDescription)
            )), extensionDescription.identifier, this._isTemplate, editorId);
            this._localDisposables = [];
            this._isDiposed = false;
            this._localDisposables.push(this.onDidUpdateCommentThread(() => {
                this.eventuallyUpdateCommentThread();
            }));
            this._localDisposables.push({
                dispose: () => {
                    proxy.$deleteCommentThread(_commentControllerHandle, this.handle);
                }
            });
            const that = this;
            this.value = {
                get uri() { return that.uri; },
                get range() { return that.range; },
                set range(value) { that.range = value; },
                get comments() { return that.comments; },
                set comments(value) { that.comments = value; },
                get collapsibleState() { return that.collapsibleState; },
                set collapsibleState(value) { that.collapsibleState = value; },
                get canReply() { return that.canReply; },
                set canReply(state) { that.canReply = state; },
                get contextValue() { return that.contextValue; },
                set contextValue(value) { that.contextValue = value; },
                get label() { return that.label; },
                set label(value) { that.label = value; },
                get state() { return that.state; },
                set state(value) { that.state = value; },
                reveal: (options) => that.reveal(options),
                dispose: () => {
                    that.dispose();
                }
            };
        }
        updateIsTemplate() {
            if (this._isTemplate) {
                this._isTemplate = false;
                this.modifications.isTemplate = false;
            }
        }
        eventuallyUpdateCommentThread() {
            if (this._isDiposed) {
                return;
            }
            this.updateIsTemplate();
            if (!this._acceptInputDisposables.value) {
                this._acceptInputDisposables.value = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore());
            }
            const modified = (value) => Object.prototype.hasOwnProperty.call(this.modifications, value);
            const formattedModifications = {};
            if (modified('range')) {
                formattedModifications.range = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.from(this._range);
            }
            if (modified('label')) {
                formattedModifications.label = this.label;
            }
            if (modified('contextValue')) {
                formattedModifications.contextValue = this.contextValue ?? null;
            }
            if (modified('comments')) {
                formattedModifications.comments =
                    ( this._comments.map(
                        cmt => convertToDTOComment(this, cmt, this._commentsMap, this.extensionDescription)
                    ));
            }
            if (modified('collapsibleState')) {
                formattedModifications.collapseState = convertToCollapsibleState(this._collapseState);
            }
            if (modified('canReply')) {
                formattedModifications.canReply = this.canReply;
            }
            if (modified('state')) {
                formattedModifications.state = convertToState(this._state);
            }
            if (modified('applicability')) {
                formattedModifications.applicability = convertToRelevance(this._state);
            }
            if (modified('isTemplate')) {
                formattedModifications.isTemplate = this._isTemplate;
            }
            this.modifications = {};
            proxy.$updateCommentThread(this._commentControllerHandle, this.handle, this._id, this._uri, formattedModifications);
        }
        getCommentByUniqueId(uniqueId) {
            for (const key of this._commentsMap) {
                const comment = key[0];
                const id = key[1];
                if (uniqueId === id) {
                    return comment;
                }
            }
            return;
        }
        async reveal(options) {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(this.extensionDescription, 'commentReveal');
            return proxy.$revealCommentThread(this._commentControllerHandle, this.handle, { preserveFocus: false, focusReply: false, ...options });
        }
        dispose() {
            this._isDiposed = true;
            this._acceptInputDisposables.dispose();
            this._localDisposables.forEach(disposable => disposable.dispose());
        }
    }
    class ExtHostCommentController {
        get id() {
            return this._id;
        }
        get label() {
            return this._label;
        }
        get handle() {
            return this._handle;
        }
        get commentingRangeProvider() {
            return this._commentingRangeProvider;
        }
        set commentingRangeProvider(provider) {
            this._commentingRangeProvider = provider;
            if (provider?.resourceHints) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(this._extension, 'commentingRangeHint');
            }
            proxy.$updateCommentingRanges(this.handle, provider?.resourceHints);
        }
        get reactionHandler() {
            return this._reactionHandler;
        }
        set reactionHandler(handler) {
            this._reactionHandler = handler;
            proxy.$updateCommentControllerFeatures(this.handle, { reactionHandler: !!handler });
        }
        get options() {
            return this._options;
        }
        set options(options) {
            this._options = options;
            proxy.$updateCommentControllerFeatures(this.handle, { options: this._options });
        }
        get activeComment() {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(this._extension, 'activeComment');
            return this._activeComment;
        }
        get activeCommentThread() {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(this._extension, 'activeComment');
            return this._activeThread;
        }
        constructor(_extension, _handle, _id, _label) {
            this._extension = _extension;
            this._handle = _handle;
            this._id = _id;
            this._label = _label;
            this._threads = ( new Map());
            proxy.$registerCommentController(this.handle, _id, _label, this._extension.identifier.value);
            const that = this;
            this.value = ( Object.freeze({
                id: that.id,
                label: that.label,
                get options() { return that.options; },
                set options(options) { that.options = options; },
                get commentingRangeProvider() { return that.commentingRangeProvider; },
                set commentingRangeProvider(commentingRangeProvider) { that.commentingRangeProvider = commentingRangeProvider; },
                get reactionHandler() { return that.reactionHandler; },
                set reactionHandler(handler) { that.reactionHandler = handler; },
                get activeCommentThread() { return that.activeCommentThread; },
                createCommentThread(uri, range, comments) {
                    return that.createCommentThread(uri, range, comments).value;
                },
                dispose: () => { that.dispose(); },
            }));
            this._localDisposables = [];
            this._localDisposables.push({
                dispose: () => {
                    proxy.$unregisterCommentController(this.handle);
                }
            });
        }
        createCommentThread(resource, range, comments) {
            if (range === undefined) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(this._extension, 'fileComments');
            }
            const commentThread = ( new ExtHostCommentThread(
                this.id,
                this.handle,
                undefined,
                resource,
                range,
                comments,
                this._extension,
                false
            ));
            this._threads.set(commentThread.handle, commentThread);
            return commentThread;
        }
        $setActiveComment(commentInfo) {
            if (!commentInfo) {
                this._activeComment = undefined;
                this._activeThread = undefined;
                return;
            }
            const thread = this._threads.get(commentInfo.commentThreadHandle);
            if (thread) {
                this._activeComment = commentInfo.uniqueIdInThread ? thread.getCommentByUniqueId(commentInfo.uniqueIdInThread) : undefined;
                this._activeThread = thread;
            }
        }
        $createCommentThreadTemplate(uriComponents, range, editorId) {
            const commentThread = ( new ExtHostCommentThread(
                this.id,
                this.handle,
                undefined,
                _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(uriComponents),
                _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(range),
                [],
                this._extension,
                true,
                editorId
            ));
            commentThread.collapsibleState = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadCollapsibleState.Expanded;
            this._threads.set(commentThread.handle, commentThread);
            return commentThread;
        }
        $updateCommentThreadTemplate(threadHandle, range) {
            const thread = this._threads.get(threadHandle);
            if (thread) {
                thread.range = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.Range.to(range);
            }
        }
        $deleteCommentThread(threadHandle) {
            const thread = this._threads.get(threadHandle);
            thread?.dispose();
            this._threads.delete(threadHandle);
        }
        getCommentThread(handle) {
            return this._threads.get(handle);
        }
        dispose() {
            this._threads.forEach(value => {
                value.dispose();
            });
            this._localDisposables.forEach(disposable => disposable.dispose());
        }
    }
    function convertToDTOComment(thread, vscodeComment, commentsMap, extension) {
        let commentUniqueId = commentsMap.get(vscodeComment);
        if (!commentUniqueId) {
            commentUniqueId = ++thread.commentHandle;
            commentsMap.set(vscodeComment, commentUniqueId);
        }
        if (vscodeComment.state !== undefined) {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(extension, 'commentsDraftState');
        }
        if (vscodeComment.reactions?.some(reaction => reaction.reactors !== undefined)) {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(extension, 'commentReactor');
        }
        return {
            mode: vscodeComment.mode,
            contextValue: vscodeComment.contextValue,
            uniqueIdInThread: commentUniqueId,
            body: (typeof vscodeComment.body === 'string') ? vscodeComment.body : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.MarkdownString.from(vscodeComment.body),
            userName: vscodeComment.author.name,
            userIconPath: vscodeComment.author.iconPath,
            label: vscodeComment.label,
            commentReactions: vscodeComment.reactions ? ( vscodeComment.reactions.map(reaction => convertToReaction(reaction))) : undefined,
            state: vscodeComment.state,
            timestamp: vscodeComment.timestamp?.toJSON()
        };
    }
    function convertToReaction(reaction) {
        return {
            label: reaction.label,
            iconPath: reaction.iconPath ? (0,_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_7__.pathOrURIToURI)(reaction.iconPath) : undefined,
            count: reaction.count,
            hasReacted: reaction.authorHasReacted,
            reactors: ((reaction.reactors && (reaction.reactors.length > 0) && (typeof reaction.reactors[0] !== 'string')) ? ( reaction.reactors.map(reactor => reactor.name)) : reaction.reactors)
        };
    }
    function convertFromReaction(reaction) {
        return {
            label: reaction.label || '',
            count: reaction.count || 0,
            iconPath: reaction.iconPath ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(reaction.iconPath) : '',
            authorHasReacted: reaction.hasReacted || false,
            reactors: reaction.reactors?.map(reactor => ({ name: reactor }))
        };
    }
    function convertToCollapsibleState(kind) {
        if (kind !== undefined) {
            switch (kind) {
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CommentThreadCollapsibleState.Expanded:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadCollapsibleState.Expanded;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CommentThreadCollapsibleState.Collapsed:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadCollapsibleState.Collapsed;
            }
        }
        return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadCollapsibleState.Collapsed;
    }
    function convertToState(kind) {
        let resolvedKind;
        if (typeof kind === 'object') {
            resolvedKind = kind.resolved;
        }
        else {
            resolvedKind = kind;
        }
        if (resolvedKind !== undefined) {
            switch (resolvedKind) {
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CommentThreadState.Unresolved:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadState.Unresolved;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CommentThreadState.Resolved:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadState.Resolved;
            }
        }
        return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadState.Unresolved;
    }
    function convertToRelevance(kind) {
        let applicabilityKind = undefined;
        if (typeof kind === 'object') {
            applicabilityKind = kind.applicability;
        }
        if (applicabilityKind !== undefined) {
            switch (applicabilityKind) {
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CommentThreadApplicability.Current:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadApplicability.Current;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.CommentThreadApplicability.Outdated:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadApplicability.Outdated;
            }
        }
        return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_5__.CommentThreadApplicability.Current;
    }
    return ( new ExtHostCommentsImpl());
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostConfigProvider: () => (/* binding */ ExtHostConfigProvider),
/* harmony export */   ExtHostConfiguration: () => (/* binding */ ExtHostConfiguration),
/* harmony export */   IExtHostConfiguration: () => (/* binding */ IExtHostConfiguration)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostWorkspace.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/configuration/common/configuration.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.js");
/* harmony import */ var _platform_configuration_common_configurationModels_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../platform/configuration/common/configurationModels.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationModels.js");
/* harmony import */ var _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../platform/configuration/common/configurationRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");















function lookUp(tree, key) {
    if (key) {
        const parts = key.split('.');
        let node = tree;
        for (let i = 0; node && i < parts.length; i++) {
            node = node[parts[i]];
        }
        return node;
    }
}
function isUri(thing) {
    return thing instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI;
}
function isResourceLanguage(thing) {
    return thing
        && thing.uri instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI
        && (thing.languageId && typeof thing.languageId === 'string');
}
function isLanguage(thing) {
    return thing
        && !thing.uri
        && (thing.languageId && typeof thing.languageId === 'string');
}
function isWorkspaceFolder(thing) {
    return thing
        && thing.uri instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI
        && (!thing.name || typeof thing.name === 'string')
        && (!thing.index || typeof thing.index === 'number');
}
function scopeToOverrides(scope) {
    if (isUri(scope)) {
        return { resource: scope };
    }
    if (isResourceLanguage(scope)) {
        return { resource: scope.uri, overrideIdentifier: scope.languageId };
    }
    if (isLanguage(scope)) {
        return { overrideIdentifier: scope.languageId };
    }
    if (isWorkspaceFolder(scope)) {
        return { resource: scope.uri };
    }
    if (scope === null) {
        return { resource: null };
    }
    return undefined;
}
let ExtHostConfiguration = class ExtHostConfiguration {
    constructor(extHostRpc, extHostWorkspace, logService) {
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__.MainContext.MainThreadConfiguration));
        this._extHostWorkspace = extHostWorkspace;
        this._logService = logService;
        this._barrier = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_10__.Barrier());
        this._actual = null;
    }
    getConfigProvider() {
        return this._barrier.wait().then(_ => this._actual);
    }
    $initializeConfiguration(data) {
        this._actual = ( new ExtHostConfigProvider(this._proxy, this._extHostWorkspace, data, this._logService));
        this._barrier.open();
    }
    $acceptConfigurationChanged(data, change) {
        this.getConfigProvider().then(provider => provider.$acceptConfigurationChanged(data, change));
    }
};
ExtHostConfiguration = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_3__.IExtHostWorkspace)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_13__.ILogService))
], ExtHostConfiguration));
class ExtHostConfigProvider {
    constructor(proxy, extHostWorkspace, data, logService) {
        this._onDidChangeConfiguration = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._proxy = proxy;
        this._logService = logService;
        this._extHostWorkspace = extHostWorkspace;
        this._configuration = _platform_configuration_common_configurationModels_js__WEBPACK_IMPORTED_MODULE_7__.Configuration.parse(data, logService);
        this._configurationScopes = this._toMap(data.configurationScopes);
    }
    get onDidChangeConfiguration() {
        return this._onDidChangeConfiguration && this._onDidChangeConfiguration.event;
    }
    $acceptConfigurationChanged(data, change) {
        const previous = { data: this._configuration.toData(), workspace: this._extHostWorkspace.workspace };
        this._configuration = _platform_configuration_common_configurationModels_js__WEBPACK_IMPORTED_MODULE_7__.Configuration.parse(data, this._logService);
        this._configurationScopes = this._toMap(data.configurationScopes);
        this._onDidChangeConfiguration.fire(this._toConfigurationChangeEvent(change, previous));
    }
    getConfiguration(section, scope, extensionDescription) {
        const overrides = scopeToOverrides(scope) || {};
        const config = this._toReadonlyValue(section
            ? lookUp(this._configuration.getValue(undefined, overrides, this._extHostWorkspace.workspace), section)
            : this._configuration.getValue(undefined, overrides, this._extHostWorkspace.workspace));
        if (section) {
            this._validateConfigurationAccess(section, overrides, extensionDescription?.identifier);
        }
        function parseConfigurationTarget(arg) {
            if (arg === undefined || arg === null) {
                return null;
            }
            if (typeof arg === 'boolean') {
                return arg ? _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER : _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE;
            }
            switch (arg) {
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ConfigurationTarget.Global: return _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ConfigurationTarget.Workspace: return _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ConfigurationTarget.WorkspaceFolder: return _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE_FOLDER;
            }
        }
        const result = {
            has(key) {
                return typeof lookUp(config, key) !== 'undefined';
            },
            get: (key, defaultValue) => {
                this._validateConfigurationAccess(section ? `${section}.${key}` : key, overrides, extensionDescription?.identifier);
                let result = lookUp(config, key);
                if (typeof result === 'undefined') {
                    result = defaultValue;
                }
                else {
                    let clonedConfig = undefined;
                    const cloneOnWriteProxy = (target, accessor) => {
                        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isObject)(target)) {
                            let clonedTarget = undefined;
                            const cloneTarget = () => {
                                clonedConfig = clonedConfig ? clonedConfig : (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config);
                                clonedTarget = clonedTarget ? clonedTarget : lookUp(clonedConfig, accessor);
                            };
                            return ( new Proxy(target, {
                                get: (target, property) => {
                                    if (typeof property === 'string' && property.toLowerCase() === 'tojson') {
                                        cloneTarget();
                                        return () => clonedTarget;
                                    }
                                    if (clonedConfig) {
                                        clonedTarget = clonedTarget ? clonedTarget : lookUp(clonedConfig, accessor);
                                        return clonedTarget[property];
                                    }
                                    const result = target[property];
                                    if (typeof property === 'string') {
                                        return cloneOnWriteProxy(result, `${accessor}.${property}`);
                                    }
                                    return result;
                                },
                                set: (_target, property, value) => {
                                    cloneTarget();
                                    if (clonedTarget) {
                                        clonedTarget[property] = value;
                                    }
                                    return true;
                                },
                                deleteProperty: (_target, property) => {
                                    cloneTarget();
                                    if (clonedTarget) {
                                        delete clonedTarget[property];
                                    }
                                    return true;
                                },
                                defineProperty: (_target, property, descriptor) => {
                                    cloneTarget();
                                    if (clonedTarget) {
                                        Object.defineProperty(clonedTarget, property, descriptor);
                                    }
                                    return true;
                                }
                            }));
                        }
                        if (Array.isArray(target)) {
                            return (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(target);
                        }
                        return target;
                    };
                    result = cloneOnWriteProxy(result, key);
                }
                return result;
            },
            update: (key, value, extHostConfigurationTarget, scopeToLanguage) => {
                key = section ? `${section}.${key}` : key;
                const target = parseConfigurationTarget(extHostConfigurationTarget);
                if (value !== undefined) {
                    return this._proxy.$updateConfigurationOption(target, key, value, overrides, scopeToLanguage);
                }
                else {
                    return this._proxy.$removeConfigurationOption(target, key, overrides, scopeToLanguage);
                }
            },
            inspect: (key) => {
                key = section ? `${section}.${key}` : key;
                const config = this._configuration.inspect(key, overrides, this._extHostWorkspace.workspace);
                if (config) {
                    return {
                        key,
                        defaultValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.policy?.value ?? config.default?.value),
                        globalValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.user?.value ?? config.application?.value),
                        workspaceValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.workspace?.value),
                        workspaceFolderValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.workspaceFolder?.value),
                        defaultLanguageValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.default?.override),
                        globalLanguageValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.user?.override ?? config.application?.override),
                        workspaceLanguageValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.workspace?.override),
                        workspaceFolderLanguageValue: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.workspaceFolder?.override),
                        languageIds: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.deepClone)(config.overrideIdentifiers)
                    };
                }
                return undefined;
            }
        };
        if (typeof config === 'object') {
            (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.mixin)(result, config, false);
        }
        return ( Object.freeze(result));
    }
    _toReadonlyValue(result) {
        const readonlyProxy = (target) => {
            return (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isObject)(target) ?
                ( new Proxy(target, {
                    get: (target, property) => readonlyProxy(target[property]),
                    set: (_target, property, _value) => { throw ( new Error(
                        `TypeError: Cannot assign to read only property '${String(property)}' of object`
                    )); },
                    deleteProperty: (_target, property) => { throw ( new Error(
                        `TypeError: Cannot delete read only property '${String(property)}' of object`
                    )); },
                    defineProperty: (_target, property) => { throw ( new Error(
                        `TypeError: Cannot define property '${String(property)}' for a readonly object`
                    )); },
                    setPrototypeOf: (_target) => { throw ( new Error(`TypeError: Cannot set prototype for a readonly object`)); },
                    isExtensible: () => false,
                    preventExtensions: () => true
                })) : target;
        };
        return readonlyProxy(result);
    }
    _validateConfigurationAccess(key, overrides, extensionId) {
        const scope = _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_8__.OVERRIDE_PROPERTY_REGEX.test(key) ? _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_8__.ConfigurationScope.RESOURCE : this._configurationScopes.get(key);
        const extensionIdText = extensionId ? `[${extensionId.value}] ` : '';
        if (_platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_8__.ConfigurationScope.RESOURCE === scope) {
            if (typeof overrides?.resource === 'undefined') {
                this._logService.warn(`${extensionIdText}Accessing a resource scoped configuration without providing a resource is not expected. To get the effective value for '${key}', provide the URI of a resource or 'null' for any resource.`);
            }
            return;
        }
        if (_platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_8__.ConfigurationScope.WINDOW === scope) {
            if (overrides?.resource) {
                this._logService.warn(`${extensionIdText}Accessing a window scoped configuration for a resource is not expected. To associate '${key}' to a resource, define its scope to 'resource' in configuration contributions in 'package.json'.`);
            }
            return;
        }
    }
    _toConfigurationChangeEvent(change, previous) {
        const event = ( new _platform_configuration_common_configurationModels_js__WEBPACK_IMPORTED_MODULE_7__.ConfigurationChangeEvent(
            change,
            previous,
            this._configuration,
            this._extHostWorkspace.workspace,
            this._logService
        ));
        return ( Object.freeze({
            affectsConfiguration: (section, scope) => event.affectsConfiguration(section, scopeToOverrides(scope))
        }));
    }
    _toMap(scopes) {
        return scopes.reduce((result, scope) => { result.set(scope[0], scope[1]); return result; }, ( new Map()));
    }
}
const IExtHostConfiguration = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_11__.createDecorator)('IExtHostConfiguration'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConsoleForwarder.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConsoleForwarder.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractExtHostConsoleForwarder: () => (/* binding */ AbstractExtHostConsoleForwarder)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");





let AbstractExtHostConsoleForwarder = class AbstractExtHostConsoleForwarder {
    constructor(extHostRpc, initData) {
        this._mainThreadConsole = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadConsole));
        this._includeStack = initData.consoleForward.includeStack;
        this._logNative = initData.consoleForward.logNative;
        this._wrapConsoleMethod('info', 'log');
        this._wrapConsoleMethod('log', 'log');
        this._wrapConsoleMethod('warn', 'warn');
        this._wrapConsoleMethod('debug', 'debug');
        this._wrapConsoleMethod('error', 'error');
    }
    _wrapConsoleMethod(method, severity) {
        const that = this;
        const original = console[method];
        Object.defineProperty(console, method, {
            set: () => { },
            get: () => (function() {
                that._handleConsoleCall(method, severity, original, arguments);
            }),
        });
    }
    _handleConsoleCall(method, severity, original, args) {
        this._mainThreadConsole.$logExtensionHostMessage({
            type: '__$console',
            severity,
            arguments: safeStringifyArgumentsToArray(args, this._includeStack)
        });
        if (this._logNative) {
            this._nativeConsoleLogMessage(method, original, args);
        }
    }
};
AbstractExtHostConsoleForwarder = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_3__.IExtHostInitDataService))
], AbstractExtHostConsoleForwarder));
const MAX_LENGTH = 100000;
function safeStringifyArgumentsToArray(args, includeStack) {
    const argsArray = [];
    if (args.length) {
        for (let i = 0; i < args.length; i++) {
            let arg = args[i];
            if (typeof arg === 'undefined') {
                arg = 'undefined';
            }
            else if (arg instanceof Error) {
                const errorObj = arg;
                if (errorObj.stack) {
                    arg = errorObj.stack;
                }
                else {
                    arg = ( errorObj.toString());
                }
            }
            argsArray.push(arg);
        }
    }
    if (includeStack) {
        const stack = ( new Error()).stack;
        if (stack) {
            argsArray.push({ __$stack: stack.split('\n').slice(3).join('\n') });
        }
    }
    try {
        const res = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.safeStringify)(argsArray);
        if (res.length > MAX_LENGTH) {
            return 'Output omitted for a large object that exceeds the limits';
        }
        return res;
    }
    catch (error) {
        return `Output omitted for an object that cannot be inspected ('${( error.toString())}')`;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCustomEditors.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCustomEditors.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostCustomEditors: () => (/* binding */ ExtHostCustomEditors)
/* harmony export */ });
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/hash.js */ "./node_modules/vscode/vscode/src/vs/base/common/hash.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostWebview_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostWebview.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebview.js");
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cache.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/cache.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");











class CustomDocumentStoreEntry {
    constructor(document, _storagePath) {
        this.document = document;
        this._storagePath = _storagePath;
        this._backupCounter = 1;
        this._edits = ( new _cache_js__WEBPACK_IMPORTED_MODULE_8__.Cache('custom documents'));
    }
    addEdit(item) {
        return this._edits.add([item]);
    }
    async undo(editId, isDirty) {
        await this.getEdit(editId).undo();
        if (!isDirty) {
            this.disposeBackup();
        }
    }
    async redo(editId, isDirty) {
        await this.getEdit(editId).redo();
        if (!isDirty) {
            this.disposeBackup();
        }
    }
    disposeEdits(editIds) {
        for (const id of editIds) {
            this._edits.delete(id);
        }
    }
    getNewBackupUri() {
        if (!this._storagePath) {
            throw ( new Error('Backup requires a valid storage path'));
        }
        const fileName = hashPath(this.document.uri) + (this._backupCounter++);
        return (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(this._storagePath, fileName);
    }
    updateBackup(backup) {
        this._backup?.delete();
        this._backup = backup;
    }
    disposeBackup() {
        this._backup?.delete();
        this._backup = undefined;
    }
    getEdit(editId) {
        const edit = this._edits.get(editId, 0);
        if (!edit) {
            throw ( new Error('No edit found'));
        }
        return edit;
    }
}
class CustomDocumentStore {
    constructor() {
        this._documents = ( new Map());
    }
    get(viewType, resource) {
        return this._documents.get(this.key(viewType, resource));
    }
    add(viewType, document, storagePath) {
        const key = this.key(viewType, document.uri);
        if (( this._documents.has(key))) {
            throw ( new Error(
                `Document already exists for viewType:${viewType} resource:${document.uri}`
            ));
        }
        const entry = ( new CustomDocumentStoreEntry(document, storagePath));
        this._documents.set(key, entry);
        return entry;
    }
    delete(viewType, document) {
        const key = this.key(viewType, document.uri);
        this._documents.delete(key);
    }
    key(viewType, resource) {
        return `${viewType}@@@${resource}`;
    }
}
var CustomEditorType;
( (function(CustomEditorType) {
    CustomEditorType[CustomEditorType["Text"] = 0] = "Text";
    CustomEditorType[CustomEditorType["Custom"] = 1] = "Custom";
})(CustomEditorType || (CustomEditorType = {})));
class EditorProviderStore {
    constructor() {
        this._providers = ( new Map());
    }
    addTextProvider(viewType, extension, provider) {
        return this.add(viewType, { type: CustomEditorType.Text, extension, provider });
    }
    addCustomProvider(viewType, extension, provider) {
        return this.add(viewType, { type: CustomEditorType.Custom, extension, provider });
    }
    get(viewType) {
        return this._providers.get(viewType);
    }
    add(viewType, entry) {
        if (( this._providers.has(viewType))) {
            throw ( new Error(`Provider for viewType:${viewType} already registered`));
        }
        this._providers.set(viewType, entry);
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_10__.Disposable(() => this._providers.delete(viewType));
    }
}
class ExtHostCustomEditors {
    constructor(mainContext, _extHostDocuments, _extensionStoragePaths, _extHostWebview, _extHostWebviewPanels) {
        this._extHostDocuments = _extHostDocuments;
        this._extensionStoragePaths = _extensionStoragePaths;
        this._extHostWebview = _extHostWebview;
        this._extHostWebviewPanels = _extHostWebviewPanels;
        this._editorProviders = ( new EditorProviderStore());
        this._documents = ( new CustomDocumentStore());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_9__.MainContext.MainThreadCustomEditors));
    }
    registerCustomEditorProvider(extension, viewType, provider, options) {
        const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore());
        if (isCustomTextEditorProvider(provider)) {
            disposables.add(this._editorProviders.addTextProvider(viewType, extension, provider));
            this._proxy.$registerTextEditorProvider((0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_7__.toExtensionData)(extension), viewType, options.webviewOptions || {}, {
                supportsMove: !!provider.moveCustomTextEditor,
            }, (0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_7__.shouldSerializeBuffersForPostMessage)(extension));
        }
        else {
            disposables.add(this._editorProviders.addCustomProvider(viewType, extension, provider));
            if (isCustomEditorProviderWithEditingCapability(provider)) {
                disposables.add(provider.onDidChangeCustomDocument(e => {
                    const entry = this.getCustomDocumentEntry(viewType, e.document.uri);
                    if (isEditEvent(e)) {
                        const editId = entry.addEdit(e);
                        this._proxy.$onDidEdit(e.document.uri, viewType, editId, e.label);
                    }
                    else {
                        this._proxy.$onContentChange(e.document.uri, viewType);
                    }
                }));
            }
            this._proxy.$registerCustomEditorProvider((0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_7__.toExtensionData)(extension), viewType, options.webviewOptions || {}, !!options.supportsMultipleEditorsPerDocument, (0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_7__.shouldSerializeBuffersForPostMessage)(extension));
        }
        return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_10__.Disposable.from(disposables, new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_10__.Disposable(() => {
            this._proxy.$unregisterEditorProvider(viewType);
        }));
    }
    async $createCustomDocument(resource, viewType, backupId, untitledDocumentData, cancellation) {
        const entry = this._editorProviders.get(viewType);
        if (!entry) {
            throw ( new Error(`No provider found for '${viewType}'`));
        }
        if (entry.type !== CustomEditorType.Custom) {
            throw ( new Error(`Invalid provide type for '${viewType}'`));
        }
        const revivedResource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(resource);
        const document = await entry.provider.openCustomDocument(revivedResource, { backupId, untitledDocumentData: untitledDocumentData?.buffer }, cancellation);
        let storageRoot;
        if (isCustomEditorProviderWithEditingCapability(entry.provider) && this._extensionStoragePaths) {
            storageRoot = this._extensionStoragePaths.workspaceValue(entry.extension) ?? this._extensionStoragePaths.globalValue(entry.extension);
        }
        this._documents.add(viewType, document, storageRoot);
        return { editable: isCustomEditorProviderWithEditingCapability(entry.provider) };
    }
    async $disposeCustomDocument(resource, viewType) {
        const entry = this._editorProviders.get(viewType);
        if (!entry) {
            throw ( new Error(`No provider found for '${viewType}'`));
        }
        if (entry.type !== CustomEditorType.Custom) {
            throw ( new Error(`Invalid provider type for '${viewType}'`));
        }
        const revivedResource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(resource);
        const { document } = this.getCustomDocumentEntry(viewType, revivedResource);
        this._documents.delete(viewType, document);
        document.dispose();
    }
    async $resolveCustomEditor(resource, handle, viewType, initData, position, cancellation) {
        const entry = this._editorProviders.get(viewType);
        if (!entry) {
            throw ( new Error(`No provider found for '${viewType}'`));
        }
        const viewColumn = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_6__.ViewColumn.to(position);
        const webview = this._extHostWebview.createNewWebview(handle, initData.contentOptions, entry.extension);
        const panel = this._extHostWebviewPanels.createNewWebviewPanel(handle, viewType, initData.title, viewColumn, initData.options, webview, initData.active);
        const revivedResource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(resource);
        switch (entry.type) {
            case CustomEditorType.Custom: {
                const { document } = this.getCustomDocumentEntry(viewType, revivedResource);
                return entry.provider.resolveCustomEditor(document, panel, cancellation);
            }
            case CustomEditorType.Text: {
                const document = this._extHostDocuments.getDocument(revivedResource);
                return entry.provider.resolveCustomTextEditor(document, panel, cancellation);
            }
            default: {
                throw ( new Error('Unknown webview provider type'));
            }
        }
    }
    $disposeEdits(resourceComponents, viewType, editIds) {
        const document = this.getCustomDocumentEntry(viewType, resourceComponents);
        document.disposeEdits(editIds);
    }
    async $onMoveCustomEditor(handle, newResourceComponents, viewType) {
        const entry = this._editorProviders.get(viewType);
        if (!entry) {
            throw ( new Error(`No provider found for '${viewType}'`));
        }
        if (!entry.provider.moveCustomTextEditor) {
            throw ( new Error(`Provider does not implement move '${viewType}'`));
        }
        const webview = this._extHostWebviewPanels.getWebviewPanel(handle);
        if (!webview) {
            throw ( new Error(`No webview found`));
        }
        const resource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(newResourceComponents);
        const document = this._extHostDocuments.getDocument(resource);
        await entry.provider.moveCustomTextEditor(document, webview, _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None);
    }
    async $undo(resourceComponents, viewType, editId, isDirty) {
        const entry = this.getCustomDocumentEntry(viewType, resourceComponents);
        return entry.undo(editId, isDirty);
    }
    async $redo(resourceComponents, viewType, editId, isDirty) {
        const entry = this.getCustomDocumentEntry(viewType, resourceComponents);
        return entry.redo(editId, isDirty);
    }
    async $revert(resourceComponents, viewType, cancellation) {
        const entry = this.getCustomDocumentEntry(viewType, resourceComponents);
        const provider = this.getCustomEditorProvider(viewType);
        await provider.revertCustomDocument(entry.document, cancellation);
        entry.disposeBackup();
    }
    async $onSave(resourceComponents, viewType, cancellation) {
        const entry = this.getCustomDocumentEntry(viewType, resourceComponents);
        const provider = this.getCustomEditorProvider(viewType);
        await provider.saveCustomDocument(entry.document, cancellation);
        entry.disposeBackup();
    }
    async $onSaveAs(resourceComponents, viewType, targetResource, cancellation) {
        const entry = this.getCustomDocumentEntry(viewType, resourceComponents);
        const provider = this.getCustomEditorProvider(viewType);
        return provider.saveCustomDocumentAs(entry.document, _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(targetResource), cancellation);
    }
    async $backup(resourceComponents, viewType, cancellation) {
        const entry = this.getCustomDocumentEntry(viewType, resourceComponents);
        const provider = this.getCustomEditorProvider(viewType);
        const backup = await provider.backupCustomDocument(entry.document, {
            destination: entry.getNewBackupUri(),
        }, cancellation);
        entry.updateBackup(backup);
        return backup.id;
    }
    getCustomDocumentEntry(viewType, resource) {
        const entry = this._documents.get(viewType, _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(resource));
        if (!entry) {
            throw ( new Error('No custom document found'));
        }
        return entry;
    }
    getCustomEditorProvider(viewType) {
        const entry = this._editorProviders.get(viewType);
        const provider = entry?.provider;
        if (!provider || !isCustomEditorProviderWithEditingCapability(provider)) {
            throw ( new Error('Custom document is not editable'));
        }
        return provider;
    }
}
function isCustomEditorProviderWithEditingCapability(provider) {
    return !!provider.onDidChangeCustomDocument;
}
function isCustomTextEditorProvider(provider) {
    return typeof provider.resolveCustomTextEditor === 'function';
}
function isEditEvent(e) {
    return typeof e.undo === 'function'
        && typeof e.redo === 'function';
}
function hashPath(resource) {
    const str = resource.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_3__.Schemas.file || resource.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_3__.Schemas.untitled ? resource.fsPath : ( resource.toString());
    return (0,_base_common_hash_js__WEBPACK_IMPORTED_MODULE_1__.hash)(str) + '';
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDebugService.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDebugService.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDebugConsole: () => (/* binding */ ExtHostDebugConsole),
/* harmony export */   ExtHostDebugServiceBase: () => (/* binding */ ExtHostDebugServiceBase),
/* harmony export */   ExtHostDebugSession: () => (/* binding */ ExtHostDebugSession),
/* harmony export */   IExtHostDebugService: () => (/* binding */ IExtHostDebugService),
/* harmony export */   WorkerExtHostDebugService: () => (/* binding */ WorkerExtHostDebugService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostEditorTabs.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEditorTabs.js");
/* harmony import */ var _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostWorkspace.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js");
/* harmony import */ var _contrib_debug_common_abstractDebugAdapter_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../contrib/debug/common/abstractDebugAdapter.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/abstractDebugAdapter.js");
/* harmony import */ var _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../contrib/debug/common/debug.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debug.js");
/* harmony import */ var _contrib_debug_common_debugUtils_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../contrib/debug/common/debugUtils.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debugUtils.js");
/* harmony import */ var _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./extHostConfiguration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js");
/* harmony import */ var _extHostVariableResolverService_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostVariableResolverService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostVariableResolverService.js");
/* harmony import */ var _base_common_themables_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../base/common/themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _extHostTesting_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./extHostTesting.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTesting.js");























const IExtHostDebugService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_6__.createDecorator)('IExtHostDebugService'));
let ExtHostDebugServiceBase = class ExtHostDebugServiceBase extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.Disposable {
    get onDidStartDebugSession() { return this._onDidStartDebugSession.event; }
    get onDidTerminateDebugSession() { return this._onDidTerminateDebugSession.event; }
    get onDidChangeActiveDebugSession() { return this._onDidChangeActiveDebugSession.event; }
    get activeDebugSession() { return this._activeDebugSession?.api; }
    get onDidReceiveDebugSessionCustomEvent() { return this._onDidReceiveDebugSessionCustomEvent.event; }
    get activeDebugConsole() { return this._activeDebugConsole.value; }
    constructor(extHostRpcService, _workspaceService, _extensionService, _configurationService, _editorTabs, _variableResolver, _commands, _testing) {
        super();
        this._workspaceService = _workspaceService;
        this._extensionService = _extensionService;
        this._configurationService = _configurationService;
        this._editorTabs = _editorTabs;
        this._variableResolver = _variableResolver;
        this._commands = _commands;
        this._testing = _testing;
        this._debugSessions = ( new Map());
        this._debugVisualizationTreeItemIdsCounter = 0;
        this._debugVisualizationProviders = ( new Map());
        this._debugVisualizationTrees = ( new Map());
        this._debugVisualizationTreeItemIds = ( new WeakMap());
        this._debugVisualizationElements = ( new Map());
        this._visualizers = ( new Map());
        this._visualizerIdCounter = 0;
        this._configProviderHandleCounter = 0;
        this._configProviders = [];
        this._adapterFactoryHandleCounter = 0;
        this._adapterFactories = [];
        this._trackerFactoryHandleCounter = 0;
        this._trackerFactories = [];
        this._debugAdapters = ( new Map());
        this._debugAdaptersTrackers = ( new Map());
        this._onDidStartDebugSession = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this._onDidTerminateDebugSession = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this._onDidChangeActiveDebugSession = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this._onDidReceiveDebugSessionCustomEvent = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this._debugServiceProxy = ( extHostRpcService.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_7__.MainContext.MainThreadDebugService));
        this._onDidChangeBreakpoints = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this._onDidChangeActiveStackItem = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this._activeDebugConsole = ( new ExtHostDebugConsole(this._debugServiceProxy));
        this._breakpoints = ( new Map());
        this._extensionService.getExtensionRegistry().then((extensionRegistry) => {
            this._register(extensionRegistry.onDidChange(_ => {
                this.registerAllDebugTypes(extensionRegistry);
            }));
            this.registerAllDebugTypes(extensionRegistry);
        });
    }
    async $getVisualizerTreeItem(treeId, element) {
        const context = this.hydrateVisualizationContext(element);
        if (!context) {
            return undefined;
        }
        const item = await this._debugVisualizationTrees.get(treeId)?.getTreeItem?.(context);
        return item ? this.convertVisualizerTreeItem(treeId, item) : undefined;
    }
    registerDebugVisualizationTree(manifest, id, provider) {
        const extensionId = _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_5__.ExtensionIdentifier.toKey(manifest.identifier);
        const key = this.extensionVisKey(extensionId, id);
        if (( this._debugVisualizationProviders.has(key))) {
            throw ( new Error(`A debug visualization provider with id '${id}' is already registered`));
        }
        this._debugVisualizationTrees.set(key, provider);
        this._debugServiceProxy.$registerDebugVisualizerTree(key, !!provider.editItem);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.toDisposable)(() => {
            this._debugServiceProxy.$unregisterDebugVisualizerTree(key);
            this._debugVisualizationTrees.delete(id);
        });
    }
    async $getVisualizerTreeItemChildren(treeId, element) {
        const item = this._debugVisualizationElements.get(element)?.item;
        if (!item) {
            return [];
        }
        const children = await this._debugVisualizationTrees.get(treeId)?.getChildren?.(item);
        return children?.map(i => this.convertVisualizerTreeItem(treeId, i)) || [];
    }
    async $editVisualizerTreeItem(element, value) {
        const e = this._debugVisualizationElements.get(element);
        if (!e) {
            return undefined;
        }
        const r = await this._debugVisualizationTrees.get(e.provider)?.editItem?.(e.item, value);
        return this.convertVisualizerTreeItem(e.provider, r || e.item);
    }
    $disposeVisualizedTree(element) {
        const root = this._debugVisualizationElements.get(element);
        if (!root) {
            return;
        }
        const queue = [root.children];
        for (const children of queue) {
            if (children) {
                for (const child of children) {
                    queue.push(this._debugVisualizationElements.get(child)?.children);
                    this._debugVisualizationElements.delete(child);
                }
            }
        }
    }
    convertVisualizerTreeItem(treeId, item) {
        let id = this._debugVisualizationTreeItemIds.get(item);
        if (!id) {
            id = this._debugVisualizationTreeItemIdsCounter++;
            this._debugVisualizationTreeItemIds.set(item, id);
            this._debugVisualizationElements.set(id, { provider: treeId, item });
        }
        return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_20__.DebugTreeItem.from(item, id);
    }
    asDebugSourceUri(src, session) {
        const source = src;
        if (typeof source.sourceReference === 'number' && source.sourceReference > 0) {
            let debug = `debug:${encodeURIComponent(source.path || '')}`;
            let sep = '?';
            if (session) {
                debug += `${sep}session=${encodeURIComponent(session.id)}`;
                sep = '&';
            }
            debug += `${sep}ref=${source.sourceReference}`;
            return ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.parse(debug));
        }
        else if (source.path) {
            return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.file(source.path);
        }
        else {
            throw ( new Error(
                `cannot create uri from DAP 'source' object; properties 'path' and 'sourceReference' are both missing.`
            ));
        }
    }
    registerAllDebugTypes(extensionRegistry) {
        const debugTypes = [];
        for (const ed of extensionRegistry.getAllExtensionDescriptions()) {
            if (ed.contributes) {
                const debuggers = ed.contributes['debuggers'];
                if (debuggers && debuggers.length > 0) {
                    for (const dbg of debuggers) {
                        if ((0,_contrib_debug_common_debugUtils_js__WEBPACK_IMPORTED_MODULE_15__.isDebuggerMainContribution)(dbg)) {
                            debugTypes.push(dbg.type);
                        }
                    }
                }
            }
        }
        this._debugServiceProxy.$registerDebugTypes(debugTypes);
    }
    get activeStackItem() {
        return this._activeStackItem;
    }
    get onDidChangeActiveStackItem() {
        return this._onDidChangeActiveStackItem.event;
    }
    get onDidChangeBreakpoints() {
        return this._onDidChangeBreakpoints.event;
    }
    get breakpoints() {
        const result = [];
        this._breakpoints.forEach(bp => result.push(bp));
        return result;
    }
    async $resolveDebugVisualizer(id, token) {
        const visualizer = this._visualizers.get(id);
        if (!visualizer) {
            throw ( new Error(`No debug visualizer found with id '${id}'`));
        }
        let { v, provider, extensionId } = visualizer;
        if (!v.visualization) {
            v = (await provider.resolveDebugVisualization?.(v, token)) || v;
            visualizer.v = v;
        }
        if (!v.visualization) {
            throw ( new Error(
                `No visualization returned from resolveDebugVisualization in '${provider}'`
            ));
        }
        return this.serializeVisualization(extensionId, v.visualization);
    }
    async $executeDebugVisualizerCommand(id) {
        const visualizer = this._visualizers.get(id);
        if (!visualizer) {
            throw ( new Error(`No debug visualizer found with id '${id}'`));
        }
        const command = visualizer.v.visualization;
        if (command && 'command' in command) {
            this._commands.executeCommand(command.command, ...(command.arguments || []));
        }
    }
    hydrateVisualizationContext(context) {
        const session = this._debugSessions.get(context.sessionId);
        return session && {
            session: session.api,
            variable: context.variable,
            containerId: context.containerId,
            frameId: context.frameId,
            threadId: context.threadId,
        };
    }
    async $provideDebugVisualizers(extensionId, id, context, token) {
        const contextHydrated = this.hydrateVisualizationContext(context);
        const key = this.extensionVisKey(extensionId, id);
        const provider = this._debugVisualizationProviders.get(key);
        if (!contextHydrated || !provider) {
            return [];
        }
        const visualizations = await provider.provideDebugVisualization(contextHydrated, token);
        if (!visualizations) {
            return [];
        }
        return ( visualizations.map(v => {
            const id = ++this._visualizerIdCounter;
            this._visualizers.set(id, { v, provider, extensionId });
            const icon = v.iconPath ? this.getIconPathOrClass(v.iconPath) : undefined;
            return {
                id,
                name: v.name,
                iconClass: icon?.iconClass,
                iconPath: icon?.iconPath,
                visualization: this.serializeVisualization(extensionId, v.visualization),
            };
        }));
    }
    $disposeDebugVisualizers(ids) {
        for (const id of ids) {
            this._visualizers.delete(id);
        }
    }
    registerDebugVisualizationProvider(manifest, id, provider) {
        if (!manifest.contributes?.debugVisualizers?.some(r => r.id === id)) {
            throw ( new Error(
                `Extensions may only call registerDebugVisualizationProvider() for renderers they contribute (got ${id})`
            ));
        }
        const extensionId = _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_5__.ExtensionIdentifier.toKey(manifest.identifier);
        const key = this.extensionVisKey(extensionId, id);
        if (( this._debugVisualizationProviders.has(key))) {
            throw ( new Error(`A debug visualization provider with id '${id}' is already registered`));
        }
        this._debugVisualizationProviders.set(key, provider);
        this._debugServiceProxy.$registerDebugVisualizer(extensionId, id);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.toDisposable)(() => {
            this._debugServiceProxy.$unregisterDebugVisualizer(extensionId, id);
            this._debugVisualizationProviders.delete(id);
        });
    }
    addBreakpoints(breakpoints0) {
        const breakpoints = breakpoints0.filter(bp => {
            const id = bp.id;
            if (!( this._breakpoints.has(id))) {
                this._breakpoints.set(id, bp);
                return true;
            }
            return false;
        });
        this.fireBreakpointChanges(breakpoints, [], []);
        const dtos = [];
        const map = ( new Map());
        for (const bp of breakpoints) {
            if (bp instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.SourceBreakpoint) {
                let dto = map.get(( bp.location.uri.toString()));
                if (!dto) {
                    dto = {
                        type: 'sourceMulti',
                        uri: bp.location.uri,
                        lines: []
                    };
                    map.set(( bp.location.uri.toString()), dto);
                    dtos.push(dto);
                }
                dto.lines.push({
                    id: bp.id,
                    enabled: bp.enabled,
                    condition: bp.condition,
                    hitCondition: bp.hitCondition,
                    logMessage: bp.logMessage,
                    line: bp.location.range.start.line,
                    character: bp.location.range.start.character,
                    mode: bp.mode,
                });
            }
            else if (bp instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.FunctionBreakpoint) {
                dtos.push({
                    type: 'function',
                    id: bp.id,
                    enabled: bp.enabled,
                    hitCondition: bp.hitCondition,
                    logMessage: bp.logMessage,
                    condition: bp.condition,
                    functionName: bp.functionName,
                    mode: bp.mode,
                });
            }
        }
        return this._debugServiceProxy.$registerBreakpoints(dtos);
    }
    removeBreakpoints(breakpoints0) {
        const breakpoints = breakpoints0.filter(b => this._breakpoints.delete(b.id));
        this.fireBreakpointChanges([], breakpoints, []);
        const ids = ( breakpoints.filter(bp => bp instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.SourceBreakpoint).map(bp => bp.id));
        const fids = ( breakpoints.filter(bp => bp instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.FunctionBreakpoint).map(bp => bp.id));
        const dids = ( breakpoints.filter(bp => bp instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DataBreakpoint).map(bp => bp.id));
        return this._debugServiceProxy.$unregisterBreakpoints(ids, fids, dids);
    }
    startDebugging(folder, nameOrConfig, options) {
        const testRunMeta = options.testRun && this._testing.getMetadataForRun(options.testRun);
        return this._debugServiceProxy.$startDebugging(folder ? folder.uri : undefined, nameOrConfig, {
            parentSessionID: options.parentSession ? options.parentSession.id : undefined,
            lifecycleManagedByParent: options.lifecycleManagedByParent,
            repl: options.consoleMode === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugConsoleMode.MergeWithParent ? 'mergeWithParent' : 'separate',
            noDebug: options.noDebug,
            compact: options.compact,
            suppressSaveBeforeStart: options.suppressSaveBeforeStart,
            testRun: testRunMeta && {
                runId: testRunMeta.runId,
                taskId: testRunMeta.taskId,
            },
            suppressDebugStatusbar: options.suppressDebugStatusbar ?? options.debugUI?.simple,
            suppressDebugToolbar: options.suppressDebugToolbar ?? options.debugUI?.simple,
            suppressDebugView: options.suppressDebugView ?? options.debugUI?.simple,
        });
    }
    stopDebugging(session) {
        return this._debugServiceProxy.$stopDebugging(session ? session.id : undefined);
    }
    registerDebugConfigurationProvider(type, provider, trigger) {
        if (!provider) {
            return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Disposable(() => { }));
        }
        const handle = this._configProviderHandleCounter++;
        this._configProviders.push({ type, handle, provider });
        this._debugServiceProxy.$registerDebugConfigurationProvider(type, trigger, !!provider.provideDebugConfigurations, !!provider.resolveDebugConfiguration, !!provider.resolveDebugConfigurationWithSubstitutedVariables, handle);
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Disposable(() => {
            this._configProviders = this._configProviders.filter(p => p.provider !== provider);
            this._debugServiceProxy.$unregisterDebugConfigurationProvider(handle);
        }));
    }
    registerDebugAdapterDescriptorFactory(extension, type, factory) {
        if (!factory) {
            return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Disposable(() => { }));
        }
        if (!this.definesDebugType(extension, type)) {
            throw ( new Error(
                `a DebugAdapterDescriptorFactory can only be registered from the extension that defines the '${type}' debugger.`
            ));
        }
        if (this.getAdapterDescriptorFactoryByType(type)) {
            throw ( new Error(`a DebugAdapterDescriptorFactory can only be registered once per a type.`));
        }
        const handle = this._adapterFactoryHandleCounter++;
        this._adapterFactories.push({ type, handle, factory });
        this._debugServiceProxy.$registerDebugAdapterDescriptorFactory(type, handle);
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Disposable(() => {
            this._adapterFactories = this._adapterFactories.filter(p => p.factory !== factory);
            this._debugServiceProxy.$unregisterDebugAdapterDescriptorFactory(handle);
        }));
    }
    registerDebugAdapterTrackerFactory(type, factory) {
        if (!factory) {
            return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Disposable(() => { }));
        }
        const handle = this._trackerFactoryHandleCounter++;
        this._trackerFactories.push({ type, handle, factory });
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Disposable(() => {
            this._trackerFactories = this._trackerFactories.filter(p => p.factory !== factory);
        }));
    }
    async $runInTerminal(args, sessionId) {
        return Promise.resolve(undefined);
    }
    async $substituteVariables(folderUri, config) {
        let ws;
        const folder = await this.getFolder(folderUri);
        if (folder) {
            ws = {
                uri: folder.uri,
                name: folder.name,
                index: folder.index,
                toResource: () => {
                    throw ( new Error('Not implemented'));
                }
            };
        }
        const variableResolver = await this._variableResolver.getResolver();
        return variableResolver.resolveAnyAsync(ws, config);
    }
    createDebugAdapter(adapter, session) {
        if (adapter.type === 'implementation') {
            return ( new DirectDebugAdapter(adapter.implementation));
        }
        return undefined;
    }
    createSignService() {
        return undefined;
    }
    async $startDASession(debugAdapterHandle, sessionDto) {
        const mythis = this;
        const session = await this.getSession(sessionDto);
        return this.getAdapterDescriptor(this.getAdapterDescriptorFactoryByType(session.type), session).then(daDescriptor => {
            if (!daDescriptor) {
                throw ( new Error(
                    `Couldn't find a debug adapter descriptor for debug type '${session.type}' (extension might have failed to activate)`
                ));
            }
            const adapterDescriptor = this.convertToDto(daDescriptor);
            const da = this.createDebugAdapter(adapterDescriptor, session);
            if (!da) {
                throw ( new Error(`Couldn't create a debug adapter for type '${session.type}'.`));
            }
            const debugAdapter = da;
            this._debugAdapters.set(debugAdapterHandle, debugAdapter);
            return this.getDebugAdapterTrackers(session).then(tracker => {
                if (tracker) {
                    this._debugAdaptersTrackers.set(debugAdapterHandle, tracker);
                }
                debugAdapter.onMessage(async (message) => {
                    if (message.type === 'request' && message.command === 'handshake') {
                        const request = message;
                        const response = {
                            type: 'response',
                            seq: 0,
                            command: request.command,
                            request_seq: request.seq,
                            success: true
                        };
                        if (!this._signService) {
                            this._signService = this.createSignService();
                        }
                        try {
                            if (this._signService) {
                                const signature = await this._signService.sign(request.arguments.value);
                                response.body = {
                                    signature: signature
                                };
                                debugAdapter.sendResponse(response);
                            }
                            else {
                                throw ( new Error('no signer'));
                            }
                        }
                        catch (e) {
                            response.success = false;
                            response.message = e.message;
                            debugAdapter.sendResponse(response);
                        }
                    }
                    else {
                        if (tracker && tracker.onDidSendMessage) {
                            tracker.onDidSendMessage(message);
                        }
                        message = (0,_contrib_debug_common_debugUtils_js__WEBPACK_IMPORTED_MODULE_15__.convertToVSCPaths)(message, true);
                        mythis._debugServiceProxy.$acceptDAMessage(debugAdapterHandle, message);
                    }
                });
                debugAdapter.onError(err => {
                    if (tracker && tracker.onError) {
                        tracker.onError(err);
                    }
                    this._debugServiceProxy.$acceptDAError(debugAdapterHandle, err.name, err.message, err.stack);
                });
                debugAdapter.onExit((code) => {
                    if (tracker && tracker.onExit) {
                        tracker.onExit(code ?? undefined, undefined);
                    }
                    this._debugServiceProxy.$acceptDAExit(debugAdapterHandle, code ?? undefined, undefined);
                });
                if (tracker && tracker.onWillStartSession) {
                    tracker.onWillStartSession();
                }
                return debugAdapter.startSession();
            });
        });
    }
    $sendDAMessage(debugAdapterHandle, message) {
        message = (0,_contrib_debug_common_debugUtils_js__WEBPACK_IMPORTED_MODULE_15__.convertToDAPaths)(message, false);
        const tracker = this._debugAdaptersTrackers.get(debugAdapterHandle);
        if (tracker && tracker.onWillReceiveMessage) {
            tracker.onWillReceiveMessage(message);
        }
        const da = this._debugAdapters.get(debugAdapterHandle);
        da?.sendMessage(message);
    }
    $stopDASession(debugAdapterHandle) {
        const tracker = this._debugAdaptersTrackers.get(debugAdapterHandle);
        this._debugAdaptersTrackers.delete(debugAdapterHandle);
        if (tracker && tracker.onWillStopSession) {
            tracker.onWillStopSession();
        }
        const da = this._debugAdapters.get(debugAdapterHandle);
        this._debugAdapters.delete(debugAdapterHandle);
        if (da) {
            return da.stopSession();
        }
        else {
            return Promise.resolve(void 0);
        }
    }
    $acceptBreakpointsDelta(delta) {
        const a = [];
        const r = [];
        const c = [];
        if (delta.added) {
            for (const bpd of delta.added) {
                const id = bpd.id;
                if (id && !( this._breakpoints.has(id))) {
                    let bp;
                    if (bpd.type === 'function') {
                        bp = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.FunctionBreakpoint(
                            bpd.functionName,
                            bpd.enabled,
                            bpd.condition,
                            bpd.hitCondition,
                            bpd.logMessage,
                            bpd.mode
                        ));
                    }
                    else if (bpd.type === 'data') {
                        bp = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DataBreakpoint(
                            bpd.label,
                            bpd.dataId,
                            bpd.canPersist,
                            bpd.enabled,
                            bpd.hitCondition,
                            bpd.condition,
                            bpd.logMessage,
                            bpd.mode
                        ));
                    }
                    else {
                        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.revive(bpd.uri);
                        bp = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.SourceBreakpoint(( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Location(uri, ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Position(bpd.line, bpd.character)))), bpd.enabled, bpd.condition, bpd.hitCondition, bpd.logMessage, bpd.mode));
                    }
                    (0,_extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.setBreakpointId)(bp, id);
                    this._breakpoints.set(id, bp);
                    a.push(bp);
                }
            }
        }
        if (delta.removed) {
            for (const id of delta.removed) {
                const bp = this._breakpoints.get(id);
                if (bp) {
                    this._breakpoints.delete(id);
                    r.push(bp);
                }
            }
        }
        if (delta.changed) {
            for (const bpd of delta.changed) {
                if (bpd.id) {
                    const bp = this._breakpoints.get(bpd.id);
                    if (bp) {
                        if (bp instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.FunctionBreakpoint && bpd.type === 'function') {
                            const fbp = bp;
                            fbp.enabled = bpd.enabled;
                            fbp.condition = bpd.condition;
                            fbp.hitCondition = bpd.hitCondition;
                            fbp.logMessage = bpd.logMessage;
                            fbp.functionName = bpd.functionName;
                        }
                        else if (bp instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.SourceBreakpoint && bpd.type === 'source') {
                            const sbp = bp;
                            sbp.enabled = bpd.enabled;
                            sbp.condition = bpd.condition;
                            sbp.hitCondition = bpd.hitCondition;
                            sbp.logMessage = bpd.logMessage;
                            sbp.location = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Location(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.revive(bpd.uri), ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Position(bpd.line, bpd.character))));
                        }
                        c.push(bp);
                    }
                }
            }
        }
        this.fireBreakpointChanges(a, r, c);
    }
    async $acceptStackFrameFocus(focusDto) {
        let focus;
        if (focusDto) {
            const session = await this.getSession(focusDto.sessionId);
            if (focusDto.kind === 'thread') {
                focus = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugThread(session.api, focusDto.threadId));
            }
            else {
                focus = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugStackFrame(session.api, focusDto.threadId, focusDto.frameId));
            }
        }
        this._activeStackItem = focus;
        this._onDidChangeActiveStackItem.fire(this._activeStackItem);
    }
    $provideDebugConfigurations(configProviderHandle, folderUri, token) {
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.asPromise)(async () => {
            const provider = this.getConfigProviderByHandle(configProviderHandle);
            if (!provider) {
                throw ( new Error('no DebugConfigurationProvider found'));
            }
            if (!provider.provideDebugConfigurations) {
                throw ( new Error('DebugConfigurationProvider has no method provideDebugConfigurations'));
            }
            const folder = await this.getFolder(folderUri);
            return provider.provideDebugConfigurations(folder, token);
        }).then(debugConfigurations => {
            if (!debugConfigurations) {
                throw ( new Error(
                    'nothing returned from DebugConfigurationProvider.provideDebugConfigurations'
                ));
            }
            return debugConfigurations;
        });
    }
    $resolveDebugConfiguration(configProviderHandle, folderUri, debugConfiguration, token) {
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.asPromise)(async () => {
            const provider = this.getConfigProviderByHandle(configProviderHandle);
            if (!provider) {
                throw ( new Error('no DebugConfigurationProvider found'));
            }
            if (!provider.resolveDebugConfiguration) {
                throw ( new Error('DebugConfigurationProvider has no method resolveDebugConfiguration'));
            }
            const folder = await this.getFolder(folderUri);
            return provider.resolveDebugConfiguration(folder, debugConfiguration, token);
        });
    }
    $resolveDebugConfigurationWithSubstitutedVariables(configProviderHandle, folderUri, debugConfiguration, token) {
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.asPromise)(async () => {
            const provider = this.getConfigProviderByHandle(configProviderHandle);
            if (!provider) {
                throw ( new Error('no DebugConfigurationProvider found'));
            }
            if (!provider.resolveDebugConfigurationWithSubstitutedVariables) {
                throw ( new Error(
                    'DebugConfigurationProvider has no method resolveDebugConfigurationWithSubstitutedVariables'
                ));
            }
            const folder = await this.getFolder(folderUri);
            return provider.resolveDebugConfigurationWithSubstitutedVariables(folder, debugConfiguration, token);
        });
    }
    async $provideDebugAdapter(adapterFactoryHandle, sessionDto) {
        const adapterDescriptorFactory = this.getAdapterDescriptorFactoryByHandle(adapterFactoryHandle);
        if (!adapterDescriptorFactory) {
            return Promise.reject(( new Error('no adapter descriptor factory found for handle')));
        }
        const session = await this.getSession(sessionDto);
        return this.getAdapterDescriptor(adapterDescriptorFactory, session).then(adapterDescriptor => {
            if (!adapterDescriptor) {
                throw ( new Error(
                    `Couldn't find a debug adapter descriptor for debug type '${session.type}'`
                ));
            }
            return this.convertToDto(adapterDescriptor);
        });
    }
    async $acceptDebugSessionStarted(sessionDto) {
        const session = await this.getSession(sessionDto);
        this._onDidStartDebugSession.fire(session.api);
    }
    async $acceptDebugSessionTerminated(sessionDto) {
        const session = await this.getSession(sessionDto);
        if (session) {
            this._onDidTerminateDebugSession.fire(session.api);
            this._debugSessions.delete(session.id);
        }
    }
    async $acceptDebugSessionActiveChanged(sessionDto) {
        this._activeDebugSession = sessionDto ? await this.getSession(sessionDto) : undefined;
        this._onDidChangeActiveDebugSession.fire(this._activeDebugSession?.api);
    }
    async $acceptDebugSessionNameChanged(sessionDto, name) {
        const session = await this.getSession(sessionDto);
        session?._acceptNameChanged(name);
    }
    async $acceptDebugSessionCustomEvent(sessionDto, event) {
        const session = await this.getSession(sessionDto);
        const ee = {
            session: session.api,
            event: event.event,
            body: event.body
        };
        this._onDidReceiveDebugSessionCustomEvent.fire(ee);
    }
    convertToDto(x) {
        if (x instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugAdapterExecutable) {
            return {
                type: 'executable',
                command: x.command,
                args: x.args,
                options: x.options
            };
        }
        else if (x instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugAdapterServer) {
            return {
                type: 'server',
                port: x.port,
                host: x.host
            };
        }
        else if (x instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugAdapterNamedPipeServer) {
            return {
                type: 'pipeServer',
                path: x.path
            };
        }
        else if (x instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugAdapterInlineImplementation) {
            return {
                type: 'implementation',
                implementation: x.implementation
            };
        }
        else {
            throw ( new Error('convertToDto unexpected type'));
        }
    }
    getAdapterDescriptorFactoryByType(type) {
        const results = this._adapterFactories.filter(p => p.type === type);
        if (results.length > 0) {
            return results[0].factory;
        }
        return undefined;
    }
    getAdapterDescriptorFactoryByHandle(handle) {
        const results = this._adapterFactories.filter(p => p.handle === handle);
        if (results.length > 0) {
            return results[0].factory;
        }
        return undefined;
    }
    getConfigProviderByHandle(handle) {
        const results = this._configProviders.filter(p => p.handle === handle);
        if (results.length > 0) {
            return results[0].provider;
        }
        return undefined;
    }
    definesDebugType(ed, type) {
        if (ed.contributes) {
            const debuggers = ed.contributes['debuggers'];
            if (debuggers && debuggers.length > 0) {
                for (const dbg of debuggers) {
                    if (dbg.label && dbg.type) {
                        if (dbg.type === type) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    getDebugAdapterTrackers(session) {
        const config = session.configuration;
        const type = config.type;
        const promises = ( this._trackerFactories
            .filter(tuple => tuple.type === type || tuple.type === '*')
            .map(
            tuple => (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.asPromise)(() => tuple.factory.createDebugAdapterTracker(session.api)).then(p => p, err => null)
        ));
        return Promise.race([
            Promise.all(promises).then(result => {
                const trackers = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_21__.coalesce)(result);
                if (trackers.length > 0) {
                    return ( new MultiTracker(trackers));
                }
                return undefined;
            }),
            ( new Promise(resolve => setTimeout(() => resolve(undefined), 1000))),
        ]).catch(err => {
            return undefined;
        });
    }
    async getAdapterDescriptor(adapterDescriptorFactory, session) {
        const serverPort = session.configuration.debugServer;
        if (typeof serverPort === 'number') {
            return Promise.resolve(( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.DebugAdapterServer(serverPort)));
        }
        if (adapterDescriptorFactory) {
            const extensionRegistry = await this._extensionService.getExtensionRegistry();
            return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.asPromise)(() => adapterDescriptorFactory.createDebugAdapterDescriptor(session.api, this.daExecutableFromPackage(session, extensionRegistry))).then(daDescriptor => {
                if (daDescriptor) {
                    return daDescriptor;
                }
                return undefined;
            });
        }
        const extensionRegistry = await this._extensionService.getExtensionRegistry();
        return Promise.resolve(this.daExecutableFromPackage(session, extensionRegistry));
    }
    daExecutableFromPackage(session, extensionRegistry) {
        return undefined;
    }
    fireBreakpointChanges(added, removed, changed) {
        if (added.length > 0 || removed.length > 0 || changed.length > 0) {
            this._onDidChangeBreakpoints.fire(( Object.freeze({
                added,
                removed,
                changed,
            })));
        }
    }
    async getSession(dto) {
        if (dto) {
            if (typeof dto === 'string') {
                const ds = this._debugSessions.get(dto);
                if (ds) {
                    return ds;
                }
            }
            else {
                let ds = this._debugSessions.get(dto.id);
                if (!ds) {
                    const folder = await this.getFolder(dto.folderUri);
                    const parent = dto.parent ? this._debugSessions.get(dto.parent) : undefined;
                    ds = ( new ExtHostDebugSession(
                        this._debugServiceProxy,
                        dto.id,
                        dto.type,
                        dto.name,
                        folder,
                        dto.configuration,
                        parent?.api
                    ));
                    this._debugSessions.set(ds.id, ds);
                    this._debugServiceProxy.$sessionCached(ds.id);
                }
                return ds;
            }
        }
        throw ( new Error('cannot find session'));
    }
    getFolder(_folderUri) {
        if (_folderUri) {
            const folderURI = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.revive(_folderUri);
            return this._workspaceService.resolveWorkspaceFolder(folderURI);
        }
        return Promise.resolve(undefined);
    }
    extensionVisKey(extensionId, id) {
        return `${extensionId}\0${id}`;
    }
    serializeVisualization(extensionId, viz) {
        if (!viz) {
            return undefined;
        }
        if ('title' in viz && 'command' in viz) {
            return { type: _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_14__.DebugVisualizationType.Command };
        }
        if ('treeId' in viz) {
            return { type: _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_14__.DebugVisualizationType.Tree, id: `${extensionId}\0${viz.treeId}` };
        }
        throw ( new Error('Unsupported debug visualization type'));
    }
    getIconPathOrClass(icon) {
        const iconPathOrIconClass = this.getIconUris(icon);
        let iconPath;
        let iconClass;
        if ('id' in iconPathOrIconClass) {
            iconClass = _base_common_themables_js__WEBPACK_IMPORTED_MODULE_18__.ThemeIcon.asClassName(iconPathOrIconClass);
        }
        else {
            iconPath = iconPathOrIconClass;
        }
        return {
            iconPath,
            iconClass
        };
    }
    getIconUris(iconPath) {
        if (iconPath instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.ThemeIcon) {
            return { id: iconPath.id };
        }
        const dark = typeof iconPath === 'object' && 'dark' in iconPath ? iconPath.dark : iconPath;
        const light = typeof iconPath === 'object' && 'light' in iconPath ? iconPath.light : iconPath;
        return {
            dark: (typeof dark === 'string' ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.file(dark) : dark),
            light: (typeof light === 'string' ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.file(light) : light),
        };
    }
};
ExtHostDebugServiceBase = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostWorkspace)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_9__.IExtHostExtensionService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_16__.IExtHostConfiguration)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostEditorTabs)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _extHostVariableResolverService_js__WEBPACK_IMPORTED_MODULE_17__.IExtHostVariableResolverProvider)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_19__.IExtHostCommands)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, _extHostTesting_js__WEBPACK_IMPORTED_MODULE_22__.IExtHostTesting))
], ExtHostDebugServiceBase));
class ExtHostDebugSession {
    constructor(_debugServiceProxy, _id, _type, _name, _workspaceFolder, _configuration, _parentSession) {
        this._debugServiceProxy = _debugServiceProxy;
        this._id = _id;
        this._type = _type;
        this._name = _name;
        this._workspaceFolder = _workspaceFolder;
        this._configuration = _configuration;
        this._parentSession = _parentSession;
    }
    get api() {
        const that = this;
        return this.apiSession ??= ( Object.freeze({
            id: that._id,
            type: that._type,
            get name() {
                return that._name;
            },
            set name(name) {
                that._name = name;
                that._debugServiceProxy.$setDebugSessionName(that._id, name);
            },
            parentSession: that._parentSession,
            workspaceFolder: that._workspaceFolder,
            configuration: that._configuration,
            customRequest(command, args) {
                return that._debugServiceProxy.$customDebugAdapterRequest(that._id, command, args);
            },
            getDebugProtocolBreakpoint(breakpoint) {
                return that._debugServiceProxy.$getDebugProtocolBreakpoint(that._id, breakpoint.id);
            }
        }));
    }
    get id() {
        return this._id;
    }
    get type() {
        return this._type;
    }
    _acceptNameChanged(name) {
        this._name = name;
    }
    get configuration() {
        return this._configuration;
    }
}
class ExtHostDebugConsole {
    constructor(proxy) {
        this.value = ( Object.freeze({
            append(value) {
                proxy.$appendDebugConsole(value);
            },
            appendLine(value) {
                this.append(value + '\n');
            }
        }));
    }
}
class MultiTracker {
    constructor(trackers) {
        this.trackers = trackers;
    }
    onWillStartSession() {
        this.trackers.forEach(t => t.onWillStartSession ? t.onWillStartSession() : undefined);
    }
    onWillReceiveMessage(message) {
        this.trackers.forEach(t => t.onWillReceiveMessage ? t.onWillReceiveMessage(message) : undefined);
    }
    onDidSendMessage(message) {
        this.trackers.forEach(t => t.onDidSendMessage ? t.onDidSendMessage(message) : undefined);
    }
    onWillStopSession() {
        this.trackers.forEach(t => t.onWillStopSession ? t.onWillStopSession() : undefined);
    }
    onError(error) {
        this.trackers.forEach(t => t.onError ? t.onError(error) : undefined);
    }
    onExit(code, signal) {
        this.trackers.forEach(t => t.onExit ? t.onExit(code, signal) : undefined);
    }
}
class DirectDebugAdapter extends _contrib_debug_common_abstractDebugAdapter_js__WEBPACK_IMPORTED_MODULE_13__.AbstractDebugAdapter {
    constructor(implementation) {
        super();
        this.implementation = implementation;
        implementation.onDidSendMessage((message) => {
            this.acceptMessage(message);
        });
    }
    startSession() {
        return Promise.resolve(undefined);
    }
    sendMessage(message) {
        this.implementation.handleMessage(message);
    }
    stopSession() {
        this.implementation.dispose();
        return Promise.resolve(undefined);
    }
}
let WorkerExtHostDebugService = class WorkerExtHostDebugService extends ExtHostDebugServiceBase {
    constructor(extHostRpcService, workspaceService, extensionService, configurationService, editorTabs, variableResolver, commands, testing) {
        super(extHostRpcService, workspaceService, extensionService, configurationService, editorTabs, variableResolver, commands, testing);
    }
};
WorkerExtHostDebugService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostWorkspace)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_9__.IExtHostExtensionService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_16__.IExtHostConfiguration)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostEditorTabs)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _extHostVariableResolverService_js__WEBPACK_IMPORTED_MODULE_17__.IExtHostVariableResolverProvider)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_19__.IExtHostCommands)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, _extHostTesting_js__WEBPACK_IMPORTED_MODULE_22__.IExtHostTesting))
], WorkerExtHostDebugService));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDecorations.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDecorations.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDecorations: () => (/* binding */ ExtHostDecorations),
/* harmony export */   IExtHostDecorations: () => (/* binding */ IExtHostDecorations)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");











var ExtHostDecorations_1;
let ExtHostDecorations = class ExtHostDecorations {
    static { ExtHostDecorations_1 = this; }
    static { this._handlePool = 0; }
    static { this._maxEventSize = 250; }
    constructor(extHostRpc, _logService) {
        this._logService = _logService;
        this._provider = ( new Map());
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadDecorations));
    }
    registerFileDecorationProvider(provider, extensionDescription) {
        const handle = ExtHostDecorations_1._handlePool++;
        this._provider.set(handle, { provider, extensionDescription });
        this._proxy.$registerDecorationProvider(handle, extensionDescription.identifier.value);
        const listener = provider.onDidChangeFileDecorations && provider.onDidChangeFileDecorations(e => {
            if (!e) {
                this._proxy.$onDidChange(handle, null);
                return;
            }
            const array = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__.asArray)(e);
            if (array.length <= ExtHostDecorations_1._maxEventSize) {
                this._proxy.$onDidChange(handle, array);
                return;
            }
            this._logService.warn('[Decorations] CAPPING events from decorations provider', extensionDescription.identifier.value, array.length);
            const mapped = ( array.map(uri => ({ uri, rank: (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_8__.count)(uri.path, '/') })));
            const groups = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__.groupBy)(mapped, (a, b) => a.rank - b.rank || (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_8__.compare)(a.uri.path, b.uri.path));
            const picked = [];
            outer: for (const uris of groups) {
                let lastDirname;
                for (const obj of uris) {
                    const myDirname = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_9__.dirname)(obj.uri.path);
                    if (lastDirname !== myDirname) {
                        lastDirname = myDirname;
                        if (picked.push(obj.uri) >= ExtHostDecorations_1._maxEventSize) {
                            break outer;
                        }
                    }
                }
            }
            this._proxy.$onDidChange(handle, picked);
        });
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.Disposable(() => {
            listener?.dispose();
            this._proxy.$unregisterDecorationProvider(handle);
            this._provider.delete(handle);
        }));
    }
    async $provideDecorations(handle, requests, token) {
        if (!( this._provider.has(handle))) {
            return Object.create(null);
        }
        const result = Object.create(null);
        const { provider, extensionDescription: extensionId } = this._provider.get(handle);
        await Promise.all(( requests.map(async (request) => {
            try {
                const { uri, id } = request;
                const data = await Promise.resolve(provider.provideFileDecoration(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uri), token));
                if (!data) {
                    return;
                }
                try {
                    _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileDecoration.validate(data);
                    if (data.badge && typeof data.badge !== 'string') {
                        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(extensionId, 'codiconDecoration');
                    }
                    result[id] = [data.propagate, data.tooltip, data.badge, data.color];
                }
                catch (e) {
                    this._logService.warn(`INVALID decoration from extension '${extensionId.identifier.value}': ${e}`);
                }
            }
            catch (err) {
                this._logService.error(err);
            }
        })));
        return result;
    }
};
ExtHostDecorations = ExtHostDecorations_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_6__.ILogService))
], ExtHostDecorations));
const IExtHostDecorations = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__.createDecorator)('IExtHostDecorations'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDiagnostics.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDiagnostics.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DiagnosticCollection: () => (/* binding */ DiagnosticCollection),
/* harmony export */   ExtHostDiagnostics: () => (/* binding */ ExtHostDiagnostics)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/markers/common/markers.js */ "./node_modules/vscode/vscode/src/vs/platform/markers/common/markers.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostFileSystemInfo.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js");











var ExtHostDiagnostics_1;
const _moduleId = "vs/workbench/api/common/extHostDiagnostics";
class DiagnosticCollection {
    #proxy;
    #onDidChangeDiagnostics;
    #data;
    constructor(_name, _owner, _maxDiagnosticsTotal, _maxDiagnosticsPerFile, _modelVersionIdProvider, extUri, proxy, onDidChangeDiagnostics) {
        this._name = _name;
        this._owner = _owner;
        this._maxDiagnosticsTotal = _maxDiagnosticsTotal;
        this._maxDiagnosticsPerFile = _maxDiagnosticsPerFile;
        this._modelVersionIdProvider = _modelVersionIdProvider;
        this._isDisposed = false;
        this._maxDiagnosticsTotal = Math.max(_maxDiagnosticsPerFile, _maxDiagnosticsTotal);
        this.#data = ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_9__.ResourceMap(uri => extUri.getComparisonKey(uri))));
        this.#proxy = proxy;
        this.#onDidChangeDiagnostics = onDidChangeDiagnostics;
    }
    dispose() {
        if (!this._isDisposed) {
            this.#onDidChangeDiagnostics.fire([...( (this.#data.keys()))]);
            this.#proxy?.$clear(this._owner);
            this.#data.clear();
            this._isDisposed = true;
        }
    }
    get name() {
        this._checkDisposed();
        return this._name;
    }
    set(first, diagnostics) {
        if (!first) {
            this.clear();
            return;
        }
        this._checkDisposed();
        let toSync = [];
        if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.isUri(first)) {
            if (!diagnostics) {
                this.delete(first);
                return;
            }
            this.#data.set(first, diagnostics.slice());
            toSync = [first];
        }
        else if (Array.isArray(first)) {
            toSync = [];
            let lastUri;
            first = [...first].sort(DiagnosticCollection._compareIndexedTuplesByUri);
            for (const tuple of first) {
                const [uri, diagnostics] = tuple;
                if (!lastUri || ( (uri.toString())) !== ( (lastUri.toString()))) {
                    if (lastUri && this.#data.get(lastUri).length === 0) {
                        this.#data.delete(lastUri);
                    }
                    lastUri = uri;
                    toSync.push(uri);
                    this.#data.set(uri, []);
                }
                if (!diagnostics) {
                    const currentDiagnostics = this.#data.get(uri);
                    if (currentDiagnostics) {
                        currentDiagnostics.length = 0;
                    }
                }
                else {
                    const currentDiagnostics = this.#data.get(uri);
                    currentDiagnostics?.push(...diagnostics);
                }
            }
        }
        this.#onDidChangeDiagnostics.fire(toSync);
        if (!this.#proxy) {
            return;
        }
        const entries = [];
        let totalMarkerCount = 0;
        for (const uri of toSync) {
            let marker = [];
            const diagnostics = this.#data.get(uri);
            if (diagnostics) {
                if (diagnostics.length > this._maxDiagnosticsPerFile) {
                    marker = [];
                    const order = [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.DiagnosticSeverity.Error, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.DiagnosticSeverity.Warning, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.DiagnosticSeverity.Information, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.DiagnosticSeverity.Hint];
                    orderLoop: for (let i = 0; i < 4; i++) {
                        for (const diagnostic of diagnostics) {
                            if (diagnostic.severity === order[i]) {
                                const len = marker.push({ ..._extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_6__.Diagnostic.from(diagnostic), modelVersionId: this._modelVersionIdProvider(uri) });
                                if (len === this._maxDiagnosticsPerFile) {
                                    break orderLoop;
                                }
                            }
                        }
                    }
                    marker.push({
                        severity: _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_2__.MarkerSeverity.Info,
                        message: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
                            _moduleId,
                            0,
                            "Not showing {0} further errors and warnings.",
                            diagnostics.length - this._maxDiagnosticsPerFile
                        )),
                        startLineNumber: marker[marker.length - 1].startLineNumber,
                        startColumn: marker[marker.length - 1].startColumn,
                        endLineNumber: marker[marker.length - 1].endLineNumber,
                        endColumn: marker[marker.length - 1].endColumn
                    });
                }
                else {
                    marker = ( (diagnostics.map(
                        diag => ({ ..._extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_6__.Diagnostic.from(diag), modelVersionId: this._modelVersionIdProvider(uri) })
                    )));
                }
            }
            entries.push([uri, marker]);
            totalMarkerCount += marker.length;
            if (totalMarkerCount > this._maxDiagnosticsTotal) {
                break;
            }
        }
        this.#proxy.$changeMany(this._owner, entries);
    }
    delete(uri) {
        this._checkDisposed();
        this.#onDidChangeDiagnostics.fire([uri]);
        this.#data.delete(uri);
        this.#proxy?.$changeMany(this._owner, [[uri, undefined]]);
    }
    clear() {
        this._checkDisposed();
        this.#onDidChangeDiagnostics.fire([...( (this.#data.keys()))]);
        this.#data.clear();
        this.#proxy?.$clear(this._owner);
    }
    forEach(callback, thisArg) {
        this._checkDisposed();
        for (const [uri, values] of this) {
            callback.call(thisArg, uri, values, this);
        }
    }
    *[Symbol.iterator]() {
        this._checkDisposed();
        for (const uri of ( (this.#data.keys()))) {
            yield [uri, this.get(uri)];
        }
    }
    get(uri) {
        this._checkDisposed();
        const result = this.#data.get(uri);
        if (Array.isArray(result)) {
            return (
                 (Object.freeze(result.slice(0)))
            );
        }
        return [];
    }
    has(uri) {
        this._checkDisposed();
        return Array.isArray(this.#data.get(uri));
    }
    _checkDisposed() {
        if (this._isDisposed) {
            throw ( (new Error('illegal state - object is disposed')));
        }
    }
    static _compareIndexedTuplesByUri(a, b) {
        if (( (a[0].toString())) < ( (b[0].toString()))) {
            return -1;
        }
        else if (( (a[0].toString())) > ( (b[0].toString()))) {
            return 1;
        }
        else {
            return 0;
        }
    }
}
let ExtHostDiagnostics = class ExtHostDiagnostics {
    static { ExtHostDiagnostics_1 = this; }
    static { this._idPool = 0; }
    static { this._maxDiagnosticsPerFile = 1000; }
    static { this._maxDiagnosticsTotal = 1.1 * ExtHostDiagnostics_1._maxDiagnosticsPerFile; }
    static _mapper(last) {
        const map = ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_9__.ResourceMap()));
        for (const uri of last) {
            map.set(uri, uri);
        }
        return { uris: ( (Object.freeze(Array.from(( (map.values())))))) };
    }
    constructor(mainContext, _logService, _fileSystemInfoService, _extHostDocumentsAndEditors) {
        this._logService = _logService;
        this._fileSystemInfoService = _fileSystemInfoService;
        this._extHostDocumentsAndEditors = _extHostDocumentsAndEditors;
        this._collections = ( (new Map()));
        this._onDidChangeDiagnostics = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.DebounceEmitter({ merge: all => all.flat(), delay: 50 })));
        this.onDidChangeDiagnostics = ( (_base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.Event.map(this._onDidChangeDiagnostics.event, ExtHostDiagnostics_1._mapper)));
        this._proxy = ( (mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__.MainContext.MainThreadDiagnostics)));
    }
    createDiagnosticCollection(extensionId, name) {
        const { _collections, _proxy, _onDidChangeDiagnostics, _logService, _fileSystemInfoService, _extHostDocumentsAndEditors } = this;
        const loggingProxy = new (class {
            $changeMany(owner, entries) {
                _proxy.$changeMany(owner, entries);
                _logService.trace('[DiagnosticCollection] change many (extension, owner, uris)', extensionId.value, owner, entries.length === 0 ? 'CLEARING' : entries);
            }
            $clear(owner) {
                _proxy.$clear(owner);
                _logService.trace('[DiagnosticCollection] remove all (extension, owner)', extensionId.value, owner);
            }
            dispose() {
                _proxy.dispose();
            }
        });
        let owner;
        if (!name) {
            name = '_generated_diagnostic_collection_name_#' + ExtHostDiagnostics_1._idPool++;
            owner = name;
        }
        else if (!( (_collections.has(name)))) {
            owner = name;
        }
        else {
            this._logService.warn(`DiagnosticCollection with name '${name}' does already exist.`);
            do {
                owner = name + ExtHostDiagnostics_1._idPool++;
            } while (( (_collections.has(owner))));
        }
        const result = new (class extends DiagnosticCollection {
            constructor() {
                super(name, owner, ExtHostDiagnostics_1._maxDiagnosticsTotal, ExtHostDiagnostics_1._maxDiagnosticsPerFile, uri => _extHostDocumentsAndEditors.getDocument(uri)?.version, _fileSystemInfoService.extUri, loggingProxy, _onDidChangeDiagnostics);
                _collections.set(owner, this);
            }
            dispose() {
                super.dispose();
                _collections.delete(owner);
            }
        });
        return result;
    }
    getDiagnostics(resource) {
        if (resource) {
            return this._getDiagnostics(resource);
        }
        else {
            const index = ( (new Map()));
            const res = [];
            for (const collection of ( (this._collections.values()))) {
                collection.forEach((uri, diagnostics) => {
                    let idx = index.get(( (uri.toString())));
                    if (typeof idx === 'undefined') {
                        idx = res.length;
                        index.set(( (uri.toString())), idx);
                        res.push([uri, []]);
                    }
                    res[idx][1] = res[idx][1].concat(...diagnostics);
                });
            }
            return res;
        }
    }
    _getDiagnostics(resource) {
        let res = [];
        for (const collection of ( (this._collections.values()))) {
            if (( (collection.has(resource)))) {
                res = res.concat(collection.get(resource));
            }
        }
        return res;
    }
    $acceptMarkersChange(data) {
        if (!this._mirrorCollection) {
            const name = '_generated_mirror';
            const collection = ( (new DiagnosticCollection(
                name,
                name,
                Number.MAX_SAFE_INTEGER,
                Number.MAX_SAFE_INTEGER,
                _uri => undefined,
                this._fileSystemInfoService.extUri,
                undefined,
                this._onDidChangeDiagnostics
            )));
            this._collections.set(name, collection);
            this._mirrorCollection = collection;
        }
        for (const [uri, markers] of data) {
            this._mirrorCollection.set(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.revive(uri), ( (markers.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_6__.Diagnostic.to))));
        }
    }
};
ExtHostDiagnostics = ExtHostDiagnostics_1 = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_8__.ILogService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostFileSystemInfo)))
], ExtHostDiagnostics)));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDialogs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDialogs.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDialogs: () => (/* binding */ ExtHostDialogs)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");



class ExtHostDialogs {
    constructor(mainContext) {
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadDialogs));
    }
    showOpenDialog(extension, options) {
        if (options?.allowUIResources) {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_2__.checkProposedApiEnabled)(extension, 'showLocal');
        }
        return this._proxy.$showOpenDialog(options).then(filepaths => {
            return filepaths ? ( filepaths.map(p => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(p))) : undefined;
        });
    }
    showSaveDialog(options) {
        return this._proxy.$showSaveDialog(options).then(filepath => {
            return filepath ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(filepath) : undefined;
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentContentProviders.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentContentProviders.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDocumentContentProvider: () => (/* binding */ ExtHostDocumentContentProvider)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");







class ExtHostDocumentContentProvider {
    static { this._handlePool = 0; }
    constructor(mainContext, _documentsAndEditors, _logService) {
        this._documentsAndEditors = _documentsAndEditors;
        this._logService = _logService;
        this._documentContentProviders = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadDocumentContentProviders));
    }
    registerTextDocumentContentProvider(scheme, provider) {
        if (( Object.keys(_base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas)).indexOf(scheme) >= 0) {
            throw ( new Error(`scheme '${scheme}' already registered`));
        }
        const handle = ExtHostDocumentContentProvider._handlePool++;
        this._documentContentProviders.set(handle, provider);
        this._proxy.$registerTextContentProvider(handle, scheme);
        let subscription;
        if (typeof provider.onDidChange === 'function') {
            let lastEvent;
            subscription = provider.onDidChange(async (uri) => {
                if (uri.scheme !== scheme) {
                    this._logService.warn(`Provider for scheme '${scheme}' is firing event for schema '${uri.scheme}' which will be IGNORED`);
                    return;
                }
                if (!this._documentsAndEditors.getDocument(uri)) {
                    return;
                }
                if (lastEvent) {
                    await lastEvent;
                }
                const thisEvent = this.$provideTextDocumentContent(handle, uri)
                    .then(async (value) => {
                    if (!value && typeof value !== 'string') {
                        return;
                    }
                    const document = this._documentsAndEditors.getDocument(uri);
                    if (!document) {
                        return;
                    }
                    const lines = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_6__.splitLines)(value);
                    if (!document.equalLines(lines)) {
                        return this._proxy.$onVirtualDocumentChange(uri, value);
                    }
                })
                    .catch(_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)
                    .finally(() => {
                    if (lastEvent === thisEvent) {
                        lastEvent = undefined;
                    }
                });
                lastEvent = thisEvent;
            });
        }
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Disposable(() => {
            if (this._documentContentProviders.delete(handle)) {
                this._proxy.$unregisterTextContentProvider(handle);
            }
            if (subscription) {
                subscription.dispose();
                subscription = undefined;
            }
        }));
    }
    $provideTextDocumentContent(handle, uri) {
        const provider = this._documentContentProviders.get(handle);
        if (!provider) {
            return Promise.reject(( new Error(`unsupported uri-scheme: ${uri.scheme}`)));
        }
        return Promise.resolve(provider.provideTextDocumentContent(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uri), _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_5__.CancellationToken.None));
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentData.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentData.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDocumentData: () => (/* binding */ ExtHostDocumentData),
/* harmony export */   ExtHostDocumentLine: () => (/* binding */ ExtHostDocumentLine),
/* harmony export */   setWordDefinitionFor: () => (/* binding */ setWordDefinitionFor)
/* harmony export */ });
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/assert.js */ "./node_modules/vscode/vscode/src/vs/base/common/assert.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _editor_common_model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../editor/common/model/mirrorTextModel.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/mirrorTextModel.js");
/* harmony import */ var _editor_common_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../editor/common/core/wordHelper.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/wordHelper.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");







const _languageId2WordDefinition = ( new Map());
function setWordDefinitionFor(languageId, wordDefinition) {
    if (!wordDefinition) {
        _languageId2WordDefinition.delete(languageId);
    }
    else {
        _languageId2WordDefinition.set(languageId, wordDefinition);
    }
}
function getWordDefinitionFor(languageId) {
    return _languageId2WordDefinition.get(languageId);
}
class ExtHostDocumentData extends _editor_common_model_mirrorTextModel_js__WEBPACK_IMPORTED_MODULE_3__.MirrorTextModel {
    constructor(_proxy, uri, lines, eol, versionId, _languageId, _isDirty) {
        super(uri, lines, eol, versionId);
        this._proxy = _proxy;
        this._languageId = _languageId;
        this._isDirty = _isDirty;
        this._isDisposed = false;
    }
    dispose() {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._isDisposed);
        this._isDisposed = true;
        this._isDirty = false;
    }
    equalLines(lines) {
        return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_6__.equals)(this._lines, lines);
    }
    get document() {
        if (!this._document) {
            const that = this;
            this._document = {
                get uri() { return that._uri; },
                get fileName() { return that._uri.fsPath; },
                get isUntitled() { return that._uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.untitled; },
                get languageId() { return that._languageId; },
                get version() { return that._versionId; },
                get isClosed() { return that._isDisposed; },
                get isDirty() { return that._isDirty; },
                save() { return that._save(); },
                getText(range) { return range ? that._getTextInRange(range) : that.getText(); },
                get eol() { return that._eol === '\n' ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.EndOfLine.LF : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.EndOfLine.CRLF; },
                get lineCount() { return that._lines.length; },
                lineAt(lineOrPos) { return that._lineAt(lineOrPos); },
                offsetAt(pos) { return that._offsetAt(pos); },
                positionAt(offset) { return that._positionAt(offset); },
                validateRange(ran) { return that._validateRange(ran); },
                validatePosition(pos) { return that._validatePosition(pos); },
                getWordRangeAtPosition(pos, regexp) { return that._getWordRangeAtPosition(pos, regexp); },
            };
        }
        return ( Object.freeze(this._document));
    }
    _acceptLanguageId(newLanguageId) {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._isDisposed);
        this._languageId = newLanguageId;
    }
    _acceptIsDirty(isDirty) {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._isDisposed);
        this._isDirty = isDirty;
    }
    _save() {
        if (this._isDisposed) {
            return Promise.reject(( new Error('Document has been closed')));
        }
        return this._proxy.$trySaveDocument(this._uri);
    }
    _getTextInRange(_range) {
        const range = this._validateRange(_range);
        if (range.isEmpty) {
            return '';
        }
        if (range.isSingleLine) {
            return this._lines[range.start.line].substring(range.start.character, range.end.character);
        }
        const lineEnding = this._eol, startLineIndex = range.start.line, endLineIndex = range.end.line, resultLines = [];
        resultLines.push(this._lines[startLineIndex].substring(range.start.character));
        for (let i = startLineIndex + 1; i < endLineIndex; i++) {
            resultLines.push(this._lines[i]);
        }
        resultLines.push(this._lines[endLineIndex].substring(0, range.end.character));
        return resultLines.join(lineEnding);
    }
    _lineAt(lineOrPosition) {
        let line;
        if (lineOrPosition instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Position) {
            line = lineOrPosition.line;
        }
        else if (typeof lineOrPosition === 'number') {
            line = lineOrPosition;
        }
        if (typeof line !== 'number' || line < 0 || line >= this._lines.length || Math.floor(line) !== line) {
            throw ( new Error('Illegal value for `line`'));
        }
        return ( new ExtHostDocumentLine(line, this._lines[line], line === this._lines.length - 1));
    }
    _offsetAt(position) {
        position = this._validatePosition(position);
        this._ensureLineStarts();
        return this._lineStarts.getPrefixSum(position.line - 1) + position.character;
    }
    _positionAt(offset) {
        offset = Math.floor(offset);
        offset = Math.max(0, offset);
        this._ensureLineStarts();
        const out = this._lineStarts.getIndexOf(offset);
        const lineLength = this._lines[out.index].length;
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Position(out.index, Math.min(out.remainder, lineLength)));
    }
    _validateRange(range) {
        if (!(range instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Range)) {
            throw ( new Error('Invalid argument'));
        }
        const start = this._validatePosition(range.start);
        const end = this._validatePosition(range.end);
        if (start === range.start && end === range.end) {
            return range;
        }
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Range(start.line, start.character, end.line, end.character));
    }
    _validatePosition(position) {
        if (!(position instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Position)) {
            throw ( new Error('Invalid argument'));
        }
        if (this._lines.length === 0) {
            return position.with(0, 0);
        }
        let { line, character } = position;
        let hasChanged = false;
        if (line < 0) {
            line = 0;
            character = 0;
            hasChanged = true;
        }
        else if (line >= this._lines.length) {
            line = this._lines.length - 1;
            character = this._lines[line].length;
            hasChanged = true;
        }
        else {
            const maxCharacter = this._lines[line].length;
            if (character < 0) {
                character = 0;
                hasChanged = true;
            }
            else if (character > maxCharacter) {
                character = maxCharacter;
                hasChanged = true;
            }
        }
        if (!hasChanged) {
            return position;
        }
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Position(line, character));
    }
    _getWordRangeAtPosition(_position, regexp) {
        const position = this._validatePosition(_position);
        if (!regexp) {
            regexp = getWordDefinitionFor(this._languageId);
        }
        else if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.regExpLeadsToEndlessLoop)(regexp)) {
            throw ( new Error(
                `[getWordRangeAtPosition]: ignoring custom regexp '${regexp.source}' because it matches the empty string.`
            ));
        }
        const wordAtText = (0,_editor_common_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.getWordAtText)(position.character + 1, (0,_editor_common_core_wordHelper_js__WEBPACK_IMPORTED_MODULE_4__.ensureValidWordDefinition)(regexp), this._lines[position.line], 0);
        if (wordAtText) {
            return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Range(
                position.line,
                wordAtText.startColumn - 1,
                position.line,
                wordAtText.endColumn - 1
            ));
        }
        return undefined;
    }
}
class ExtHostDocumentLine {
    constructor(line, text, isLastLine) {
        this._line = line;
        this._text = text;
        this._isLastLine = isLastLine;
    }
    get lineNumber() {
        return this._line;
    }
    get text() {
        return this._text;
    }
    get range() {
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Range(this._line, 0, this._line, this._text.length));
    }
    get rangeIncludingLineBreak() {
        if (this._isLastLine) {
            return this.range;
        }
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Range(this._line, 0, this._line + 1, 0));
    }
    get firstNonWhitespaceCharacterIndex() {
        return /^(\s*)/.exec(this._text)[1].length;
    }
    get isEmptyOrWhitespace() {
        return this.firstNonWhitespaceCharacterIndex === this._text.length;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentSaveParticipant.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentSaveParticipant.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDocumentSaveParticipant: () => (/* binding */ ExtHostDocumentSaveParticipant)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/linkedList.js */ "./node_modules/vscode/vscode/src/vs/base/common/linkedList.js");
/* harmony import */ var _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/extensions/common/proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");






class ExtHostDocumentSaveParticipant {
    constructor(_logService, _documents, _mainThreadBulkEdits, _thresholds = { timeout: 1500, errors: 3 }) {
        this._logService = _logService;
        this._documents = _documents;
        this._mainThreadBulkEdits = _mainThreadBulkEdits;
        this._thresholds = _thresholds;
        this._callbacks = ( new _base_common_linkedList_js__WEBPACK_IMPORTED_MODULE_4__.LinkedList());
        this._badListeners = ( new WeakMap());
    }
    dispose() {
        this._callbacks.clear();
    }
    getOnWillSaveTextDocumentEvent(extension) {
        return (listener, thisArg, disposables) => {
            const remove = this._callbacks.push([listener, thisArg, extension]);
            const result = { dispose: remove };
            if (Array.isArray(disposables)) {
                disposables.push(result);
            }
            return result;
        };
    }
    async $participateInSave(data, reason) {
        const resource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(data);
        let didTimeout = false;
        const didTimeoutHandle = setTimeout(() => didTimeout = true, this._thresholds.timeout);
        const results = [];
        try {
            for (const listener of [...this._callbacks]) {
                if (didTimeout) {
                    break;
                }
                const document = this._documents.getDocument(resource);
                const success = await this._deliverEventAsyncAndBlameBadListeners(listener, { document, reason: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.TextDocumentSaveReason.to(reason) });
                results.push(success);
            }
        }
        finally {
            clearTimeout(didTimeoutHandle);
        }
        return results;
    }
    _deliverEventAsyncAndBlameBadListeners([listener, thisArg, extension], stubEvent) {
        const errors = this._badListeners.get(listener);
        if (typeof errors === 'number' && errors > this._thresholds.errors) {
            return Promise.resolve(false);
        }
        return this._deliverEventAsync(extension, listener, thisArg, stubEvent).then(() => {
            return true;
        }, err => {
            this._logService.error(`onWillSaveTextDocument-listener from extension '${extension.identifier.value}' threw ERROR`);
            this._logService.error(err);
            if (!(err instanceof Error) || err.message !== 'concurrent_edits') {
                const errors = this._badListeners.get(listener);
                this._badListeners.set(listener, !errors ? 1 : errors + 1);
                if (typeof errors === 'number' && errors > this._thresholds.errors) {
                    this._logService.info(`onWillSaveTextDocument-listener from extension '${extension.identifier.value}' will now be IGNORED because of timeouts and/or errors`);
                }
            }
            return false;
        });
    }
    _deliverEventAsync(extension, listener, thisArg, stubEvent) {
        const promises = [];
        const t1 = Date.now();
        const { document, reason } = stubEvent;
        const { version } = document;
        const event = ( Object.freeze({
            document,
            reason,
            waitUntil(p) {
                if (Object.isFrozen(promises)) {
                    throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.illegalState)('waitUntil can not be called async');
                }
                promises.push(Promise.resolve(p));
            }
        }));
        try {
            listener.apply(thisArg, [event]);
        }
        catch (err) {
            return Promise.reject(err);
        }
        return ( new Promise((resolve, reject) => {
            const handle = setTimeout(() => reject(( new Error('timeout'))), this._thresholds.timeout);
            return Promise.all(promises).then(edits => {
                this._logService.debug(`onWillSaveTextDocument-listener from extension '${extension.identifier.value}' finished after ${(Date.now() - t1)}ms`);
                clearTimeout(handle);
                resolve(edits);
            }).catch(err => {
                clearTimeout(handle);
                reject(err);
            });
        })).then(values => {
            const dto = { edits: [] };
            for (const value of values) {
                if (Array.isArray(value) && value.every(e => e instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.TextEdit)) {
                    for (const { newText, newEol, range } of value) {
                        dto.edits.push({
                            resource: document.uri,
                            versionId: undefined,
                            textEdit: {
                                range: range && _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from(range),
                                text: newText,
                                eol: newEol && _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLine.from(newEol),
                            }
                        });
                    }
                }
            }
            if (dto.edits.length === 0) {
                return undefined;
            }
            if (version === document.version) {
                return this._mainThreadBulkEdits.$tryApplyWorkspaceEdit(( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_5__.SerializableObjectWithBuffers(dto)));
            }
            return Promise.reject(( new Error('concurrent_edits')));
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocuments.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocuments.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDocuments: () => (/* binding */ ExtHostDocuments)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostDocumentData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostDocumentData.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentData.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");









class ExtHostDocuments {
    constructor(mainContext, documentsAndEditors) {
        this._onDidAddDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidRemoveDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidChangeDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidSaveDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidAddDocument = this._onDidAddDocument.event;
        this.onDidRemoveDocument = this._onDidRemoveDocument.event;
        this.onDidChangeDocument = this._onDidChangeDocument.event;
        this.onDidSaveDocument = this._onDidSaveDocument.event;
        this._toDispose = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
        this._documentLoader = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadDocuments));
        this._documentsAndEditors = documentsAndEditors;
        this._documentsAndEditors.onDidRemoveDocuments(documents => {
            for (const data of documents) {
                this._onDidRemoveDocument.fire(data.document);
            }
        }, undefined, this._toDispose);
        this._documentsAndEditors.onDidAddDocuments(documents => {
            for (const data of documents) {
                this._onDidAddDocument.fire(data.document);
            }
        }, undefined, this._toDispose);
    }
    dispose() {
        this._toDispose.dispose();
    }
    getAllDocumentData() {
        return [...this._documentsAndEditors.allDocuments()];
    }
    getDocumentData(resource) {
        if (!resource) {
            return undefined;
        }
        const data = this._documentsAndEditors.getDocument(resource);
        if (data) {
            return data;
        }
        return undefined;
    }
    getDocument(resource) {
        const data = this.getDocumentData(resource);
        if (!data?.document) {
            throw ( new Error(`Unable to retrieve document from URI '${resource}'`));
        }
        return data.document;
    }
    ensureDocumentData(uri) {
        const cached = this._documentsAndEditors.getDocument(uri);
        if (cached) {
            return Promise.resolve(cached);
        }
        let promise = this._documentLoader.get(( uri.toString()));
        if (!promise) {
            promise = this._proxy.$tryOpenDocument(uri).then(uriData => {
                this._documentLoader.delete(( uri.toString()));
                const canonicalUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(uriData);
                return (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_6__.assertIsDefined)(this._documentsAndEditors.getDocument(canonicalUri));
            }, err => {
                this._documentLoader.delete(( uri.toString()));
                return Promise.reject(err);
            });
            this._documentLoader.set(( uri.toString()), promise);
        }
        return promise;
    }
    createDocumentData(options) {
        return this._proxy.$tryCreateDocument(options).then(data => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(data));
    }
    $acceptModelLanguageChanged(uriComponents, newLanguageId) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(uriComponents);
        const data = this._documentsAndEditors.getDocument(uri);
        if (!data) {
            throw ( new Error('unknown document'));
        }
        this._onDidRemoveDocument.fire(data.document);
        data._acceptLanguageId(newLanguageId);
        this._onDidAddDocument.fire(data.document);
    }
    $acceptModelSaved(uriComponents) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(uriComponents);
        const data = this._documentsAndEditors.getDocument(uri);
        if (!data) {
            throw ( new Error('unknown document'));
        }
        this.$acceptDirtyStateChanged(uriComponents, false);
        this._onDidSaveDocument.fire(data.document);
    }
    $acceptDirtyStateChanged(uriComponents, isDirty) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(uriComponents);
        const data = this._documentsAndEditors.getDocument(uri);
        if (!data) {
            throw ( new Error('unknown document'));
        }
        data._acceptIsDirty(isDirty);
        this._onDidChangeDocument.fire({
            document: data.document,
            contentChanges: [],
            reason: undefined
        });
    }
    $acceptModelChanged(uriComponents, events, isDirty) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(uriComponents);
        const data = this._documentsAndEditors.getDocument(uri);
        if (!data) {
            throw ( new Error('unknown document'));
        }
        data._acceptIsDirty(isDirty);
        data.onEvents(events);
        let reason = undefined;
        if (events.isUndoing) {
            reason = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.TextDocumentChangeReason.Undo;
        }
        else if (events.isRedoing) {
            reason = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_8__.TextDocumentChangeReason.Redo;
        }
        this._onDidChangeDocument.fire((0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_7__.deepFreeze)({
            document: data.document,
            contentChanges: ( events.changes.map((change) => {
                return {
                    range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Range.to(change.range),
                    rangeOffset: change.rangeOffset,
                    rangeLength: change.rangeLength,
                    text: change.text
                };
            })),
            reason
        }));
    }
    setWordDefinitionFor(languageId, wordDefinition) {
        (0,_extHostDocumentData_js__WEBPACK_IMPORTED_MODULE_4__.setWordDefinitionFor)(languageId, wordDefinition);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentsAndEditors.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentsAndEditors.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostDocumentsAndEditors: () => (/* binding */ ExtHostDocumentsAndEditors),
/* harmony export */   IExtHostDocumentsAndEditors: () => (/* binding */ IExtHostDocumentsAndEditors)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/assert.js */ "./node_modules/vscode/vscode/src/vs/base/common/assert.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostDocumentData_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostDocumentData.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentData.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTextEditor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHostTextEditor.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTextEditor.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../base/common/iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");
/* harmony import */ var _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../base/common/lazy.js */ "./node_modules/vscode/vscode/src/vs/base/common/lazy.js");
















class Reference {
    constructor(value) {
        this.value = value;
        this._count = 0;
    }
    ref() {
        this._count++;
    }
    unref() {
        return --this._count === 0;
    }
}
let ExtHostDocumentsAndEditors = class ExtHostDocumentsAndEditors {
    constructor(_extHostRpc, _logService) {
        this._extHostRpc = _extHostRpc;
        this._logService = _logService;
        this._activeEditorId = null;
        this._editors = ( new Map());
        this._documents = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_12__.ResourceMap());
        this._onDidAddDocuments = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._onDidRemoveDocuments = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._onDidChangeVisibleTextEditors = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._onDidChangeActiveTextEditor = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidAddDocuments = this._onDidAddDocuments.event;
        this.onDidRemoveDocuments = this._onDidRemoveDocuments.event;
        this.onDidChangeVisibleTextEditors = this._onDidChangeVisibleTextEditors.event;
        this.onDidChangeActiveTextEditor = this._onDidChangeActiveTextEditor.event;
    }
    $acceptDocumentsAndEditorsDelta(delta) {
        this.acceptDocumentsAndEditorsDelta(delta);
    }
    acceptDocumentsAndEditorsDelta(delta) {
        const removedDocuments = [];
        const addedDocuments = [];
        const removedEditors = [];
        if (delta.removedDocuments) {
            for (const uriComponent of delta.removedDocuments) {
                const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(uriComponent);
                const data = this._documents.get(uri);
                if (data?.unref()) {
                    this._documents.delete(uri);
                    removedDocuments.push(data.value);
                }
            }
        }
        if (delta.addedDocuments) {
            for (const data of delta.addedDocuments) {
                const resource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(data.uri);
                let ref = this._documents.get(resource);
                if (ref) {
                    if (resource.scheme !== _base_common_network_js__WEBPACK_IMPORTED_MODULE_13__.Schemas.vscodeNotebookCell && resource.scheme !== _base_common_network_js__WEBPACK_IMPORTED_MODULE_13__.Schemas.vscodeInteractiveInput) {
                        throw ( new Error(`document '${resource} already exists!'`));
                    }
                }
                if (!ref) {
                    ref = ( new Reference(( new _extHostDocumentData_js__WEBPACK_IMPORTED_MODULE_7__.ExtHostDocumentData(( this._extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.MainContext.MainThreadDocuments)), resource, data.lines, data.EOL, data.versionId, data.languageId, data.isDirty))));
                    this._documents.set(resource, ref);
                    addedDocuments.push(ref.value);
                }
                ref.ref();
            }
        }
        if (delta.removedEditors) {
            for (const id of delta.removedEditors) {
                const editor = this._editors.get(id);
                this._editors.delete(id);
                if (editor) {
                    removedEditors.push(editor);
                }
            }
        }
        if (delta.addedEditors) {
            for (const data of delta.addedEditors) {
                const resource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(data.documentUri);
                (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.ok)(( this._documents.has(resource)), `document '${resource}' does not exist`);
                (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.ok)(!( this._editors.has(data.id)), `editor '${data.id}' already exists!`);
                const documentData = this._documents.get(resource).value;
                const editor = ( new _extHostTextEditor_js__WEBPACK_IMPORTED_MODULE_9__.ExtHostTextEditor(data.id, ( this._extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.MainContext.MainThreadTextEditors)), this._logService, ( new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_15__.Lazy(() => documentData.document)), ( data.selections.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.Selection.to)), data.options, ( data.visibleRanges.map(range => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.Range.to(range))), typeof data.editorPosition === 'number' ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.ViewColumn.to(data.editorPosition) : undefined));
                this._editors.set(data.id, editor);
            }
        }
        if (delta.newActiveEditor !== undefined) {
            (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_1__.ok)(delta.newActiveEditor === null || ( this._editors.has(delta.newActiveEditor)), `active editor '${delta.newActiveEditor}' does not exist`);
            this._activeEditorId = delta.newActiveEditor;
        }
        (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.dispose)(removedDocuments);
        (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.dispose)(removedEditors);
        if (delta.removedDocuments) {
            this._onDidRemoveDocuments.fire(removedDocuments);
        }
        if (delta.addedDocuments) {
            this._onDidAddDocuments.fire(addedDocuments);
        }
        if (delta.removedEditors || delta.addedEditors) {
            this._onDidChangeVisibleTextEditors.fire(( this.allEditors().map(editor => editor.value)));
        }
        if (delta.newActiveEditor !== undefined) {
            this._onDidChangeActiveTextEditor.fire(this.activeEditor());
        }
    }
    getDocument(uri) {
        return this._documents.get(uri)?.value;
    }
    allDocuments() {
        return ( _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_14__.Iterable.map(( this._documents.values()), ref => ref.value));
    }
    getEditor(id) {
        return this._editors.get(id);
    }
    activeEditor(internal) {
        if (!this._activeEditorId) {
            return undefined;
        }
        const editor = this._editors.get(this._activeEditorId);
        if (internal) {
            return editor;
        }
        else {
            return editor?.value;
        }
    }
    allEditors() {
        return [...( this._editors.values())];
    }
};
ExtHostDocumentsAndEditors = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_11__.ILogService))
], ExtHostDocumentsAndEditors));
const IExtHostDocumentsAndEditors = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__.createDecorator)('IExtHostDocumentsAndEditors'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEditorTabs.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEditorTabs.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostEditorTabs: () => (/* binding */ ExtHostEditorTabs),
/* harmony export */   IExtHostEditorTabs: () => (/* binding */ IExtHostEditorTabs)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_collections_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/collections.js */ "./node_modules/vscode/vscode/src/vs/base/common/collections.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");










const IExtHostEditorTabs = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__.createDecorator)('IExtHostEditorTabs'));
class ExtHostEditorTab {
    constructor(dto, parentGroup, activeTabIdGetter) {
        this._activeTabIdGetter = activeTabIdGetter;
        this._parentGroup = parentGroup;
        this.acceptDtoUpdate(dto);
    }
    get apiObject() {
        if (!this._apiObject) {
            const that = this;
            const obj = {
                get isActive() {
                    return that._dto.id === that._activeTabIdGetter();
                },
                get label() {
                    return that._dto.label;
                },
                get input() {
                    return that._input;
                },
                get isDirty() {
                    return that._dto.isDirty;
                },
                get isPinned() {
                    return that._dto.isPinned;
                },
                get isPreview() {
                    return that._dto.isPreview;
                },
                get group() {
                    return that._parentGroup.apiObject;
                }
            };
            this._apiObject = ( Object.freeze(obj));
        }
        return this._apiObject;
    }
    get tabId() {
        return this._dto.id;
    }
    acceptDtoUpdate(dto) {
        this._dto = dto;
        this._input = this._initInput();
    }
    _initInput() {
        switch (this._dto.input.kind) {
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.TextInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TextTabInput(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.uri)));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.TextDiffInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TextDiffTabInput(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.original), _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.modified)));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.TextMergeInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TextMergeTabInput(
                    _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.base),
                    _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.input1),
                    _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.input2),
                    _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.result)
                ));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.CustomEditorInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.CustomEditorTabInput(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.uri), this._dto.input.viewType));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.WebviewEditorInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.WebviewEditorTabInput(this._dto.input.viewType));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.NotebookInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.NotebookEditorTabInput(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.uri), this._dto.input.notebookType));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.NotebookDiffInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.NotebookDiffEditorTabInput(
                    _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.original),
                    _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.modified),
                    this._dto.input.notebookType
                ));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.TerminalEditorInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TerminalEditorTabInput());
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.InteractiveEditorInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.InteractiveWindowInput(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.uri), _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(this._dto.input.inputBoxUri)));
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.ChatEditorInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.ChatEditorTabInput());
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabInputKind.MultiDiffEditorInput:
                return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TextMultiDiffTabInput(( this._dto.input.diffEditors.map(diff => ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TextDiffTabInput(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(diff.original), _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(diff.modified)))))));
            default:
                return undefined;
        }
    }
}
class ExtHostEditorTabGroup {
    constructor(dto, activeGroupIdGetter) {
        this._tabs = [];
        this._activeTabId = '';
        this._dto = dto;
        this._activeGroupIdGetter = activeGroupIdGetter;
        for (const tabDto of dto.tabs) {
            if (tabDto.isActive) {
                this._activeTabId = tabDto.id;
            }
            this._tabs.push(( new ExtHostEditorTab(tabDto, this, () => this.activeTabId())));
        }
    }
    get apiObject() {
        if (!this._apiObject) {
            const that = this;
            const obj = {
                get isActive() {
                    return that._dto.groupId === that._activeGroupIdGetter();
                },
                get viewColumn() {
                    return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_8__.ViewColumn.to(that._dto.viewColumn);
                },
                get activeTab() {
                    return that._tabs.find(tab => tab.tabId === that._activeTabId)?.apiObject;
                },
                get tabs() {
                    return ( Object.freeze(( that._tabs.map(tab => tab.apiObject))));
                }
            };
            this._apiObject = ( Object.freeze(obj));
        }
        return this._apiObject;
    }
    get groupId() {
        return this._dto.groupId;
    }
    get tabs() {
        return this._tabs;
    }
    acceptGroupDtoUpdate(dto) {
        this._dto = dto;
    }
    acceptTabOperation(operation) {
        if (operation.kind === _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabModelOperationKind.TAB_OPEN) {
            const tab = ( new ExtHostEditorTab(operation.tabDto, this, () => this.activeTabId()));
            this._tabs.splice(operation.index, 0, tab);
            if (operation.tabDto.isActive) {
                this._activeTabId = tab.tabId;
            }
            return tab;
        }
        else if (operation.kind === _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabModelOperationKind.TAB_CLOSE) {
            const tab = this._tabs.splice(operation.index, 1)[0];
            if (!tab) {
                throw ( new Error(
                    `Tab close updated received for index ${operation.index} which does not exist`
                ));
            }
            if (tab.tabId === this._activeTabId) {
                this._activeTabId = '';
            }
            return tab;
        }
        else if (operation.kind === _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabModelOperationKind.TAB_MOVE) {
            if (operation.oldIndex === undefined) {
                throw ( new Error('Invalid old index on move IPC'));
            }
            const tab = this._tabs.splice(operation.oldIndex, 1)[0];
            if (!tab) {
                throw ( new Error(
                    `Tab move updated received for index ${operation.oldIndex} which does not exist`
                ));
            }
            this._tabs.splice(operation.index, 0, tab);
            return tab;
        }
        const tab = this._tabs.find(extHostTab => extHostTab.tabId === operation.tabDto.id);
        if (!tab) {
            throw ( new Error('INVALID tab'));
        }
        if (operation.tabDto.isActive) {
            this._activeTabId = operation.tabDto.id;
        }
        else if (this._activeTabId === operation.tabDto.id && !operation.tabDto.isActive) {
            this._activeTabId = '';
        }
        tab.acceptDtoUpdate(operation.tabDto);
        return tab;
    }
    activeTabId() {
        return this._activeTabId;
    }
}
let ExtHostEditorTabs = class ExtHostEditorTabs {
    constructor(extHostRpc) {
        this._onDidChangeTabs = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._onDidChangeTabGroups = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._extHostTabGroups = [];
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.MainContext.MainThreadEditorTabs));
    }
    get tabGroups() {
        if (!this._apiObject) {
            const that = this;
            const obj = {
                onDidChangeTabGroups: that._onDidChangeTabGroups.event,
                onDidChangeTabs: that._onDidChangeTabs.event,
                get all() {
                    return ( Object.freeze(( that._extHostTabGroups.map(group => group.apiObject))));
                },
                get activeTabGroup() {
                    const activeTabGroupId = that._activeGroupId;
                    const activeTabGroup = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_3__.assertIsDefined)(that._extHostTabGroups.find(candidate => candidate.groupId === activeTabGroupId)?.apiObject);
                    return activeTabGroup;
                },
                close: async (tabOrTabGroup, preserveFocus) => {
                    const tabsOrTabGroups = Array.isArray(tabOrTabGroup) ? tabOrTabGroup : [tabOrTabGroup];
                    if (!tabsOrTabGroups.length) {
                        return true;
                    }
                    if (isTabGroup(tabsOrTabGroups[0])) {
                        return this._closeGroups(tabsOrTabGroups, preserveFocus);
                    }
                    else {
                        return this._closeTabs(tabsOrTabGroups, preserveFocus);
                    }
                },
            };
            this._apiObject = ( Object.freeze(obj));
        }
        return this._apiObject;
    }
    $acceptEditorTabModel(tabGroups) {
        const groupIdsBefore = ( new Set(( this._extHostTabGroups.map(group => group.groupId))));
        const groupIdsAfter = ( new Set(( tabGroups.map(dto => dto.groupId))));
        const diff = (0,_base_common_collections_js__WEBPACK_IMPORTED_MODULE_1__.diffSets)(groupIdsBefore, groupIdsAfter);
        const closed = ( this._extHostTabGroups.filter(group => diff.removed.includes(group.groupId)).map(group => group.apiObject));
        const opened = [];
        const changed = [];
        this._extHostTabGroups = ( tabGroups.map(tabGroup => {
            const group = ( new ExtHostEditorTabGroup(tabGroup, () => this._activeGroupId));
            if (diff.added.includes(group.groupId)) {
                opened.push(group.apiObject);
            }
            else {
                changed.push(group.apiObject);
            }
            return group;
        }));
        const activeTabGroupId = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_3__.assertIsDefined)(tabGroups.find(group => group.isActive === true)?.groupId);
        if (activeTabGroupId !== undefined && this._activeGroupId !== activeTabGroupId) {
            this._activeGroupId = activeTabGroupId;
        }
        this._onDidChangeTabGroups.fire(( Object.freeze({ opened, closed, changed })));
    }
    $acceptTabGroupUpdate(groupDto) {
        const group = this._extHostTabGroups.find(group => group.groupId === groupDto.groupId);
        if (!group) {
            throw ( new Error('Update Group IPC call received before group creation.'));
        }
        group.acceptGroupDtoUpdate(groupDto);
        if (groupDto.isActive) {
            this._activeGroupId = groupDto.groupId;
        }
        this._onDidChangeTabGroups.fire(( Object.freeze({ changed: [group.apiObject], opened: [], closed: [] })));
    }
    $acceptTabOperation(operation) {
        const group = this._extHostTabGroups.find(group => group.groupId === operation.groupId);
        if (!group) {
            throw ( new Error('Update Tabs IPC call received before group creation.'));
        }
        const tab = group.acceptTabOperation(operation);
        switch (operation.kind) {
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabModelOperationKind.TAB_OPEN:
                this._onDidChangeTabs.fire(( Object.freeze({
                    opened: [tab.apiObject],
                    closed: [],
                    changed: []
                })));
                return;
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabModelOperationKind.TAB_CLOSE:
                this._onDidChangeTabs.fire(( Object.freeze({
                    opened: [],
                    closed: [tab.apiObject],
                    changed: []
                })));
                return;
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabModelOperationKind.TAB_MOVE:
            case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.TabModelOperationKind.TAB_UPDATE:
                this._onDidChangeTabs.fire(( Object.freeze({
                    opened: [],
                    closed: [],
                    changed: [tab.apiObject]
                })));
                return;
        }
    }
    _findExtHostTabFromApi(apiTab) {
        for (const group of this._extHostTabGroups) {
            for (const tab of group.tabs) {
                if (tab.apiObject === apiTab) {
                    return tab;
                }
            }
        }
        return;
    }
    _findExtHostTabGroupFromApi(apiTabGroup) {
        return this._extHostTabGroups.find(candidate => candidate.apiObject === apiTabGroup);
    }
    async _closeTabs(tabs, preserveFocus) {
        const extHostTabIds = [];
        for (const tab of tabs) {
            const extHostTab = this._findExtHostTabFromApi(tab);
            if (!extHostTab) {
                throw ( new Error('Tab close: Invalid tab not found!'));
            }
            extHostTabIds.push(extHostTab.tabId);
        }
        return this._proxy.$closeTab(extHostTabIds, preserveFocus);
    }
    async _closeGroups(groups, preserverFoucs) {
        const extHostGroupIds = [];
        for (const group of groups) {
            const extHostGroup = this._findExtHostTabGroupFromApi(group);
            if (!extHostGroup) {
                throw ( new Error('Group close: Invalid group not found!'));
            }
            extHostGroupIds.push(extHostGroup.groupId);
        }
        return this._proxy.$closeGroup(extHostGroupIds, preserverFoucs);
    }
};
ExtHostEditorTabs = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostRpcService))
], ExtHostEditorTabs));
function isTabGroup(obj) {
    const tabGroup = obj;
    if (tabGroup.tabs !== undefined) {
        return true;
    }
    return false;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEmbedding.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEmbedding.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostEmbeddings: () => (/* binding */ ExtHostEmbeddings)
/* harmony export */ });
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");




class ExtHostEmbeddings {
    constructor(mainContext) {
        this._provider = ( new Map());
        this._onDidChange = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChange = this._onDidChange.event;
        this._allKnownModels = ( new Set());
        this._handlePool = 0;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadEmbeddings));
    }
    registerEmbeddingsProvider(_extension, embeddingsModel, provider) {
        if (( this._allKnownModels.has(embeddingsModel))) {
            throw ( new Error('An embeddings provider for this model is already registered'));
        }
        const handle = this._handlePool++;
        this._proxy.$registerEmbeddingProvider(handle, embeddingsModel);
        this._provider.set(handle, { id: embeddingsModel, provider });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {
            this._proxy.$unregisterEmbeddingProvider(handle);
            this._provider.delete(handle);
        });
    }
    async computeEmbeddings(embeddingsModel, input, token) {
        token ??= _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None;
        let returnSingle = false;
        if (typeof input === 'string') {
            input = [input];
            returnSingle = true;
        }
        const result = await this._proxy.$computeEmbeddings(embeddingsModel, input, token);
        if (result.length !== input.length) {
            throw ( new Error());
        }
        if (returnSingle) {
            if (result.length !== 1) {
                throw ( new Error());
            }
            return result[0];
        }
        return result;
    }
    async $provideEmbeddings(handle, input, token) {
        const data = this._provider.get(handle);
        if (!data) {
            return [];
        }
        const result = await data.provider.provideEmbeddings(input, token);
        if (!result) {
            return [];
        }
        return result;
    }
    get embeddingsModels() {
        return Array.from(this._allKnownModels);
    }
    $acceptEmbeddingModels(models) {
        this._allKnownModels = ( new Set(models));
        this._onDidChange.fire();
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEmbeddingVector.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEmbeddingVector.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostAiEmbeddingVector: () => (/* binding */ ExtHostAiEmbeddingVector)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");


class ExtHostAiEmbeddingVector {
    constructor(mainContext) {
        this._AiEmbeddingVectorProviders = ( new Map());
        this._nextHandle = 0;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadAiEmbeddingVector));
    }
    async $provideAiEmbeddingVector(handle, strings, token) {
        if (this._AiEmbeddingVectorProviders.size === 0) {
            throw ( new Error('No embedding vector providers registered'));
        }
        const provider = this._AiEmbeddingVectorProviders.get(handle);
        if (!provider) {
            throw ( new Error('Embedding vector provider not found'));
        }
        const result = await provider.provideEmbeddingVector(strings, token);
        if (!result) {
            throw ( new Error('Embedding vector provider returned undefined'));
        }
        return result;
    }
    registerEmbeddingVectorProvider(extension, model, provider) {
        const handle = this._nextHandle;
        this._nextHandle++;
        this._AiEmbeddingVectorProviders.set(handle, provider);
        this._proxy.$registerAiEmbeddingVectorProvider(model, handle);
        return ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.Disposable(() => {
            this._proxy.$unregisterAiEmbeddingVectorProvider(handle);
            this._AiEmbeddingVectorProviders.delete(handle);
        }));
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionActivator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionActivator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActivatedExtension: () => (/* binding */ ActivatedExtension),
/* harmony export */   EmptyExtension: () => (/* binding */ EmptyExtension),
/* harmony export */   ExtensionActivationTimes: () => (/* binding */ ExtensionActivationTimes),
/* harmony export */   ExtensionActivationTimesBuilder: () => (/* binding */ ExtensionActivationTimesBuilder),
/* harmony export */   ExtensionsActivator: () => (/* binding */ ExtensionsActivator),
/* harmony export */   HostExtension: () => (/* binding */ HostExtension)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _services_extensions_common_extensionDescriptionRegistry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/extensions/common/extensionDescriptionRegistry.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionDescriptionRegistry.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");







class ExtensionActivationTimes {
    static { this.NONE = ( new ExtensionActivationTimes(false, -1, -1, -1)); }
    constructor(startup, codeLoadingTime, activateCallTime, activateResolvedTime) {
        this.startup = startup;
        this.codeLoadingTime = codeLoadingTime;
        this.activateCallTime = activateCallTime;
        this.activateResolvedTime = activateResolvedTime;
    }
}
class ExtensionActivationTimesBuilder {
    constructor(startup) {
        this._startup = startup;
        this._codeLoadingStart = -1;
        this._codeLoadingStop = -1;
        this._activateCallStart = -1;
        this._activateCallStop = -1;
        this._activateResolveStart = -1;
        this._activateResolveStop = -1;
    }
    _delta(start, stop) {
        if (start === -1 || stop === -1) {
            return -1;
        }
        return stop - start;
    }
    build() {
        return ( new ExtensionActivationTimes(
            this._startup,
            this._delta(this._codeLoadingStart, this._codeLoadingStop),
            this._delta(this._activateCallStart, this._activateCallStop),
            this._delta(this._activateResolveStart, this._activateResolveStop)
        ));
    }
    codeLoadingStart() {
        this._codeLoadingStart = Date.now();
    }
    codeLoadingStop() {
        this._codeLoadingStop = Date.now();
    }
    activateCallStart() {
        this._activateCallStart = Date.now();
    }
    activateCallStop() {
        this._activateCallStop = Date.now();
    }
    activateResolveStart() {
        this._activateResolveStart = Date.now();
    }
    activateResolveStop() {
        this._activateResolveStop = Date.now();
    }
}
class ActivatedExtension {
    constructor(activationFailed, activationFailedError, activationTimes, module, exports, subscriptions) {
        this.activationFailed = activationFailed;
        this.activationFailedError = activationFailedError;
        this.activationTimes = activationTimes;
        this.module = module;
        this.exports = exports;
        this.subscriptions = subscriptions;
    }
}
class EmptyExtension extends ActivatedExtension {
    constructor(activationTimes) {
        super(false, null, activationTimes, { activate: undefined, deactivate: undefined }, undefined, []);
    }
}
class HostExtension extends ActivatedExtension {
    constructor() {
        super(false, null, ExtensionActivationTimes.NONE, { activate: undefined, deactivate: undefined }, undefined, []);
    }
}
class FailedExtension extends ActivatedExtension {
    constructor(activationError) {
        super(true, activationError, ExtensionActivationTimes.NONE, { activate: undefined, deactivate: undefined }, undefined, []);
    }
}
let ExtensionsActivator = class ExtensionsActivator {
    constructor(registry, globalRegistry, host, _logService) {
        this._logService = _logService;
        this._registry = registry;
        this._globalRegistry = globalRegistry;
        this._host = host;
        this._operations = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_3__.ExtensionIdentifierMap());
        this._alreadyActivatedEvents = Object.create(null);
    }
    dispose() {
        for (const [_, op] of this._operations) {
            op.dispose();
        }
    }
    async waitForActivatingExtensions() {
        const res = [];
        for (const [_, op] of this._operations) {
            res.push(op.wait());
        }
        await Promise.all(res);
    }
    isActivated(extensionId) {
        const op = this._operations.get(extensionId);
        return Boolean(op && op.value);
    }
    getActivatedExtension(extensionId) {
        const op = this._operations.get(extensionId);
        if (!op || !op.value) {
            throw ( new Error(`Extension '${extensionId.value}' is not known or not activated`));
        }
        return op.value;
    }
    async activateByEvent(activationEvent, startup) {
        if (this._alreadyActivatedEvents[activationEvent]) {
            return;
        }
        const activateExtensions = this._registry.getExtensionDescriptionsForActivationEvent(activationEvent);
        await this._activateExtensions(( activateExtensions.map(e => ({
            id: e.identifier,
            reason: { startup, extensionId: e.identifier, activationEvent }
        }))));
        this._alreadyActivatedEvents[activationEvent] = true;
    }
    activateById(extensionId, reason) {
        const desc = this._registry.getExtensionDescription(extensionId);
        if (!desc) {
            throw ( new Error(`Extension '${extensionId.value}' is not known`));
        }
        return this._activateExtensions([{ id: desc.identifier, reason }]);
    }
    async _activateExtensions(extensions) {
        const operations = ( extensions
            .filter((p) => !this.isActivated(p.id))
            .map(ext => this._handleActivationRequest(ext)));
        await Promise.all(( operations.map(op => op.wait())));
    }
    _handleActivationRequest(currentActivation) {
        if (( this._operations.has(currentActivation.id))) {
            return this._operations.get(currentActivation.id);
        }
        if (this._isHostExtension(currentActivation.id)) {
            return this._createAndSaveOperation(currentActivation, null, [], null);
        }
        const currentExtension = this._registry.getExtensionDescription(currentActivation.id);
        if (!currentExtension) {
            const error = ( new Error(`Cannot activate unknown extension '${currentActivation.id.value}'`));
            const result = this._createAndSaveOperation(currentActivation, null, [], ( new FailedExtension(error)));
            this._host.onExtensionActivationError(currentActivation.id, error, ( new _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.MissingExtensionDependency(currentActivation.id.value)));
            return result;
        }
        const deps = [];
        const depIds = (typeof currentExtension.extensionDependencies === 'undefined' ? [] : currentExtension.extensionDependencies);
        for (const depId of depIds) {
            if (this._isResolvedExtension(depId)) {
                continue;
            }
            const dep = this._operations.get(depId);
            if (dep) {
                deps.push(dep);
                continue;
            }
            if (this._isHostExtension(depId)) {
                deps.push(this._handleActivationRequest({
                    id: this._globalRegistry.getExtensionDescription(depId).identifier,
                    reason: currentActivation.reason
                }));
                continue;
            }
            const depDesc = this._registry.getExtensionDescription(depId);
            if (depDesc) {
                if (!depDesc.main && !depDesc.browser) {
                    continue;
                }
                deps.push(this._handleActivationRequest({
                    id: depDesc.identifier,
                    reason: currentActivation.reason
                }));
                continue;
            }
            const currentExtensionFriendlyName = currentExtension.displayName || currentExtension.identifier.value;
            const error = ( new Error(
                `Cannot activate the '${currentExtensionFriendlyName}' extension because it depends on unknown extension '${depId}'`
            ));
            const result = this._createAndSaveOperation(currentActivation, currentExtension.displayName, [], ( new FailedExtension(error)));
            this._host.onExtensionActivationError(currentExtension.identifier, error, ( new _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.MissingExtensionDependency(depId)));
            return result;
        }
        return this._createAndSaveOperation(currentActivation, currentExtension.displayName, deps, null);
    }
    _createAndSaveOperation(activation, displayName, deps, value) {
        const operation = ( new ActivationOperation(
            activation.id,
            displayName,
            activation.reason,
            deps,
            value,
            this._host,
            this._logService
        ));
        this._operations.set(activation.id, operation);
        return operation;
    }
    _isHostExtension(extensionId) {
        return _services_extensions_common_extensionDescriptionRegistry_js__WEBPACK_IMPORTED_MODULE_2__.ExtensionDescriptionRegistry.isHostExtension(extensionId, this._registry, this._globalRegistry);
    }
    _isResolvedExtension(extensionId) {
        const extensionDescription = this._globalRegistry.getExtensionDescription(extensionId);
        if (!extensionDescription) {
            return false;
        }
        return (!extensionDescription.main && !extensionDescription.browser);
    }
};
ExtensionsActivator = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILogService))
], ExtensionsActivator));
let ActivationOperation = class ActivationOperation {
    get value() {
        return this._value;
    }
    get friendlyName() {
        return this._displayName || this._id.value;
    }
    constructor(_id, _displayName, _reason, _deps, _value, _host, _logService) {
        this._id = _id;
        this._displayName = _displayName;
        this._reason = _reason;
        this._deps = _deps;
        this._value = _value;
        this._host = _host;
        this._logService = _logService;
        this._barrier = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_6__.Barrier());
        this._isDisposed = false;
        this._initialize();
    }
    dispose() {
        this._isDisposed = true;
    }
    wait() {
        return this._barrier.wait();
    }
    async _initialize() {
        await this._waitForDepsThenActivate();
        this._barrier.open();
    }
    async _waitForDepsThenActivate() {
        if (this._value) {
            return;
        }
        while (this._deps.length > 0) {
            for (let i = 0; i < this._deps.length; i++) {
                const dep = this._deps[i];
                if (dep.value && !dep.value.activationFailed) {
                    this._deps.splice(i, 1);
                    i--;
                    continue;
                }
                if (dep.value && dep.value.activationFailed) {
                    const error = ( new Error(
                        `Cannot activate the '${this.friendlyName}' extension because its dependency '${dep.friendlyName}' failed to activate`
                    ));
                    error.detail = dep.value.activationFailedError;
                    this._value = ( new FailedExtension(error));
                    this._host.onExtensionActivationError(this._id, error, null);
                    return;
                }
            }
            if (this._deps.length > 0) {
                await Promise.race(( this._deps.map(dep => dep.wait())));
            }
        }
        await this._activate();
    }
    async _activate() {
        try {
            this._value = await this._host.actualActivateExtension(this._id, this._reason);
        }
        catch (err) {
            const error = ( new Error());
            if (err && err.name) {
                error.name = err.name;
            }
            if (err && err.message) {
                error.message = `Activating extension '${this._id.value}' failed: ${err.message}.`;
            }
            else {
                error.message = `Activating extension '${this._id.value}' failed: ${err}.`;
            }
            if (err && err.stack) {
                error.stack = err.stack;
            }
            this._value = ( new FailedExtension(error));
            if (this._isDisposed && (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.isCancellationError)(err)) {
                return;
            }
            this._host.onExtensionActivationError(this._id, error, null);
            this._logService.error(`Activating extension ${this._id.value} failed due to an error:`);
            this._logService.error(err);
        }
    }
};
ActivationOperation = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILogService))
], ActivationOperation));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractExtHostExtensionService: () => (/* binding */ AbstractExtHostExtensionService),
/* harmony export */   Extension: () => (/* binding */ Extension),
/* harmony export */   ExtensionPaths: () => (/* binding */ ExtensionPaths),
/* harmony export */   IExtHostExtensionService: () => (/* binding */ IExtHostExtensionService),
/* harmony export */   IHostUtils: () => (/* binding */ IHostUtils)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/performance.js */ "./node_modules/vscode/vscode/src/vs/base/common/performance.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/ternarySearchTree.js */ "./node_modules/vscode/vscode/src/vs/base/common/ternarySearchTree.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostConfiguration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js");
/* harmony import */ var _extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostExtensionActivator.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionActivator.js");
/* harmony import */ var _extHostStorage_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHostStorage.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStorage.js");
/* harmony import */ var _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./extHostWorkspace.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _services_extensions_common_extensionDescriptionRegistry_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../services/extensions/common/extensionDescriptionRegistry.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionDescriptionRegistry.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _extHostMemento_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./extHostMemento.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostMemento.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../../platform/remote/common/remoteAuthorityResolver.js */ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteAuthorityResolver.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostStoragePaths_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./extHostStoragePaths.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStoragePaths.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _platform_instantiation_common_serviceCollection_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../platform/instantiation/common/serviceCollection.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/serviceCollection.js");
/* harmony import */ var _extHostTunnelService_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./extHostTunnelService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTunnelService.js");
/* harmony import */ var _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./extHostTerminalService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalService.js");
/* harmony import */ var _extHostLanguageModels_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./extHostLanguageModels.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModels.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _services_extensions_common_workspaceContains_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../../services/extensions/common/workspaceContains.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/workspaceContains.js");
/* harmony import */ var _extHostSecretState_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./extHostSecretState.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecretState.js");
/* harmony import */ var _extHostSecrets_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./extHostSecrets.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecrets.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _extHostLocalizationService_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./extHostLocalizationService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLocalizationService.js");
/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ "./node_modules/vscode/vscode/src/vs/base/common/stopwatch.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _extHostManagedSockets_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./extHostManagedSockets.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostManagedSockets.js");








































var AbstractExtHostExtensionService_1;
const _moduleId = "vs/workbench/api/common/extHostExtensionService";
const IHostUtils = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_23__.createDecorator)('IHostUtils'));
let AbstractExtHostExtensionService = AbstractExtHostExtensionService_1 = class AbstractExtHostExtensionService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.Disposable {
    constructor(instaService, hostUtils, extHostContext, extHostWorkspace, extHostConfiguration, logService, initData, storagePath, extHostTunnelService, extHostTerminalService, extHostLocalizationService, _extHostManagedSockets, _extHostLanguageModels) {
        super();
        this._extHostManagedSockets = _extHostManagedSockets;
        this._extHostLanguageModels = _extHostLanguageModels;
        this._onDidChangeRemoteConnectionData = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_31__.Emitter()));
        this.onDidChangeRemoteConnectionData = this._onDidChangeRemoteConnectionData.event;
        this._realPathCache = ( new Map());
        this._isTerminating = false;
        this._hostUtils = hostUtils;
        this._extHostContext = extHostContext;
        this._initData = initData;
        this._extHostWorkspace = extHostWorkspace;
        this._extHostConfiguration = extHostConfiguration;
        this._logService = logService;
        this._extHostTunnelService = extHostTunnelService;
        this._extHostTerminalService = extHostTerminalService;
        this._extHostLocalizationService = extHostLocalizationService;
        this._mainThreadWorkspaceProxy = ( this._extHostContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__.MainContext.MainThreadWorkspace));
        this._mainThreadTelemetryProxy = ( this._extHostContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__.MainContext.MainThreadTelemetry));
        this._mainThreadExtensionsProxy = ( this._extHostContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__.MainContext.MainThreadExtensionService));
        this._almostReadyToRunExtensions = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.Barrier());
        this._readyToStartExtensionHost = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.Barrier());
        this._readyToRunExtensions = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.Barrier());
        this._eagerExtensionsActivated = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.Barrier());
        this._activationEventsReader = ( new SyncedActivationEventsReader(this._initData.extensions.activationEvents));
        this._globalRegistry = ( new _services_extensions_common_extensionDescriptionRegistry_js__WEBPACK_IMPORTED_MODULE_16__.ExtensionDescriptionRegistry(this._activationEventsReader, this._initData.extensions.allExtensions));
        const myExtensionsSet = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_18__.ExtensionIdentifierSet(this._initData.extensions.myExtensions));
        this._myRegistry = ( new _services_extensions_common_extensionDescriptionRegistry_js__WEBPACK_IMPORTED_MODULE_16__.ExtensionDescriptionRegistry(
            this._activationEventsReader,
            filterExtensions(this._globalRegistry, myExtensionsSet)
        ));
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isCI) {
            this._logService.info(`Creating extension host with the following global extensions: ${printExtIds(this._globalRegistry)}`);
            this._logService.info(`Creating extension host with the following local extensions: ${printExtIds(this._myRegistry)}`);
        }
        this._storage = ( new _extHostStorage_js__WEBPACK_IMPORTED_MODULE_13__.ExtHostStorage(this._extHostContext, this._logService));
        this._secretState = ( new _extHostSecretState_js__WEBPACK_IMPORTED_MODULE_33__.ExtHostSecretState(this._extHostContext));
        this._storagePath = storagePath;
        this._instaService = instaService.createChild(( new _platform_instantiation_common_serviceCollection_js__WEBPACK_IMPORTED_MODULE_27__.ServiceCollection([_extHostStorage_js__WEBPACK_IMPORTED_MODULE_13__.IExtHostStorage, this._storage], [_extHostSecretState_js__WEBPACK_IMPORTED_MODULE_33__.IExtHostSecretState, this._secretState])));
        this._activator = this._register(( new _extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__.ExtensionsActivator(this._myRegistry, this._globalRegistry, {
            onExtensionActivationError: (extensionId, error, missingExtensionDependency) => {
                this._mainThreadExtensionsProxy.$onExtensionActivationError(extensionId, (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_17__.transformErrorForSerialization)(error), missingExtensionDependency);
            },
            actualActivateExtension: async (extensionId, reason) => {
                if (_services_extensions_common_extensionDescriptionRegistry_js__WEBPACK_IMPORTED_MODULE_16__.ExtensionDescriptionRegistry.isHostExtension(extensionId, this._myRegistry, this._globalRegistry)) {
                    await this._mainThreadExtensionsProxy.$activateExtension(extensionId, reason);
                    return ( new _extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__.HostExtension());
                }
                const extensionDescription = this._myRegistry.getExtensionDescription(extensionId);
                return this._activateExtension(extensionDescription, reason);
            }
        }, this._logService)));
        this._extensionPathIndex = null;
        this._resolvers = Object.create(null);
        this._started = false;
        this._remoteConnectionData = this._initData.remote.connectionData;
    }
    getRemoteConnectionData() {
        return this._remoteConnectionData;
    }
    async initialize() {
        try {
            await this._beforeAlmostReadyToRunExtensions();
            this._almostReadyToRunExtensions.open();
            await this._extHostWorkspace.waitForInitializeCall();
            (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)('code/extHost/ready');
            this._readyToStartExtensionHost.open();
            if (this._initData.autoStart) {
                this._startExtensionHost();
            }
        }
        catch (err) {
            (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_17__.onUnexpectedError)(err);
        }
    }
    async _deactivateAll() {
        this._storagePath.onWillDeactivateAll();
        let allPromises = [];
        try {
            const allExtensions = this._myRegistry.getAllExtensionDescriptions();
            const allExtensionsIds = ( allExtensions.map(ext => ext.identifier));
            const activatedExtensions = allExtensionsIds.filter(id => this.isActivated(id));
            allPromises = ( activatedExtensions.map((extensionId) => {
                return this._deactivate(extensionId);
            }));
        }
        catch (err) {
        }
        await Promise.all(allPromises);
    }
    terminate(reason, code = 0) {
        if (this._isTerminating) {
            return;
        }
        this._isTerminating = true;
        this._logService.info(`Extension host terminating: ${reason}`);
        this._logService.flush();
        this._extHostTerminalService.dispose();
        this._activator.dispose();
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isWebWorker) {
            (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_17__.setUnexpectedErrorHandler)((err) => {
                this._logService.error(err);
            });
        }
        this._extHostContext.dispose();
        const extensionsDeactivated = this._deactivateAll();
        Promise.race([(0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.timeout)(5000), extensionsDeactivated]).finally(() => {
            if (this._hostUtils.pid) {
                this._logService.info(`Extension host with pid ${this._hostUtils.pid} exiting with code ${code}`);
            }
            else {
                this._logService.info(`Extension host exiting with code ${code}`);
            }
            this._logService.flush();
            this._logService.dispose();
            this._hostUtils.exit(code);
        });
    }
    isActivated(extensionId) {
        if (this._readyToRunExtensions.isOpen()) {
            return this._activator.isActivated(extensionId);
        }
        return false;
    }
    async getExtension(extensionId) {
        const ext = await this._mainThreadExtensionsProxy.$getExtension(extensionId);
        return ext && {
            ...ext,
            identifier: ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_18__.ExtensionIdentifier(ext.identifier.value)),
            extensionLocation: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(ext.extensionLocation)
        };
    }
    _activateByEvent(activationEvent, startup) {
        return this._activator.activateByEvent(activationEvent, startup);
    }
    _activateById(extensionId, reason) {
        return this._activator.activateById(extensionId, reason);
    }
    activateByIdWithErrors(extensionId, reason) {
        return this._activateById(extensionId, reason).then(() => {
            const extension = this._activator.getActivatedExtension(extensionId);
            if (extension.activationFailed) {
                return Promise.reject(extension.activationFailedError);
            }
            return undefined;
        });
    }
    getExtensionRegistry() {
        return this._readyToRunExtensions.wait().then(_ => this._myRegistry);
    }
    getExtensionExports(extensionId) {
        if (this._readyToRunExtensions.isOpen()) {
            return this._activator.getActivatedExtension(extensionId).exports;
        }
        else {
            try {
                return this._activator.getActivatedExtension(extensionId).exports;
            }
            catch (err) {
                return null;
            }
        }
    }
    async _realPathExtensionUri(uri) {
        if (uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_35__.Schemas.file && this._hostUtils.fsRealpath) {
            const fsPath = uri.fsPath;
            if (!( this._realPathCache.has(fsPath))) {
                this._realPathCache.set(fsPath, this._hostUtils.fsRealpath(fsPath));
            }
            const realpathValue = await this._realPathCache.get(fsPath);
            return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.file(realpathValue);
        }
        return uri;
    }
    async getExtensionPathIndex() {
        if (!this._extensionPathIndex) {
            this._extensionPathIndex = this._createExtensionPathIndex(this._myRegistry.getAllExtensionDescriptions()).then((searchTree) => {
                return ( new ExtensionPaths(searchTree));
            });
        }
        return this._extensionPathIndex;
    }
    async _createExtensionPathIndex(extensions) {
        const tst = _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_7__.TernarySearchTree.forUris(key => {
            return _base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.extUriBiasedIgnorePathCase.ignorePathCasing(key);
        });
        await Promise.all(( extensions.map(async (ext) => {
            if (this._getEntryPoint(ext)) {
                const uri = await this._realPathExtensionUri(ext.extensionLocation);
                tst.set(uri, ext);
            }
        })));
        return tst;
    }
    _deactivate(extensionId) {
        let result = Promise.resolve(undefined);
        if (!this._readyToRunExtensions.isOpen()) {
            return result;
        }
        if (!this._activator.isActivated(extensionId)) {
            return result;
        }
        const extension = this._activator.getActivatedExtension(extensionId);
        if (!extension) {
            return result;
        }
        try {
            if (typeof extension.module.deactivate === 'function') {
                result = Promise.resolve(extension.module.deactivate()).then(undefined, (err) => {
                    this._logService.error(err);
                    return Promise.resolve(undefined);
                });
            }
        }
        catch (err) {
            this._logService.error(`An error occurred when deactivating the extension '${extensionId.value}':`);
            this._logService.error(err);
        }
        try {
            (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.dispose)(extension.subscriptions);
        }
        catch (err) {
            this._logService.error(`An error occurred when deactivating the subscriptions for extension '${extensionId.value}':`);
            this._logService.error(err);
        }
        return result;
    }
    async _activateExtension(extensionDescription, reason) {
        if (!this._initData.remote.isRemote) {
            await this._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);
        }
        else {
            this._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);
        }
        return this._doActivateExtension(extensionDescription, reason).then((activatedExtension) => {
            const activationTimes = activatedExtension.activationTimes;
            this._mainThreadExtensionsProxy.$onDidActivateExtension(extensionDescription.identifier, activationTimes.codeLoadingTime, activationTimes.activateCallTime, activationTimes.activateResolvedTime, reason);
            this._logExtensionActivationTimes(extensionDescription, reason, 'success', activationTimes);
            return activatedExtension;
        }, (err) => {
            this._logExtensionActivationTimes(extensionDescription, reason, 'failure');
            throw err;
        });
    }
    _logExtensionActivationTimes(extensionDescription, reason, outcome, activationTimes) {
        const event = getTelemetryActivationEvent(extensionDescription, reason);
        this._mainThreadTelemetryProxy.$publicLog2('extensionActivationTimes', {
            ...event,
            ...(activationTimes || {}),
            outcome
        });
    }
    _doActivateExtension(extensionDescription, reason) {
        const event = getTelemetryActivationEvent(extensionDescription, reason);
        this._mainThreadTelemetryProxy.$publicLog2('activatePlugin', event);
        const entryPoint = this._getEntryPoint(extensionDescription);
        if (!entryPoint) {
            return Promise.resolve(( new _extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__.EmptyExtension(_extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__.ExtensionActivationTimes.NONE)));
        }
        this._logService.info(`ExtensionService#_doActivateExtension ${extensionDescription.identifier.value}, startup: ${reason.startup}, activationEvent: '${reason.activationEvent}'${extensionDescription.identifier.value !== reason.extensionId.value ? `, root cause: ${reason.extensionId.value}` : ``}`);
        this._logService.flush();
        const activationTimesBuilder = ( new _extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__.ExtensionActivationTimesBuilder(reason.startup));
        return Promise.all([
            this._loadCommonJSModule(extensionDescription, (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(extensionDescription.extensionLocation, entryPoint), activationTimesBuilder),
            this._loadExtensionContext(extensionDescription)
        ]).then(values => {
            (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)(`code/extHost/willActivateExtension/${extensionDescription.identifier.value}`);
            return AbstractExtHostExtensionService_1._callActivate(this._logService, extensionDescription.identifier, values[0], values[1], activationTimesBuilder);
        }).then((activatedExtension) => {
            (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)(`code/extHost/didActivateExtension/${extensionDescription.identifier.value}`);
            return activatedExtension;
        });
    }
    _loadExtensionContext(extensionDescription) {
        const lanuageModelAccessInformation = this._extHostLanguageModels.createLanguageModelAccessInformation(extensionDescription);
        const globalState = this._register(( new _extHostMemento_js__WEBPACK_IMPORTED_MODULE_20__.ExtensionGlobalMemento(extensionDescription, this._storage)));
        const workspaceState = this._register(( new _extHostMemento_js__WEBPACK_IMPORTED_MODULE_20__.ExtensionMemento(extensionDescription.identifier.value, false, this._storage)));
        const secrets = this._register(( new _extHostSecrets_js__WEBPACK_IMPORTED_MODULE_34__.ExtensionSecrets(extensionDescription, this._secretState)));
        const extensionMode = extensionDescription.isUnderDevelopment
            ? (this._initData.environment.extensionTestsLocationURI ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ExtensionMode.Test : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ExtensionMode.Development)
            : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ExtensionMode.Production;
        const extensionKind = this._initData.remote.isRemote ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ExtensionKind.Workspace : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ExtensionKind.UI;
        this._logService.trace(`ExtensionService#loadExtensionContext ${extensionDescription.identifier.value}`);
        return Promise.all([
            globalState.whenReady,
            workspaceState.whenReady,
            this._storagePath.whenReady
        ]).then(() => {
            const that = this;
            let extension;
            let messagePassingProtocol;
            const messagePort = (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_15__.isProposedApiEnabled)(extensionDescription, 'ipc')
                ? this._initData.messagePorts?.get(_platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_18__.ExtensionIdentifier.toKey(extensionDescription.identifier))
                : undefined;
            return ( Object.freeze({
                globalState,
                workspaceState,
                secrets,
                subscriptions: [],
                get languageModelAccessInformation() { return lanuageModelAccessInformation; },
                get extensionUri() { return extensionDescription.extensionLocation; },
                get extensionPath() { return extensionDescription.extensionLocation.fsPath; },
                asAbsolutePath(relativePath) { return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_2__.join)(extensionDescription.extensionLocation.fsPath, relativePath); },
                get storagePath() { return that._storagePath.workspaceValue(extensionDescription)?.fsPath; },
                get globalStoragePath() { return that._storagePath.globalValue(extensionDescription).fsPath; },
                get logPath() { return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_2__.join)(that._initData.logsLocation.fsPath, extensionDescription.identifier.value); },
                get logUri() { return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.joinPath(that._initData.logsLocation, extensionDescription.identifier.value); },
                get storageUri() { return that._storagePath.workspaceValue(extensionDescription); },
                get globalStorageUri() { return that._storagePath.globalValue(extensionDescription); },
                get extensionMode() { return extensionMode; },
                get extension() {
                    if (extension === undefined) {
                        extension = ( new Extension(
                            that,
                            extensionDescription.identifier,
                            extensionDescription,
                            extensionKind,
                            false
                        ));
                    }
                    return extension;
                },
                get extensionRuntime() {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_15__.checkProposedApiEnabled)(extensionDescription, 'extensionRuntime');
                    return that.extensionRuntime;
                },
                get environmentVariableCollection() { return that._extHostTerminalService.getEnvironmentVariableCollection(extensionDescription); },
                get messagePassingProtocol() {
                    if (!messagePassingProtocol) {
                        if (!messagePort) {
                            return undefined;
                        }
                        const onDidReceiveMessage = _base_common_event_js__WEBPACK_IMPORTED_MODULE_31__.Event.buffer(_base_common_event_js__WEBPACK_IMPORTED_MODULE_31__.Event.fromDOMEventEmitter(messagePort, 'message', e => e.data));
                        messagePort.start();
                        messagePassingProtocol = {
                            onDidReceiveMessage,
                            postMessage: messagePort.postMessage.bind(messagePort)
                        };
                    }
                    return messagePassingProtocol;
                }
            }));
        });
    }
    static _callActivate(logService, extensionId, extensionModule, context, activationTimesBuilder) {
        extensionModule = extensionModule || {
            activate: undefined,
            deactivate: undefined
        };
        return this._callActivateOptional(logService, extensionId, extensionModule, context, activationTimesBuilder).then((extensionExports) => {
            return ( new _extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__.ActivatedExtension(
                false,
                null,
                activationTimesBuilder.build(),
                extensionModule,
                extensionExports,
                context.subscriptions
            ));
        });
    }
    static _callActivateOptional(logService, extensionId, extensionModule, context, activationTimesBuilder) {
        if (typeof extensionModule.activate === 'function') {
            try {
                activationTimesBuilder.activateCallStart();
                logService.trace(`ExtensionService#_callActivateOptional ${extensionId.value}`);
                const scope = typeof global === 'object' ? global : self;
                const activateResult = extensionModule.activate.apply(scope, [context]);
                activationTimesBuilder.activateCallStop();
                activationTimesBuilder.activateResolveStart();
                return Promise.resolve(activateResult).then((value) => {
                    activationTimesBuilder.activateResolveStop();
                    return value;
                });
            }
            catch (err) {
                return Promise.reject(err);
            }
        }
        else {
            return Promise.resolve(extensionModule);
        }
    }
    _activateOneStartupFinished(desc, activationEvent) {
        this._activateById(desc.identifier, {
            startup: false,
            extensionId: desc.identifier,
            activationEvent: activationEvent
        }).then(undefined, (err) => {
            this._logService.error(err);
        });
    }
    _activateAllStartupFinishedDeferred(extensions, start = 0) {
        const timeBudget = 50;
        const startTime = Date.now();
        (0,_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.setTimeout0)(() => {
            for (let i = start; i < extensions.length; i += 1) {
                const desc = extensions[i];
                for (const activationEvent of (desc.activationEvents ?? [])) {
                    if (activationEvent === 'onStartupFinished') {
                        if (Date.now() - startTime > timeBudget) {
                            this._activateAllStartupFinishedDeferred(extensions, i);
                            break;
                        }
                        else {
                            this._activateOneStartupFinished(desc, activationEvent);
                        }
                    }
                }
            }
        });
    }
    _activateAllStartupFinished() {
        this._mainThreadExtensionsProxy.$setPerformanceMarks((0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.getMarks)());
        this._extHostConfiguration.getConfigProvider().then((configProvider) => {
            const shouldDeferActivation = configProvider.getConfiguration('extensions.experimental').get('deferredStartupFinishedActivation');
            const allExtensionDescriptions = this._myRegistry.getAllExtensionDescriptions();
            if (shouldDeferActivation) {
                this._activateAllStartupFinishedDeferred(allExtensionDescriptions);
            }
            else {
                for (const desc of allExtensionDescriptions) {
                    if (desc.activationEvents) {
                        for (const activationEvent of desc.activationEvents) {
                            if (activationEvent === 'onStartupFinished') {
                                this._activateOneStartupFinished(desc, activationEvent);
                            }
                        }
                    }
                }
            }
        });
    }
    _handleEagerExtensions() {
        const starActivation = this._activateByEvent('*', true).then(undefined, (err) => {
            this._logService.error(err);
        });
        this._register(this._extHostWorkspace.onDidChangeWorkspace((e) => this._handleWorkspaceContainsEagerExtensions(e.added)));
        const folders = this._extHostWorkspace.workspace ? this._extHostWorkspace.workspace.folders : [];
        const workspaceContainsActivation = this._handleWorkspaceContainsEagerExtensions(folders);
        const remoteResolverActivation = this._handleRemoteResolverEagerExtensions();
        const eagerExtensionsActivation = Promise.all([remoteResolverActivation, starActivation, workspaceContainsActivation]).then(() => { });
        Promise.race([eagerExtensionsActivation, (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.timeout)(10000)]).then(() => {
            this._activateAllStartupFinished();
        });
        return eagerExtensionsActivation;
    }
    _handleWorkspaceContainsEagerExtensions(folders) {
        if (folders.length === 0) {
            return Promise.resolve(undefined);
        }
        return Promise.all(( this._myRegistry.getAllExtensionDescriptions().map((desc) => {
            return this._handleWorkspaceContainsEagerExtension(folders, desc);
        }))).then(() => { });
    }
    async _handleWorkspaceContainsEagerExtension(folders, desc) {
        if (this.isActivated(desc.identifier)) {
            return;
        }
        const localWithRemote = !this._initData.remote.isRemote && !!this._initData.remote.authority;
        const host = {
            logService: this._logService,
            folders: ( folders.map(folder => folder.uri)),
            forceUsingSearch: localWithRemote || !this._hostUtils.fsExists,
            exists: (uri) => this._hostUtils.fsExists(uri.fsPath),
            checkExists: (folders, includes, token) => this._mainThreadWorkspaceProxy.$checkExists(folders, includes, token)
        };
        const result = await (0,_services_extensions_common_workspaceContains_js__WEBPACK_IMPORTED_MODULE_32__.checkActivateWorkspaceContainsExtension)(host, desc);
        if (!result) {
            return;
        }
        return (this._activateById(desc.identifier, { startup: true, extensionId: desc.identifier, activationEvent: result.activationEvent })
            .then(undefined, err => this._logService.error(err)));
    }
    async _handleRemoteResolverEagerExtensions() {
        if (this._initData.remote.authority) {
            return this._activateByEvent(`onResolveRemoteAuthority:${this._initData.remote.authority}`, false);
        }
    }
    async $extensionTestsExecute() {
        await this._eagerExtensionsActivated.wait();
        try {
            return await this._doHandleExtensionTests();
        }
        catch (error) {
            console.error(error);
            throw error;
        }
    }
    async _doHandleExtensionTests() {
        const { extensionDevelopmentLocationURI, extensionTestsLocationURI } = this._initData.environment;
        if (!extensionDevelopmentLocationURI || !extensionTestsLocationURI) {
            throw ( new Error((0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 0, "Cannot load test runner.")));
        }
        const testRunner = await this._loadCommonJSModule(null, extensionTestsLocationURI, ( new _extHostExtensionActivator_js__WEBPACK_IMPORTED_MODULE_12__.ExtensionActivationTimesBuilder(false)));
        if (!testRunner || typeof testRunner.run !== 'function') {
            throw ( new Error((0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
                _moduleId,
                1,
                "Path {0} does not point to a valid extension test runner.",
                ( extensionTestsLocationURI.toString())
            )));
        }
        return ( new Promise((resolve, reject) => {
            const oldTestRunnerCallback = (error, failures) => {
                if (error) {
                    if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isCI) {
                        this._logService.error(`Test runner called back with error`, error);
                    }
                    reject(error);
                }
                else {
                    if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isCI) {
                        if (failures) {
                            this._logService.info(`Test runner called back with ${failures} failures.`);
                        }
                        else {
                            this._logService.info(`Test runner called back with successful outcome.`);
                        }
                    }
                    resolve((typeof failures === 'number' && failures > 0) ? 1  : 0 );
                }
            };
            const extensionTestsPath = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.originalFSPath)(extensionTestsLocationURI);
            const runResult = testRunner.run(extensionTestsPath, oldTestRunnerCallback);
            if (runResult && runResult.then) {
                runResult
                    .then(() => {
                    if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isCI) {
                        this._logService.info(`Test runner finished successfully.`);
                    }
                    resolve(0);
                })
                    .catch((err) => {
                    if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isCI) {
                        this._logService.error(`Test runner finished with error`, err);
                    }
                    reject(err instanceof Error && err.stack ? err.stack : String(err));
                });
            }
        }));
    }
    _startExtensionHost() {
        if (this._started) {
            throw ( new Error(`Extension host is already started!`));
        }
        this._started = true;
        return this._readyToStartExtensionHost.wait()
            .then(() => this._readyToRunExtensions.open())
            .then(() => {
            return Promise.race([this._activator.waitForActivatingExtensions(), (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.timeout)(1000)]);
        })
            .then(() => this._handleEagerExtensions())
            .then(() => {
            this._eagerExtensionsActivated.open();
            this._logService.info(`Eager extensions activated`);
        });
    }
    registerRemoteAuthorityResolver(authorityPrefix, resolver) {
        this._resolvers[authorityPrefix] = resolver;
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.toDisposable)(() => {
            delete this._resolvers[authorityPrefix];
        });
    }
    async getRemoteExecServer(remoteAuthority) {
        const { resolver } = await this._activateAndGetResolver(remoteAuthority);
        return resolver?.resolveExecServer?.(remoteAuthority, { resolveAttempt: 0 });
    }
    async _activateAndGetResolver(remoteAuthority) {
        const authorityPlusIndex = remoteAuthority.indexOf('+');
        if (authorityPlusIndex === -1) {
            throw ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.RemoteAuthorityResolverError(
                `Not an authority that can be resolved!`,
                _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.RemoteAuthorityResolverErrorCode.InvalidAuthority
            ));
        }
        const authorityPrefix = remoteAuthority.substr(0, authorityPlusIndex);
        await this._almostReadyToRunExtensions.wait();
        await this._activateByEvent(`onResolveRemoteAuthority:${authorityPrefix}`, false);
        return { authorityPrefix, resolver: this._resolvers[authorityPrefix] };
    }
    async $resolveAuthority(remoteAuthorityChain, resolveAttempt) {
        const sw = _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_37__.StopWatch.create(false);
        const prefix = () => `[resolveAuthority(${(0,_platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.getRemoteAuthorityPrefix)(remoteAuthorityChain)},${resolveAttempt})][${sw.elapsed()}ms] `;
        const logInfo = (msg) => this._logService.info(`${prefix()}${msg}`);
        const logWarning = (msg) => this._logService.warn(`${prefix()}${msg}`);
        const logError = (msg, err = undefined) => this._logService.error(`${prefix()}${msg}`, err);
        const normalizeError = (err) => {
            if (err instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.RemoteAuthorityResolverError) {
                return {
                    type: 'error',
                    error: {
                        code: err._code,
                        message: err._message,
                        detail: err._detail
                    }
                };
            }
            throw err;
        };
        const getResolver = async (remoteAuthority) => {
            logInfo(`activating resolver for ${remoteAuthority}...`);
            const { resolver, authorityPrefix } = await this._activateAndGetResolver(remoteAuthority);
            if (!resolver) {
                logError(`no resolver for ${authorityPrefix}`);
                throw ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.RemoteAuthorityResolverError(
                    `No remote extension installed to resolve ${authorityPrefix}.`,
                    _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.RemoteAuthorityResolverErrorCode.NoResolverFound
                ));
            }
            return { resolver, authorityPrefix, remoteAuthority };
        };
        const chain = remoteAuthorityChain.split(/@|%40/g).reverse();
        logInfo(`activating remote resolvers ${chain.join(' -> ')}`);
        let resolvers;
        try {
            resolvers = await Promise.all(( chain.map(getResolver))).catch(async (e) => {
                if (!(e instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.RemoteAuthorityResolverError) || e._code !== _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.RemoteAuthorityResolverErrorCode.InvalidAuthority) {
                    throw e;
                }
                logWarning(`resolving nested authorities failed: ${e.message}`);
                return [await getResolver(remoteAuthorityChain)];
            });
        }
        catch (e) {
            return normalizeError(e);
        }
        const intervalLogger = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.IntervalTimer());
        intervalLogger.cancelAndSet(() => logInfo('waiting...'), 1000);
        let result;
        let execServer;
        for (const [i, { authorityPrefix, resolver, remoteAuthority }] of resolvers.entries()) {
            try {
                if (i === resolvers.length - 1) {
                    logInfo(`invoking final resolve()...`);
                    (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)(`code/extHost/willResolveAuthority/${authorityPrefix}`);
                    result = await resolver.resolve(remoteAuthority, { resolveAttempt, execServer });
                    (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)(`code/extHost/didResolveAuthorityOK/${authorityPrefix}`);
                    logInfo(`setting tunnel factory...`);
                    this._register(await this._extHostTunnelService.setTunnelFactory(resolver, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ManagedResolvedAuthority.isManagedResolvedAuthority(result) ? result : undefined));
                }
                else {
                    logInfo(`invoking resolveExecServer() for ${remoteAuthority}`);
                    (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)(`code/extHost/willResolveExecServer/${authorityPrefix}`);
                    execServer = await resolver.resolveExecServer?.(remoteAuthority, { resolveAttempt, execServer });
                    if (!execServer) {
                        throw ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.RemoteAuthorityResolverError(
                            `Exec server was not available for ${remoteAuthority}`,
                            _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.RemoteAuthorityResolverErrorCode.NoResolverFound
                        ));
                    }
                    (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)(`code/extHost/didResolveExecServerOK/${authorityPrefix}`);
                }
            }
            catch (e) {
                (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_3__.mark)(`code/extHost/didResolveAuthorityError/${authorityPrefix}`);
                logError(`returned an error`, e);
                intervalLogger.dispose();
                return normalizeError(e);
            }
        }
        intervalLogger.dispose();
        const tunnelInformation = {
            environmentTunnels: result.environmentTunnels,
            features: result.tunnelFeatures ? {
                elevation: result.tunnelFeatures.elevation,
                privacyOptions: result.tunnelFeatures.privacyOptions,
                protocol: result.tunnelFeatures.protocol === undefined ? true : result.tunnelFeatures.protocol,
            } : undefined
        };
        const options = {
            extensionHostEnv: result.extensionHostEnv,
            isTrusted: result.isTrusted,
            authenticationSession: result.authenticationSessionForInitializingExtensions ? { id: result.authenticationSessionForInitializingExtensions.id, providerId: result.authenticationSessionForInitializingExtensions.providerId } : undefined
        };
        logInfo(`returned ${_extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ManagedResolvedAuthority.isManagedResolvedAuthority(result) ? 'managed authority' : `${result.host}:${result.port}`}`);
        let authority;
        if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_21__.ManagedResolvedAuthority.isManagedResolvedAuthority(result)) {
            const socketFactoryId = resolveAttempt;
            this._extHostManagedSockets.setFactory(socketFactoryId, result.makeConnection);
            authority = {
                authority: remoteAuthorityChain,
                connectTo: ( new _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.ManagedRemoteConnection(socketFactoryId)),
                connectionToken: result.connectionToken
            };
        }
        else {
            authority = {
                authority: remoteAuthorityChain,
                connectTo: ( new _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.WebSocketRemoteConnection(result.host, result.port)),
                connectionToken: result.connectionToken
            };
        }
        return {
            type: 'ok',
            value: {
                authority: authority,
                options,
                tunnelInformation,
            }
        };
    }
    async $getCanonicalURI(remoteAuthority, uriComponents) {
        this._logService.info(`$getCanonicalURI invoked for authority (${(0,_platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_22__.getRemoteAuthorityPrefix)(remoteAuthority)})`);
        const { resolver } = await this._activateAndGetResolver(remoteAuthority);
        if (!resolver) {
            return null;
        }
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(uriComponents);
        if (typeof resolver.getCanonicalURI === 'undefined') {
            return uri;
        }
        const result = await (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.asPromise)(() => resolver.getCanonicalURI(uri));
        if (!result) {
            return uri;
        }
        return result;
    }
    async $startExtensionHost(extensionsDelta) {
        extensionsDelta.toAdd.forEach((extension) => extension.extensionLocation = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(extension.extensionLocation));
        const { globalRegistry, myExtensions } = applyExtensionsDelta(this._activationEventsReader, this._globalRegistry, this._myRegistry, extensionsDelta);
        const newSearchTree = await this._createExtensionPathIndex(myExtensions);
        const extensionsPaths = await this.getExtensionPathIndex();
        extensionsPaths.setSearchTree(newSearchTree);
        this._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());
        this._myRegistry.set(myExtensions);
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isCI) {
            this._logService.info(`$startExtensionHost: global extensions: ${printExtIds(this._globalRegistry)}`);
            this._logService.info(`$startExtensionHost: local extensions: ${printExtIds(this._myRegistry)}`);
        }
        return this._startExtensionHost();
    }
    $activateByEvent(activationEvent, activationKind) {
        if (activationKind === _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_15__.ActivationKind.Immediate) {
            return this._almostReadyToRunExtensions.wait()
                .then(_ => this._activateByEvent(activationEvent, false));
        }
        return (this._readyToRunExtensions.wait()
            .then(_ => this._activateByEvent(activationEvent, false)));
    }
    async $activate(extensionId, reason) {
        await this._readyToRunExtensions.wait();
        if (!this._myRegistry.getExtensionDescription(extensionId)) {
            return false;
        }
        await this._activateById(extensionId, reason);
        return true;
    }
    async $deltaExtensions(extensionsDelta) {
        extensionsDelta.toAdd.forEach((extension) => extension.extensionLocation = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(extension.extensionLocation));
        const { globalRegistry, myExtensions } = applyExtensionsDelta(this._activationEventsReader, this._globalRegistry, this._myRegistry, extensionsDelta);
        const newSearchTree = await this._createExtensionPathIndex(myExtensions);
        const extensionsPaths = await this.getExtensionPathIndex();
        extensionsPaths.setSearchTree(newSearchTree);
        this._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());
        this._myRegistry.set(myExtensions);
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_38__.isCI) {
            this._logService.info(`$deltaExtensions: global extensions: ${printExtIds(this._globalRegistry)}`);
            this._logService.info(`$deltaExtensions: local extensions: ${printExtIds(this._myRegistry)}`);
        }
        return Promise.resolve(undefined);
    }
    async $test_latency(n) {
        return n;
    }
    async $test_up(b) {
        return b.byteLength;
    }
    async $test_down(size) {
        const buff = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_19__.VSBuffer.alloc(size);
        const value = Math.random() % 256;
        for (let i = 0; i < size; i++) {
            buff.writeUInt8(value, i);
        }
        return buff;
    }
    async $updateRemoteConnectionData(connectionData) {
        this._remoteConnectionData = connectionData;
        this._onDidChangeRemoteConnectionData.fire();
    }
};
AbstractExtHostExtensionService = AbstractExtHostExtensionService_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_23__.IInstantiationService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, IHostUtils)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_26__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_14__.IExtHostWorkspace)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_11__.IExtHostConfiguration)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_9__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_24__.IExtHostInitDataService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, _extHostStoragePaths_js__WEBPACK_IMPORTED_MODULE_25__.IExtensionStoragePaths)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(8, _extHostTunnelService_js__WEBPACK_IMPORTED_MODULE_28__.IExtHostTunnelService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(9, _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_29__.IExtHostTerminalService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(10, _extHostLocalizationService_js__WEBPACK_IMPORTED_MODULE_36__.IExtHostLocalizationService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(11, _extHostManagedSockets_js__WEBPACK_IMPORTED_MODULE_39__.IExtHostManagedSockets)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(12, _extHostLanguageModels_js__WEBPACK_IMPORTED_MODULE_30__.IExtHostLanguageModels))
], AbstractExtHostExtensionService));
function applyExtensionsDelta(activationEventsReader, oldGlobalRegistry, oldMyRegistry, extensionsDelta) {
    activationEventsReader.addActivationEvents(extensionsDelta.addActivationEvents);
    const globalRegistry = ( new _services_extensions_common_extensionDescriptionRegistry_js__WEBPACK_IMPORTED_MODULE_16__.ExtensionDescriptionRegistry(activationEventsReader, oldGlobalRegistry.getAllExtensionDescriptions()));
    globalRegistry.deltaExtensions(extensionsDelta.toAdd, extensionsDelta.toRemove);
    const myExtensionsSet = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_18__.ExtensionIdentifierSet(( oldMyRegistry.getAllExtensionDescriptions().map(extension => extension.identifier))));
    for (const extensionId of extensionsDelta.myToRemove) {
        myExtensionsSet.delete(extensionId);
    }
    for (const extensionId of extensionsDelta.myToAdd) {
        myExtensionsSet.add(extensionId);
    }
    const myExtensions = filterExtensions(globalRegistry, myExtensionsSet);
    return { globalRegistry, myExtensions };
}
function getTelemetryActivationEvent(extensionDescription, reason) {
    const event = {
        id: extensionDescription.identifier.value,
        name: extensionDescription.name,
        extensionVersion: extensionDescription.version,
        publisherDisplayName: extensionDescription.publisher,
        activationEvents: extensionDescription.activationEvents ? extensionDescription.activationEvents.join(',') : null,
        isBuiltin: extensionDescription.isBuiltin,
        reason: reason.activationEvent,
        reasonId: reason.extensionId.value,
    };
    return event;
}
function printExtIds(registry) {
    return ( registry.getAllExtensionDescriptions().map(ext => ext.identifier.value)).join(',');
}
const IExtHostExtensionService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_23__.createDecorator)('IExtHostExtensionService'));
class Extension {
    #extensionService;
    #originExtensionId;
    #identifier;
    constructor(extensionService, originExtensionId, description, kind, isFromDifferentExtensionHost) {
        this.#extensionService = extensionService;
        this.#originExtensionId = originExtensionId;
        this.#identifier = description.identifier;
        this.id = description.identifier.value;
        this.extensionUri = description.extensionLocation;
        this.extensionPath = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_2__.normalize)((0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.originalFSPath)(description.extensionLocation));
        this.packageJSON = description;
        this.extensionKind = kind;
        this.isFromDifferentExtensionHost = isFromDifferentExtensionHost;
    }
    get isActive() {
        return this.#extensionService.isActivated(this.#identifier);
    }
    get exports() {
        if (this.packageJSON.api === 'none' || this.isFromDifferentExtensionHost) {
            return undefined;
        }
        return this.#extensionService.getExtensionExports(this.#identifier);
    }
    async activate() {
        if (this.isFromDifferentExtensionHost) {
            throw ( new Error('Cannot activate foreign extension'));
        }
        await this.#extensionService.activateByIdWithErrors(this.#identifier, { startup: false, extensionId: this.#originExtensionId, activationEvent: 'api' });
        return this.exports;
    }
}
function filterExtensions(globalRegistry, desiredExtensions) {
    return globalRegistry.getAllExtensionDescriptions().filter(extension => ( desiredExtensions.has(extension.identifier)));
}
class ExtensionPaths {
    constructor(_searchTree) {
        this._searchTree = _searchTree;
    }
    setSearchTree(searchTree) {
        this._searchTree = searchTree;
    }
    findSubstr(key) {
        return this._searchTree.findSubstr(key);
    }
    forEach(callback) {
        return this._searchTree.forEach(callback);
    }
}
class SyncedActivationEventsReader {
    constructor(activationEvents) {
        this._map = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_18__.ExtensionIdentifierMap());
        this.addActivationEvents(activationEvents);
    }
    readActivationEvents(extensionDescription) {
        return this._map.get(extensionDescription.identifier) ?? [];
    }
    addActivationEvents(activationEvents) {
        for (const extensionId of ( Object.keys(activationEvents))) {
            this._map.set(extensionId, activationEvents[extensionId]);
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystem.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystem.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostFileSystem: () => (/* binding */ ExtHostFileSystem)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../editor/common/languages/linkComputer.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages/linkComputer.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/htmlContent.js */ "./node_modules/vscode/vscode/src/vs/base/common/htmlContent.js");












class FsLinkProvider {
    constructor() {
        this._schemes = [];
    }
    add(scheme) {
        this._stateMachine = undefined;
        this._schemes.push(scheme);
    }
    delete(scheme) {
        const idx = this._schemes.indexOf(scheme);
        if (idx >= 0) {
            this._schemes.splice(idx, 1);
            this._stateMachine = undefined;
        }
    }
    _initStateMachine() {
        if (!this._stateMachine) {
            const schemes = this._schemes.sort();
            const edges = [];
            let prevScheme;
            let prevState;
            let lastState = _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.LastKnownState;
            let nextState = _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.LastKnownState;
            for (const scheme of schemes) {
                let pos = !prevScheme ? 0 : (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_7__.commonPrefixLength)(prevScheme, scheme);
                if (pos === 0) {
                    prevState = _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.Start;
                }
                else {
                    prevState = nextState;
                }
                for (; pos < scheme.length; pos++) {
                    if (pos + 1 === scheme.length) {
                        lastState = nextState;
                        nextState = _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.BeforeColon;
                    }
                    else {
                        nextState += 1;
                    }
                    edges.push([prevState, scheme.toUpperCase().charCodeAt(pos), nextState]);
                    edges.push([prevState, scheme.toLowerCase().charCodeAt(pos), nextState]);
                    prevState = nextState;
                }
                prevScheme = scheme;
                nextState = lastState;
            }
            edges.push([_editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.BeforeColon, _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_8__.CharCode.Colon, _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.AfterColon]);
            edges.push([_editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.AfterColon, _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_8__.CharCode.Slash, _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.State.End]);
            this._stateMachine = ( new _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.StateMachine(edges));
        }
    }
    provideDocumentLinks(document) {
        this._initStateMachine();
        const result = [];
        const links = _editor_common_languages_linkComputer_js__WEBPACK_IMPORTED_MODULE_6__.LinkComputer.computeLinks({
            getLineContent(lineNumber) {
                return document.lineAt(lineNumber - 1).text;
            },
            getLineCount() {
                return document.lineCount;
            }
        }, this._stateMachine);
        for (const link of links) {
            const docLink = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.DocumentLink.to(link);
            if (docLink.target) {
                result.push(docLink);
            }
        }
        return result;
    }
}
class ExtHostFileSystem {
    constructor(mainContext, _extHostLanguageFeatures) {
        this._extHostLanguageFeatures = _extHostLanguageFeatures;
        this._linkProvider = ( new FsLinkProvider());
        this._fsProvider = ( new Map());
        this._registeredSchemes = ( new Set());
        this._watches = ( new Map());
        this._handlePool = 0;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadFileSystem));
    }
    dispose() {
        this._linkProviderRegistration?.dispose();
    }
    registerFileSystemProvider(extension, scheme, provider, options = {}) {
        ExtHostFileSystem._validateFileSystemProvider(provider);
        if (( this._registeredSchemes.has(scheme))) {
            throw ( new Error(`a provider for the scheme '${scheme}' is already registered`));
        }
        if (!this._linkProviderRegistration) {
            this._linkProviderRegistration = this._extHostLanguageFeatures.registerDocumentLinkProvider(extension, '*', this._linkProvider);
        }
        const handle = this._handlePool++;
        this._linkProvider.add(scheme);
        this._registeredSchemes.add(scheme);
        this._fsProvider.set(handle, provider);
        let capabilities = _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderCapabilities.FileReadWrite;
        if (options.isCaseSensitive) {
            capabilities += _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderCapabilities.PathCaseSensitive;
        }
        if (options.isReadonly) {
            capabilities += _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderCapabilities.Readonly;
        }
        if (typeof provider.copy === 'function') {
            capabilities += _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderCapabilities.FileFolderCopy;
        }
        if (typeof provider.open === 'function' && typeof provider.close === 'function'
            && typeof provider.read === 'function' && typeof provider.write === 'function') {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.checkProposedApiEnabled)(extension, 'fsChunks');
            capabilities += _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderCapabilities.FileOpenReadWriteClose;
        }
        let readOnlyMessage;
        if (options.isReadonly && (0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_11__.isMarkdownString)(options.isReadonly) && options.isReadonly.value !== '') {
            readOnlyMessage = {
                value: options.isReadonly.value,
                isTrusted: options.isReadonly.isTrusted,
                supportThemeIcons: options.isReadonly.supportThemeIcons,
                supportHtml: options.isReadonly.supportHtml,
                baseUri: options.isReadonly.baseUri,
                uris: options.isReadonly.uris
            };
        }
        this._proxy.$registerFileSystemProvider(handle, scheme, capabilities, readOnlyMessage).catch(err => {
            console.error(`FAILED to register filesystem provider of ${extension.identifier.value}-extension for the scheme ${scheme}`);
            console.error(err);
        });
        const subscription = provider.onDidChangeFile(event => {
            const mapped = [];
            for (const e of event) {
                const { uri: resource, type } = e;
                if (resource.scheme !== scheme) {
                    continue;
                }
                let newType;
                switch (type) {
                    case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.FileChangeType.Changed:
                        newType = _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileChangeType.UPDATED;
                        break;
                    case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.FileChangeType.Created:
                        newType = _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileChangeType.ADDED;
                        break;
                    case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.FileChangeType.Deleted:
                        newType = _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileChangeType.DELETED;
                        break;
                    default:
                        throw ( new Error('Unknown FileChangeType'));
                }
                mapped.push({ resource, type: newType });
            }
            this._proxy.$onFileSystemChange(handle, mapped);
        });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            subscription.dispose();
            this._linkProvider.delete(scheme);
            this._registeredSchemes.delete(scheme);
            this._fsProvider.delete(handle);
            this._proxy.$unregisterProvider(handle);
        });
    }
    static _validateFileSystemProvider(provider) {
        if (!provider) {
            throw ( new Error('MISSING provider'));
        }
        if (typeof provider.watch !== 'function') {
            throw ( new Error('Provider does NOT implement watch'));
        }
        if (typeof provider.stat !== 'function') {
            throw ( new Error('Provider does NOT implement stat'));
        }
        if (typeof provider.readDirectory !== 'function') {
            throw ( new Error('Provider does NOT implement readDirectory'));
        }
        if (typeof provider.createDirectory !== 'function') {
            throw ( new Error('Provider does NOT implement createDirectory'));
        }
        if (typeof provider.readFile !== 'function') {
            throw ( new Error('Provider does NOT implement readFile'));
        }
        if (typeof provider.writeFile !== 'function') {
            throw ( new Error('Provider does NOT implement writeFile'));
        }
        if (typeof provider.delete !== 'function') {
            throw ( new Error('Provider does NOT implement delete'));
        }
        if (typeof provider.rename !== 'function') {
            throw ( new Error('Provider does NOT implement rename'));
        }
    }
    static _asIStat(stat) {
        const { type, ctime, mtime, size, permissions } = stat;
        return { type, ctime, mtime, size, permissions };
    }
    $stat(handle, resource) {
        return Promise.resolve(this._getFsProvider(handle).stat(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource))).then(stat => ExtHostFileSystem._asIStat(stat));
    }
    $readdir(handle, resource) {
        return Promise.resolve(this._getFsProvider(handle).readDirectory(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource)));
    }
    $readFile(handle, resource) {
        return Promise.resolve(this._getFsProvider(handle).readFile(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource))).then(data => _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_9__.VSBuffer.wrap(data));
    }
    $writeFile(handle, resource, content, opts) {
        return Promise.resolve(this._getFsProvider(handle).writeFile(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource), content.buffer, opts));
    }
    $delete(handle, resource, opts) {
        return Promise.resolve(this._getFsProvider(handle).delete(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource), opts));
    }
    $rename(handle, oldUri, newUri, opts) {
        return Promise.resolve(this._getFsProvider(handle).rename(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(oldUri), _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(newUri), opts));
    }
    $copy(handle, oldUri, newUri, opts) {
        const provider = this._getFsProvider(handle);
        if (!provider.copy) {
            throw ( new Error('FileSystemProvider does not implement "copy"'));
        }
        return Promise.resolve(provider.copy(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(oldUri), _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(newUri), opts));
    }
    $mkdir(handle, resource) {
        return Promise.resolve(this._getFsProvider(handle).createDirectory(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource)));
    }
    $watch(handle, session, resource, opts) {
        const subscription = this._getFsProvider(handle).watch(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource), opts);
        this._watches.set(session, subscription);
    }
    $unwatch(_handle, session) {
        const subscription = this._watches.get(session);
        if (subscription) {
            subscription.dispose();
            this._watches.delete(session);
        }
    }
    $open(handle, resource, opts) {
        const provider = this._getFsProvider(handle);
        if (!provider.open) {
            throw ( new Error('FileSystemProvider does not implement "open"'));
        }
        return Promise.resolve(provider.open(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(resource), opts));
    }
    $close(handle, fd) {
        const provider = this._getFsProvider(handle);
        if (!provider.close) {
            throw ( new Error('FileSystemProvider does not implement "close"'));
        }
        return Promise.resolve(provider.close(fd));
    }
    $read(handle, fd, pos, length) {
        const provider = this._getFsProvider(handle);
        if (!provider.read) {
            throw ( new Error('FileSystemProvider does not implement "read"'));
        }
        const data = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_9__.VSBuffer.alloc(length);
        return Promise.resolve(provider.read(fd, pos, data.buffer, 0, length)).then(read => {
            return data.slice(0, read);
        });
    }
    $write(handle, fd, pos, data) {
        const provider = this._getFsProvider(handle);
        if (!provider.write) {
            throw ( new Error('FileSystemProvider does not implement "write"'));
        }
        return Promise.resolve(provider.write(fd, pos, data.buffer, 0, data.byteLength));
    }
    _getFsProvider(handle) {
        const provider = this._fsProvider.get(handle);
        if (!provider) {
            const err = ( new Error());
            err.name = 'ENOPRO';
            err.message = `no provider`;
            throw err;
        }
        return provider;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemConsumer.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemConsumer.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostConsumerFileSystem: () => (/* binding */ ExtHostConsumerFileSystem),
/* harmony export */   IExtHostConsumerFileSystem: () => (/* binding */ IExtHostConsumerFileSystem)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostFileSystemInfo.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");












var ExtHostConsumerFileSystem_1;
let ExtHostConsumerFileSystem = ExtHostConsumerFileSystem_1 = class ExtHostConsumerFileSystem {
    constructor(extHostRpc, fileSystemInfo) {
        this._fileSystemProvider = ( new Map());
        this._writeQueue = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_9__.ResourceQueue());
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadFileSystem));
        const that = this;
        this.value = ( Object.freeze({
            async stat(uri) {
                try {
                    let stat;
                    const provider = that._fileSystemProvider.get(uri.scheme);
                    if (provider) {
                        await that._proxy.$ensureActivation(uri.scheme);
                        stat = await provider.impl.stat(uri);
                    }
                    else {
                        stat = await that._proxy.$stat(uri);
                    }
                    return {
                        type: stat.type,
                        ctime: stat.ctime,
                        mtime: stat.mtime,
                        size: stat.size,
                        permissions: stat.permissions === _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FilePermission.Readonly ? 1 : undefined
                    };
                }
                catch (err) {
                    ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            async readDirectory(uri) {
                try {
                    const provider = that._fileSystemProvider.get(uri.scheme);
                    if (provider) {
                        await that._proxy.$ensureActivation(uri.scheme);
                        return (await provider.impl.readDirectory(uri)).slice();
                    }
                    else {
                        return await that._proxy.$readdir(uri);
                    }
                }
                catch (err) {
                    return ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            async createDirectory(uri) {
                try {
                    const provider = that._fileSystemProvider.get(uri.scheme);
                    if (provider && !provider.isReadonly) {
                        await that._proxy.$ensureActivation(uri.scheme);
                        return await that.mkdirp(provider.impl, provider.extUri, uri);
                    }
                    else {
                        return await that._proxy.$mkdir(uri);
                    }
                }
                catch (err) {
                    return ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            async readFile(uri) {
                try {
                    const provider = that._fileSystemProvider.get(uri.scheme);
                    if (provider) {
                        await that._proxy.$ensureActivation(uri.scheme);
                        return (await provider.impl.readFile(uri)).slice();
                    }
                    else {
                        const buff = await that._proxy.$readFile(uri);
                        return buff.buffer;
                    }
                }
                catch (err) {
                    return ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            async writeFile(uri, content) {
                try {
                    const provider = that._fileSystemProvider.get(uri.scheme);
                    if (provider && !provider.isReadonly) {
                        await that._proxy.$ensureActivation(uri.scheme);
                        await that.mkdirp(provider.impl, provider.extUri, provider.extUri.dirname(uri));
                        return await that._writeQueue.queueFor(uri, () => Promise.resolve(provider.impl.writeFile(uri, content, { create: true, overwrite: true })));
                    }
                    else {
                        return await that._proxy.$writeFile(uri, _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_4__.VSBuffer.wrap(content));
                    }
                }
                catch (err) {
                    return ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            async delete(uri, options) {
                try {
                    const provider = that._fileSystemProvider.get(uri.scheme);
                    if (provider && !provider.isReadonly && !options?.useTrash ) {
                        await that._proxy.$ensureActivation(uri.scheme);
                        return await provider.impl.delete(uri, { recursive: false, ...options });
                    }
                    else {
                        return await that._proxy.$delete(uri, { recursive: false, useTrash: false, atomic: false, ...options });
                    }
                }
                catch (err) {
                    return ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            async rename(oldUri, newUri, options) {
                try {
                    return await that._proxy.$rename(oldUri, newUri, { ...{ overwrite: false }, ...options });
                }
                catch (err) {
                    return ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            async copy(source, destination, options) {
                try {
                    return await that._proxy.$copy(source, destination, { ...{ overwrite: false }, ...options });
                }
                catch (err) {
                    return ExtHostConsumerFileSystem_1._handleError(err);
                }
            },
            isWritableFileSystem(scheme) {
                const capabilities = fileSystemInfo.getCapabilities(scheme);
                if (typeof capabilities === 'number') {
                    return !(capabilities & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderCapabilities.Readonly);
                }
                return undefined;
            }
        }));
    }
    async mkdirp(provider, providerExtUri, directory) {
        const directoriesToCreate = [];
        while (!providerExtUri.isEqual(directory, providerExtUri.dirname(directory))) {
            try {
                const stat = await provider.stat(directory);
                if ((stat.type & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileType.Directory) === 0) {
                    throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileExists(`Unable to create folder '${directory.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_11__.Schemas.file ? directory.fsPath : ( directory.toString(true))}' that already exists but is not a directory`);
                }
                break;
            }
            catch (error) {
                if ((0,_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.toFileSystemProviderErrorCode)(error) !== _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileNotFound) {
                    throw error;
                }
                directoriesToCreate.push(providerExtUri.basename(directory));
                directory = providerExtUri.dirname(directory);
            }
        }
        for (let i = directoriesToCreate.length - 1; i >= 0; i--) {
            directory = providerExtUri.joinPath(directory, directoriesToCreate[i]);
            try {
                await provider.createDirectory(directory);
            }
            catch (error) {
                if ((0,_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.toFileSystemProviderErrorCode)(error) !== _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileExists) {
                    throw error;
                }
            }
        }
    }
    static _handleError(err) {
        if (err instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError) {
            throw err;
        }
        if (err instanceof _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderError) {
            switch (err.code) {
                case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileExists: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileExists(err.message);
                case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileNotFound: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileNotFound(err.message);
                case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileNotADirectory: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileNotADirectory(err.message);
                case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileIsADirectory: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileIsADirectory(err.message);
                case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.NoPermissions: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.NoPermissions(err.message);
                case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.Unavailable: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.Unavailable(err.message);
                default: throw ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError(err.message, err.name));
            }
        }
        if (!(err instanceof Error)) {
            throw ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError(String(err)));
        }
        if (err.name === 'ENOPRO' || err.message.includes('ENOPRO')) {
            throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.Unavailable(err.message);
        }
        switch (err.name) {
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileExists: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileExists(err.message);
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileNotFound: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileNotFound(err.message);
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileNotADirectory: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileNotADirectory(err.message);
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.FileIsADirectory: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.FileIsADirectory(err.message);
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.NoPermissions: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.NoPermissions(err.message);
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderErrorCode.Unavailable: throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError.Unavailable(err.message);
            default: throw ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.FileSystemError(err.message, err.name));
        }
    }
    addFileSystemProvider(scheme, provider, options) {
        this._fileSystemProvider.set(scheme, { impl: provider, extUri: options?.isCaseSensitive ? _base_common_resources_js__WEBPACK_IMPORTED_MODULE_10__.extUri : _base_common_resources_js__WEBPACK_IMPORTED_MODULE_10__.extUriIgnorePathCase, isReadonly: !!options?.isReadonly });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_8__.toDisposable)(() => this._fileSystemProvider.delete(scheme));
    }
    getFileSystemProviderExtUri(scheme) {
        return this._fileSystemProvider.get(scheme)?.extUri ?? _base_common_resources_js__WEBPACK_IMPORTED_MODULE_10__.extUri;
    }
};
ExtHostConsumerFileSystem = ExtHostConsumerFileSystem_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostFileSystemInfo))
], ExtHostConsumerFileSystem));
const IExtHostConsumerFileSystem = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__.createDecorator)('IExtHostConsumerFileSystem'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemEventService.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemEventService.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostFileSystemEventService: () => (/* binding */ ExtHostFileSystemEventService)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/glob.js */ "./node_modules/vscode/vscode/src/vs/base/common/glob.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/lazy.js */ "./node_modules/vscode/vscode/src/vs/base/common/lazy.js");








class FileSystemWatcher {
    get ignoreCreateEvents() {
        return Boolean(this._config & 0b001);
    }
    get ignoreChangeEvents() {
        return Boolean(this._config & 0b010);
    }
    get ignoreDeleteEvents() {
        return Boolean(this._config & 0b100);
    }
    constructor(mainContext, workspace, extension, dispatcher, globPattern, options) {
        this.session = Math.random();
        this._onDidCreate = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidChange = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidDelete = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._config = 0;
        if (options?.ignoreCreateEvents) {
            this._config += 0b001;
        }
        if (options?.ignoreChangeEvents) {
            this._config += 0b010;
        }
        if (options?.ignoreDeleteEvents) {
            this._config += 0b100;
        }
        const parsedPattern = (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.parse)(globPattern);
        const excludeOutOfWorkspaceEvents = typeof globPattern === 'string';
        const excludeUncorrelatedEvents = options?.correlate;
        const subscription = dispatcher(events => {
            if (typeof events.session === 'number' && events.session !== this.session) {
                return;
            }
            if (excludeUncorrelatedEvents && typeof events.session === 'undefined') {
                return;
            }
            if (!options?.ignoreCreateEvents) {
                for (const created of events.created) {
                    const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(created);
                    if (parsedPattern(uri.fsPath) && (!excludeOutOfWorkspaceEvents || workspace.getWorkspaceFolder(uri))) {
                        this._onDidCreate.fire(uri);
                    }
                }
            }
            if (!options?.ignoreChangeEvents) {
                for (const changed of events.changed) {
                    const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(changed);
                    if (parsedPattern(uri.fsPath) && (!excludeOutOfWorkspaceEvents || workspace.getWorkspaceFolder(uri))) {
                        this._onDidChange.fire(uri);
                    }
                }
            }
            if (!options?.ignoreDeleteEvents) {
                for (const deleted of events.deleted) {
                    const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(deleted);
                    if (parsedPattern(uri.fsPath) && (!excludeOutOfWorkspaceEvents || workspace.getWorkspaceFolder(uri))) {
                        this._onDidDelete.fire(uri);
                    }
                }
            }
        });
        this._disposable = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Disposable.from(this.ensureWatching(mainContext, extension, globPattern, options, options?.correlate), this._onDidCreate, this._onDidChange, this._onDidDelete, subscription);
    }
    ensureWatching(mainContext, extension, globPattern, options, correlate) {
        const disposable = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Disposable.from();
        if (typeof globPattern === 'string') {
            return disposable;
        }
        if (options?.ignoreChangeEvents && options?.ignoreCreateEvents && options?.ignoreDeleteEvents) {
            return disposable;
        }
        const proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadFileSystemEventService));
        let recursive = false;
        if (globPattern.pattern.includes(_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.GLOBSTAR) || globPattern.pattern.includes(_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.GLOB_SPLIT)) {
            recursive = true;
        }
        let filter;
        if (correlate) {
            if (options?.ignoreChangeEvents || options?.ignoreCreateEvents || options?.ignoreDeleteEvents) {
                filter = _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileChangeFilter.UPDATED | _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileChangeFilter.ADDED | _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileChangeFilter.DELETED;
                if (options?.ignoreChangeEvents) {
                    filter &= ~_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileChangeFilter.UPDATED;
                }
                if (options?.ignoreCreateEvents) {
                    filter &= ~_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileChangeFilter.ADDED;
                }
                if (options?.ignoreDeleteEvents) {
                    filter &= ~_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileChangeFilter.DELETED;
                }
            }
        }
        proxy.$watch(extension.identifier.value, this.session, globPattern.baseUri, { recursive, excludes: options?.excludes ?? [], filter }, Boolean(correlate));
        return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Disposable.from({ dispose: () => proxy.$unwatch(this.session) });
    }
    dispose() {
        this._disposable.dispose();
    }
    get onDidCreate() {
        return this._onDidCreate.event;
    }
    get onDidChange() {
        return this._onDidChange.event;
    }
    get onDidDelete() {
        return this._onDidDelete.event;
    }
}
class LazyRevivedFileSystemEvents {
    constructor(_events) {
        this._events = _events;
        this.session = this._events.session;
        this._created = ( new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_7__.Lazy(() => ( this._events.created.map(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive))));
        this._changed = ( new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_7__.Lazy(() => ( this._events.changed.map(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive))));
        this._deleted = ( new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_7__.Lazy(() => ( this._events.deleted.map(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive))));
    }
    get created() { return this._created.value; }
    get changed() { return this._changed.value; }
    get deleted() { return this._deleted.value; }
}
class ExtHostFileSystemEventService {
    constructor(_mainContext, _logService, _extHostDocumentsAndEditors) {
        this._mainContext = _mainContext;
        this._logService = _logService;
        this._extHostDocumentsAndEditors = _extHostDocumentsAndEditors;
        this._onFileSystemEvent = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidRenameFile = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidCreateFile = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onDidDeleteFile = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this._onWillRenameFile = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.AsyncEmitter());
        this._onWillCreateFile = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.AsyncEmitter());
        this._onWillDeleteFile = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.AsyncEmitter());
        this.onDidRenameFile = this._onDidRenameFile.event;
        this.onDidCreateFile = this._onDidCreateFile.event;
        this.onDidDeleteFile = this._onDidDeleteFile.event;
    }
    createFileSystemWatcher(workspace, extension, globPattern, options) {
        return ( new FileSystemWatcher(
            this._mainContext,
            workspace,
            extension,
            this._onFileSystemEvent.event,
            _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.GlobPattern.from(globPattern),
            options
        ));
    }
    $onFileEvent(events) {
        this._onFileSystemEvent.fire(( new LazyRevivedFileSystemEvents(events)));
    }
    $onDidRunFileOperation(operation, files) {
        switch (operation) {
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.MOVE:
                this._onDidRenameFile.fire(( Object.freeze({ files: ( files.map(f => ({ oldUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.source), newUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.target) }))) })));
                break;
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.DELETE:
                this._onDidDeleteFile.fire(( Object.freeze({ files: ( files.map(f => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.target))) })));
                break;
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.CREATE:
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.COPY:
                this._onDidCreateFile.fire(( Object.freeze({ files: ( files.map(f => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.target))) })));
                break;
        }
    }
    getOnWillRenameFileEvent(extension) {
        return this._createWillExecuteEvent(extension, this._onWillRenameFile);
    }
    getOnWillCreateFileEvent(extension) {
        return this._createWillExecuteEvent(extension, this._onWillCreateFile);
    }
    getOnWillDeleteFileEvent(extension) {
        return this._createWillExecuteEvent(extension, this._onWillDeleteFile);
    }
    _createWillExecuteEvent(extension, emitter) {
        return (listener, thisArg, disposables) => {
            const wrappedListener = function wrapped(e) { listener.call(thisArg, e); };
            wrappedListener.extension = extension;
            return emitter.event(wrappedListener, undefined, disposables);
        };
    }
    async $onWillRunFileOperation(operation, files, timeout, token) {
        switch (operation) {
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.MOVE:
                return await this._fireWillEvent(this._onWillRenameFile, { files: ( files.map(f => ({ oldUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.source), newUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.target) }))) }, timeout, token);
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.DELETE:
                return await this._fireWillEvent(this._onWillDeleteFile, { files: ( files.map(f => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.target))) }, timeout, token);
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.CREATE:
            case _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileOperation.COPY:
                return await this._fireWillEvent(this._onWillCreateFile, { files: ( files.map(f => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(f.target))) }, timeout, token);
        }
        return undefined;
    }
    async _fireWillEvent(emitter, data, timeout, token) {
        const extensionNames = ( new Set());
        const edits = [];
        await emitter.fireAsync(data, token, async (thenable, listener) => {
            const now = Date.now();
            const result = await Promise.resolve(thenable);
            if (result instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.WorkspaceEdit) {
                edits.push([listener.extension, result]);
                extensionNames.add(listener.extension.displayName ?? listener.extension.identifier.value);
            }
            if (Date.now() - now > timeout) {
                this._logService.warn('SLOW file-participant', listener.extension.identifier);
            }
        });
        if (token.isCancellationRequested) {
            return undefined;
        }
        if (edits.length === 0) {
            return undefined;
        }
        const dto = { edits: [] };
        for (const [, edit] of edits) {
            const { edits } = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.WorkspaceEdit.from(edit, {
                getTextDocumentVersion: uri => this._extHostDocumentsAndEditors.getDocument(uri)?.version,
                getNotebookDocumentVersion: () => undefined,
            });
            dto.edits = dto.edits.concat(edits);
        }
        return { edit: dto, extensionNames: Array.from(extensionNames) };
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostFileSystemInfo: () => (/* binding */ ExtHostFileSystemInfo),
/* harmony export */   IExtHostFileSystemInfo: () => (/* binding */ IExtHostFileSystemInfo)
/* harmony export */ });
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");




class ExtHostFileSystemInfo {
    constructor() {
        this._systemSchemes = ( new Set(( Object.keys(_base_common_network_js__WEBPACK_IMPORTED_MODULE_0__.Schemas))));
        this._providerInfo = ( new Map());
        this.extUri = ( new _base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__.ExtUri(uri => {
            const capabilities = this._providerInfo.get(uri.scheme);
            if (capabilities === undefined) {
                return false;
            }
            if (capabilities & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_2__.FileSystemProviderCapabilities.PathCaseSensitive) {
                return false;
            }
            return true;
        }));
    }
    $acceptProviderInfos(uri, capabilities) {
        if (capabilities === null) {
            this._providerInfo.delete(uri.scheme);
        }
        else {
            this._providerInfo.set(uri.scheme, capabilities);
        }
    }
    isFreeScheme(scheme) {
        return !( this._providerInfo.has(scheme)) && !( this._systemSchemes.has(scheme));
    }
    getCapabilities(scheme) {
        return this._providerInfo.get(scheme);
    }
}
const IExtHostFileSystemInfo = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__.createDecorator)('IExtHostFileSystemInfo'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IExtHostInitDataService: () => (/* binding */ IExtHostInitDataService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IExtHostInitDataService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('IExtHostInitDataService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInteractive.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInteractive.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostInteractive: () => (/* binding */ ExtHostInteractive)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");


class ExtHostInteractive {
    constructor(mainContext, _extHostNotebooks, _textDocumentsAndEditors, _commands, _logService) {
        this._extHostNotebooks = _extHostNotebooks;
        this._textDocumentsAndEditors = _textDocumentsAndEditors;
        this._commands = _commands;
        const openApiCommand = ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_1__.ApiCommand(
            'interactive.open',
            '_interactive.open',
            'Open interactive window and return notebook editor and input URI',
            [
                ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_1__.ApiCommandArgument('showOptions', 'Show Options', v => true, v => v)),
                ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_1__.ApiCommandArgument('resource', 'Interactive resource Uri', v => true, v => v)),
                ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_1__.ApiCommandArgument('controllerId', 'Notebook controller Id', v => true, v => v)),
                ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_1__.ApiCommandArgument('title', 'Interactive editor title', v => true, v => v))
            ],
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_1__.ApiCommandResult('Notebook and input URI', (v) => {
                _logService.debug('[ExtHostInteractive] open iw with notebook editor id', v.notebookEditorId);
                if (v.notebookEditorId !== undefined) {
                    const editor = this._extHostNotebooks.getEditorById(v.notebookEditorId);
                    _logService.debug('[ExtHostInteractive] notebook editor found', editor.id);
                    return { notebookUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(v.notebookUri), inputUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(v.inputUri), notebookEditor: editor.apiEditor };
                }
                _logService.debug('[ExtHostInteractive] notebook editor not found, uris for the interactive document', v.notebookUri, v.inputUri);
                return { notebookUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(v.notebookUri), inputUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(v.inputUri) };
            }))
        ));
        this._commands.registerApiCommand(openApiCommand);
    }
    $willAddInteractiveDocument(uri, eol, languageId, notebookUri) {
        this._textDocumentsAndEditors.acceptDocumentsAndEditorsDelta({
            addedDocuments: [{
                    EOL: eol,
                    lines: [''],
                    languageId: languageId,
                    uri: uri,
                    isDirty: false,
                    versionId: 1,
                }]
        });
    }
    $willRemoveInteractiveDocument(uri, notebookUri) {
        this._textDocumentsAndEditors.acceptDocumentsAndEditorsDelta({
            removedDocuments: [uri]
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLabelService.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLabelService.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLabelService: () => (/* binding */ ExtHostLabelService)
/* harmony export */ });
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");


class ExtHostLabelService {
    constructor(mainContext) {
        this._handlePool = 0;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadLabelService));
    }
    $registerResourceLabelFormatter(formatter) {
        const handle = this._handlePool++;
        this._proxy.$registerResourceLabelFormatter(handle, formatter);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__.toDisposable)(() => {
            this._proxy.$unregisterResourceLabelFormatter(handle);
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageFeatures.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageFeatures.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLanguageFeatures: () => (/* binding */ ExtHostLanguageFeatures)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_idGenerator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/idGenerator.js */ "./node_modules/vscode/vscode/src/vs/base/common/idGenerator.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/stopwatch.js */ "./node_modules/vscode/vscode/src/vs/base/common/stopwatch.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _editor_common_core_selection_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../editor/common/core/selection.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/selection.js");
/* harmony import */ var _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../editor/common/languages.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages.js");
/* harmony import */ var _editor_common_services_semanticTokensDto_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../editor/common/services/semanticTokensDto.js */ "./node_modules/vscode/vscode/src/vs/editor/common/services/semanticTokensDto.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./cache.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/cache.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");






















const _moduleId = "vs/workbench/api/common/extHostLanguageFeatures";
class DocumentSymbolAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideDocumentSymbols(resource, token) {
        const doc = this._documents.getDocument(resource);
        const value = await this._provider.provideDocumentSymbols(doc, token);
        if ((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isFalsyOrEmpty)(value)) {
            return undefined;
        }
        else if (value[0] instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.DocumentSymbol) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DocumentSymbol.from))
            );
        }
        else {
            return DocumentSymbolAdapter._asDocumentSymbolTree(value);
        }
    }
    static _asDocumentSymbolTree(infos) {
        infos = infos.slice(0).sort((a, b) => {
            let res = a.location.range.start.compareTo(b.location.range.start);
            if (res === 0) {
                res = b.location.range.end.compareTo(a.location.range.end);
            }
            return res;
        });
        const res = [];
        const parentStack = [];
        for (const info of infos) {
            const element = {
                name: info.name || '!!MISSING: name!!',
                kind: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.SymbolKind.from(info.kind),
                tags: info.tags?.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.SymbolTag.from) || [],
                detail: '',
                containerName: info.containerName,
                range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(info.location.range),
                selectionRange: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(info.location.range),
                children: []
            };
            while (true) {
                if (parentStack.length === 0) {
                    parentStack.push(element);
                    res.push(element);
                    break;
                }
                const parent = parentStack[parentStack.length - 1];
                if (_editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_11__.Range.containsRange(parent.range, element.range) && !_editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_11__.Range.equalsRange(parent.range, element.range)) {
                    parent.children?.push(element);
                    parentStack.push(element);
                    break;
                }
                parentStack.pop();
            }
        }
        return res;
    }
}
class CodeLensAdapter {
    constructor(_documents, _commands, _provider, _extension, _extTelemetry, _logService) {
        this._documents = _documents;
        this._commands = _commands;
        this._provider = _provider;
        this._extension = _extension;
        this._extTelemetry = _extTelemetry;
        this._logService = _logService;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('CodeLens')));
        this._disposables = ( (new Map()));
    }
    async provideCodeLenses(resource, token) {
        const doc = this._documents.getDocument(resource);
        const lenses = await this._provider.provideCodeLenses(doc, token);
        if (!lenses || token.isCancellationRequested) {
            return undefined;
        }
        const cacheId = this._cache.add(lenses);
        const disposables = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
        this._disposables.set(cacheId, disposables);
        const result = {
            cacheId,
            lenses: [],
        };
        for (let i = 0; i < lenses.length; i++) {
            result.lenses.push({
                cacheId: [cacheId, i],
                range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(lenses[i].range),
                command: this._commands.toInternal(lenses[i].command, disposables)
            });
        }
        return result;
    }
    async resolveCodeLens(symbol, token) {
        const lens = symbol.cacheId && this._cache.get(...symbol.cacheId);
        if (!lens) {
            return undefined;
        }
        let resolvedLens;
        if (typeof this._provider.resolveCodeLens !== 'function' || lens.isResolved) {
            resolvedLens = lens;
        }
        else {
            resolvedLens = await this._provider.resolveCodeLens(lens, token);
        }
        if (!resolvedLens) {
            resolvedLens = lens;
        }
        if (token.isCancellationRequested) {
            return undefined;
        }
        const disposables = symbol.cacheId && this._disposables.get(symbol.cacheId[0]);
        if (!disposables) {
            return undefined;
        }
        if (!resolvedLens.command) {
            const error = ( (new Error(
                'INVALID code lens resolved, lacks command: ' + this._extension.identifier.value
            )));
            this._extTelemetry.onExtensionError(this._extension.identifier, error);
            this._logService.error(error);
            return undefined;
        }
        symbol.command = this._commands.toInternal(resolvedLens.command, disposables);
        return symbol;
    }
    releaseCodeLenses(cachedId) {
        this._disposables.get(cachedId)?.dispose();
        this._disposables.delete(cachedId);
        this._cache.delete(cachedId);
    }
}
function convertToLocationLinks(value) {
    if (Array.isArray(value)) {
        return (
             (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DefinitionLink.from))
        );
    }
    else if (value) {
        return [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DefinitionLink.from(value)];
    }
    return [];
}
class DefinitionAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideDefinition(resource, position, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideDefinition(doc, pos, token);
        return convertToLocationLinks(value);
    }
}
class DeclarationAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideDeclaration(resource, position, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideDeclaration(doc, pos, token);
        return convertToLocationLinks(value);
    }
}
class ImplementationAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideImplementation(resource, position, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideImplementation(doc, pos, token);
        return convertToLocationLinks(value);
    }
}
class TypeDefinitionAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideTypeDefinition(resource, position, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideTypeDefinition(doc, pos, token);
        return convertToLocationLinks(value);
    }
}
class HoverAdapter {
    static { this.HOVER_MAP_MAX_SIZE = 10; }
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
        this._hoverCounter = 0;
        this._hoverMap = ( (new Map()));
    }
    async provideHover(resource, position, context, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        let value;
        if (context && context.verbosityRequest) {
            const previousHoverId = context.verbosityRequest.previousHover.id;
            const previousHover = this._hoverMap.get(previousHoverId);
            if (!previousHover) {
                throw ( (new Error(`Hover with id ${previousHoverId} not found`)));
            }
            const hoverContext = { verbosityDelta: context.verbosityRequest.verbosityDelta, previousHover };
            value = await this._provider.provideHover(doc, pos, token, hoverContext);
        }
        else {
            value = await this._provider.provideHover(doc, pos, token);
        }
        if (!value || (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isFalsyOrEmpty)(value.contents)) {
            return undefined;
        }
        if (!value.range) {
            value.range = doc.getWordRangeAtPosition(pos);
        }
        if (!value.range) {
            value.range = ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Range(pos, pos)));
        }
        const convertedHover = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Hover.from(value);
        const id = this._hoverCounter;
        if (this._hoverMap.size === HoverAdapter.HOVER_MAP_MAX_SIZE) {
            const minimumId = Math.min(...( (this._hoverMap.keys())));
            this._hoverMap.delete(minimumId);
        }
        this._hoverMap.set(id, value);
        this._hoverCounter += 1;
        const hover = {
            ...convertedHover,
            id
        };
        return hover;
    }
    releaseHover(id) {
        this._hoverMap.delete(id);
    }
}
class EvaluatableExpressionAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideEvaluatableExpression(resource, position, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideEvaluatableExpression(doc, pos, token);
        if (value) {
            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.EvaluatableExpression.from(value);
        }
        return undefined;
    }
}
class InlineValuesAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideInlineValues(resource, viewPort, context, token) {
        const doc = this._documents.getDocument(resource);
        const value = await this._provider.provideInlineValues(doc, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(viewPort), _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.InlineValueContext.to(context), token);
        if (Array.isArray(value)) {
            return (
                 (value.map(iv => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.InlineValue.from(iv)))
            );
        }
        return undefined;
    }
}
class DocumentHighlightAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideDocumentHighlights(resource, position, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideDocumentHighlights(doc, pos, token);
        if (Array.isArray(value)) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DocumentHighlight.from))
            );
        }
        return undefined;
    }
}
class MultiDocumentHighlightAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideMultiDocumentHighlights(resource, position, otherResources, token) {
        const doc = this._documents.getDocument(resource);
        const otherDocuments = ( (otherResources.map(r => this._documents.getDocument(r))));
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideMultiDocumentHighlights(doc, pos, otherDocuments, token);
        if (Array.isArray(value)) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.MultiDocumentHighlight.from))
            );
        }
        return undefined;
    }
}
class LinkedEditingRangeAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideLinkedEditingRanges(resource, position, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideLinkedEditingRanges(doc, pos, token);
        if (value && Array.isArray(value.ranges)) {
            return {
                ranges: (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( (value.ranges.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from)))),
                wordPattern: value.wordPattern
            };
        }
        return undefined;
    }
}
class ReferenceAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideReferences(resource, position, context, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideReferences(doc, pos, context, token);
        if (Array.isArray(value)) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.location.from))
            );
        }
        return undefined;
    }
}
class CodeActionAdapter {
    static { this._maxCodeActionsPerFile = 1000; }
    constructor(_documents, _commands, _diagnostics, _provider, _logService, _extension, _apiDeprecation) {
        this._documents = _documents;
        this._commands = _commands;
        this._diagnostics = _diagnostics;
        this._provider = _provider;
        this._logService = _logService;
        this._extension = _extension;
        this._apiDeprecation = _apiDeprecation;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('CodeAction')));
        this._disposables = ( (new Map()));
    }
    async provideCodeActions(resource, rangeOrSelection, context, token) {
        const doc = this._documents.getDocument(resource);
        const ran = _editor_common_core_selection_js__WEBPACK_IMPORTED_MODULE_12__.Selection.isISelection(rangeOrSelection)
            ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Selection.to(rangeOrSelection)
            : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(rangeOrSelection);
        const allDiagnostics = [];
        for (const diagnostic of this._diagnostics.getDiagnostics(resource)) {
            if (ran.intersection(diagnostic.range)) {
                const newLen = allDiagnostics.push(diagnostic);
                if (newLen > CodeActionAdapter._maxCodeActionsPerFile) {
                    break;
                }
            }
        }
        const codeActionContext = {
            diagnostics: allDiagnostics,
            only: context.only ? ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.CodeActionKind(context.only))) : undefined,
            triggerKind: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.CodeActionTriggerKind.to(context.trigger),
        };
        const commandsOrActions = await this._provider.provideCodeActions(doc, ran, codeActionContext, token);
        if (!(0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(commandsOrActions) || token.isCancellationRequested) {
            return undefined;
        }
        const cacheId = this._cache.add(commandsOrActions);
        const disposables = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
        this._disposables.set(cacheId, disposables);
        const actions = [];
        for (let i = 0; i < commandsOrActions.length; i++) {
            const candidate = commandsOrActions[i];
            if (!candidate) {
                continue;
            }
            if (CodeActionAdapter._isCommand(candidate)) {
                this._apiDeprecation.report('CodeActionProvider.provideCodeActions - return commands', this._extension, `Return 'CodeAction' instances instead.`);
                actions.push({
                    _isSynthetic: true,
                    title: candidate.title,
                    command: this._commands.toInternal(candidate, disposables),
                });
            }
            else {
                if (codeActionContext.only) {
                    if (!candidate.kind) {
                        this._logService.warn(`${this._extension.identifier.value} - Code actions of kind '${codeActionContext.only.value}' requested but returned code action does not have a 'kind'. Code action will be dropped. Please set 'CodeAction.kind'.`);
                    }
                    else if (!codeActionContext.only.contains(candidate.kind)) {
                        this._logService.warn(`${this._extension.identifier.value} - Code actions of kind '${codeActionContext.only.value}' requested but returned code action is of kind '${candidate.kind.value}'. Code action will be dropped. Please check 'CodeActionContext.only' to only return requested code actions.`);
                    }
                }
                const range = candidate.ranges ?? [];
                actions.push({
                    cacheId: [cacheId, i],
                    title: candidate.title,
                    command: candidate.command && this._commands.toInternal(candidate.command, disposables),
                    diagnostics: candidate.diagnostics && ( (candidate.diagnostics.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Diagnostic.from))),
                    edit: candidate.edit && _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(candidate.edit, undefined),
                    kind: candidate.kind && candidate.kind.value,
                    isPreferred: candidate.isPreferred,
                    isAI: (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.isProposedApiEnabled)(this._extension, 'codeActionAI') ? candidate.isAI : false,
                    ranges: (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.isProposedApiEnabled)(this._extension, 'codeActionRanges') ? (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( (range.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from)))) : undefined,
                    disabled: candidate.disabled?.reason
                });
            }
        }
        return { cacheId, actions };
    }
    async resolveCodeAction(id, token) {
        const [sessionId, itemId] = id;
        const item = this._cache.get(sessionId, itemId);
        if (!item || CodeActionAdapter._isCommand(item)) {
            return {};
        }
        if (!this._provider.resolveCodeAction) {
            return {};
        }
        const resolvedItem = (await this._provider.resolveCodeAction(item, token)) ?? item;
        let resolvedEdit;
        if (resolvedItem.edit) {
            resolvedEdit = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(resolvedItem.edit, undefined);
        }
        let resolvedCommand;
        if (resolvedItem.command) {
            const disposables = this._disposables.get(sessionId);
            if (disposables) {
                resolvedCommand = this._commands.toInternal(resolvedItem.command, disposables);
            }
        }
        return { edit: resolvedEdit, command: resolvedCommand };
    }
    releaseCodeActions(cachedId) {
        this._disposables.get(cachedId)?.dispose();
        this._disposables.delete(cachedId);
        this._cache.delete(cachedId);
    }
    static _isCommand(thing) {
        return typeof thing.command === 'string' && typeof thing.title === 'string';
    }
}
class DocumentPasteEditProvider {
    constructor(_proxy, _documents, _provider, _handle, _extension) {
        this._proxy = _proxy;
        this._documents = _documents;
        this._provider = _provider;
        this._handle = _handle;
        this._extension = _extension;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('DocumentPasteEdit')));
    }
    async prepareDocumentPaste(resource, ranges, dataTransferDto, token) {
        if (!this._provider.prepareDocumentPaste) {
            return;
        }
        const doc = this._documents.getDocument(resource);
        const vscodeRanges = ( (ranges.map(range => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(range))));
        const dataTransfer = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DataTransfer.toDataTransfer(dataTransferDto, () => {
            throw ( (new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__.NotImplementedError()));
        });
        await this._provider.prepareDocumentPaste(doc, vscodeRanges, dataTransfer, token);
        if (token.isCancellationRequested) {
            return;
        }
        const entries = Array.from(dataTransfer).filter(([, value]) => !(value instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.InternalDataTransferItem));
        return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DataTransfer.from(entries);
    }
    async providePasteEdits(requestId, resource, ranges, dataTransferDto, context, token) {
        if (!this._provider.provideDocumentPasteEdits) {
            return [];
        }
        const doc = this._documents.getDocument(resource);
        const vscodeRanges = ( (ranges.map(range => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(range))));
        const dataTransfer = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DataTransfer.toDataTransfer(dataTransferDto, async (id) => {
            return (await this._proxy.$resolvePasteFileData(this._handle, requestId, id)).buffer;
        });
        const edits = await this._provider.provideDocumentPasteEdits(doc, vscodeRanges, dataTransfer, {
            only: context.only ? ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.DocumentDropOrPasteEditKind(context.only))) : undefined,
            triggerKind: context.triggerKind,
        }, token);
        if (!edits || token.isCancellationRequested) {
            return [];
        }
        const cacheId = this._cache.add(edits);
        return (
             (edits.map((edit, i) => ({
                _cacheId: [cacheId, i],
                title: edit.title ?? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_15__.localizeWithPath)(
                    _moduleId,
                    0,
                    "Paste using '{0}' extension",
                    this._extension.displayName || this._extension.name
                )),
                kind: edit.kind,
                yieldTo: edit.yieldTo?.map(x => x.value),
                insertText: typeof edit.insertText === 'string' ? edit.insertText : { snippet: edit.insertText.value },
                additionalEdit: edit.additionalEdit ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(edit.additionalEdit, undefined) : undefined,
            })))
        );
    }
    async resolvePasteEdit(id, token) {
        const [sessionId, itemId] = id;
        const item = this._cache.get(sessionId, itemId);
        if (!item || !this._provider.resolveDocumentPasteEdit) {
            return {};
        }
        const resolvedItem = (await this._provider.resolveDocumentPasteEdit(item, token)) ?? item;
        const additionalEdit = resolvedItem.additionalEdit ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(resolvedItem.additionalEdit, undefined) : undefined;
        return { additionalEdit };
    }
    releasePasteEdits(id) {
        this._cache.delete(id);
    }
}
class DocumentFormattingAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideDocumentFormattingEdits(resource, options, token) {
        const document = this._documents.getDocument(resource);
        const value = await this._provider.provideDocumentFormattingEdits(document, options, token);
        if (Array.isArray(value)) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TextEdit.from))
            );
        }
        return undefined;
    }
}
class RangeFormattingAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideDocumentRangeFormattingEdits(resource, range, options, token) {
        const document = this._documents.getDocument(resource);
        const ran = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(range);
        const value = await this._provider.provideDocumentRangeFormattingEdits(document, ran, options, token);
        if (Array.isArray(value)) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TextEdit.from))
            );
        }
        return undefined;
    }
    async provideDocumentRangesFormattingEdits(resource, ranges, options, token) {
        (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.assertType)(typeof this._provider.provideDocumentRangesFormattingEdits === 'function', 'INVALID invocation of `provideDocumentRangesFormattingEdits`');
        const document = this._documents.getDocument(resource);
        const _ranges = ( (ranges.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to)));
        const value = await this._provider.provideDocumentRangesFormattingEdits(document, _ranges, options, token);
        if (Array.isArray(value)) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TextEdit.from))
            );
        }
        return undefined;
    }
}
class OnTypeFormattingAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
        this.autoFormatTriggerCharacters = [];
    }
    async provideOnTypeFormattingEdits(resource, position, ch, options, token) {
        const document = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const value = await this._provider.provideOnTypeFormattingEdits(document, pos, ch, options, token);
        if (Array.isArray(value)) {
            return (
                 (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TextEdit.from))
            );
        }
        return undefined;
    }
}
class NavigateTypeAdapter {
    constructor(_provider, _logService) {
        this._provider = _provider;
        this._logService = _logService;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('WorkspaceSymbols')));
    }
    async provideWorkspaceSymbols(search, token) {
        const value = await this._provider.provideWorkspaceSymbols(search, token);
        if (!(0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(value)) {
            return { symbols: [] };
        }
        const sid = this._cache.add(value);
        const result = {
            cacheId: sid,
            symbols: []
        };
        for (let i = 0; i < value.length; i++) {
            const item = value[i];
            if (!item || !item.name) {
                this._logService.warn('INVALID SymbolInformation', item);
                continue;
            }
            result.symbols.push({
                ..._extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceSymbol.from(item),
                cacheId: [sid, i]
            });
        }
        return result;
    }
    async resolveWorkspaceSymbol(symbol, token) {
        if (typeof this._provider.resolveWorkspaceSymbol !== 'function') {
            return symbol;
        }
        if (!symbol.cacheId) {
            return symbol;
        }
        const item = this._cache.get(...symbol.cacheId);
        if (item) {
            const value = await this._provider.resolveWorkspaceSymbol(item, token);
            return value && (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_6__.mixin)(symbol, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceSymbol.from(value), true);
        }
        return undefined;
    }
    releaseWorkspaceSymbols(id) {
        this._cache.delete(id);
    }
}
class RenameAdapter {
    static supportsResolving(provider) {
        return typeof provider.prepareRename === 'function';
    }
    constructor(_documents, _provider, _logService) {
        this._documents = _documents;
        this._provider = _provider;
        this._logService = _logService;
    }
    async provideRenameEdits(resource, position, newName, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        try {
            const value = await this._provider.provideRenameEdits(doc, pos, newName, token);
            if (!value) {
                return undefined;
            }
            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(value);
        }
        catch (err) {
            const rejectReason = RenameAdapter._asMessage(err);
            if (rejectReason) {
                return { rejectReason, edits: undefined };
            }
            else {
                return Promise.reject(err);
            }
        }
    }
    async resolveRenameLocation(resource, position, token) {
        if (typeof this._provider.prepareRename !== 'function') {
            return Promise.resolve(undefined);
        }
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        try {
            const rangeOrLocation = await this._provider.prepareRename(doc, pos, token);
            let range;
            let text;
            if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Range.isRange(rangeOrLocation)) {
                range = rangeOrLocation;
                text = doc.getText(rangeOrLocation);
            }
            else if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isObject)(rangeOrLocation)) {
                range = rangeOrLocation.range;
                text = rangeOrLocation.placeholder;
            }
            if (!range || !text) {
                return undefined;
            }
            if (range.start.line > pos.line || range.end.line < pos.line) {
                this._logService.warn('INVALID rename location: position line must be within range start/end lines');
                return undefined;
            }
            return { range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(range), text };
        }
        catch (err) {
            const rejectReason = RenameAdapter._asMessage(err);
            if (rejectReason) {
                return { rejectReason, range: undefined, text: undefined };
            }
            else {
                return Promise.reject(err);
            }
        }
    }
    static _asMessage(err) {
        if (typeof err === 'string') {
            return err;
        }
        else if (err instanceof Error && typeof err.message === 'string') {
            return err.message;
        }
        else {
            return undefined;
        }
    }
}
class NewSymbolNamesAdapter {
    static { this.languageTriggerKindToVSCodeTriggerKind = {
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.NewSymbolNameTriggerKind.Invoke]: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.NewSymbolNameTriggerKind.Invoke,
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.NewSymbolNameTriggerKind.Automatic]: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.NewSymbolNameTriggerKind.Automatic,
    }; }
    constructor(_documents, _provider, _logService) {
        this._documents = _documents;
        this._provider = _provider;
        this._logService = _logService;
    }
    async supportsAutomaticNewSymbolNamesTriggerKind() {
        return this._provider.supportsAutomaticTriggerKind;
    }
    async provideNewSymbolNames(resource, range, triggerKind, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(range);
        try {
            const kind = NewSymbolNamesAdapter.languageTriggerKindToVSCodeTriggerKind[triggerKind];
            const value = await this._provider.provideNewSymbolNames(doc, pos, kind, token);
            if (!value) {
                return undefined;
            }
            return (
                 (value.map(
                    v => typeof v === 'string'
                        ? { newSymbolName: v }
                        : { newSymbolName: v.newSymbolName, tags: v.tags }
                ))
            );
        }
        catch (err) {
            this._logService.error(NewSymbolNamesAdapter._asMessage(err) ?? JSON.stringify(err, null, '\t') );
            return undefined;
        }
    }
    static _asMessage(err) {
        if (typeof err === 'string') {
            return err;
        }
        else if (err instanceof Error && typeof err.message === 'string') {
            return err.message;
        }
        else {
            return undefined;
        }
    }
}
class SemanticTokensPreviousResult {
    constructor(resultId, tokens) {
        this.resultId = resultId;
        this.tokens = tokens;
    }
}
class DocumentSemanticTokensAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
        this._nextResultId = 1;
        this._previousResults = ( (new Map()));
    }
    async provideDocumentSemanticTokens(resource, previousResultId, token) {
        const doc = this._documents.getDocument(resource);
        const previousResult = (previousResultId !== 0 ? this._previousResults.get(previousResultId) : null);
        let value = typeof previousResult?.resultId === 'string' && typeof this._provider.provideDocumentSemanticTokensEdits === 'function'
            ? await this._provider.provideDocumentSemanticTokensEdits(doc, previousResult.resultId, token)
            : await this._provider.provideDocumentSemanticTokens(doc, token);
        if (previousResult) {
            this._previousResults.delete(previousResultId);
        }
        if (!value) {
            return null;
        }
        value = DocumentSemanticTokensAdapter._fixProvidedSemanticTokens(value);
        return this._send(DocumentSemanticTokensAdapter._convertToEdits(previousResult, value), value);
    }
    async releaseDocumentSemanticColoring(semanticColoringResultId) {
        this._previousResults.delete(semanticColoringResultId);
    }
    static _fixProvidedSemanticTokens(v) {
        if (DocumentSemanticTokensAdapter._isSemanticTokens(v)) {
            if (DocumentSemanticTokensAdapter._isCorrectSemanticTokens(v)) {
                return v;
            }
            return (
                 (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.SemanticTokens( (new Uint32Array(v.data)), v.resultId))
            );
        }
        else if (DocumentSemanticTokensAdapter._isSemanticTokensEdits(v)) {
            if (DocumentSemanticTokensAdapter._isCorrectSemanticTokensEdits(v)) {
                return v;
            }
            return (
                 (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.SemanticTokensEdits( (v.edits.map(edit => ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.SemanticTokensEdit(
                    edit.start,
                    edit.deleteCount,
                    edit.data ? ( (new Uint32Array(edit.data))) : edit.data
                ))))), v.resultId))
            );
        }
        return v;
    }
    static _isSemanticTokens(v) {
        return v && !!(v.data);
    }
    static _isCorrectSemanticTokens(v) {
        return (v.data instanceof Uint32Array);
    }
    static _isSemanticTokensEdits(v) {
        return v && Array.isArray(v.edits);
    }
    static _isCorrectSemanticTokensEdits(v) {
        for (const edit of v.edits) {
            if (!(edit.data instanceof Uint32Array)) {
                return false;
            }
        }
        return true;
    }
    static _convertToEdits(previousResult, newResult) {
        if (!DocumentSemanticTokensAdapter._isSemanticTokens(newResult)) {
            return newResult;
        }
        if (!previousResult || !previousResult.tokens) {
            return newResult;
        }
        const oldData = previousResult.tokens;
        const oldLength = oldData.length;
        const newData = newResult.data;
        const newLength = newData.length;
        let commonPrefixLength = 0;
        const maxCommonPrefixLength = Math.min(oldLength, newLength);
        while (commonPrefixLength < maxCommonPrefixLength && oldData[commonPrefixLength] === newData[commonPrefixLength]) {
            commonPrefixLength++;
        }
        if (commonPrefixLength === oldLength && commonPrefixLength === newLength) {
            return (
                 (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.SemanticTokensEdits([], newResult.resultId))
            );
        }
        let commonSuffixLength = 0;
        const maxCommonSuffixLength = maxCommonPrefixLength - commonPrefixLength;
        while (commonSuffixLength < maxCommonSuffixLength && oldData[oldLength - commonSuffixLength - 1] === newData[newLength - commonSuffixLength - 1]) {
            commonSuffixLength++;
        }
        return (
             (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.SemanticTokensEdits([{
                    start: commonPrefixLength,
                    deleteCount: (oldLength - commonPrefixLength - commonSuffixLength),
                    data: newData.subarray(commonPrefixLength, newLength - commonSuffixLength)
                }], newResult.resultId))
        );
    }
    _send(value, original) {
        if (DocumentSemanticTokensAdapter._isSemanticTokens(value)) {
            const myId = this._nextResultId++;
            this._previousResults.set(myId, ( (new SemanticTokensPreviousResult(value.resultId, value.data))));
            return (0,_editor_common_services_semanticTokensDto_js__WEBPACK_IMPORTED_MODULE_14__.encodeSemanticTokensDto)({
                id: myId,
                type: 'full',
                data: value.data
            });
        }
        if (DocumentSemanticTokensAdapter._isSemanticTokensEdits(value)) {
            const myId = this._nextResultId++;
            if (DocumentSemanticTokensAdapter._isSemanticTokens(original)) {
                this._previousResults.set(myId, ( (new SemanticTokensPreviousResult(original.resultId, original.data))));
            }
            else {
                this._previousResults.set(myId, ( (new SemanticTokensPreviousResult(value.resultId))));
            }
            return (0,_editor_common_services_semanticTokensDto_js__WEBPACK_IMPORTED_MODULE_14__.encodeSemanticTokensDto)({
                id: myId,
                type: 'delta',
                deltas: ( ((value.edits || []).map(
                    edit => ({ start: edit.start, deleteCount: edit.deleteCount, data: edit.data })
                )))
            });
        }
        return null;
    }
}
class DocumentRangeSemanticTokensAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideDocumentRangeSemanticTokens(resource, range, token) {
        const doc = this._documents.getDocument(resource);
        const value = await this._provider.provideDocumentRangeSemanticTokens(doc, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(range), token);
        if (!value) {
            return null;
        }
        return this._send(value);
    }
    _send(value) {
        return (0,_editor_common_services_semanticTokensDto_js__WEBPACK_IMPORTED_MODULE_14__.encodeSemanticTokensDto)({
            id: 0,
            type: 'full',
            data: value.data
        });
    }
}
class CompletionsAdapter {
    static supportsResolving(provider) {
        return typeof provider.resolveCompletionItem === 'function';
    }
    constructor(_documents, _commands, _provider, _apiDeprecation, _extension) {
        this._documents = _documents;
        this._commands = _commands;
        this._provider = _provider;
        this._apiDeprecation = _apiDeprecation;
        this._extension = _extension;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('CompletionItem')));
        this._disposables = ( (new Map()));
    }
    async provideCompletionItems(resource, position, context, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const replaceRange = doc.getWordRangeAtPosition(pos) || ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Range(pos, pos)));
        const insertRange = replaceRange.with({ end: pos });
        const sw = ( (new _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_7__.StopWatch()));
        const itemsOrList = await this._provider.provideCompletionItems(doc, pos, token, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.CompletionContext.to(context));
        if (!itemsOrList) {
            return undefined;
        }
        if (token.isCancellationRequested) {
            return undefined;
        }
        const list = Array.isArray(itemsOrList) ? ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.CompletionList(itemsOrList))) : itemsOrList;
        const pid = CompletionsAdapter.supportsResolving(this._provider) ? this._cache.add(list.items) : this._cache.add([]);
        const disposables = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
        this._disposables.set(pid, disposables);
        const completions = [];
        const result = {
            x: pid,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestResultDtoField.completions]: completions,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestResultDtoField.defaultRanges]: { replace: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(replaceRange), insert: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(insertRange) },
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestResultDtoField.isIncomplete]: list.isIncomplete || undefined,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestResultDtoField.duration]: sw.elapsed()
        };
        for (let i = 0; i < list.items.length; i++) {
            const item = list.items[i];
            const dto = this._convertCompletionItem(item, [pid, i], insertRange, replaceRange);
            completions.push(dto);
        }
        return result;
    }
    async resolveCompletionItem(id, token) {
        if (typeof this._provider.resolveCompletionItem !== 'function') {
            return undefined;
        }
        const item = this._cache.get(...id);
        if (!item) {
            return undefined;
        }
        const dto1 = this._convertCompletionItem(item, id);
        const resolvedItem = await this._provider.resolveCompletionItem(item, token);
        if (!resolvedItem) {
            return undefined;
        }
        const dto2 = this._convertCompletionItem(resolvedItem, id);
        if (dto1[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertText] !== dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertText]
            || dto1[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertTextRules] !== dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertTextRules]) {
            this._apiDeprecation.report('CompletionItem.insertText', this._extension, 'extension MAY NOT change \'insertText\' of a CompletionItem during resolve');
        }
        if (dto1[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandIdent] !== dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandIdent]
            || dto1[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandId] !== dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandId]
            || !(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_6__.equals)(dto1[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandArguments], dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandArguments])) {
            this._apiDeprecation.report('CompletionItem.command', this._extension, 'extension MAY NOT change \'command\' of a CompletionItem during resolve');
        }
        return {
            ...dto1,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.documentation]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.documentation],
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.detail]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.detail],
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.additionalTextEdits]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.additionalTextEdits],
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertText]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertText],
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertTextRules]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertTextRules],
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandIdent]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandIdent],
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandId]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandId],
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandArguments]: dto2[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandArguments],
        };
    }
    releaseCompletionItems(id) {
        this._disposables.get(id)?.dispose();
        this._disposables.delete(id);
        this._cache.delete(id);
    }
    _convertCompletionItem(item, id, defaultInsertRange, defaultReplaceRange) {
        const disposables = this._disposables.get(id[0]);
        if (!disposables) {
            throw Error('DisposableStore is missing...');
        }
        const command = this._commands.toInternal(item.command, disposables);
        const result = {
            x: id,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.label]: item.label,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.kind]: item.kind !== undefined ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.CompletionItemKind.from(item.kind) : undefined,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.kindModifier]: item.tags && ( (item.tags.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.CompletionItemTag.from))),
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.detail]: item.detail,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.documentation]: typeof item.documentation === 'undefined' ? undefined : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.MarkdownString.fromStrict(item.documentation),
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.sortText]: item.sortText !== item.label ? item.sortText : undefined,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.filterText]: item.filterText !== item.label ? item.filterText : undefined,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.preselect]: item.preselect || undefined,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertTextRules]: item.keepWhitespace ? _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.CompletionItemInsertTextRule.KeepWhitespace : _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.CompletionItemInsertTextRule.None,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commitCharacters]: item.commitCharacters?.join(''),
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.additionalTextEdits]: item.additionalTextEdits && ( (item.additionalTextEdits.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TextEdit.from))),
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandIdent]: command?.$ident,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandId]: command?.id,
            [_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.commandArguments]: command?.$ident ? undefined : command?.arguments,
        };
        if (item.textEdit) {
            this._apiDeprecation.report('CompletionItem.textEdit', this._extension, `Use 'CompletionItem.insertText' and 'CompletionItem.range' instead.`);
            result[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertText] = item.textEdit.newText;
        }
        else if (typeof item.insertText === 'string') {
            result[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertText] = item.insertText;
        }
        else if (item.insertText instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.SnippetString) {
            result[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertText] = item.insertText.value;
            result[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.insertTextRules] |= _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.CompletionItemInsertTextRule.InsertAsSnippet;
        }
        let range;
        if (item.textEdit) {
            range = item.textEdit.range;
        }
        else if (item.range) {
            range = item.range;
        }
        if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Range.isRange(range)) {
            result[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.range] = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(range);
        }
        else if (range && (!defaultInsertRange?.isEqual(range.inserting) || !defaultReplaceRange?.isEqual(range.replacing))) {
            result[_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.ISuggestDataDtoField.range] = {
                insert: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(range.inserting),
                replace: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(range.replacing)
            };
        }
        return result;
    }
}
class InlineCompletionAdapterBase {
    async provideInlineCompletions(resource, position, context, token) {
        return undefined;
    }
    async provideInlineEdits(resource, range, context, token) {
        return undefined;
    }
    disposeCompletions(pid) { }
    handleDidShowCompletionItem(pid, idx, updatedInsertText) { }
    handlePartialAccept(pid, idx, acceptedCharacters, info) { }
}
class InlineCompletionAdapter extends InlineCompletionAdapterBase {
    constructor(_extension, _documents, _provider, _commands) {
        super();
        this._extension = _extension;
        this._documents = _documents;
        this._provider = _provider;
        this._commands = _commands;
        this._references = ( (new ReferenceMap()));
        this._isAdditionsProposedApiEnabled = (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.isProposedApiEnabled)(this._extension, 'inlineCompletionsAdditions');
        this.languageTriggerKindToVSCodeTriggerKind = {
            [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.InlineCompletionTriggerKind.Automatic]: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.InlineCompletionTriggerKind.Automatic,
            [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.InlineCompletionTriggerKind.Explicit]: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.InlineCompletionTriggerKind.Invoke,
        };
    }
    get supportsHandleEvents() {
        return (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.isProposedApiEnabled)(this._extension, 'inlineCompletionsAdditions')
            && (typeof this._provider.handleDidShowCompletionItem === 'function'
                || typeof this._provider.handleDidPartiallyAcceptCompletionItem === 'function');
    }
    async provideInlineCompletions(resource, position, context, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const result = await this._provider.provideInlineCompletionItems(doc, pos, {
            selectedCompletionInfo: context.selectedSuggestionInfo
                ? {
                    range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(context.selectedSuggestionInfo.range),
                    text: context.selectedSuggestionInfo.text
                }
                : undefined,
            triggerKind: this.languageTriggerKindToVSCodeTriggerKind[context.triggerKind]
        }, token);
        if (!result) {
            return undefined;
        }
        if (token.isCancellationRequested) {
            return undefined;
        }
        const normalizedResult = Array.isArray(result) ? result : result.items;
        const commands = this._isAdditionsProposedApiEnabled ? Array.isArray(result) ? [] : result.commands || [] : [];
        const enableForwardStability = this._isAdditionsProposedApiEnabled && !Array.isArray(result) ? result.enableForwardStability : undefined;
        let disposableStore = undefined;
        const pid = this._references.createReferenceId({
            dispose() {
                disposableStore?.dispose();
            },
            items: normalizedResult
        });
        return {
            pid,
            items: ( (normalizedResult.map((item, idx) => {
                let command = undefined;
                if (item.command) {
                    if (!disposableStore) {
                        disposableStore = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
                    }
                    command = this._commands.toInternal(item.command, disposableStore);
                }
                const insertText = item.insertText;
                return ({
                    insertText: typeof insertText === 'string' ? insertText : { snippet: insertText.value },
                    filterText: item.filterText,
                    range: item.range ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(item.range) : undefined,
                    command,
                    idx: idx,
                    completeBracketPairs: this._isAdditionsProposedApiEnabled ? item.completeBracketPairs : false,
                });
            }))),
            commands: ( (commands.map(c => {
                if (!disposableStore) {
                    disposableStore = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
                }
                return this._commands.toInternal(c, disposableStore);
            }))),
            suppressSuggestions: false,
            enableForwardStability,
        };
    }
    async provideInlineEdits(resource, range, context, token) {
        if (!this._provider.provideInlineEdits) {
            return undefined;
        }
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.checkProposedApiEnabled)(this._extension, 'inlineCompletionsAdditions');
        const doc = this._documents.getDocument(resource);
        const r = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(range);
        const result = await this._provider.provideInlineEdits(doc, r, {
            selectedCompletionInfo: context.selectedSuggestionInfo
                ? {
                    range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(context.selectedSuggestionInfo.range),
                    text: context.selectedSuggestionInfo.text
                }
                : undefined,
            triggerKind: this.languageTriggerKindToVSCodeTriggerKind[context.triggerKind],
            userPrompt: context.userPrompt,
        }, token);
        if (!result) {
            return undefined;
        }
        if (token.isCancellationRequested) {
            return undefined;
        }
        const normalizedResult = Array.isArray(result) ? result : result.items;
        const commands = this._isAdditionsProposedApiEnabled ? Array.isArray(result) ? [] : result.commands || [] : [];
        const enableForwardStability = this._isAdditionsProposedApiEnabled && !Array.isArray(result) ? result.enableForwardStability : undefined;
        let disposableStore = undefined;
        const pid = this._references.createReferenceId({
            dispose() {
                disposableStore?.dispose();
            },
            items: normalizedResult
        });
        return {
            pid,
            items: ( (normalizedResult.map((item, idx) => {
                let command = undefined;
                if (item.command) {
                    if (!disposableStore) {
                        disposableStore = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
                    }
                    command = this._commands.toInternal(item.command, disposableStore);
                }
                const insertText = item.insertText;
                return ({
                    insertText: typeof insertText === 'string' ? insertText : { snippet: insertText.value },
                    filterText: item.filterText,
                    range: item.range ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(item.range) : undefined,
                    command,
                    idx: idx,
                    completeBracketPairs: this._isAdditionsProposedApiEnabled ? item.completeBracketPairs : false,
                });
            }))),
            commands: ( (commands.map(c => {
                if (!disposableStore) {
                    disposableStore = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
                }
                return this._commands.toInternal(c, disposableStore);
            }))),
            suppressSuggestions: false,
            enableForwardStability,
        };
    }
    disposeCompletions(pid) {
        const data = this._references.disposeReferenceId(pid);
        data?.dispose();
    }
    handleDidShowCompletionItem(pid, idx, updatedInsertText) {
        const completionItem = this._references.get(pid)?.items[idx];
        if (completionItem) {
            if (this._provider.handleDidShowCompletionItem && this._isAdditionsProposedApiEnabled) {
                this._provider.handleDidShowCompletionItem(completionItem, updatedInsertText);
            }
        }
    }
    handlePartialAccept(pid, idx, acceptedCharacters, info) {
        const completionItem = this._references.get(pid)?.items[idx];
        if (completionItem) {
            if (this._provider.handleDidPartiallyAcceptCompletionItem && this._isAdditionsProposedApiEnabled) {
                this._provider.handleDidPartiallyAcceptCompletionItem(completionItem, acceptedCharacters);
                this._provider.handleDidPartiallyAcceptCompletionItem(completionItem, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.PartialAcceptInfo.to(info));
            }
        }
    }
}
class InlineEditAdapter {
    async provideInlineEdits(uri, context, token) {
        const doc = this._documents.getDocument(uri);
        const result = await this._provider.provideInlineEdit(doc, {
            triggerKind: this.languageTriggerKindToVSCodeTriggerKind[context.triggerKind]
        }, token);
        if (!result) {
            return undefined;
        }
        if (token.isCancellationRequested) {
            return undefined;
        }
        let disposableStore = undefined;
        const pid = this._references.createReferenceId({
            dispose() {
                disposableStore?.dispose();
            },
            item: result
        });
        let acceptCommand = undefined;
        if (result.accepted) {
            if (!disposableStore) {
                disposableStore = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
            }
            acceptCommand = this._commands.toInternal(result.accepted, disposableStore);
        }
        let rejectCommand = undefined;
        if (result.rejected) {
            if (!disposableStore) {
                disposableStore = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
            }
            rejectCommand = this._commands.toInternal(result.rejected, disposableStore);
        }
        const langResult = {
            pid,
            text: result.text,
            range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(result.range),
            accepted: acceptCommand,
            rejected: rejectCommand,
        };
        return langResult;
    }
    disposeEdit(pid) {
        const data = this._references.disposeReferenceId(pid);
        data?.dispose();
    }
    constructor(_extension, _documents, _provider, _commands) {
        this._documents = _documents;
        this._provider = _provider;
        this._commands = _commands;
        this._references = ( (new ReferenceMap()));
        this.languageTriggerKindToVSCodeTriggerKind = {
            [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.InlineEditTriggerKind.Automatic]: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.InlineEditTriggerKind.Automatic,
            [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_13__.InlineEditTriggerKind.Invoke]: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.InlineEditTriggerKind.Invoke,
        };
    }
}
class ReferenceMap {
    constructor() {
        this._references = ( (new Map()));
        this._idPool = 1;
    }
    createReferenceId(value) {
        const id = this._idPool++;
        this._references.set(id, value);
        return id;
    }
    disposeReferenceId(referenceId) {
        const value = this._references.get(referenceId);
        this._references.delete(referenceId);
        return value;
    }
    get(referenceId) {
        return this._references.get(referenceId);
    }
}
class SignatureHelpAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('SignatureHelp')));
    }
    async provideSignatureHelp(resource, position, context, token) {
        const doc = this._documents.getDocument(resource);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const vscodeContext = this.reviveContext(context);
        const value = await this._provider.provideSignatureHelp(doc, pos, token, vscodeContext);
        if (value) {
            const id = this._cache.add([value]);
            return { ..._extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.SignatureHelp.from(value), id };
        }
        return undefined;
    }
    reviveContext(context) {
        let activeSignatureHelp = undefined;
        if (context.activeSignatureHelp) {
            const revivedSignatureHelp = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.SignatureHelp.to(context.activeSignatureHelp);
            const saved = this._cache.get(context.activeSignatureHelp.id, 0);
            if (saved) {
                activeSignatureHelp = saved;
                activeSignatureHelp.activeSignature = revivedSignatureHelp.activeSignature;
                activeSignatureHelp.activeParameter = revivedSignatureHelp.activeParameter;
            }
            else {
                activeSignatureHelp = revivedSignatureHelp;
            }
        }
        return { ...context, activeSignatureHelp };
    }
    releaseSignatureHelp(id) {
        this._cache.delete(id);
    }
}
class InlayHintsAdapter {
    constructor(_documents, _commands, _provider, _logService, _extension) {
        this._documents = _documents;
        this._commands = _commands;
        this._provider = _provider;
        this._logService = _logService;
        this._extension = _extension;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('InlayHints')));
        this._disposables = ( (new Map()));
    }
    async provideInlayHints(resource, ran, token) {
        const doc = this._documents.getDocument(resource);
        const range = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(ran);
        const hints = await this._provider.provideInlayHints(doc, range, token);
        if (!Array.isArray(hints) || hints.length === 0) {
            this._logService.trace(`[InlayHints] NO inlay hints from '${this._extension.identifier.value}' for range ${JSON.stringify(ran)}`);
            return undefined;
        }
        if (token.isCancellationRequested) {
            return undefined;
        }
        const pid = this._cache.add(hints);
        this._disposables.set(pid, ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore())));
        const result = { hints: [], cacheId: pid };
        for (let i = 0; i < hints.length; i++) {
            if (this._isValidInlayHint(hints[i], range)) {
                result.hints.push(this._convertInlayHint(hints[i], [pid, i]));
            }
        }
        this._logService.trace(`[InlayHints] ${result.hints.length} inlay hints from '${this._extension.identifier.value}' for range ${JSON.stringify(ran)}`);
        return result;
    }
    async resolveInlayHint(id, token) {
        if (typeof this._provider.resolveInlayHint !== 'function') {
            return undefined;
        }
        const item = this._cache.get(...id);
        if (!item) {
            return undefined;
        }
        const hint = await this._provider.resolveInlayHint(item, token);
        if (!hint) {
            return undefined;
        }
        if (!this._isValidInlayHint(hint)) {
            return undefined;
        }
        return this._convertInlayHint(hint, id);
    }
    releaseHints(id) {
        this._disposables.get(id)?.dispose();
        this._disposables.delete(id);
        this._cache.delete(id);
    }
    _isValidInlayHint(hint, range) {
        if (hint.label.length === 0 || Array.isArray(hint.label) && hint.label.every(part => part.value.length === 0)) {
            console.log('INVALID inlay hint, empty label', hint);
            return false;
        }
        if (range && !range.contains(hint.position)) {
            return false;
        }
        return true;
    }
    _convertInlayHint(hint, id) {
        const disposables = this._disposables.get(id[0]);
        if (!disposables) {
            throw Error('DisposableStore is missing...');
        }
        const result = {
            label: '',
            cacheId: id,
            tooltip: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.MarkdownString.fromStrict(hint.tooltip),
            position: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.from(hint.position),
            textEdits: hint.textEdits && ( (hint.textEdits.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TextEdit.from))),
            kind: hint.kind && _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.InlayHintKind.from(hint.kind),
            paddingLeft: hint.paddingLeft,
            paddingRight: hint.paddingRight,
        };
        if (typeof hint.label === 'string') {
            result.label = hint.label;
        }
        else {
            const parts = [];
            result.label = parts;
            for (const part of hint.label) {
                if (!part.value) {
                    console.warn('INVALID inlay hint, empty label part', this._extension.identifier.value);
                    continue;
                }
                const part2 = {
                    label: part.value,
                    tooltip: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.MarkdownString.fromStrict(part.tooltip)
                };
                if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Location.isLocation(part.location)) {
                    part2.location = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.location.from(part.location);
                }
                if (part.command) {
                    part2.command = this._commands.toInternal(part.command, disposables);
                }
                parts.push(part2);
            }
        }
        return result;
    }
}
class LinkProviderAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('DocumentLink')));
    }
    async provideLinks(resource, token) {
        const doc = this._documents.getDocument(resource);
        const links = await this._provider.provideDocumentLinks(doc, token);
        if (!Array.isArray(links) || links.length === 0) {
            return undefined;
        }
        if (token.isCancellationRequested) {
            return undefined;
        }
        if (typeof this._provider.resolveDocumentLink !== 'function') {
            return { links: ( (links.filter(LinkProviderAdapter._validateLink).map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DocumentLink.from))) };
        }
        else {
            const pid = this._cache.add(links);
            const result = { links: [], cacheId: pid };
            for (let i = 0; i < links.length; i++) {
                if (!LinkProviderAdapter._validateLink(links[i])) {
                    continue;
                }
                const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DocumentLink.from(links[i]);
                dto.cacheId = [pid, i];
                result.links.push(dto);
            }
            return result;
        }
    }
    static _validateLink(link) {
        if (link.target && link.target.path.length > 50_000) {
            console.warn('DROPPING link because it is too long');
            return false;
        }
        return true;
    }
    async resolveLink(id, token) {
        if (typeof this._provider.resolveDocumentLink !== 'function') {
            return undefined;
        }
        const item = this._cache.get(...id);
        if (!item) {
            return undefined;
        }
        const link = await this._provider.resolveDocumentLink(item, token);
        if (!link || !LinkProviderAdapter._validateLink(link)) {
            return undefined;
        }
        return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DocumentLink.from(link);
    }
    releaseLinks(id) {
        this._cache.delete(id);
    }
}
class ColorProviderAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideColors(resource, token) {
        const doc = this._documents.getDocument(resource);
        const colors = await this._provider.provideDocumentColors(doc, token);
        if (!Array.isArray(colors)) {
            return [];
        }
        const colorInfos = ( (colors.map(ci => {
            return {
                color: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Color.from(ci.color),
                range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(ci.range)
            };
        })));
        return colorInfos;
    }
    async provideColorPresentations(resource, raw, token) {
        const document = this._documents.getDocument(resource);
        const range = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(raw.range);
        const color = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Color.to(raw.color);
        const value = await this._provider.provideColorPresentations(color, { document, range }, token);
        if (!Array.isArray(value)) {
            return undefined;
        }
        return (
             (value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.ColorPresentation.from))
        );
    }
}
class FoldingProviderAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideFoldingRanges(resource, context, token) {
        const doc = this._documents.getDocument(resource);
        const ranges = await this._provider.provideFoldingRanges(doc, context, token);
        if (!Array.isArray(ranges)) {
            return undefined;
        }
        return (
             (ranges.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.FoldingRange.from))
        );
    }
}
class SelectionRangeAdapter {
    constructor(_documents, _provider, _logService) {
        this._documents = _documents;
        this._provider = _provider;
        this._logService = _logService;
    }
    async provideSelectionRanges(resource, pos, token) {
        const document = this._documents.getDocument(resource);
        const positions = ( (pos.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to)));
        const allProviderRanges = await this._provider.provideSelectionRanges(document, positions, token);
        if (!(0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(allProviderRanges)) {
            return [];
        }
        if (allProviderRanges.length !== positions.length) {
            this._logService.warn('BAD selection ranges, provider must return ranges for each position');
            return [];
        }
        const allResults = [];
        for (let i = 0; i < positions.length; i++) {
            const oneResult = [];
            allResults.push(oneResult);
            let last = positions[i];
            let selectionRange = allProviderRanges[i];
            while (true) {
                if (!selectionRange.range.contains(last)) {
                    throw ( (new Error('INVALID selection range, must contain the previous range')));
                }
                oneResult.push(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.SelectionRange.from(selectionRange));
                if (!selectionRange.parent) {
                    break;
                }
                last = selectionRange.range;
                selectionRange = selectionRange.parent;
            }
        }
        return allResults;
    }
}
class CallHierarchyAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
        this._idPool = ( (new _base_common_idGenerator_js__WEBPACK_IMPORTED_MODULE_4__.IdGenerator('')));
        this._cache = ( (new Map()));
    }
    async prepareSession(uri, position, token) {
        const doc = this._documents.getDocument(uri);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const items = await this._provider.prepareCallHierarchy(doc, pos, token);
        if (!items) {
            return undefined;
        }
        const sessionId = this._idPool.nextId();
        this._cache.set(sessionId, ( (new Map())));
        if (Array.isArray(items)) {
            return (
                 (items.map(item => this._cacheAndConvertItem(sessionId, item)))
            );
        }
        else {
            return [this._cacheAndConvertItem(sessionId, items)];
        }
    }
    async provideCallsTo(sessionId, itemId, token) {
        const item = this._itemFromCache(sessionId, itemId);
        if (!item) {
            throw ( (new Error('missing call hierarchy item')));
        }
        const calls = await this._provider.provideCallHierarchyIncomingCalls(item, token);
        if (!calls) {
            return undefined;
        }
        return (
             (calls.map(call => {
                return {
                    from: this._cacheAndConvertItem(sessionId, call.from),
                    fromRanges: ( (call.fromRanges.map(r => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(r))))
                };
            }))
        );
    }
    async provideCallsFrom(sessionId, itemId, token) {
        const item = this._itemFromCache(sessionId, itemId);
        if (!item) {
            throw ( (new Error('missing call hierarchy item')));
        }
        const calls = await this._provider.provideCallHierarchyOutgoingCalls(item, token);
        if (!calls) {
            return undefined;
        }
        return (
             (calls.map(call => {
                return {
                    to: this._cacheAndConvertItem(sessionId, call.to),
                    fromRanges: ( (call.fromRanges.map(r => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.from(r))))
                };
            }))
        );
    }
    releaseSession(sessionId) {
        this._cache.delete(sessionId);
    }
    _cacheAndConvertItem(sessionId, item) {
        const map = this._cache.get(sessionId);
        const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.CallHierarchyItem.from(item, sessionId, ( (map.size.toString(36))));
        map.set(dto._itemId, item);
        return dto;
    }
    _itemFromCache(sessionId, itemId) {
        const map = this._cache.get(sessionId);
        return map?.get(itemId);
    }
}
class TypeHierarchyAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
        this._idPool = ( (new _base_common_idGenerator_js__WEBPACK_IMPORTED_MODULE_4__.IdGenerator('')));
        this._cache = ( (new Map()));
    }
    async prepareSession(uri, position, token) {
        const doc = this._documents.getDocument(uri);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const items = await this._provider.prepareTypeHierarchy(doc, pos, token);
        if (!items) {
            return undefined;
        }
        const sessionId = this._idPool.nextId();
        this._cache.set(sessionId, ( (new Map())));
        if (Array.isArray(items)) {
            return (
                 (items.map(item => this._cacheAndConvertItem(sessionId, item)))
            );
        }
        else {
            return [this._cacheAndConvertItem(sessionId, items)];
        }
    }
    async provideSupertypes(sessionId, itemId, token) {
        const item = this._itemFromCache(sessionId, itemId);
        if (!item) {
            throw ( (new Error('missing type hierarchy item')));
        }
        const supertypes = await this._provider.provideTypeHierarchySupertypes(item, token);
        if (!supertypes) {
            return undefined;
        }
        return (
             (supertypes.map(supertype => {
                return this._cacheAndConvertItem(sessionId, supertype);
            }))
        );
    }
    async provideSubtypes(sessionId, itemId, token) {
        const item = this._itemFromCache(sessionId, itemId);
        if (!item) {
            throw ( (new Error('missing type hierarchy item')));
        }
        const subtypes = await this._provider.provideTypeHierarchySubtypes(item, token);
        if (!subtypes) {
            return undefined;
        }
        return (
             (subtypes.map(subtype => {
                return this._cacheAndConvertItem(sessionId, subtype);
            }))
        );
    }
    releaseSession(sessionId) {
        this._cache.delete(sessionId);
    }
    _cacheAndConvertItem(sessionId, item) {
        const map = this._cache.get(sessionId);
        const dto = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TypeHierarchyItem.from(item, sessionId, ( (map.size.toString(36))));
        map.set(dto._itemId, item);
        return dto;
    }
    _itemFromCache(sessionId, itemId) {
        const map = this._cache.get(sessionId);
        return map?.get(itemId);
    }
}
class DocumentDropEditAdapter {
    constructor(_proxy, _documents, _provider, _handle, _extension) {
        this._proxy = _proxy;
        this._documents = _documents;
        this._provider = _provider;
        this._handle = _handle;
        this._extension = _extension;
        this._cache = ( (new _cache_js__WEBPACK_IMPORTED_MODULE_20__.Cache('DocumentDropEdit')));
    }
    async provideDocumentOnDropEdits(requestId, uri, position, dataTransferDto, token) {
        const doc = this._documents.getDocument(uri);
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Position.to(position);
        const dataTransfer = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DataTransfer.toDataTransfer(dataTransferDto, async (id) => {
            return (await this._proxy.$resolveDocumentOnDropFileData(this._handle, requestId, id)).buffer;
        });
        const edits = await this._provider.provideDocumentDropEdits(doc, pos, dataTransfer, token);
        if (!edits) {
            return undefined;
        }
        const editsArray = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.asArray)(edits);
        const cacheId = this._cache.add(editsArray);
        return (
             (editsArray.map((edit, i) => ({
                _cacheId: [cacheId, i],
                title: edit.title ?? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_15__.localizeWithPath)(
                    _moduleId,
                    1,
                    "Drop using '{0}' extension",
                    this._extension.displayName || this._extension.name
                )),
                kind: edit.kind?.value,
                yieldTo: edit.yieldTo?.map(x => x.value),
                insertText: typeof edit.insertText === 'string' ? edit.insertText : { snippet: edit.insertText.value },
                additionalEdit: edit.additionalEdit ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(edit.additionalEdit, undefined) : undefined,
            })))
        );
    }
    async resolveDropEdit(id, token) {
        const [sessionId, itemId] = id;
        const item = this._cache.get(sessionId, itemId);
        if (!item || !this._provider.resolveDocumentDropEdit) {
            return {};
        }
        const resolvedItem = (await this._provider.resolveDocumentDropEdit(item, token)) ?? item;
        const additionalEdit = resolvedItem.additionalEdit ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(resolvedItem.additionalEdit, undefined) : undefined;
        return { additionalEdit };
    }
    releaseDropEdits(id) {
        this._cache.delete(id);
    }
}
class MappedEditsAdapter {
    constructor(_documents, _provider) {
        this._documents = _documents;
        this._provider = _provider;
    }
    async provideMappedEdits(resource, codeBlocks, context, token) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource);
        const doc = this._documents.getDocument(uri);
        const usedContext = ( (context.documents.map((docSubArray) => ( (docSubArray.map((r) => {
            return {
                uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(r.uri),
                version: r.version,
                ranges: ( (r.ranges.map((range) => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.Range.to(range)))),
            };
        }))))));
        const ctx = {
            documents: usedContext,
            selections: usedContext[0]?.[0]?.ranges ?? []
        };
        const mappedEdits = await this._provider.provideMappedEdits(doc, codeBlocks, ctx, token);
        return mappedEdits ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit.from(mappedEdits) : null;
    }
}
class AdapterData {
    constructor(adapter, extension) {
        this.adapter = adapter;
        this.extension = extension;
    }
}
class ExtHostLanguageFeatures {
    static { this._handlePool = 0; }
    constructor(mainContext, _uriTransformer, _documents, _commands, _diagnostics, _logService, _apiDeprecation, _extensionTelemetry) {
        this._uriTransformer = _uriTransformer;
        this._documents = _documents;
        this._commands = _commands;
        this._diagnostics = _diagnostics;
        this._logService = _logService;
        this._apiDeprecation = _apiDeprecation;
        this._extensionTelemetry = _extensionTelemetry;
        this._adapter = ( (new Map()));
        this._proxy = ( (mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_21__.MainContext.MainThreadLanguageFeatures)));
    }
    _transformDocumentSelector(selector, extension) {
        return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.DocumentSelector.from(selector, this._uriTransformer, extension);
    }
    _createDisposable(handle) {
        return (
             (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Disposable(() => {
                this._adapter.delete(handle);
                this._proxy.$unregister(handle);
            }))
        );
    }
    _nextHandle() {
        return ExtHostLanguageFeatures._handlePool++;
    }
    async _withAdapter(handle, ctor, callback, fallbackValue, tokenToRaceAgainst, doNotLog = false) {
        const data = this._adapter.get(handle);
        if (!data || !(data.adapter instanceof ctor)) {
            return fallbackValue;
        }
        const t1 = Date.now();
        if (!doNotLog) {
            this._logService.trace(`[${data.extension.identifier.value}] INVOKE provider '${( (callback.toString())).replace(/[\r\n]/g, '')}'`);
        }
        const result = callback(data.adapter, data.extension);
        Promise.resolve(result).catch(err => {
            if (!(0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__.isCancellationError)(err)) {
                this._logService.error(`[${data.extension.identifier.value}] provider FAILED`);
                this._logService.error(err);
                this._extensionTelemetry.onExtensionError(data.extension.identifier, err);
            }
        }).finally(() => {
            if (!doNotLog) {
                this._logService.trace(`[${data.extension.identifier.value}] provider DONE after ${Date.now() - t1}ms`);
            }
        });
        if (_base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.isCancellationToken(tokenToRaceAgainst)) {
            return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.raceCancellationError)(result, tokenToRaceAgainst);
        }
        return result;
    }
    _addNewAdapter(adapter, extension) {
        const handle = this._nextHandle();
        this._adapter.set(handle, ( (new AdapterData(adapter, extension))));
        return handle;
    }
    static _extLabel(ext) {
        return ext.displayName || ext.name;
    }
    static _extId(ext) {
        return ext.identifier.value;
    }
    registerDocumentSymbolProvider(extension, selector, provider, metadata) {
        const handle = this._addNewAdapter(( (new DocumentSymbolAdapter(this._documents, provider))), extension);
        const displayName = (metadata && metadata.label) || ExtHostLanguageFeatures._extLabel(extension);
        this._proxy.$registerDocumentSymbolProvider(handle, this._transformDocumentSelector(selector, extension), displayName);
        return this._createDisposable(handle);
    }
    $provideDocumentSymbols(handle, resource, token) {
        return this._withAdapter(handle, DocumentSymbolAdapter, adapter => adapter.provideDocumentSymbols(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), token), undefined, token);
    }
    registerCodeLensProvider(extension, selector, provider) {
        const handle = this._nextHandle();
        const eventHandle = typeof provider.onDidChangeCodeLenses === 'function' ? this._nextHandle() : undefined;
        this._adapter.set(handle, ( (new AdapterData( (new CodeLensAdapter(
            this._documents,
            this._commands.converter,
            provider,
            extension,
            this._extensionTelemetry,
            this._logService
        )), extension))));
        this._proxy.$registerCodeLensSupport(handle, this._transformDocumentSelector(selector, extension), eventHandle);
        let result = this._createDisposable(handle);
        if (eventHandle !== undefined) {
            const subscription = provider.onDidChangeCodeLenses(_ => this._proxy.$emitCodeLensEvent(eventHandle));
            result = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Disposable.from(result, subscription);
        }
        return result;
    }
    $provideCodeLenses(handle, resource, token) {
        return this._withAdapter(handle, CodeLensAdapter, adapter => adapter.provideCodeLenses(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), token), undefined, token);
    }
    $resolveCodeLens(handle, symbol, token) {
        return this._withAdapter(handle, CodeLensAdapter, adapter => adapter.resolveCodeLens(symbol, token), undefined, undefined);
    }
    $releaseCodeLenses(handle, cacheId) {
        this._withAdapter(handle, CodeLensAdapter, adapter => Promise.resolve(adapter.releaseCodeLenses(cacheId)), undefined, undefined);
    }
    registerDefinitionProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new DefinitionAdapter(this._documents, provider))), extension);
        this._proxy.$registerDefinitionSupport(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideDefinition(handle, resource, position, token) {
        return this._withAdapter(handle, DefinitionAdapter, adapter => adapter.provideDefinition(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token), [], token);
    }
    registerDeclarationProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new DeclarationAdapter(this._documents, provider))), extension);
        this._proxy.$registerDeclarationSupport(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideDeclaration(handle, resource, position, token) {
        return this._withAdapter(handle, DeclarationAdapter, adapter => adapter.provideDeclaration(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token), [], token);
    }
    registerImplementationProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new ImplementationAdapter(this._documents, provider))), extension);
        this._proxy.$registerImplementationSupport(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideImplementation(handle, resource, position, token) {
        return this._withAdapter(handle, ImplementationAdapter, adapter => adapter.provideImplementation(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token), [], token);
    }
    registerTypeDefinitionProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new TypeDefinitionAdapter(this._documents, provider))), extension);
        this._proxy.$registerTypeDefinitionSupport(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideTypeDefinition(handle, resource, position, token) {
        return this._withAdapter(handle, TypeDefinitionAdapter, adapter => adapter.provideTypeDefinition(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token), [], token);
    }
    registerHoverProvider(extension, selector, provider, extensionId) {
        const handle = this._addNewAdapter(( (new HoverAdapter(this._documents, provider))), extension);
        this._proxy.$registerHoverProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideHover(handle, resource, position, context, token) {
        return this._withAdapter(handle, HoverAdapter, adapter => adapter.provideHover(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, context, token), undefined, token);
    }
    $releaseHover(handle, id) {
        this._withAdapter(handle, HoverAdapter, adapter => Promise.resolve(adapter.releaseHover(id)), undefined, undefined);
    }
    registerEvaluatableExpressionProvider(extension, selector, provider, extensionId) {
        const handle = this._addNewAdapter(( (new EvaluatableExpressionAdapter(this._documents, provider))), extension);
        this._proxy.$registerEvaluatableExpressionProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideEvaluatableExpression(handle, resource, position, token) {
        return this._withAdapter(handle, EvaluatableExpressionAdapter, adapter => adapter.provideEvaluatableExpression(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token), undefined, token);
    }
    registerInlineValuesProvider(extension, selector, provider, extensionId) {
        const eventHandle = typeof provider.onDidChangeInlineValues === 'function' ? this._nextHandle() : undefined;
        const handle = this._addNewAdapter(( (new InlineValuesAdapter(this._documents, provider))), extension);
        this._proxy.$registerInlineValuesProvider(handle, this._transformDocumentSelector(selector, extension), eventHandle);
        let result = this._createDisposable(handle);
        if (eventHandle !== undefined) {
            const subscription = provider.onDidChangeInlineValues(_ => this._proxy.$emitInlineValuesEvent(eventHandle));
            result = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Disposable.from(result, subscription);
        }
        return result;
    }
    $provideInlineValues(handle, resource, range, context, token) {
        return this._withAdapter(handle, InlineValuesAdapter, adapter => adapter.provideInlineValues(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), range, context, token), undefined, token);
    }
    registerDocumentHighlightProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new DocumentHighlightAdapter(this._documents, provider))), extension);
        this._proxy.$registerDocumentHighlightProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    registerMultiDocumentHighlightProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new MultiDocumentHighlightAdapter(this._documents, provider))), extension);
        this._proxy.$registerMultiDocumentHighlightProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideDocumentHighlights(handle, resource, position, token) {
        return this._withAdapter(handle, DocumentHighlightAdapter, adapter => adapter.provideDocumentHighlights(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token), undefined, token);
    }
    $provideMultiDocumentHighlights(handle, resource, position, otherModels, token) {
        return this._withAdapter(handle, MultiDocumentHighlightAdapter, adapter => adapter.provideMultiDocumentHighlights(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, ( (otherModels.map(model => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(model)))), token), undefined, token);
    }
    registerLinkedEditingRangeProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new LinkedEditingRangeAdapter(this._documents, provider))), extension);
        this._proxy.$registerLinkedEditingRangeProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideLinkedEditingRanges(handle, resource, position, token) {
        return this._withAdapter(handle, LinkedEditingRangeAdapter, async (adapter) => {
            const res = await adapter.provideLinkedEditingRanges(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token);
            if (res) {
                return {
                    ranges: res.ranges,
                    wordPattern: res.wordPattern ? ExtHostLanguageFeatures._serializeRegExp(res.wordPattern) : undefined
                };
            }
            return undefined;
        }, undefined, token);
    }
    registerReferenceProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new ReferenceAdapter(this._documents, provider))), extension);
        this._proxy.$registerReferenceSupport(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideReferences(handle, resource, position, context, token) {
        return this._withAdapter(handle, ReferenceAdapter, adapter => adapter.provideReferences(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, context, token), undefined, token);
    }
    registerCodeActionProvider(extension, selector, provider, metadata) {
        const store = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore()));
        const handle = this._addNewAdapter(( (new CodeActionAdapter(
            this._documents,
            this._commands.converter,
            this._diagnostics,
            provider,
            this._logService,
            extension,
            this._apiDeprecation
        ))), extension);
        this._proxy.$registerCodeActionSupport(handle, this._transformDocumentSelector(selector, extension), {
            providedKinds: metadata?.providedCodeActionKinds?.map(kind => kind.value),
            documentation: metadata?.documentation?.map(x => ({
                kind: x.kind.value,
                command: this._commands.converter.toInternal(x.command, store),
            }))
        }, ExtHostLanguageFeatures._extLabel(extension), ExtHostLanguageFeatures._extId(extension), Boolean(provider.resolveCodeAction));
        store.add(this._createDisposable(handle));
        return store;
    }
    $provideCodeActions(handle, resource, rangeOrSelection, context, token) {
        return this._withAdapter(handle, CodeActionAdapter, adapter => adapter.provideCodeActions(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), rangeOrSelection, context, token), undefined, token);
    }
    $resolveCodeAction(handle, id, token) {
        return this._withAdapter(handle, CodeActionAdapter, adapter => adapter.resolveCodeAction(id, token), {}, undefined);
    }
    $releaseCodeActions(handle, cacheId) {
        this._withAdapter(handle, CodeActionAdapter, adapter => Promise.resolve(adapter.releaseCodeActions(cacheId)), undefined, undefined);
    }
    registerDocumentFormattingEditProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new DocumentFormattingAdapter(this._documents, provider))), extension);
        this._proxy.$registerDocumentFormattingSupport(handle, this._transformDocumentSelector(selector, extension), extension.identifier, extension.displayName || extension.name);
        return this._createDisposable(handle);
    }
    $provideDocumentFormattingEdits(handle, resource, options, token) {
        return this._withAdapter(handle, DocumentFormattingAdapter, adapter => adapter.provideDocumentFormattingEdits(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), options, token), undefined, token);
    }
    registerDocumentRangeFormattingEditProvider(extension, selector, provider) {
        const canFormatMultipleRanges = typeof provider.provideDocumentRangesFormattingEdits === 'function';
        const handle = this._addNewAdapter(( (new RangeFormattingAdapter(this._documents, provider))), extension);
        this._proxy.$registerRangeFormattingSupport(handle, this._transformDocumentSelector(selector, extension), extension.identifier, extension.displayName || extension.name, canFormatMultipleRanges);
        return this._createDisposable(handle);
    }
    $provideDocumentRangeFormattingEdits(handle, resource, range, options, token) {
        return this._withAdapter(handle, RangeFormattingAdapter, adapter => adapter.provideDocumentRangeFormattingEdits(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), range, options, token), undefined, token);
    }
    $provideDocumentRangesFormattingEdits(handle, resource, ranges, options, token) {
        return this._withAdapter(handle, RangeFormattingAdapter, adapter => adapter.provideDocumentRangesFormattingEdits(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), ranges, options, token), undefined, token);
    }
    registerOnTypeFormattingEditProvider(extension, selector, provider, triggerCharacters) {
        const handle = this._addNewAdapter(( (new OnTypeFormattingAdapter(this._documents, provider))), extension);
        this._proxy.$registerOnTypeFormattingSupport(handle, this._transformDocumentSelector(selector, extension), triggerCharacters, extension.identifier);
        return this._createDisposable(handle);
    }
    $provideOnTypeFormattingEdits(handle, resource, position, ch, options, token) {
        return this._withAdapter(handle, OnTypeFormattingAdapter, adapter => adapter.provideOnTypeFormattingEdits(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, ch, options, token), undefined, token);
    }
    registerWorkspaceSymbolProvider(extension, provider) {
        const handle = this._addNewAdapter(( (new NavigateTypeAdapter(provider, this._logService))), extension);
        this._proxy.$registerNavigateTypeSupport(handle, typeof provider.resolveWorkspaceSymbol === 'function');
        return this._createDisposable(handle);
    }
    $provideWorkspaceSymbols(handle, search, token) {
        return this._withAdapter(handle, NavigateTypeAdapter, adapter => adapter.provideWorkspaceSymbols(search, token), { symbols: [] }, token);
    }
    $resolveWorkspaceSymbol(handle, symbol, token) {
        return this._withAdapter(handle, NavigateTypeAdapter, adapter => adapter.resolveWorkspaceSymbol(symbol, token), undefined, undefined);
    }
    $releaseWorkspaceSymbols(handle, id) {
        this._withAdapter(handle, NavigateTypeAdapter, adapter => adapter.releaseWorkspaceSymbols(id), undefined, undefined);
    }
    registerRenameProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new RenameAdapter(this._documents, provider, this._logService))), extension);
        this._proxy.$registerRenameSupport(handle, this._transformDocumentSelector(selector, extension), RenameAdapter.supportsResolving(provider));
        return this._createDisposable(handle);
    }
    $provideRenameEdits(handle, resource, position, newName, token) {
        return this._withAdapter(handle, RenameAdapter, adapter => adapter.provideRenameEdits(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, newName, token), undefined, token);
    }
    $resolveRenameLocation(handle, resource, position, token) {
        return this._withAdapter(handle, RenameAdapter, adapter => adapter.resolveRenameLocation(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token), undefined, token);
    }
    registerNewSymbolNamesProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new NewSymbolNamesAdapter(this._documents, provider, this._logService))), extension);
        this._proxy.$registerNewSymbolNamesProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $supportsAutomaticNewSymbolNamesTriggerKind(handle) {
        return this._withAdapter(handle, NewSymbolNamesAdapter, adapter => adapter.supportsAutomaticNewSymbolNamesTriggerKind(), false, undefined);
    }
    $provideNewSymbolNames(handle, resource, range, triggerKind, token) {
        return this._withAdapter(handle, NewSymbolNamesAdapter, adapter => adapter.provideNewSymbolNames(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), range, triggerKind, token), undefined, token);
    }
    registerDocumentSemanticTokensProvider(extension, selector, provider, legend) {
        const handle = this._addNewAdapter(( (new DocumentSemanticTokensAdapter(this._documents, provider))), extension);
        const eventHandle = (typeof provider.onDidChangeSemanticTokens === 'function' ? this._nextHandle() : undefined);
        this._proxy.$registerDocumentSemanticTokensProvider(handle, this._transformDocumentSelector(selector, extension), legend, eventHandle);
        let result = this._createDisposable(handle);
        if (eventHandle) {
            const subscription = provider.onDidChangeSemanticTokens(_ => this._proxy.$emitDocumentSemanticTokensEvent(eventHandle));
            result = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Disposable.from(result, subscription);
        }
        return result;
    }
    $provideDocumentSemanticTokens(handle, resource, previousResultId, token) {
        return this._withAdapter(handle, DocumentSemanticTokensAdapter, adapter => adapter.provideDocumentSemanticTokens(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), previousResultId, token), null, token);
    }
    $releaseDocumentSemanticTokens(handle, semanticColoringResultId) {
        this._withAdapter(handle, DocumentSemanticTokensAdapter, adapter => adapter.releaseDocumentSemanticColoring(semanticColoringResultId), undefined, undefined);
    }
    registerDocumentRangeSemanticTokensProvider(extension, selector, provider, legend) {
        const handle = this._addNewAdapter(( (new DocumentRangeSemanticTokensAdapter(this._documents, provider))), extension);
        this._proxy.$registerDocumentRangeSemanticTokensProvider(handle, this._transformDocumentSelector(selector, extension), legend);
        return this._createDisposable(handle);
    }
    $provideDocumentRangeSemanticTokens(handle, resource, range, token) {
        return this._withAdapter(handle, DocumentRangeSemanticTokensAdapter, adapter => adapter.provideDocumentRangeSemanticTokens(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), range, token), null, token);
    }
    registerCompletionItemProvider(extension, selector, provider, triggerCharacters) {
        const handle = this._addNewAdapter(( (new CompletionsAdapter(
            this._documents,
            this._commands.converter,
            provider,
            this._apiDeprecation,
            extension
        ))), extension);
        this._proxy.$registerCompletionsProvider(handle, this._transformDocumentSelector(selector, extension), triggerCharacters, CompletionsAdapter.supportsResolving(provider), extension.identifier);
        return this._createDisposable(handle);
    }
    $provideCompletionItems(handle, resource, position, context, token) {
        return this._withAdapter(handle, CompletionsAdapter, adapter => adapter.provideCompletionItems(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, context, token), undefined, token);
    }
    $resolveCompletionItem(handle, id, token) {
        return this._withAdapter(handle, CompletionsAdapter, adapter => adapter.resolveCompletionItem(id, token), undefined, token);
    }
    $releaseCompletionItems(handle, id) {
        this._withAdapter(handle, CompletionsAdapter, adapter => adapter.releaseCompletionItems(id), undefined, undefined);
    }
    registerInlineCompletionsProvider(extension, selector, provider, metadata) {
        const adapter = ( (new InlineCompletionAdapter(extension, this._documents, provider, this._commands.converter)));
        const handle = this._addNewAdapter(adapter, extension);
        this._proxy.$registerInlineCompletionsSupport(handle, this._transformDocumentSelector(selector, extension), adapter.supportsHandleEvents, _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__.ExtensionIdentifier.toKey(extension.identifier.value), metadata?.yieldTo?.map(extId => _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__.ExtensionIdentifier.toKey(extId)) || []);
        return this._createDisposable(handle);
    }
    $provideInlineCompletions(handle, resource, position, context, token) {
        return this._withAdapter(handle, InlineCompletionAdapterBase, adapter => adapter.provideInlineCompletions(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, context, token), undefined, token);
    }
    $provideInlineEdits(handle, resource, range, context, token) {
        return this._withAdapter(handle, InlineCompletionAdapterBase, adapter => adapter.provideInlineEdits(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), range, context, token), undefined, token);
    }
    $handleInlineCompletionDidShow(handle, pid, idx, updatedInsertText) {
        this._withAdapter(handle, InlineCompletionAdapterBase, async (adapter) => {
            adapter.handleDidShowCompletionItem(pid, idx, updatedInsertText);
        }, undefined, undefined);
    }
    $handleInlineCompletionPartialAccept(handle, pid, idx, acceptedCharacters, info) {
        this._withAdapter(handle, InlineCompletionAdapterBase, async (adapter) => {
            adapter.handlePartialAccept(pid, idx, acceptedCharacters, info);
        }, undefined, undefined);
    }
    $freeInlineCompletionsList(handle, pid) {
        this._withAdapter(handle, InlineCompletionAdapterBase, async (adapter) => { adapter.disposeCompletions(pid); }, undefined, undefined);
    }
    registerInlineEditProvider(extension, selector, provider) {
        const adapter = ( (new InlineEditAdapter(extension, this._documents, provider, this._commands.converter)));
        const handle = this._addNewAdapter(adapter, extension);
        this._proxy.$registerInlineEditProvider(handle, this._transformDocumentSelector(selector, extension), extension.identifier);
        return this._createDisposable(handle);
    }
    $provideInlineEdit(handle, resource, context, token) {
        return this._withAdapter(handle, InlineEditAdapter, adapter => adapter.provideInlineEdits(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), context, token), undefined, token);
    }
    $freeInlineEdit(handle, pid) {
        this._withAdapter(handle, InlineEditAdapter, async (adapter) => { adapter.disposeEdit(pid); }, undefined, undefined);
    }
    registerSignatureHelpProvider(extension, selector, provider, metadataOrTriggerChars) {
        const metadata = Array.isArray(metadataOrTriggerChars)
            ? { triggerCharacters: metadataOrTriggerChars, retriggerCharacters: [] }
            : metadataOrTriggerChars;
        const handle = this._addNewAdapter(( (new SignatureHelpAdapter(this._documents, provider))), extension);
        this._proxy.$registerSignatureHelpProvider(handle, this._transformDocumentSelector(selector, extension), metadata);
        return this._createDisposable(handle);
    }
    $provideSignatureHelp(handle, resource, position, context, token) {
        return this._withAdapter(handle, SignatureHelpAdapter, adapter => adapter.provideSignatureHelp(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, context, token), undefined, token);
    }
    $releaseSignatureHelp(handle, id) {
        this._withAdapter(handle, SignatureHelpAdapter, adapter => adapter.releaseSignatureHelp(id), undefined, undefined);
    }
    registerInlayHintsProvider(extension, selector, provider) {
        const eventHandle = typeof provider.onDidChangeInlayHints === 'function' ? this._nextHandle() : undefined;
        const handle = this._addNewAdapter(( (new InlayHintsAdapter(
            this._documents,
            this._commands.converter,
            provider,
            this._logService,
            extension
        ))), extension);
        this._proxy.$registerInlayHintsProvider(handle, this._transformDocumentSelector(selector, extension), typeof provider.resolveInlayHint === 'function', eventHandle, ExtHostLanguageFeatures._extLabel(extension));
        let result = this._createDisposable(handle);
        if (eventHandle !== undefined) {
            const subscription = provider.onDidChangeInlayHints(uri => this._proxy.$emitInlayHintsEvent(eventHandle));
            result = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Disposable.from(result, subscription);
        }
        return result;
    }
    $provideInlayHints(handle, resource, range, token) {
        return this._withAdapter(handle, InlayHintsAdapter, adapter => adapter.provideInlayHints(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), range, token), undefined, token);
    }
    $resolveInlayHint(handle, id, token) {
        return this._withAdapter(handle, InlayHintsAdapter, adapter => adapter.resolveInlayHint(id, token), undefined, token);
    }
    $releaseInlayHints(handle, id) {
        this._withAdapter(handle, InlayHintsAdapter, adapter => adapter.releaseHints(id), undefined, undefined);
    }
    registerDocumentLinkProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new LinkProviderAdapter(this._documents, provider))), extension);
        this._proxy.$registerDocumentLinkProvider(handle, this._transformDocumentSelector(selector, extension), typeof provider.resolveDocumentLink === 'function');
        return this._createDisposable(handle);
    }
    $provideDocumentLinks(handle, resource, token) {
        return this._withAdapter(handle, LinkProviderAdapter, adapter => adapter.provideLinks(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), token), undefined, token, resource.scheme === 'output');
    }
    $resolveDocumentLink(handle, id, token) {
        return this._withAdapter(handle, LinkProviderAdapter, adapter => adapter.resolveLink(id, token), undefined, undefined, true);
    }
    $releaseDocumentLinks(handle, id) {
        this._withAdapter(handle, LinkProviderAdapter, adapter => adapter.releaseLinks(id), undefined, undefined, true);
    }
    registerColorProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new ColorProviderAdapter(this._documents, provider))), extension);
        this._proxy.$registerDocumentColorProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideDocumentColors(handle, resource, token) {
        return this._withAdapter(handle, ColorProviderAdapter, adapter => adapter.provideColors(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), token), [], token);
    }
    $provideColorPresentations(handle, resource, colorInfo, token) {
        return this._withAdapter(handle, ColorProviderAdapter, adapter => adapter.provideColorPresentations(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), colorInfo, token), undefined, token);
    }
    registerFoldingRangeProvider(extension, selector, provider) {
        const handle = this._nextHandle();
        const eventHandle = typeof provider.onDidChangeFoldingRanges === 'function' ? this._nextHandle() : undefined;
        this._adapter.set(handle, ( (new AdapterData(
             (new FoldingProviderAdapter(this._documents, provider)),
            extension
        ))));
        this._proxy.$registerFoldingRangeProvider(handle, this._transformDocumentSelector(selector, extension), extension.identifier, eventHandle);
        let result = this._createDisposable(handle);
        if (eventHandle !== undefined) {
            const subscription = provider.onDidChangeFoldingRanges(() => this._proxy.$emitFoldingRangeEvent(eventHandle));
            result = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.Disposable.from(result, subscription);
        }
        return result;
    }
    $provideFoldingRanges(handle, resource, context, token) {
        return this._withAdapter(handle, FoldingProviderAdapter, (adapter) => adapter.provideFoldingRanges(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), context, token), undefined, token);
    }
    registerSelectionRangeProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new SelectionRangeAdapter(this._documents, provider, this._logService))), extension);
        this._proxy.$registerSelectionRangeProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideSelectionRanges(handle, resource, positions, token) {
        return this._withAdapter(handle, SelectionRangeAdapter, adapter => adapter.provideSelectionRanges(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), positions, token), [], token);
    }
    registerCallHierarchyProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new CallHierarchyAdapter(this._documents, provider))), extension);
        this._proxy.$registerCallHierarchyProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $prepareCallHierarchy(handle, resource, position, token) {
        return this._withAdapter(handle, CallHierarchyAdapter, adapter => Promise.resolve(adapter.prepareSession(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token)), undefined, token);
    }
    $provideCallHierarchyIncomingCalls(handle, sessionId, itemId, token) {
        return this._withAdapter(handle, CallHierarchyAdapter, adapter => adapter.provideCallsTo(sessionId, itemId, token), undefined, token);
    }
    $provideCallHierarchyOutgoingCalls(handle, sessionId, itemId, token) {
        return this._withAdapter(handle, CallHierarchyAdapter, adapter => adapter.provideCallsFrom(sessionId, itemId, token), undefined, token);
    }
    $releaseCallHierarchy(handle, sessionId) {
        this._withAdapter(handle, CallHierarchyAdapter, adapter => Promise.resolve(adapter.releaseSession(sessionId)), undefined, undefined);
    }
    registerTypeHierarchyProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new TypeHierarchyAdapter(this._documents, provider))), extension);
        this._proxy.$registerTypeHierarchyProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $prepareTypeHierarchy(handle, resource, position, token) {
        return this._withAdapter(handle, TypeHierarchyAdapter, adapter => Promise.resolve(adapter.prepareSession(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, token)), undefined, token);
    }
    $provideTypeHierarchySupertypes(handle, sessionId, itemId, token) {
        return this._withAdapter(handle, TypeHierarchyAdapter, adapter => adapter.provideSupertypes(sessionId, itemId, token), undefined, token);
    }
    $provideTypeHierarchySubtypes(handle, sessionId, itemId, token) {
        return this._withAdapter(handle, TypeHierarchyAdapter, adapter => adapter.provideSubtypes(sessionId, itemId, token), undefined, token);
    }
    $releaseTypeHierarchy(handle, sessionId) {
        this._withAdapter(handle, TypeHierarchyAdapter, adapter => Promise.resolve(adapter.releaseSession(sessionId)), undefined, undefined);
    }
    registerDocumentOnDropEditProvider(extension, selector, provider, metadata) {
        const handle = this._nextHandle();
        this._adapter.set(handle, ( (new AdapterData(
             (new DocumentDropEditAdapter(this._proxy, this._documents, provider, handle, extension)),
            extension
        ))));
        this._proxy.$registerDocumentOnDropEditProvider(handle, this._transformDocumentSelector(selector, extension), (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.isProposedApiEnabled)(extension, 'documentPaste') && metadata ? {
            supportsResolve: !!provider.resolveDocumentDropEdit,
            dropMimeTypes: metadata.dropMimeTypes,
        } : undefined);
        return this._createDisposable(handle);
    }
    $provideDocumentOnDropEdits(handle, requestId, resource, position, dataTransferDto, token) {
        return this._withAdapter(handle, DocumentDropEditAdapter, adapter => Promise.resolve(adapter.provideDocumentOnDropEdits(requestId, _base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), position, dataTransferDto, token)), undefined, undefined);
    }
    $resolveDropEdit(handle, id, token) {
        return this._withAdapter(handle, DocumentDropEditAdapter, adapter => adapter.resolveDropEdit(id, token), {}, undefined);
    }
    $releaseDocumentOnDropEdits(handle, cacheId) {
        this._withAdapter(handle, DocumentDropEditAdapter, adapter => Promise.resolve(adapter.releaseDropEdits(cacheId)), undefined, undefined);
    }
    registerMappedEditsProvider(extension, selector, provider) {
        const handle = this._addNewAdapter(( (new MappedEditsAdapter(this._documents, provider))), extension);
        this._proxy.$registerMappedEditsProvider(handle, this._transformDocumentSelector(selector, extension));
        return this._createDisposable(handle);
    }
    $provideMappedEdits(handle, document, codeBlocks, context, token) {
        return this._withAdapter(handle, MappedEditsAdapter, adapter => Promise.resolve(adapter.provideMappedEdits(document, codeBlocks, context, token)), null, token);
    }
    registerDocumentPasteEditProvider(extension, selector, provider, metadata) {
        const handle = this._nextHandle();
        this._adapter.set(handle, ( (new AdapterData(
             (new DocumentPasteEditProvider(this._proxy, this._documents, provider, handle, extension)),
            extension
        ))));
        this._proxy.$registerPasteEditProvider(handle, this._transformDocumentSelector(selector, extension), {
            supportsCopy: !!provider.prepareDocumentPaste,
            supportsPaste: !!provider.provideDocumentPasteEdits,
            supportsResolve: !!provider.resolveDocumentPasteEdit,
            providedPasteEditKinds: metadata.providedPasteEditKinds?.map(x => x.value),
            copyMimeTypes: metadata.copyMimeTypes,
            pasteMimeTypes: metadata.pasteMimeTypes,
        });
        return this._createDisposable(handle);
    }
    $prepareDocumentPaste(handle, resource, ranges, dataTransfer, token) {
        return this._withAdapter(handle, DocumentPasteEditProvider, adapter => adapter.prepareDocumentPaste(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), ranges, dataTransfer, token), undefined, token);
    }
    $providePasteEdits(handle, requestId, resource, ranges, dataTransferDto, context, token) {
        return this._withAdapter(handle, DocumentPasteEditProvider, adapter => adapter.providePasteEdits(requestId, _base_common_uri_js__WEBPACK_IMPORTED_MODULE_10__.URI.revive(resource), ranges, dataTransferDto, context, token), undefined, token);
    }
    $resolvePasteEdit(handle, id, token) {
        return this._withAdapter(handle, DocumentPasteEditProvider, adapter => adapter.resolvePasteEdit(id, token), {}, undefined);
    }
    $releasePasteEdits(handle, cacheId) {
        this._withAdapter(handle, DocumentPasteEditProvider, adapter => Promise.resolve(adapter.releasePasteEdits(cacheId)), undefined, undefined);
    }
    static _serializeRegExp(regExp) {
        return {
            pattern: regExp.source,
            flags: regExp.flags,
        };
    }
    static _serializeIndentationRule(indentationRule) {
        return {
            decreaseIndentPattern: ExtHostLanguageFeatures._serializeRegExp(indentationRule.decreaseIndentPattern),
            increaseIndentPattern: ExtHostLanguageFeatures._serializeRegExp(indentationRule.increaseIndentPattern),
            indentNextLinePattern: indentationRule.indentNextLinePattern ? ExtHostLanguageFeatures._serializeRegExp(indentationRule.indentNextLinePattern) : undefined,
            unIndentedLinePattern: indentationRule.unIndentedLinePattern ? ExtHostLanguageFeatures._serializeRegExp(indentationRule.unIndentedLinePattern) : undefined,
        };
    }
    static _serializeOnEnterRule(onEnterRule) {
        return {
            beforeText: ExtHostLanguageFeatures._serializeRegExp(onEnterRule.beforeText),
            afterText: onEnterRule.afterText ? ExtHostLanguageFeatures._serializeRegExp(onEnterRule.afterText) : undefined,
            previousLineText: onEnterRule.previousLineText ? ExtHostLanguageFeatures._serializeRegExp(onEnterRule.previousLineText) : undefined,
            action: onEnterRule.action
        };
    }
    static _serializeOnEnterRules(onEnterRules) {
        return (
             (onEnterRules.map(ExtHostLanguageFeatures._serializeOnEnterRule))
        );
    }
    static _serializeAutoClosingPair(autoClosingPair) {
        return {
            open: autoClosingPair.open,
            close: autoClosingPair.close,
            notIn: autoClosingPair.notIn ? ( (autoClosingPair.notIn.map(v => ( (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_18__.SyntaxTokenType.toString(v)))))) : undefined,
        };
    }
    static _serializeAutoClosingPairs(autoClosingPairs) {
        return (
             (autoClosingPairs.map(ExtHostLanguageFeatures._serializeAutoClosingPair))
        );
    }
    setLanguageConfiguration(extension, languageId, configuration) {
        const { wordPattern } = configuration;
        if (wordPattern && (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_8__.regExpLeadsToEndlessLoop)(wordPattern)) {
            throw ( (new Error(
                `Invalid language configuration: wordPattern '${wordPattern}' is not allowed to match the empty string.`
            )));
        }
        if (wordPattern) {
            this._documents.setWordDefinitionFor(languageId, wordPattern);
        }
        else {
            this._documents.setWordDefinitionFor(languageId, undefined);
        }
        if (configuration.__electricCharacterSupport) {
            this._apiDeprecation.report('LanguageConfiguration.__electricCharacterSupport', extension, `Do not use.`);
        }
        if (configuration.__characterPairSupport) {
            this._apiDeprecation.report('LanguageConfiguration.__characterPairSupport', extension, `Do not use.`);
        }
        const handle = this._nextHandle();
        const serializedConfiguration = {
            comments: configuration.comments,
            brackets: configuration.brackets,
            wordPattern: configuration.wordPattern ? ExtHostLanguageFeatures._serializeRegExp(configuration.wordPattern) : undefined,
            indentationRules: configuration.indentationRules ? ExtHostLanguageFeatures._serializeIndentationRule(configuration.indentationRules) : undefined,
            onEnterRules: configuration.onEnterRules ? ExtHostLanguageFeatures._serializeOnEnterRules(configuration.onEnterRules) : undefined,
            __electricCharacterSupport: configuration.__electricCharacterSupport,
            __characterPairSupport: configuration.__characterPairSupport,
            autoClosingPairs: configuration.autoClosingPairs ? ExtHostLanguageFeatures._serializeAutoClosingPairs(configuration.autoClosingPairs) : undefined,
        };
        this._proxy.$setLanguageConfiguration(handle, languageId, serializedConfiguration);
        return this._createDisposable(handle);
    }
    $setWordDefinitions(wordDefinitions) {
        for (const wordDefinition of wordDefinitions) {
            this._documents.setWordDefinitionFor(wordDefinition.languageId, ( (new RegExp(wordDefinition.regexSource, wordDefinition.regexFlags))));
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModelTools.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModelTools.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLanguageModelTools: () => (/* binding */ ExtHostLanguageModelTools)
/* harmony export */ });
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");



class ExtHostLanguageModelTools {
    constructor(mainContext) {
        this._registeredTools = ( new Map());
        this._allTools = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadLanguageModelTools));
        this._proxy.$getTools().then(tools => {
            for (const tool of tools) {
                this._allTools.set(tool.name, tool);
            }
        });
    }
    async invokeTool(name, parameters, token) {
        return await this._proxy.$invokeTool(name, parameters, token);
    }
    async $acceptToolDelta(delta) {
        if (delta.added) {
            this._allTools.set(delta.added.name, delta.added);
        }
        if (delta.removed) {
            this._allTools.delete(delta.removed);
        }
    }
    get tools() {
        return ( Array.from(( this._allTools.values()))
            .map(tool => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.LanguageModelToolDescription.to(tool)));
    }
    async $invokeTool(name, parameters, token) {
        const item = this._registeredTools.get(name);
        if (!item) {
            throw ( new Error(`Unknown tool ${name}`));
        }
        return await item.tool.invoke(parameters, token);
    }
    registerTool(extension, name, tool) {
        this._registeredTools.set(name, { extension, tool });
        this._proxy.$registerTool(name);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__.toDisposable)(() => {
            this._registeredTools.delete(name);
            this._proxy.$unregisterTool(name);
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModels.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguageModels.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLanguageModels: () => (/* binding */ ExtHostLanguageModels),
/* harmony export */   IExtHostLanguageModels: () => (/* binding */ IExtHostLanguageModels)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/errorMessage.js */ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../platform/progress/common/progress.js */ "./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostAuthentication_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./extHostAuthentication.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostAuthentication.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _services_authentication_common_authentication_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../services/authentication/common/authentication.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/authentication/common/authentication.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");




















var ExtHostLanguageModels_1;
const _moduleId = "vs/workbench/api/common/extHostLanguageModels";
const IExtHostLanguageModels = ( ((0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_10__.createDecorator)('IExtHostLanguageModels')));
class LanguageModelResponseStream {
    constructor(option, stream) {
        this.option = option;
        this.stream = ( (new _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.AsyncIterableSource()));
        this.stream = stream ?? ( (new _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.AsyncIterableSource()));
    }
}
class LanguageModelResponse {
    constructor() {
        this._responseStreams = ( (new Map()));
        this._defaultStream = ( (new _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.AsyncIterableSource()));
        this._isDone = false;
        const that = this;
        this.apiObject = {
            get stream() {
                return that._defaultStream.asyncIterable;
            },
            get text() {
                return ( (_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.AsyncIterableObject.map(that._defaultStream.asyncIterable, part => {
                    if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelTextPart) {
                        return part.value;
                    }
                    else {
                        return undefined;
                    }
                }))).coalesce();
            },
        };
    }
    *_streams() {
        if (this._responseStreams.size > 0) {
            for (const [, value] of this._responseStreams) {
                yield value.stream;
            }
        }
        else {
            yield this._defaultStream;
        }
    }
    handleFragment(fragment) {
        if (this._isDone) {
            return;
        }
        let res = this._responseStreams.get(fragment.index);
        if (!res) {
            if (this._responseStreams.size === 0) {
                res = ( (new LanguageModelResponseStream(fragment.index, this._defaultStream)));
            }
            else {
                res = ( (new LanguageModelResponseStream(fragment.index)));
            }
            this._responseStreams.set(fragment.index, res);
        }
        let out;
        if (fragment.part.type === 'text') {
            out = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelTextPart(fragment.part.value);
        }
        else {
            out = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelFunctionUsePart(fragment.part.name, fragment.part.parameters);
        }
        res.stream.emitOne(out);
    }
    reject(err) {
        this._isDone = true;
        for (const stream of this._streams()) {
            stream.reject(err);
        }
    }
    resolve() {
        this._isDone = true;
        for (const stream of this._streams()) {
            stream.resolve();
        }
    }
}
let ExtHostLanguageModels = class ExtHostLanguageModels {
    static { ExtHostLanguageModels_1 = this; }
    static { this._idPool = 1; }
    constructor(extHostRpc, _logService, _extHostAuthentication) {
        this._logService = _logService;
        this._extHostAuthentication = _extHostAuthentication;
        this._onDidChangeModelAccess = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Emitter()));
        this._onDidChangeProviders = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Emitter()));
        this.onDidChangeProviders = this._onDidChangeProviders.event;
        this._languageModels = ( (new Map()));
        this._allLanguageModelData = ( (new Map()));
        this._modelAccessList = ( (new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifierMap()));
        this._pendingRequest = ( (new Map()));
        this._languageAccessInformationExtensions = ( (new Set()));
        this._proxy = ( (extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_13__.MainContext.MainThreadLanguageModels)));
    }
    dispose() {
        this._onDidChangeModelAccess.dispose();
        this._onDidChangeProviders.dispose();
    }
    registerLanguageModel(extension, identifier, provider, metadata) {
        const handle = ExtHostLanguageModels_1._idPool++;
        this._languageModels.set(handle, { extension: extension.identifier, provider, languageModelId: identifier });
        let auth;
        if (metadata.auth) {
            auth = {
                providerLabel: extension.displayName || extension.name,
                accountLabel: typeof metadata.auth === 'object' ? metadata.auth.label : undefined
            };
        }
        this._proxy.$registerLanguageModelProvider(handle, `${_platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier.toKey(extension.identifier)}/${handle}/${identifier}`, {
            extension: extension.identifier,
            id: identifier,
            vendor: metadata.vendor ?? _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier.toKey(extension.identifier),
            name: metadata.name ?? '',
            family: metadata.family ?? '',
            version: metadata.version,
            maxInputTokens: metadata.maxInputTokens,
            maxOutputTokens: metadata.maxOutputTokens,
            auth,
            targetExtensions: metadata.extensions
        });
        const responseReceivedListener = provider.onDidReceiveLanguageModelResponse2?.(({ extensionId, participant, tokenCount }) => {
            this._proxy.$whenLanguageModelChatRequestMade(identifier, ( (new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier(extensionId))), participant, tokenCount);
        });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.toDisposable)(() => {
            this._languageModels.delete(handle);
            this._proxy.$unregisterProvider(handle);
            responseReceivedListener?.dispose();
        });
    }
    async $startChatRequest(handle, requestId, from, messages, options, token) {
        const data = this._languageModels.get(handle);
        if (!data) {
            throw ( (new Error('Provider not found')));
        }
        const progress = ( (new _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_12__.Progress(async (fragment) => {
            if (token.isCancellationRequested) {
                this._logService.warn(`[CHAT](${data.extension.value}) CANNOT send progress because the REQUEST IS CANCELLED`);
                return;
            }
            let part;
            if (fragment.part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelFunctionUsePart) {
                part = { type: 'function_use', name: fragment.part.name, parameters: fragment.part.parameters };
            }
            else if (fragment.part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelTextPart) {
                part = { type: 'text', value: fragment.part.value };
            }
            if (!part) {
                this._logService.warn(`[CHAT](${data.extension.value}) UNKNOWN part ${JSON.stringify(fragment)}`);
                return;
            }
            this._proxy.$reportResponsePart(requestId, { index: fragment.index, part });
        })));
        let p;
        if (data.provider.provideLanguageModelResponse2) {
            p = Promise.resolve(data.provider.provideLanguageModelResponse2(( (messages.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_16__.LanguageModelChatMessage.to))), options, _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier.toKey(from), progress, token));
        }
        else {
            const progress2 = ( (new _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_12__.Progress(async (fragment) => {
                progress.report({ index: fragment.index, part: new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelTextPart(fragment.part) });
            })));
            p = Promise.resolve(data.provider.provideLanguageModelResponse(( (messages.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_16__.LanguageModelChatMessage.to))), options?.modelOptions ?? {}, _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier.toKey(from), progress2, token));
        }
        p.then(() => {
            this._proxy.$reportResponseDone(requestId, undefined);
        }, err => {
            this._proxy.$reportResponseDone(requestId, (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__.transformErrorForSerialization)(err));
        });
    }
    $provideTokenLength(handle, value, token) {
        const data = this._languageModels.get(handle);
        if (!data) {
            return Promise.resolve(0);
        }
        return Promise.resolve(data.provider.provideTokenCount(value, token));
    }
    $acceptChatModelMetadata(data) {
        if (data.added) {
            for (const { identifier, metadata } of data.added) {
                this._allLanguageModelData.set(identifier, { metadata, apiObjects: ( (new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifierMap())) });
            }
        }
        if (data.removed) {
            for (const id of data.removed) {
                this._allLanguageModelData.delete(id);
                for (const [key, value] of this._pendingRequest) {
                    if (value.languageModelId === id) {
                        value.res.reject(( (new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__.CancellationError())));
                        this._pendingRequest.delete(key);
                    }
                }
            }
        }
        data.added?.forEach(added => this._fakeAuthPopulate(added.metadata));
        this._onDidChangeProviders.fire(undefined);
    }
    async selectLanguageModels(extension, selector) {
        const models = await this._proxy.$selectChatModels({ ...selector, extension: extension.identifier });
        const result = [];
        const that = this;
        for (const identifier of models) {
            const data = this._allLanguageModelData.get(identifier);
            if (!data) {
                continue;
            }
            if (this._isUsingAuth(extension.identifier, data.metadata)) {
                await this._fakeAuthPopulate(data.metadata);
            }
            let apiObject = data.apiObjects.get(extension.identifier);
            if (!apiObject) {
                apiObject = {
                    id: identifier,
                    vendor: data.metadata.vendor,
                    family: data.metadata.family,
                    version: data.metadata.version,
                    name: data.metadata.name,
                    maxInputTokens: data.metadata.maxInputTokens,
                    countTokens(text, token) {
                        if (!( (that._allLanguageModelData.has(identifier)))) {
                            throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelError.NotFound(identifier);
                        }
                        return that._computeTokenLength(identifier, text, token ?? _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None);
                    },
                    sendRequest(messages, options, token) {
                        if (!( (that._allLanguageModelData.has(identifier)))) {
                            throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelError.NotFound(identifier);
                        }
                        return that._sendChatRequest(extension, identifier, messages, options ?? {}, token ?? _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None);
                    }
                };
                data.apiObjects.set(extension.identifier, apiObject);
            }
            result.push(apiObject);
        }
        return result;
    }
    async _sendChatRequest(extension, languageModelId, messages, options, token) {
        const internalMessages = this._convertMessages(extension, messages);
        const from = extension.identifier;
        const metadata = this._allLanguageModelData.get(languageModelId)?.metadata;
        if (!metadata || !( (this._allLanguageModelData.has(languageModelId)))) {
            throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelError.NotFound(`Language model '${languageModelId}' is unknown.`);
        }
        if (this._isUsingAuth(from, metadata)) {
            const success = await this._getAuthAccess(extension, { identifier: metadata.extension, displayName: metadata.auth.providerLabel }, options.justification, false);
            if (!success || !this._modelAccessList.get(from)?.has(metadata.extension)) {
                throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelError.NoPermissions(`Language model '${languageModelId}' cannot be used by '${from.value}'.`);
            }
        }
        try {
            const requestId = (Math.random() * 1e6) | 0;
            const res = ( (new LanguageModelResponse()));
            this._pendingRequest.set(requestId, { languageModelId, res });
            try {
                await this._proxy.$tryStartChatRequest(from, languageModelId, requestId, internalMessages, options, token);
            }
            catch (error) {
                this._pendingRequest.delete(requestId);
                throw error;
            }
            return res.apiObject;
        }
        catch (error) {
            if (error.name === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelError.name) {
                throw error;
            }
            throw new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelError(`Language model '${languageModelId}' errored: ${(0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_3__.toErrorMessage)(error)}`, 'Unknown', error);
        }
    }
    _convertMessages(extension, messages) {
        const internalMessages = [];
        for (const message of messages) {
            if (message.role === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelChatMessageRole.System) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.checkProposedApiEnabled)(extension, 'languageModelSystem');
            }
            if (message.content2 instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelFunctionResultPart) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_19__.checkProposedApiEnabled)(extension, 'lmTools');
            }
            internalMessages.push(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_16__.LanguageModelChatMessage.from(message));
        }
        return internalMessages;
    }
    async $acceptResponsePart(requestId, chunk) {
        const data = this._pendingRequest.get(requestId);
        if (data) {
            data.res.handleFragment(chunk);
        }
    }
    async $acceptResponseDone(requestId, error) {
        const data = this._pendingRequest.get(requestId);
        if (!data) {
            return;
        }
        this._pendingRequest.delete(requestId);
        if (error) {
            data.res.reject((0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__.transformErrorFromSerialization)(error));
        }
        else {
            data.res.resolve();
        }
    }
    async _getAuthAccess(from, to, justification, silent) {
        const providerId = _services_authentication_common_authentication_js__WEBPACK_IMPORTED_MODULE_18__.INTERNAL_AUTH_PROVIDER_PREFIX + to.identifier.value;
        const session = await this._extHostAuthentication.getSession(from, providerId, [], { silent: true });
        if (session) {
            this.$updateModelAccesslist([{ from: from.identifier, to: to.identifier, enabled: true }]);
            return true;
        }
        if (silent) {
            return false;
        }
        try {
            const detail = justification
                ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_8__.localizeWithPath)(_moduleId, 0, "Justification: {1}", to.displayName, justification))
                : undefined;
            await this._extHostAuthentication.getSession(from, providerId, [], { forceNewSession: { detail } });
            this.$updateModelAccesslist([{ from: from.identifier, to: to.identifier, enabled: true }]);
            return true;
        }
        catch (err) {
            return false;
        }
    }
    _isUsingAuth(from, toMetadata) {
        return !!toMetadata.auth
            && !_platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier.equals(toMetadata.extension, from);
    }
    async _fakeAuthPopulate(metadata) {
        if (!metadata.auth) {
            return;
        }
        for (const from of this._languageAccessInformationExtensions) {
            try {
                await this._getAuthAccess(from, { identifier: metadata.extension, displayName: '' }, undefined, true);
            }
            catch (err) {
                this._logService.error('Fake Auth request failed');
                this._logService.error(err);
            }
        }
    }
    async _computeTokenLength(languageModelId, value, token) {
        const data = this._allLanguageModelData.get(languageModelId);
        if (!data) {
            throw _extHostTypes_js__WEBPACK_IMPORTED_MODULE_17__.LanguageModelError.NotFound(`Language model '${languageModelId}' is unknown.`);
        }
        const local = _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_6__.Iterable.find(( (this._languageModels.values())), candidate => candidate.languageModelId === languageModelId);
        if (local) {
            return local.provider.provideTokenCount(value, token);
        }
        return this._proxy.$countTokens(languageModelId, (typeof value === 'string' ? value : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_16__.LanguageModelChatMessage.from(value)), token);
    }
    $updateModelAccesslist(data) {
        const updated = ( (new Array()));
        for (const { from, to, enabled } of data) {
            const set = this._modelAccessList.get(from) ?? ( (new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifierSet()));
            const oldValue = ( (set.has(to)));
            if (oldValue !== enabled) {
                if (enabled) {
                    set.add(to);
                }
                else {
                    set.delete(to);
                }
                this._modelAccessList.set(from, set);
                const newItem = { from, to };
                updated.push(newItem);
                this._onDidChangeModelAccess.fire(newItem);
            }
        }
    }
    createLanguageModelAccessInformation(from) {
        this._languageAccessInformationExtensions.add(from);
        const that = this;
        const _onDidChangeAccess = _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Event.signal(_base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Event.filter(this._onDidChangeModelAccess.event, e => _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_9__.ExtensionIdentifier.equals(e.from, from.identifier)));
        const _onDidAddRemove = _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Event.signal(this._onDidChangeProviders.event);
        return {
            get onDidChange() {
                return _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Event.any(_onDidChangeAccess, _onDidAddRemove);
            },
            canSendRequest(chat) {
                let metadata;
                out: for (const [_, value] of that._allLanguageModelData) {
                    for (const candidate of ( (value.apiObjects.values()))) {
                        if (candidate === chat) {
                            metadata = value.metadata;
                            break out;
                        }
                    }
                }
                if (!metadata) {
                    return undefined;
                }
                if (!that._isUsingAuth(from.identifier, metadata)) {
                    return true;
                }
                const list = that._modelAccessList.get(from.identifier);
                if (!list) {
                    return undefined;
                }
                return (
                     (list.has(metadata.extension))
                );
            }
        };
    }
};
ExtHostLanguageModels = ExtHostLanguageModels_1 = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_15__.IExtHostRpcService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_11__.ILogService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostAuthentication_js__WEBPACK_IMPORTED_MODULE_14__.IExtHostAuthentication)))
], ExtHostLanguageModels)));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguages.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLanguages.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLanguages: () => (/* binding */ ExtHostLanguages)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");







class ExtHostLanguages {
    constructor(mainContext, _documents, _commands, _uriTransformer) {
        this._documents = _documents;
        this._commands = _commands;
        this._uriTransformer = _uriTransformer;
        this._languageIds = [];
        this._handlePool = 0;
        this._ids = ( new Set());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadLanguages));
    }
    $acceptLanguageIds(ids) {
        this._languageIds = ids;
    }
    async getLanguages() {
        return this._languageIds.slice(0);
    }
    async changeLanguage(uri, languageId) {
        await this._proxy.$changeLanguage(uri, languageId);
        const data = this._documents.getDocumentData(uri);
        if (!data) {
            throw ( new Error(`document '${( uri.toString())}' NOT found`));
        }
        return data.document;
    }
    async tokenAtPosition(document, position) {
        const versionNow = document.version;
        const pos = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.Position.from(position);
        const info = await this._proxy.$tokensAtPosition(document.uri, pos);
        const defaultRange = {
            type: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.StandardTokenType.Other,
            range: document.getWordRangeAtPosition(position) ?? ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.Range(position.line, position.character, position.line, position.character))
        };
        if (!info) {
            return defaultRange;
        }
        const result = {
            range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.Range.to(info.range),
            type: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.TokenType.to(info.type)
        };
        if (!result.range.contains(position)) {
            return defaultRange;
        }
        if (versionNow !== document.version) {
            return defaultRange;
        }
        return result;
    }
    createLanguageStatusItem(extension, id, selector) {
        const handle = this._handlePool++;
        const proxy = this._proxy;
        const ids = this._ids;
        const fullyQualifiedId = `${extension.identifier.value}/${id}`;
        if (( ids.has(fullyQualifiedId))) {
            throw ( new Error(`LanguageStatusItem with id '${id}' ALREADY exists`));
        }
        ids.add(fullyQualifiedId);
        const data = {
            selector,
            id,
            name: extension.displayName ?? extension.name,
            severity: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.LanguageStatusSeverity.Information,
            command: undefined,
            text: '',
            detail: '',
            busy: false
        };
        let soonHandle;
        const commandDisposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore());
        const updateAsync = () => {
            soonHandle?.dispose();
            if (!( ids.has(fullyQualifiedId))) {
                console.warn(`LanguageStatusItem (${id}) from ${extension.identifier.value} has been disposed and CANNOT be updated anymore`);
                return;
            }
            soonHandle = (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_4__.disposableTimeout)(() => {
                commandDisposables.clear();
                this._proxy.$setLanguageStatus(handle, {
                    id: fullyQualifiedId,
                    name: data.name ?? extension.displayName ?? extension.name,
                    source: extension.displayName ?? extension.name,
                    selector: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.DocumentSelector.from(data.selector, this._uriTransformer),
                    label: data.text,
                    detail: data.detail ?? '',
                    severity: data.severity === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.LanguageStatusSeverity.Error ? _base_common_severity_js__WEBPACK_IMPORTED_MODULE_3__["default"].Error : data.severity === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.LanguageStatusSeverity.Warning ? _base_common_severity_js__WEBPACK_IMPORTED_MODULE_3__["default"].Warning : _base_common_severity_js__WEBPACK_IMPORTED_MODULE_3__["default"].Info,
                    command: data.command && this._commands.toInternal(data.command, commandDisposables),
                    accessibilityInfo: data.accessibilityInformation,
                    busy: data.busy
                });
            }, 0);
        };
        const result = {
            dispose() {
                commandDisposables.dispose();
                soonHandle?.dispose();
                proxy.$removeLanguageStatus(handle);
                ids.delete(fullyQualifiedId);
            },
            get id() {
                return data.id;
            },
            get name() {
                return data.name;
            },
            set name(value) {
                data.name = value;
                updateAsync();
            },
            get selector() {
                return data.selector;
            },
            set selector(value) {
                data.selector = value;
                updateAsync();
            },
            get text() {
                return data.text;
            },
            set text(value) {
                data.text = value;
                updateAsync();
            },
            set text2(value) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.checkProposedApiEnabled)(extension, 'languageStatusText');
                data.text = value;
                updateAsync();
            },
            get text2() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.checkProposedApiEnabled)(extension, 'languageStatusText');
                return data.text;
            },
            get detail() {
                return data.detail;
            },
            set detail(value) {
                data.detail = value;
                updateAsync();
            },
            get severity() {
                return data.severity;
            },
            set severity(value) {
                data.severity = value;
                updateAsync();
            },
            get accessibilityInformation() {
                return data.accessibilityInformation;
            },
            set accessibilityInformation(value) {
                data.accessibilityInformation = value;
                updateAsync();
            },
            get command() {
                return data.command;
            },
            set command(value) {
                data.command = value;
                updateAsync();
            },
            get busy() {
                return data.busy;
            },
            set busy(value) {
                data.busy = value;
                updateAsync();
            }
        };
        updateAsync();
        return result;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLocalizationService.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLocalizationService.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLocalizationService: () => (/* binding */ ExtHostLocalizationService),
/* harmony export */   IExtHostLocalizationService: () => (/* binding */ IExtHostLocalizationService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");









let ExtHostLocalizationService = class ExtHostLocalizationService {
    constructor(initData, rpc, logService) {
        this.logService = logService;
        this.bundleCache = ( new Map());
        this._proxy = ( rpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.MainContext.MainThreadLocalization));
        this.currentLanguage = initData.environment.appLanguage;
        this.isDefaultLanguage = this.currentLanguage === _base_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.LANGUAGE_DEFAULT;
    }
    getMessage(extensionId, details) {
        const { message, args, comment } = details;
        if (this.isDefaultLanguage) {
            return (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.format2)(message, (args ?? {}));
        }
        let key = message;
        if (comment && comment.length > 0) {
            key += `/${Array.isArray(comment) ? comment.join('') : comment}`;
        }
        const str = this.bundleCache.get(extensionId)?.contents[key];
        if (!str) {
            this.logService.warn(`Using default string since no string found in i18n bundle that has the key: ${key}`);
        }
        return (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_2__.format2)(str ?? message, (args ?? {}));
    }
    getBundle(extensionId) {
        return this.bundleCache.get(extensionId)?.contents;
    }
    getBundleUri(extensionId) {
        return this.bundleCache.get(extensionId)?.uri;
    }
    async initializeLocalizedMessages(extension) {
        if (this.isDefaultLanguage
            || (!extension.l10n && !extension.isBuiltin)) {
            return;
        }
        if (( this.bundleCache.has(extension.identifier.value))) {
            return;
        }
        let contents;
        const bundleUri = await this.getBundleLocation(extension);
        if (!bundleUri) {
            this.logService.error(`No bundle location found for extension ${extension.identifier.value}`);
            return;
        }
        try {
            const response = await this._proxy.$fetchBundleContents(bundleUri);
            const result = JSON.parse(response);
            contents = extension.isBuiltin ? result.contents?.bundle : result;
        }
        catch (e) {
            this.logService.error(`Failed to load translations for ${extension.identifier.value} from ${bundleUri}: ${e.message}`);
            return;
        }
        if (contents) {
            this.bundleCache.set(extension.identifier.value, {
                contents,
                uri: bundleUri
            });
        }
    }
    async getBundleLocation(extension) {
        if (extension.isBuiltin) {
            const uri = await this._proxy.$fetchBuiltInBundleUri(extension.identifier.value, this.currentLanguage);
            return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.revive(uri);
        }
        return extension.l10n
            ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_3__.URI.joinPath(extension.extensionLocation, extension.l10n, `bundle.l10n.${this.currentLanguage}.json`)
            : undefined;
    }
};
ExtHostLocalizationService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostInitDataService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILogService))
], ExtHostLocalizationService));
const IExtHostLocalizationService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__.createDecorator)('IExtHostLocalizationService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLogService.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLogService.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLogService: () => (/* binding */ ExtHostLogService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_log_common_logService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/log/common/logService.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/logService.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");





const _moduleId = "vs/workbench/api/common/extHostLogService";
let ExtHostLogService = class ExtHostLogService extends _platform_log_common_logService_js__WEBPACK_IMPORTED_MODULE_3__.LogService {
    constructor(isWorker, loggerService, initData) {
        const id = initData.remote.isRemote ? 'remoteexthost' : isWorker ? 'workerexthost' : 'exthost';
        const name = initData.remote.isRemote ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 0, "Extension Host (Remote)")) : isWorker ? ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 1, "Extension Host (Worker)")) : ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 2, "Extension Host"));
        super(loggerService.createLogger(id, { name }));
    }
};
ExtHostLogService = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__.ILoggerService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostInitDataService)))
], ExtHostLogService)));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLoggerService.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLoggerService.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostLoggerService: () => (/* binding */ ExtHostLoggerService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../platform/log/common/log.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/marshalling.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshalling.js");







let ExtHostLoggerService = class ExtHostLoggerService extends _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_1__.AbstractLoggerService {
    constructor(rpc, initData) {
        super(initData.logLevel, initData.logsLocation, ( initData.loggers.map(logger => (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_6__.revive)(logger))));
        this._proxy = ( rpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadLogger));
    }
    $setLogLevel(logLevel, resource) {
        if (resource) {
            this.setLogLevel(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(resource), logLevel);
        }
        else {
            this.setLogLevel(logLevel);
        }
    }
    setVisibility(resource, visibility) {
        super.setVisibility(resource, visibility);
        this._proxy.$setVisibility(resource, visibility);
    }
    doCreateLogger(resource, logLevel, options) {
        return ( new Logger(this._proxy, resource, logLevel, options));
    }
};
ExtHostLoggerService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_3__.IExtHostInitDataService))
], ExtHostLoggerService));
class Logger extends _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_1__.AbstractMessageLogger {
    constructor(proxy, file, logLevel, loggerOptions) {
        super(loggerOptions?.logLevel === 'always');
        this.proxy = proxy;
        this.file = file;
        this.isLoggerCreated = false;
        this.buffer = [];
        this.setLevel(logLevel);
        this.proxy.$createLogger(file, loggerOptions)
            .then(() => {
            this.doLog(this.buffer);
            this.isLoggerCreated = true;
        });
    }
    log(level, message) {
        const messages = [[level, message]];
        if (this.isLoggerCreated) {
            this.doLog(messages);
        }
        else {
            this.buffer.push(...messages);
        }
    }
    doLog(messages) {
        this.proxy.$log(this.file, messages);
    }
    flush() {
        this.proxy.$flush(this.file);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostManagedSockets.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostManagedSockets.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostManagedSockets: () => (/* binding */ ExtHostManagedSockets),
/* harmony export */   IExtHostManagedSockets: () => (/* binding */ IExtHostManagedSockets)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");






const IExtHostManagedSockets = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__.createDecorator)('IExtHostManagedSockets'));
let ExtHostManagedSockets = class ExtHostManagedSockets {
    constructor(extHostRpc) {
        this._remoteSocketIdCounter = 0;
        this._factory = null;
        this._managedRemoteSockets = ( new Map());
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadManagedSockets));
    }
    setFactory(socketFactoryId, makeConnection) {
        for (const socket of ( this._managedRemoteSockets.values())) {
            socket.dispose();
        }
        if (this._factory) {
            this._proxy.$unregisterSocketFactory(this._factory.socketFactoryId);
        }
        this._factory = ( new ManagedSocketFactory(socketFactoryId, makeConnection));
        this._proxy.$registerSocketFactory(this._factory.socketFactoryId);
    }
    async $openRemoteSocket(socketFactoryId) {
        if (!this._factory || this._factory.socketFactoryId !== socketFactoryId) {
            throw ( new Error(`No socket factory with id ${socketFactoryId}`));
        }
        const id = (++this._remoteSocketIdCounter);
        const socket = await this._factory.makeConnection();
        const disposable = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableStore());
        this._managedRemoteSockets.set(id, ( new ManagedSocket(id, socket, disposable)));
        disposable.add((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => this._managedRemoteSockets.delete(id)));
        disposable.add(socket.onDidEnd(() => {
            this._proxy.$onDidManagedSocketEnd(id);
            disposable.dispose();
        }));
        disposable.add(socket.onDidClose(e => {
            this._proxy.$onDidManagedSocketClose(id, e?.stack ?? e?.message);
            disposable.dispose();
        }));
        disposable.add(socket.onDidReceiveMessage(e => this._proxy.$onDidManagedSocketHaveData(id, _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_5__.VSBuffer.wrap(e))));
        return id;
    }
    $remoteSocketWrite(socketId, buffer) {
        this._managedRemoteSockets.get(socketId)?.actual.send(buffer.buffer);
    }
    $remoteSocketEnd(socketId) {
        const socket = this._managedRemoteSockets.get(socketId);
        if (socket) {
            socket.actual.end();
            socket.dispose();
        }
    }
    async $remoteSocketDrain(socketId) {
        await this._managedRemoteSockets.get(socketId)?.actual.drain?.();
    }
};
ExtHostManagedSockets = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostRpcService))
], ExtHostManagedSockets));
class ManagedSocketFactory {
    constructor(socketFactoryId, makeConnection) {
        this.socketFactoryId = socketFactoryId;
        this.makeConnection = makeConnection;
    }
}
class ManagedSocket extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
    constructor(socketId, actual, disposer) {
        super();
        this.socketId = socketId;
        this.actual = actual;
        this._register(disposer);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostMemento.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostMemento.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtensionGlobalMemento: () => (/* binding */ ExtensionGlobalMemento),
/* harmony export */   ExtensionMemento: () => (/* binding */ ExtensionMemento)
/* harmony export */ });
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");

class ExtensionMemento {
    constructor(id, global, storage) {
        this._deferredPromises = ( new Map());
        this._id = id;
        this._shared = global;
        this._storage = storage;
        this._init = this._storage.initializeExtensionStorage(this._shared, this._id, Object.create(null)).then(value => {
            this._value = value;
            return this;
        });
        this._storageListener = this._storage.onDidChangeStorage(e => {
            if (e.shared === this._shared && e.key === this._id) {
                this._value = e.value;
            }
        });
        this._scheduler = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.RunOnceScheduler(() => {
            const records = this._deferredPromises;
            this._deferredPromises = ( new Map());
            (async () => {
                try {
                    await this._storage.setValue(this._shared, this._id, this._value);
                    for (const value of ( records.values())) {
                        value.complete();
                    }
                }
                catch (e) {
                    for (const value of ( records.values())) {
                        value.error(e);
                    }
                }
            })();
        }, 0));
    }
    keys() {
        return ( Object.entries(this._value ?? {}).filter(([, value]) => value !== undefined).map(([key]) => key));
    }
    get whenReady() {
        return this._init;
    }
    get(key, defaultValue) {
        let value = this._value[key];
        if (typeof value === 'undefined') {
            value = defaultValue;
        }
        return value;
    }
    update(key, value) {
        this._value[key] = value;
        const record = this._deferredPromises.get(key);
        if (record !== undefined) {
            return record.p;
        }
        const promise = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.DeferredPromise());
        this._deferredPromises.set(key, promise);
        if (!this._scheduler.isScheduled()) {
            this._scheduler.schedule();
        }
        return promise.p;
    }
    dispose() {
        this._storageListener.dispose();
    }
}
class ExtensionGlobalMemento extends ExtensionMemento {
    setKeysForSync(keys) {
        this._storage.registerExtensionStorageKeysToSync({ id: this._id, version: this._extension.version }, keys);
    }
    constructor(extensionDescription, storage) {
        super(extensionDescription.identifier.value, true, storage);
        this._extension = extensionDescription;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostMessageService.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostMessageService.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostMessageService: () => (/* binding */ ExtHostMessageService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");




function isMessageItem(item) {
    return item && item.title;
}
let ExtHostMessageService = class ExtHostMessageService {
    constructor(mainContext, _logService) {
        this._logService = _logService;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadMessageService));
    }
    showMessage(extension, severity, message, optionsOrFirstItem, rest) {
        const options = {
            source: { identifier: extension.identifier, label: extension.displayName || extension.name }
        };
        let items;
        if (typeof optionsOrFirstItem === 'string' || isMessageItem(optionsOrFirstItem)) {
            items = [optionsOrFirstItem, ...rest];
        }
        else {
            options.modal = optionsOrFirstItem?.modal;
            options.useCustom = optionsOrFirstItem?.useCustom;
            options.detail = optionsOrFirstItem?.detail;
            items = rest;
        }
        if (options.useCustom) {
            (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_3__.checkProposedApiEnabled)(extension, 'resolvers');
        }
        const commands = [];
        let hasCloseAffordance = false;
        for (let handle = 0; handle < items.length; handle++) {
            const command = items[handle];
            if (typeof command === 'string') {
                commands.push({ title: command, handle, isCloseAffordance: false });
            }
            else if (typeof command === 'object') {
                const { title, isCloseAffordance } = command;
                commands.push({ title, isCloseAffordance: !!isCloseAffordance, handle });
                if (isCloseAffordance) {
                    if (hasCloseAffordance) {
                        this._logService.warn(`[${extension.identifier}] Only one message item can have 'isCloseAffordance':`, command);
                    }
                    else {
                        hasCloseAffordance = true;
                    }
                }
            }
            else {
                this._logService.warn(`[${extension.identifier}] Invalid message item:`, command);
            }
        }
        return this._proxy.$showMessage(severity, message, options, commands).then(handle => {
            if (typeof handle === 'number') {
                return items[handle];
            }
            return undefined;
        });
    }
};
ExtHostMessageService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__.ILogService))
], ExtHostMessageService));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebook.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebook.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostNotebookController: () => (/* binding */ ExtHostNotebookController)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _cache_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cache.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/cache.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../services/extensions/common/proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");
/* harmony import */ var _extHostNotebookDocument_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./extHostNotebookDocument.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocument.js");
/* harmony import */ var _extHostNotebookEditor_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostNotebookEditor.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookEditor.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _services_search_common_search_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../services/search/common/search.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js");
/* harmony import */ var _contrib_search_common_cellSearchModel_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../contrib/search/common/cellSearchModel.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/search/common/cellSearchModel.js");
/* harmony import */ var _contrib_search_common_searchNotebookHelpers_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../contrib/search/common/searchNotebookHelpers.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/search/common/searchNotebookHelpers.js");
/* harmony import */ var _services_editor_common_editorResolverService_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../services/editor/common/editorResolverService.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorResolverService.js");
























const _moduleId = "vs/workbench/api/common/extHostNotebook";
class ExtHostNotebookController {
    static { this._notebookStatusBarItemProviderHandlePool = 0; }
    get activeNotebookEditor() {
        return this._activeNotebookEditor?.apiEditor;
    }
    get visibleNotebookEditors() {
        return ( this._visibleNotebookEditors.map(editor => editor.apiEditor));
    }
    constructor(mainContext, commands, _textDocumentsAndEditors, _textDocuments, _extHostFileSystem, _extHostSearch, _logService) {
        this._textDocumentsAndEditors = _textDocumentsAndEditors;
        this._textDocuments = _textDocuments;
        this._extHostFileSystem = _extHostFileSystem;
        this._extHostSearch = _extHostSearch;
        this._logService = _logService;
        this._notebookStatusBarItemProviders = ( new Map());
        this._documents = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.ResourceMap());
        this._editors = ( new Map());
        this._onDidChangeActiveNotebookEditor = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidChangeActiveNotebookEditor = this._onDidChangeActiveNotebookEditor.event;
        this._visibleNotebookEditors = [];
        this._onDidOpenNotebookDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidOpenNotebookDocument = this._onDidOpenNotebookDocument.event;
        this._onDidCloseNotebookDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidCloseNotebookDocument = this._onDidCloseNotebookDocument.event;
        this._onDidChangeVisibleNotebookEditors = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidChangeVisibleNotebookEditors = this._onDidChangeVisibleNotebookEditors.event;
        this._statusBarCache = ( new _cache_js__WEBPACK_IMPORTED_MODULE_10__.Cache('NotebookCellStatusBarCache'));
        this._handlePool = 0;
        this._notebookSerializer = ( new Map());
        this._notebookProxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_11__.MainContext.MainThreadNotebook));
        this._notebookDocumentsProxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_11__.MainContext.MainThreadNotebookDocuments));
        this._notebookEditorsProxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_11__.MainContext.MainThreadNotebookEditors));
        this._commandsConverter = commands.converter;
        commands.registerArgumentProcessor({
            processArgument: (arg) => {
                if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_5__.MarshalledId.NotebookCellActionContext) {
                    const notebookUri = arg.notebookEditor?.notebookUri;
                    const cellHandle = arg.cell.handle;
                    const data = this._documents.get(notebookUri);
                    const cell = data?.getCell(cellHandle);
                    if (cell) {
                        return cell.apiCell;
                    }
                }
                if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_5__.MarshalledId.NotebookActionContext) {
                    const notebookUri = arg.uri;
                    const data = this._documents.get(notebookUri);
                    if (data) {
                        return data.apiNotebook;
                    }
                }
                return arg;
            }
        });
        ExtHostNotebookController._registerApiCommands(commands);
    }
    getEditorById(editorId) {
        const editor = this._editors.get(editorId);
        if (!editor) {
            throw ( new Error(`unknown text editor: ${editorId}. known editors: ${[...( this._editors.keys())]} `));
        }
        return editor;
    }
    getIdByEditor(editor) {
        for (const [id, candidate] of this._editors) {
            if (candidate.apiEditor === editor) {
                return id;
            }
        }
        return undefined;
    }
    get notebookDocuments() {
        return [...( this._documents.values())];
    }
    getNotebookDocument(uri, relaxed) {
        const result = this._documents.get(uri);
        if (!result && !relaxed) {
            throw ( new Error(`NO notebook document for '${uri}'`));
        }
        return result;
    }
    static _convertNotebookRegistrationData(extension, registration) {
        if (!registration) {
            return;
        }
        const viewOptionsFilenamePattern = ( registration.filenamePattern
            .map(pattern => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookExclusiveDocumentPattern.from(pattern)))
            .filter(pattern => pattern !== undefined);
        if (registration.filenamePattern && !viewOptionsFilenamePattern) {
            console.warn(`Notebook content provider view options file name pattern is invalid ${registration.filenamePattern}`);
            return undefined;
        }
        return {
            extension: extension.identifier,
            providerDisplayName: extension.displayName || extension.name,
            displayName: registration.displayName,
            filenamePattern: viewOptionsFilenamePattern,
            priority: registration.exclusive ? _services_editor_common_editorResolverService_js__WEBPACK_IMPORTED_MODULE_23__.RegisteredEditorPriority.exclusive : undefined
        };
    }
    registerNotebookCellStatusBarItemProvider(extension, notebookType, provider) {
        const handle = ExtHostNotebookController._notebookStatusBarItemProviderHandlePool++;
        const eventHandle = typeof provider.onDidChangeCellStatusBarItems === 'function' ? ExtHostNotebookController._notebookStatusBarItemProviderHandlePool++ : undefined;
        this._notebookStatusBarItemProviders.set(handle, provider);
        this._notebookProxy.$registerNotebookCellStatusBarItemProvider(handle, eventHandle, notebookType);
        let subscription;
        if (eventHandle !== undefined) {
            subscription = provider.onDidChangeCellStatusBarItems(_ => this._notebookProxy.$emitCellStatusBarEvent(eventHandle));
        }
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_14__.Disposable(() => {
            this._notebookStatusBarItemProviders.delete(handle);
            this._notebookProxy.$unregisterNotebookCellStatusBarItemProvider(handle, eventHandle);
            subscription?.dispose();
        });
    }
    async createNotebookDocument(options) {
        const canonicalUri = await this._notebookDocumentsProxy.$tryCreateNotebook({
            viewType: options.viewType,
            content: options.content && _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookData.from(options.content)
        });
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(canonicalUri);
    }
    async openNotebookDocument(uri) {
        const cached = this._documents.get(uri);
        if (cached) {
            return cached.apiNotebook;
        }
        const canonicalUri = await this._notebookDocumentsProxy.$tryOpenNotebook(uri);
        const document = this._documents.get(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(canonicalUri));
        return (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.assertIsDefined)(document?.apiNotebook);
    }
    async showNotebookDocument(notebookOrUri, options) {
        if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(notebookOrUri)) {
            notebookOrUri = await this.openNotebookDocument(notebookOrUri);
        }
        let resolvedOptions;
        if (typeof options === 'object') {
            resolvedOptions = {
                position: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.ViewColumn.from(options.viewColumn),
                preserveFocus: options.preserveFocus,
                selections: options.selections && ( options.selections.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookRange.from)),
                pinned: typeof options.preview === 'boolean' ? !options.preview : undefined
            };
        }
        else {
            resolvedOptions = {
                preserveFocus: false
            };
        }
        const editorId = await this._notebookEditorsProxy.$tryShowNotebookDocument(notebookOrUri.uri, notebookOrUri.notebookType, resolvedOptions);
        const editor = editorId && this._editors.get(editorId)?.apiEditor;
        if (editor) {
            return editor;
        }
        if (editorId) {
            throw ( new Error(`Could NOT open editor for "${( notebookOrUri.uri.toString())}" because another editor opened in the meantime.`));
        }
        else {
            throw ( new Error(`Could NOT open editor for "${( notebookOrUri.uri.toString())}".`));
        }
    }
    async $provideNotebookCellStatusBarItems(handle, uri, index, token) {
        const provider = this._notebookStatusBarItemProviders.get(handle);
        const revivedUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(uri);
        const document = this._documents.get(revivedUri);
        if (!document || !provider) {
            return;
        }
        const cell = document.getCellFromIndex(index);
        if (!cell) {
            return;
        }
        const result = await provider.provideCellStatusBarItems(cell.apiCell, token);
        if (!result) {
            return undefined;
        }
        const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableStore());
        const cacheId = this._statusBarCache.add([disposables]);
        const resultArr = Array.isArray(result) ? result : [result];
        const items = ( resultArr.map(
            item => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookStatusBarItem.from(item, this._commandsConverter, disposables)
        ));
        return {
            cacheId,
            items
        };
    }
    $releaseNotebookCellStatusBarItems(cacheId) {
        this._statusBarCache.delete(cacheId);
    }
    registerNotebookSerializer(extension, viewType, serializer, options, registration) {
        if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_6__.isFalsyOrWhitespace)(viewType)) {
            throw ( new Error(`viewType cannot be empty or just whitespace`));
        }
        const handle = this._handlePool++;
        this._notebookSerializer.set(handle, { viewType, serializer, options });
        this._notebookProxy.$registerNotebookSerializer(handle, { id: extension.identifier, location: extension.extensionLocation }, viewType, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookDocumentContentOptions.from(options), ExtHostNotebookController._convertNotebookRegistrationData(extension, registration));
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            this._notebookProxy.$unregisterNotebookSerializer(handle);
        });
    }
    async $dataToNotebook(handle, bytes, token) {
        const serializer = this._notebookSerializer.get(handle);
        if (!serializer) {
            throw ( new Error('NO serializer found'));
        }
        const data = await serializer.serializer.deserializeNotebook(bytes.buffer, token);
        return ( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_15__.SerializableObjectWithBuffers(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookData.from(data)));
    }
    async $notebookToData(handle, data, token) {
        const serializer = this._notebookSerializer.get(handle);
        if (!serializer) {
            throw ( new Error('NO serializer found'));
        }
        const bytes = await serializer.serializer.serializeNotebook(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookData.to(data.value), token);
        return _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.wrap(bytes);
    }
    async $saveNotebook(handle, uriComponents, versionId, options, token) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(uriComponents);
        const serializer = this._notebookSerializer.get(handle);
        this.trace(`enter saveNotebook(versionId: ${versionId}, ${( uri.toString())})`);
        if (!serializer) {
            throw ( new Error('NO serializer found'));
        }
        const document = this._documents.get(uri);
        if (!document) {
            throw ( new Error('Document NOT found'));
        }
        if (document.versionId !== versionId) {
            throw ( new Error('Document version mismatch'));
        }
        if (!this._extHostFileSystem.value.isWritableFileSystem(uri.scheme)) {
            throw new _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FileOperationError((0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                0,
                "Unable to modify read-only file '{0}'",
                this._resourceForError(uri)
            ), _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FileOperationResult.FILE_PERMISSION_DENIED);
        }
        const data = {
            metadata: (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_18__.filter)(document.apiNotebook.metadata, key => !(serializer.options?.transientDocumentMetadata ?? {})[key]),
            cells: [],
        };
        for (const cell of document.apiNotebook.getCells()) {
            const cellData = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_14__.NotebookCellData(cell.kind, cell.document.getText(), cell.document.languageId, cell.mime, !(serializer.options?.transientOutputs) ? [...cell.outputs] : [], cell.metadata, cell.executionSummary);
            cellData.metadata = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_18__.filter)(cell.metadata, key => !(serializer.options?.transientCellMetadata ?? {})[key]);
            data.cells.push(cellData);
        }
        await this._validateWriteFile(uri, options);
        if (token.isCancellationRequested) {
            throw ( new Error('canceled'));
        }
        const bytes = await serializer.serializer.serializeNotebook(data, token);
        if (token.isCancellationRequested) {
            throw ( new Error('canceled'));
        }
        this.trace(`serialized versionId: ${versionId} ${( uri.toString())}`);
        await this._extHostFileSystem.value.writeFile(uri, bytes);
        this.trace(`Finished write versionId: ${versionId} ${( uri.toString())}`);
        const providerExtUri = this._extHostFileSystem.getFileSystemProviderExtUri(uri.scheme);
        const stat = await this._extHostFileSystem.value.stat(uri);
        const fileStats = {
            name: providerExtUri.basename(uri),
            isFile: (stat.type & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FileType.File) !== 0,
            isDirectory: (stat.type & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FileType.Directory) !== 0,
            isSymbolicLink: (stat.type & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FileType.SymbolicLink) !== 0,
            mtime: stat.mtime,
            ctime: stat.ctime,
            size: stat.size,
            readonly: Boolean((stat.permissions ?? 0) & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FilePermission.Readonly) || !this._extHostFileSystem.value.isWritableFileSystem(uri.scheme),
            locked: Boolean((stat.permissions ?? 0) & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FilePermission.Locked),
            etag: (0,_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.etag)({ mtime: stat.mtime, size: stat.size }),
            children: undefined
        };
        this.trace(`exit saveNotebook(versionId: ${versionId}, ${( uri.toString())})`);
        return fileStats;
    }
    async $searchInNotebooks(handle, textQuery, viewTypeFileTargets, otherViewTypeFileTargets, token) {
        const serializer = this._notebookSerializer.get(handle)?.serializer;
        if (!serializer) {
            return {
                limitHit: false,
                results: []
            };
        }
        const finalMatchedTargets = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.ResourceSet());
        const runFileQueries = async (includes, token, textQuery) => {
            await Promise.all(( includes.map(async (include) => await Promise.all(( include.filenamePatterns.map(filePattern => {
                const query = {
                    _reason: textQuery._reason,
                    folderQueries: textQuery.folderQueries,
                    includePattern: textQuery.includePattern,
                    excludePattern: textQuery.excludePattern,
                    maxResults: textQuery.maxResults,
                    type: _services_search_common_search_js__WEBPACK_IMPORTED_MODULE_20__.QueryType.File,
                    filePattern
                };
                return this._extHostSearch.doInternalFileSearchWithCustomCallback(query, token, (data) => {
                    data.forEach(uri => {
                        if (( finalMatchedTargets.has(uri))) {
                            return;
                        }
                        const hasOtherMatches = ( otherViewTypeFileTargets.some(target => {
                            if (include.isFromSettings && !target.isFromSettings) {
                                return false;
                            }
                            else {
                                return ( target.filenamePatterns.some(targetFilePattern => (0,_services_editor_common_editorResolverService_js__WEBPACK_IMPORTED_MODULE_23__.globMatchesResource)(targetFilePattern, uri)));
                            }
                        }));
                        if (hasOtherMatches) {
                            return;
                        }
                        finalMatchedTargets.add(uri);
                    });
                }).catch(err => {
                    if (err.code === 'ENOENT') {
                        console.warn(`Could not find notebook search results, ignoring notebook results.`);
                        return {
                            limitHit: false,
                            messages: [],
                        };
                    }
                    else {
                        throw err;
                    }
                });
            }))))));
            return;
        };
        await runFileQueries(viewTypeFileTargets, token, textQuery);
        const results = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.ResourceMap());
        let limitHit = false;
        const promises = ( Array.from(finalMatchedTargets).map(async (uri) => {
            const cellMatches = [];
            try {
                if (token.isCancellationRequested) {
                    return;
                }
                if (textQuery.maxResults && [...( results.values())].reduce((acc, value) => acc + value.cellResults.length, 0) > textQuery.maxResults) {
                    limitHit = true;
                    return;
                }
                const simpleCells = [];
                const notebook = this._documents.get(uri);
                if (notebook) {
                    const cells = notebook.apiNotebook.getCells();
                    cells.forEach(e => simpleCells.push({
                        input: e.document.getText(),
                        outputs: e.outputs.flatMap(value => ( value.items.map(output => ( output.data.toString()))))
                    }));
                }
                else {
                    const fileContent = await this._extHostFileSystem.value.readFile(uri);
                    const bytes = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(( fileContent.toString()));
                    const notebook = await serializer.deserializeNotebook(bytes.buffer, token);
                    if (token.isCancellationRequested) {
                        return;
                    }
                    const data = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookData.from(notebook);
                    data.cells.forEach(cell => simpleCells.push({
                        input: cell.source,
                        outputs: cell.outputs.flatMap(value => ( value.items.map(output => ( output.valueBytes.toString()))))
                    }));
                }
                if (token.isCancellationRequested) {
                    return;
                }
                simpleCells.forEach((cell, index) => {
                    const target = textQuery.contentPattern.pattern;
                    const cellModel = ( new _contrib_search_common_cellSearchModel_js__WEBPACK_IMPORTED_MODULE_21__.CellSearchModel(cell.input, undefined, cell.outputs));
                    const inputMatches = cellModel.findInInputs(target);
                    const outputMatches = cellModel.findInOutputs(target);
                    const webviewResults = ( outputMatches
                        .flatMap(outputMatch => (0,_contrib_search_common_searchNotebookHelpers_js__WEBPACK_IMPORTED_MODULE_22__.genericCellMatchesToTextSearchMatches)(outputMatch.matches, outputMatch.textBuffer))
                        .map((textMatch, index) => {
                        textMatch.webviewIndex = index;
                        return textMatch;
                    }));
                    if (inputMatches.length > 0 || outputMatches.length > 0) {
                        const cellMatch = {
                            index: index,
                            contentResults: (0,_contrib_search_common_searchNotebookHelpers_js__WEBPACK_IMPORTED_MODULE_22__.genericCellMatchesToTextSearchMatches)(inputMatches, cellModel.inputTextBuffer),
                            webviewResults
                        };
                        cellMatches.push(cellMatch);
                    }
                });
                const fileMatch = {
                    resource: uri, cellResults: cellMatches
                };
                results.set(uri, fileMatch);
                return;
            }
            catch (e) {
                return;
            }
        }));
        await Promise.all(promises);
        return {
            limitHit,
            results: [...( results.values())]
        };
    }
    async _validateWriteFile(uri, options) {
        const stat = await this._extHostFileSystem.value.stat(uri);
        if (typeof options?.mtime === 'number' && typeof options.etag === 'string' && options.etag !== _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.ETAG_DISABLED &&
            typeof stat.mtime === 'number' && typeof stat.size === 'number' &&
            options.mtime < stat.mtime && options.etag !== (0,_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.etag)({ mtime: options.mtime , size: stat.size })) {
            throw new _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FileOperationError((0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 1, "File Modified Since"), _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_9__.FileOperationResult.FILE_MODIFIED_SINCE, options);
        }
        return;
    }
    _resourceForError(uri) {
        return uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_19__.Schemas.file ? uri.fsPath : ( uri.toString());
    }
    _createExtHostEditor(document, editorId, data) {
        if (( this._editors.has(editorId))) {
            throw ( new Error(`editor with id ALREADY EXSIST: ${editorId}`));
        }
        const editor = ( new _extHostNotebookEditor_js__WEBPACK_IMPORTED_MODULE_17__.ExtHostNotebookEditor(editorId, this._notebookEditorsProxy, document, ( data.visibleRanges.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookRange.to)), ( data.selections.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookRange.to)), typeof data.viewColumn === 'number' ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.ViewColumn.to(data.viewColumn) : undefined));
        this._editors.set(editorId, editor);
    }
    $acceptDocumentAndEditorsDelta(delta) {
        if (delta.value.removedDocuments) {
            for (const uri of delta.value.removedDocuments) {
                const revivedUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(uri);
                const document = this._documents.get(revivedUri);
                if (document) {
                    document.dispose();
                    this._documents.delete(revivedUri);
                    this._textDocumentsAndEditors.$acceptDocumentsAndEditorsDelta({ removedDocuments: ( document.apiNotebook.getCells().map(cell => cell.document.uri)) });
                    this._onDidCloseNotebookDocument.fire(document.apiNotebook);
                }
                for (const editor of ( this._editors.values())) {
                    if (( editor.notebookData.uri.toString()) === ( revivedUri.toString())) {
                        this._editors.delete(editor.id);
                    }
                }
            }
        }
        if (delta.value.addedDocuments) {
            const addedCellDocuments = [];
            for (const modelData of delta.value.addedDocuments) {
                const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(modelData.uri);
                if (( this._documents.has(uri))) {
                    throw ( new Error(`adding EXISTING notebook ${uri} `));
                }
                const document = ( new _extHostNotebookDocument_js__WEBPACK_IMPORTED_MODULE_16__.ExtHostNotebookDocument(
                    this._notebookDocumentsProxy,
                    this._textDocumentsAndEditors,
                    this._textDocuments,
                    uri,
                    modelData
                ));
                addedCellDocuments.push(...( modelData.cells.map(cell => _extHostNotebookDocument_js__WEBPACK_IMPORTED_MODULE_16__.ExtHostCell.asModelAddData(cell))));
                this._documents.get(uri)?.dispose();
                this._documents.set(uri, document);
                this._textDocumentsAndEditors.$acceptDocumentsAndEditorsDelta({ addedDocuments: addedCellDocuments });
                this._onDidOpenNotebookDocument.fire(document.apiNotebook);
            }
        }
        if (delta.value.addedEditors) {
            for (const editorModelData of delta.value.addedEditors) {
                if (( this._editors.has(editorModelData.id))) {
                    return;
                }
                const revivedUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(editorModelData.documentUri);
                const document = this._documents.get(revivedUri);
                if (document) {
                    this._createExtHostEditor(document, editorModelData.id, editorModelData);
                }
            }
        }
        if (delta.value.removedEditors) {
            for (const editorid of delta.value.removedEditors) {
                const editor = this._editors.get(editorid);
                if (editor) {
                    this._editors.delete(editorid);
                    if (this._activeNotebookEditor?.id === editor.id) {
                        this._activeNotebookEditor = undefined;
                    }
                }
            }
        }
        if (delta.value.visibleEditors) {
            this._visibleNotebookEditors = ( delta.value.visibleEditors.map(id => this._editors.get(id))).filter(editor => !!editor);
            const visibleEditorsSet = ( new Set());
            this._visibleNotebookEditors.forEach(editor => visibleEditorsSet.add(editor.id));
            for (const editor of ( this._editors.values())) {
                const newValue = ( visibleEditorsSet.has(editor.id));
                editor._acceptVisibility(newValue);
            }
            this._visibleNotebookEditors = ( [...( this._editors.values())].map(e => e)).filter(e => e.visible);
            this._onDidChangeVisibleNotebookEditors.fire(this.visibleNotebookEditors);
        }
        if (delta.value.newActiveEditor === null) {
            this._activeNotebookEditor = undefined;
        }
        else if (delta.value.newActiveEditor) {
            const activeEditor = this._editors.get(delta.value.newActiveEditor);
            if (!activeEditor) {
                console.error(`FAILED to find active notebook editor ${delta.value.newActiveEditor}`);
            }
            this._activeNotebookEditor = this._editors.get(delta.value.newActiveEditor);
        }
        if (delta.value.newActiveEditor !== undefined) {
            this._onDidChangeActiveNotebookEditor.fire(this._activeNotebookEditor?.apiEditor);
        }
    }
    static _registerApiCommands(extHostCommands) {
        const notebookTypeArg = _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__.ApiCommandArgument.String.with('notebookType', 'A notebook type');
        const commandDataToNotebook = ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__.ApiCommand(
            'vscode.executeDataToNotebook',
            '_executeDataToNotebook',
            'Invoke notebook serializer',
            [notebookTypeArg, ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__.ApiCommandArgument(
                'data',
                'Bytes to convert to data',
                v => v instanceof Uint8Array,
                v => _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.wrap(v)
            ))],
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__.ApiCommandResult('Notebook Data', data => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookData.to(data.value)))
        ));
        const commandNotebookToData = ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__.ApiCommand(
            'vscode.executeNotebookToData',
            '_executeNotebookToData',
            'Invoke notebook serializer',
            [notebookTypeArg, ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__.ApiCommandArgument(
                'NotebookData',
                'Notebook data to convert to bytes',
                v => true,
                v => ( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_15__.SerializableObjectWithBuffers(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.NotebookData.from(v)))
            ))],
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_12__.ApiCommandResult('Bytes', dto => dto.buffer))
        ));
        extHostCommands.registerApiCommand(commandDataToNotebook);
        extHostCommands.registerApiCommand(commandNotebookToData);
    }
    trace(msg) {
        this._logService.trace(`[Extension Host Notebook] ${msg}`);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocument.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocument.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostCell: () => (/* binding */ ExtHostCell),
/* harmony export */   ExtHostNotebookDocument: () => (/* binding */ ExtHostNotebookDocument)
/* harmony export */ });
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../contrib/notebook/common/notebookCommon.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookCommon.js");





class RawContentChangeEvent {
    constructor(start, deletedCount, deletedItems, items) {
        this.start = start;
        this.deletedCount = deletedCount;
        this.deletedItems = deletedItems;
        this.items = items;
    }
    asApiEvent() {
        return {
            range: ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.NotebookRange(this.start, this.start + this.deletedCount)),
            addedCells: ( this.items.map(cell => cell.apiCell)),
            removedCells: this.deletedItems,
        };
    }
}
class ExtHostCell {
    static asModelAddData(cell) {
        return {
            EOL: cell.eol,
            lines: cell.source,
            languageId: cell.language,
            uri: cell.uri,
            isDirty: false,
            versionId: 1
        };
    }
    constructor(notebook, _extHostDocument, _cellData) {
        this.notebook = notebook;
        this._extHostDocument = _extHostDocument;
        this._cellData = _cellData;
        this.handle = _cellData.handle;
        this.uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(_cellData.uri);
        this.cellKind = _cellData.cellKind;
        this._outputs = ( _cellData.outputs.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.NotebookCellOutput.to));
        this._internalMetadata = _cellData.internalMetadata ?? {};
        this._metadata = ( Object.freeze(_cellData.metadata ?? {}));
        this._previousResult = ( Object.freeze(
            _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.NotebookCellExecutionSummary.to(_cellData.internalMetadata ?? {})
        ));
    }
    get internalMetadata() {
        return this._internalMetadata;
    }
    get apiCell() {
        if (!this._apiCell) {
            const that = this;
            const data = this._extHostDocument.getDocument(this.uri);
            if (!data) {
                throw ( new Error(`MISSING extHostDocument for notebook cell: ${this.uri}`));
            }
            const apiCell = {
                get index() { return that.notebook.getCellIndex(that); },
                notebook: that.notebook.apiNotebook,
                kind: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.NotebookCellKind.to(this._cellData.cellKind),
                document: data.document,
                get mime() { return that._mime; },
                set mime(value) { that._mime = value; },
                get outputs() { return that._outputs.slice(0); },
                get metadata() { return that._metadata; },
                get executionSummary() { return that._previousResult; }
            };
            this._apiCell = ( Object.freeze(apiCell));
        }
        return this._apiCell;
    }
    setOutputs(newOutputs) {
        this._outputs = ( newOutputs.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.NotebookCellOutput.to));
    }
    setOutputItems(outputId, append, newOutputItems) {
        const newItems = ( newOutputItems.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.NotebookCellOutputItem.to));
        const output = this._outputs.find(op => op.id === outputId);
        if (output) {
            if (!append) {
                output.items.length = 0;
            }
            output.items.push(...newItems);
            if (output.items.length > 1 && output.items.every(item => (0,_contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.isTextStreamMime)(item.mime))) {
                const mimeOutputs = ( new Map());
                const mimeTypes = [];
                output.items.forEach(item => {
                    let items;
                    if (( mimeOutputs.has(item.mime))) {
                        items = mimeOutputs.get(item.mime);
                    }
                    else {
                        items = [];
                        mimeOutputs.set(item.mime, items);
                        mimeTypes.push(item.mime);
                    }
                    items.push(item.data);
                });
                output.items.length = 0;
                mimeTypes.forEach(mime => {
                    const compressed = (0,_contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.compressOutputItemStreams)(mimeOutputs.get(mime));
                    output.items.push({
                        mime,
                        data: compressed.data.buffer
                    });
                });
            }
        }
    }
    setMetadata(newMetadata) {
        this._metadata = ( Object.freeze(newMetadata));
    }
    setInternalMetadata(newInternalMetadata) {
        this._internalMetadata = newInternalMetadata;
        this._previousResult = ( Object.freeze(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.NotebookCellExecutionSummary.to(newInternalMetadata)));
    }
    setMime(newMime) {
    }
}
class ExtHostNotebookDocument {
    static { this._handlePool = 0; }
    constructor(_proxy, _textDocumentsAndEditors, _textDocuments, uri, data) {
        this._proxy = _proxy;
        this._textDocumentsAndEditors = _textDocumentsAndEditors;
        this._textDocuments = _textDocuments;
        this.uri = uri;
        this.handle = ExtHostNotebookDocument._handlePool++;
        this._cells = [];
        this._versionId = 0;
        this._isDirty = false;
        this._disposed = false;
        this._notebookType = data.viewType;
        this._metadata = ( Object.freeze(data.metadata ?? Object.create(null)));
        this._spliceNotebookCells([[0, 0, data.cells]], true , undefined);
        this._versionId = data.versionId;
    }
    dispose() {
        this._disposed = true;
    }
    get versionId() {
        return this._versionId;
    }
    get apiNotebook() {
        if (!this._notebook) {
            const that = this;
            const apiObject = {
                get uri() { return that.uri; },
                get version() { return that._versionId; },
                get notebookType() { return that._notebookType; },
                get isDirty() { return that._isDirty; },
                get isUntitled() { return that.uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_0__.Schemas.untitled; },
                get isClosed() { return that._disposed; },
                get metadata() { return that._metadata; },
                get cellCount() { return that._cells.length; },
                cellAt(index) {
                    index = that._validateIndex(index);
                    return that._cells[index].apiCell;
                },
                getCells(range) {
                    const cells = range ? that._getCells(range) : that._cells;
                    return ( cells.map(cell => cell.apiCell));
                },
                save() {
                    return that._save();
                }
            };
            this._notebook = ( Object.freeze(apiObject));
        }
        return this._notebook;
    }
    acceptDocumentPropertiesChanged(data) {
        if (data.metadata) {
            this._metadata = ( Object.freeze({ ...this._metadata, ...data.metadata }));
        }
    }
    acceptDirty(isDirty) {
        this._isDirty = isDirty;
    }
    acceptModelChanged(event, isDirty, newMetadata) {
        this._versionId = event.versionId;
        this._isDirty = isDirty;
        this.acceptDocumentPropertiesChanged({ metadata: newMetadata });
        const result = {
            notebook: this.apiNotebook,
            metadata: newMetadata,
            cellChanges: [],
            contentChanges: [],
        };
        const relaxedCellChanges = [];
        for (const rawEvent of event.rawEvents) {
            if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.ModelChange) {
                this._spliceNotebookCells(rawEvent.changes, false, result.contentChanges);
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.Move) {
                this._moveCells(rawEvent.index, rawEvent.length, rawEvent.newIdx, result.contentChanges);
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.Output) {
                this._setCellOutputs(rawEvent.index, rawEvent.outputs);
                relaxedCellChanges.push({ cell: this._cells[rawEvent.index].apiCell, outputs: this._cells[rawEvent.index].apiCell.outputs });
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.OutputItem) {
                this._setCellOutputItems(rawEvent.index, rawEvent.outputId, rawEvent.append, rawEvent.outputItems);
                relaxedCellChanges.push({ cell: this._cells[rawEvent.index].apiCell, outputs: this._cells[rawEvent.index].apiCell.outputs });
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.ChangeCellLanguage) {
                this._changeCellLanguage(rawEvent.index, rawEvent.language);
                relaxedCellChanges.push({ cell: this._cells[rawEvent.index].apiCell, document: this._cells[rawEvent.index].apiCell.document });
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.ChangeCellContent) {
                relaxedCellChanges.push({ cell: this._cells[rawEvent.index].apiCell, document: this._cells[rawEvent.index].apiCell.document });
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.ChangeCellMime) {
                this._changeCellMime(rawEvent.index, rawEvent.mime);
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.ChangeCellMetadata) {
                this._changeCellMetadata(rawEvent.index, rawEvent.metadata);
                relaxedCellChanges.push({ cell: this._cells[rawEvent.index].apiCell, metadata: this._cells[rawEvent.index].apiCell.metadata });
            }
            else if (rawEvent.kind === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_4__.NotebookCellsChangeType.ChangeCellInternalMetadata) {
                this._changeCellInternalMetadata(rawEvent.index, rawEvent.internalMetadata);
                relaxedCellChanges.push({ cell: this._cells[rawEvent.index].apiCell, executionSummary: this._cells[rawEvent.index].apiCell.executionSummary });
            }
        }
        const map = ( new Map());
        for (let i = 0; i < relaxedCellChanges.length; i++) {
            const relaxedCellChange = relaxedCellChanges[i];
            const existing = map.get(relaxedCellChange.cell);
            if (existing === undefined) {
                const newLen = result.cellChanges.push({
                    document: undefined,
                    executionSummary: undefined,
                    metadata: undefined,
                    outputs: undefined,
                    ...relaxedCellChange,
                });
                map.set(relaxedCellChange.cell, newLen - 1);
            }
            else {
                result.cellChanges[existing] = {
                    ...result.cellChanges[existing],
                    ...relaxedCellChange
                };
            }
        }
        return result;
    }
    _validateIndex(index) {
        index = index | 0;
        if (index < 0) {
            return 0;
        }
        else if (index >= this._cells.length) {
            return this._cells.length - 1;
        }
        else {
            return index;
        }
    }
    _validateRange(range) {
        let start = range.start | 0;
        let end = range.end | 0;
        if (start < 0) {
            start = 0;
        }
        if (end > this._cells.length) {
            end = this._cells.length;
        }
        return range.with({ start, end });
    }
    _getCells(range) {
        range = this._validateRange(range);
        const result = [];
        for (let i = range.start; i < range.end; i++) {
            result.push(this._cells[i]);
        }
        return result;
    }
    async _save() {
        if (this._disposed) {
            return Promise.reject(( new Error('Notebook has been closed')));
        }
        return this._proxy.$trySaveNotebook(this.uri);
    }
    _spliceNotebookCells(splices, initialization, bucket) {
        if (this._disposed) {
            return;
        }
        const contentChangeEvents = [];
        const addedCellDocuments = [];
        const removedCellDocuments = [];
        splices.reverse().forEach(splice => {
            const cellDtos = splice[2];
            const newCells = ( cellDtos.map(cell => {
                const extCell = ( new ExtHostCell(this, this._textDocumentsAndEditors, cell));
                if (!initialization) {
                    addedCellDocuments.push(ExtHostCell.asModelAddData(cell));
                }
                return extCell;
            }));
            const changeEvent = ( new RawContentChangeEvent(splice[0], splice[1], [], newCells));
            const deletedItems = this._cells.splice(splice[0], splice[1], ...newCells);
            for (const cell of deletedItems) {
                removedCellDocuments.push(cell.uri);
                changeEvent.deletedItems.push(cell.apiCell);
            }
            contentChangeEvents.push(changeEvent);
        });
        this._textDocumentsAndEditors.acceptDocumentsAndEditorsDelta({
            addedDocuments: addedCellDocuments,
            removedDocuments: removedCellDocuments
        });
        if (bucket) {
            for (const changeEvent of contentChangeEvents) {
                bucket.push(changeEvent.asApiEvent());
            }
        }
    }
    _moveCells(index, length, newIdx, bucket) {
        const cells = this._cells.splice(index, length);
        this._cells.splice(newIdx, 0, ...cells);
        const changes = [
            ( new RawContentChangeEvent(index, length, ( cells.map(c => c.apiCell)), [])),
            ( new RawContentChangeEvent(newIdx, 0, [], cells))
        ];
        for (const change of changes) {
            bucket.push(change.asApiEvent());
        }
    }
    _setCellOutputs(index, outputs) {
        const cell = this._cells[index];
        cell.setOutputs(outputs);
    }
    _setCellOutputItems(index, outputId, append, outputItems) {
        const cell = this._cells[index];
        cell.setOutputItems(outputId, append, outputItems);
    }
    _changeCellLanguage(index, newLanguageId) {
        const cell = this._cells[index];
        if (cell.apiCell.document.languageId !== newLanguageId) {
            this._textDocuments.$acceptModelLanguageChanged(cell.uri, newLanguageId);
        }
    }
    _changeCellMime(index, newMime) {
        const cell = this._cells[index];
        cell.apiCell.mime = newMime;
    }
    _changeCellMetadata(index, newMetadata) {
        const cell = this._cells[index];
        cell.setMetadata(newMetadata);
    }
    _changeCellInternalMetadata(index, newInternalMetadata) {
        const cell = this._cells[index];
        cell.setInternalMetadata(newInternalMetadata);
    }
    getCellFromApiCell(apiCell) {
        return this._cells.find(cell => cell.apiCell === apiCell);
    }
    getCellFromIndex(index) {
        return this._cells[index];
    }
    getCell(cellHandle) {
        return this._cells.find(cell => cell.handle === cellHandle);
    }
    getCellIndex(cell) {
        return this._cells.indexOf(cell);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocumentSaveParticipant.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocumentSaveParticipant.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostNotebookDocumentSaveParticipant: () => (/* binding */ ExtHostNotebookDocumentSaveParticipant)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/extensions/common/proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");





class ExtHostNotebookDocumentSaveParticipant {
    constructor(_logService, _notebooksAndEditors, _mainThreadBulkEdits, _thresholds = { timeout: 1500, errors: 3 }) {
        this._logService = _logService;
        this._notebooksAndEditors = _notebooksAndEditors;
        this._mainThreadBulkEdits = _mainThreadBulkEdits;
        this._thresholds = _thresholds;
        this._onWillSaveNotebookDocumentEvent = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.AsyncEmitter());
    }
    dispose() {
    }
    getOnWillSaveNotebookDocumentEvent(extension) {
        return (listener, thisArg, disposables) => {
            const wrappedListener = function wrapped(e) { listener.call(thisArg, e); };
            wrappedListener.extension = extension;
            return this._onWillSaveNotebookDocumentEvent.event(wrappedListener, undefined, disposables);
        };
    }
    async $participateInSave(resource, reason, token) {
        const revivedUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(resource);
        const document = this._notebooksAndEditors.getNotebookDocument(revivedUri);
        if (!document) {
            throw ( new Error('Unable to resolve notebook document'));
        }
        const edits = [];
        await this._onWillSaveNotebookDocumentEvent.fireAsync({ notebook: document.apiNotebook, reason: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.TextDocumentSaveReason.to(reason) }, token, async (thenable, listener) => {
            const now = Date.now();
            const data = await await Promise.resolve(thenable);
            if (Date.now() - now > this._thresholds.timeout) {
                this._logService.warn('onWillSaveNotebookDocument-listener from extension', listener.extension.identifier);
            }
            if (token.isCancellationRequested) {
                return;
            }
            if (data) {
                if (data instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_3__.WorkspaceEdit) {
                    edits.push(data);
                }
                else {
                    this._logService.warn('onWillSaveNotebookDocument-listener from extension', listener.extension.identifier, 'ignored due to invalid data');
                }
            }
            return;
        });
        if (token.isCancellationRequested) {
            return false;
        }
        if (edits.length === 0) {
            return true;
        }
        const dto = { edits: [] };
        for (const edit of edits) {
            const { edits } = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_2__.WorkspaceEdit.from(edit);
            dto.edits = dto.edits.concat(edits);
        }
        return this._mainThreadBulkEdits.$tryApplyWorkspaceEdit(( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_4__.SerializableObjectWithBuffers(dto)));
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocuments.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookDocuments.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostNotebookDocuments: () => (/* binding */ ExtHostNotebookDocuments)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");


class ExtHostNotebookDocuments {
    constructor(_notebooksAndEditors) {
        this._notebooksAndEditors = _notebooksAndEditors;
        this._onDidSaveNotebookDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidSaveNotebookDocument = this._onDidSaveNotebookDocument.event;
        this._onDidChangeNotebookDocument = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidChangeNotebookDocument = this._onDidChangeNotebookDocument.event;
    }
    $acceptModelChanged(uri, event, isDirty, newMetadata) {
        const document = this._notebooksAndEditors.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uri));
        const e = document.acceptModelChanged(event.value, isDirty, newMetadata);
        this._onDidChangeNotebookDocument.fire(e);
    }
    $acceptDirtyStateChanged(uri, isDirty) {
        const document = this._notebooksAndEditors.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uri));
        document.acceptDirty(isDirty);
    }
    $acceptModelSaved(uri) {
        const document = this._notebooksAndEditors.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uri));
        this._onDidSaveNotebookDocument.fire(document.apiNotebook);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookEditor.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookEditor.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostNotebookEditor: () => (/* binding */ ExtHostNotebookEditor)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");



class ExtHostNotebookEditor {
    static { this.apiEditorsToExtHost = ( new WeakMap()); }
    constructor(id, _proxy, notebookData, visibleRanges, selections, viewColumn) {
        this.id = id;
        this._proxy = _proxy;
        this.notebookData = notebookData;
        this._selections = [];
        this._visibleRanges = [];
        this._visible = false;
        this._selections = selections;
        this._visibleRanges = visibleRanges;
        this._viewColumn = viewColumn;
    }
    get apiEditor() {
        if (!this._editor) {
            const that = this;
            this._editor = {
                get notebook() {
                    return that.notebookData.apiNotebook;
                },
                get selection() {
                    return that._selections[0];
                },
                set selection(selection) {
                    this.selections = [selection];
                },
                get selections() {
                    return that._selections;
                },
                set selections(value) {
                    if (!Array.isArray(value) || !value.every(_extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.NotebookRange.isNotebookRange)) {
                        throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.illegalArgument)('selections');
                    }
                    that._selections = value;
                    that._trySetSelections(value);
                },
                get visibleRanges() {
                    return that._visibleRanges;
                },
                revealRange(range, revealType) {
                    that._proxy.$tryRevealRange(that.id, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.NotebookRange.from(range), revealType ?? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_2__.NotebookEditorRevealType.Default);
                },
                get viewColumn() {
                    return that._viewColumn;
                },
            };
            ExtHostNotebookEditor.apiEditorsToExtHost.set(this._editor, this);
        }
        return this._editor;
    }
    get visible() {
        return this._visible;
    }
    _acceptVisibility(value) {
        this._visible = value;
    }
    _acceptVisibleRanges(value) {
        this._visibleRanges = value;
    }
    _acceptSelections(selections) {
        this._selections = selections;
    }
    _trySetSelections(value) {
        this._proxy.$trySetSelections(this.id, ( value.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.NotebookRange.from)));
    }
    _acceptViewColumn(value) {
        this._viewColumn = value;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookEditors.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookEditors.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostNotebookEditors: () => (/* binding */ ExtHostNotebookEditors)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");




let ExtHostNotebookEditors = class ExtHostNotebookEditors {
    constructor(_logService, _notebooksAndEditors) {
        this._logService = _logService;
        this._notebooksAndEditors = _notebooksAndEditors;
        this._onDidChangeNotebookEditorSelection = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this._onDidChangeNotebookEditorVisibleRanges = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChangeNotebookEditorSelection = this._onDidChangeNotebookEditorSelection.event;
        this.onDidChangeNotebookEditorVisibleRanges = this._onDidChangeNotebookEditorVisibleRanges.event;
    }
    $acceptEditorPropertiesChanged(id, data) {
        this._logService.debug('ExtHostNotebook#$acceptEditorPropertiesChanged', id, data);
        const editor = this._notebooksAndEditors.getEditorById(id);
        if (data.visibleRanges) {
            editor._acceptVisibleRanges(( data.visibleRanges.ranges.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.NotebookRange.to)));
        }
        if (data.selections) {
            editor._acceptSelections(( data.selections.selections.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.NotebookRange.to)));
        }
        if (data.visibleRanges) {
            this._onDidChangeNotebookEditorVisibleRanges.fire({
                notebookEditor: editor.apiEditor,
                visibleRanges: editor.apiEditor.visibleRanges
            });
        }
        if (data.selections) {
            this._onDidChangeNotebookEditorSelection.fire(( Object.freeze({
                notebookEditor: editor.apiEditor,
                selections: editor.apiEditor.selections
            })));
        }
    }
    $acceptEditorViewColumns(data) {
        for (const id in data) {
            const editor = this._notebooksAndEditors.getEditorById(id);
            editor._acceptViewColumn(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.ViewColumn.to(data[id]));
        }
    }
};
ExtHostNotebookEditors = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_2__.ILogService))
], ExtHostNotebookEditors));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookKernels.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookKernels.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostNotebookKernels: () => (/* binding */ ExtHostNotebookKernels),
/* harmony export */   createKernelId: () => (/* binding */ createKernelId)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../contrib/webview/common/webview.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/webview/common/webview.js");
/* harmony import */ var _contrib_notebook_common_notebookExecutionService_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../contrib/notebook/common/notebookExecutionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookExecutionService.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../services/extensions/common/proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");
/* harmony import */ var _contrib_notebook_common_notebookKernelService_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../contrib/notebook/common/notebookKernelService.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookKernelService.js");



















let ExtHostNotebookKernels = class ExtHostNotebookKernels {
    constructor(mainContext, _initData, _extHostNotebook, _commands, _logService) {
        this._initData = _initData;
        this._extHostNotebook = _extHostNotebook;
        this._commands = _commands;
        this._logService = _logService;
        this._activeExecutions = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_6__.ResourceMap());
        this._activeNotebookExecutions = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_6__.ResourceMap());
        this._kernelDetectionTask = ( new Map());
        this._kernelDetectionTaskHandlePool = 0;
        this._kernelSourceActionProviders = ( new Map());
        this._kernelSourceActionProviderHandlePool = 0;
        this._kernelData = ( new Map());
        this._handlePool = 0;
        this._onDidChangeCellExecutionState = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        this.onDidChangeNotebookCellExecutionState = this._onDidChangeCellExecutionState.event;
        this.id = 0;
        this.variableStore = {};
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_10__.MainContext.MainThreadNotebookKernels));
        const selectKernelApiCommand = ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_11__.ApiCommand(
            'notebook.selectKernel',
            '_notebook.selectKernel',
            'Trigger kernel picker for specified notebook editor widget',
            [
                ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_11__.ApiCommandArgument('options', 'Select kernel options', v => true, (v) => {
                    if (v && 'notebookEditor' in v && 'id' in v) {
                        const notebookEditorId = this._extHostNotebook.getIdByEditor(v.notebookEditor);
                        return {
                            id: v.id, extension: v.extension, notebookEditorId
                        };
                    }
                    else if (v && 'notebookEditor' in v) {
                        const notebookEditorId = this._extHostNotebook.getIdByEditor(v.notebookEditor);
                        if (notebookEditorId === undefined) {
                            throw ( new Error(
                                `Cannot invoke 'notebook.selectKernel' for unrecognized notebook editor ${( v.notebookEditor.notebook.uri.toString())}`
                            ));
                        }
                        return { notebookEditorId };
                    }
                    return v;
                }))
            ],
            _extHostCommands_js__WEBPACK_IMPORTED_MODULE_11__.ApiCommandResult.Void
        ));
        const requestKernelVariablesApiCommand = ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_11__.ApiCommand(
            'vscode.executeNotebookVariableProvider',
            '_executeNotebookVariableProvider',
            'Execute notebook variable provider',
            [_extHostCommands_js__WEBPACK_IMPORTED_MODULE_11__.ApiCommandArgument.Uri],
            ( new _extHostCommands_js__WEBPACK_IMPORTED_MODULE_11__.ApiCommandResult('A promise that resolves to an array of variables', (value, apiArgs) => {
                return ( value.map(variable => {
                    return {
                        variable: {
                            name: variable.name,
                            value: variable.value,
                            expression: variable.expression,
                            type: variable.type,
                            language: variable.language
                        },
                        hasNamedChildren: variable.hasNamedChildren,
                        indexedChildrenCount: variable.indexedChildrenCount
                    };
                }));
            }))
        ));
        this._commands.registerApiCommand(selectKernelApiCommand);
        this._commands.registerApiCommand(requestKernelVariablesApiCommand);
    }
    createNotebookController(extension, id, viewType, label, handler, preloads) {
        for (const data of ( this._kernelData.values())) {
            if (data.controller.id === id && _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_8__.ExtensionIdentifier.equals(extension.identifier, data.extensionId)) {
                throw ( new Error(`notebook controller with id '${id}' ALREADY exist`));
            }
        }
        const handle = this._handlePool++;
        const that = this;
        this._logService.trace(`NotebookController[${handle}], CREATED by ${extension.identifier.value}, ${id}`);
        const _defaultExecutHandler = () => console.warn(`NO execute handler from notebook controller '${data.id}' of extension: '${extension.identifier}'`);
        let isDisposed = false;
        const onDidChangeSelection = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        const onDidReceiveMessage = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        const data = {
            id: createKernelId(extension.identifier, id),
            notebookType: viewType,
            extensionId: extension.identifier,
            extensionLocation: extension.extensionLocation,
            label: label || extension.identifier.value,
            preloads: preloads ? ( preloads.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__.NotebookRendererScript.from)) : []
        };
        let _executeHandler = handler ?? _defaultExecutHandler;
        let _interruptHandler;
        let _variableProvider;
        this._proxy.$addKernel(handle, data).catch(err => {
            console.log(err);
            isDisposed = true;
        });
        let tokenPool = 0;
        const _update = () => {
            if (isDisposed) {
                return;
            }
            const myToken = ++tokenPool;
            Promise.resolve().then(() => {
                if (myToken === tokenPool) {
                    this._proxy.$updateKernel(handle, data);
                }
            });
        };
        const associatedNotebooks = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_6__.ResourceMap());
        const controller = {
            get id() { return id; },
            get notebookType() { return data.notebookType; },
            onDidChangeSelectedNotebooks: onDidChangeSelection.event,
            get label() {
                return data.label;
            },
            set label(value) {
                data.label = value ?? extension.displayName ?? extension.name;
                _update();
            },
            get detail() {
                return data.detail ?? '';
            },
            set detail(value) {
                data.detail = value;
                _update();
            },
            get description() {
                return data.description ?? '';
            },
            set description(value) {
                data.description = value;
                _update();
            },
            get supportedLanguages() {
                return data.supportedLanguages;
            },
            set supportedLanguages(value) {
                data.supportedLanguages = value;
                _update();
            },
            get supportsExecutionOrder() {
                return data.supportsExecutionOrder ?? false;
            },
            set supportsExecutionOrder(value) {
                data.supportsExecutionOrder = value;
                _update();
            },
            get rendererScripts() {
                return data.preloads ? ( data.preloads.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__.NotebookRendererScript.to)) : [];
            },
            get executeHandler() {
                return _executeHandler;
            },
            set executeHandler(value) {
                _executeHandler = value ?? _defaultExecutHandler;
            },
            get interruptHandler() {
                return _interruptHandler;
            },
            set interruptHandler(value) {
                _interruptHandler = value;
                data.supportsInterrupt = Boolean(value);
                _update();
            },
            set variableProvider(value) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__.checkProposedApiEnabled)(extension, 'notebookVariableProvider');
                _variableProvider = value;
                data.hasVariableProvider = !!value;
                value?.onDidChangeVariables(e => that._proxy.$variablesUpdated(e.uri));
                _update();
            },
            get variableProvider() {
                return _variableProvider;
            },
            createNotebookCellExecution(cell) {
                if (isDisposed) {
                    throw ( new Error('notebook controller is DISPOSED'));
                }
                if (!( associatedNotebooks.has(cell.notebook.uri))) {
                    that._logService.trace(`NotebookController[${handle}] NOT associated to notebook, associated to THESE notebooks:`, ( Array.from(( associatedNotebooks.keys())).map(u => ( u.toString()))));
                    throw ( new Error(`notebook controller is NOT associated to notebook: ${( cell.notebook.uri.toString())}`));
                }
                return that._createNotebookCellExecution(cell, createKernelId(extension.identifier, this.id));
            },
            createNotebookExecution(notebook) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__.checkProposedApiEnabled)(extension, 'notebookExecution');
                if (isDisposed) {
                    throw ( new Error('notebook controller is DISPOSED'));
                }
                if (!( associatedNotebooks.has(notebook.uri))) {
                    that._logService.trace(`NotebookController[${handle}] NOT associated to notebook, associated to THESE notebooks:`, ( Array.from(( associatedNotebooks.keys())).map(u => ( u.toString()))));
                    throw ( new Error(`notebook controller is NOT associated to notebook: ${( notebook.uri.toString())}`));
                }
                return that._createNotebookExecution(notebook, createKernelId(extension.identifier, this.id));
            },
            dispose: () => {
                if (!isDisposed) {
                    this._logService.trace(`NotebookController[${handle}], DISPOSED`);
                    isDisposed = true;
                    this._kernelData.delete(handle);
                    onDidChangeSelection.dispose();
                    onDidReceiveMessage.dispose();
                    this._proxy.$removeKernel(handle);
                }
            },
            updateNotebookAffinity(notebook, priority) {
                if (priority === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_13__.NotebookControllerAffinity2.Hidden) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__.checkProposedApiEnabled)(extension, 'notebookControllerAffinityHidden');
                }
                that._proxy.$updateNotebookPriority(handle, notebook.uri, priority);
            },
            onDidReceiveMessage: onDidReceiveMessage.event,
            postMessage(message, editor) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__.checkProposedApiEnabled)(extension, 'notebookMessaging');
                return that._proxy.$postMessage(handle, editor && that._extHostNotebook.getIdByEditor(editor), message);
            },
            asWebviewUri(uri) {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_16__.checkProposedApiEnabled)(extension, 'notebookMessaging');
                return (0,_contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_14__.asWebviewUri)(uri, that._initData.remote);
            },
        };
        this._kernelData.set(handle, {
            extensionId: extension.identifier,
            controller,
            onDidReceiveMessage,
            onDidChangeSelection,
            associatedNotebooks
        });
        return controller;
    }
    getIdByController(controller) {
        for (const [_, candidate] of this._kernelData) {
            if (candidate.controller === controller) {
                return createKernelId(candidate.extensionId, controller.id);
            }
        }
        return null;
    }
    createNotebookControllerDetectionTask(extension, viewType) {
        const handle = this._kernelDetectionTaskHandlePool++;
        const that = this;
        this._logService.trace(`NotebookControllerDetectionTask[${handle}], CREATED by ${extension.identifier.value}`);
        this._proxy.$addKernelDetectionTask(handle, viewType);
        const detectionTask = {
            dispose: () => {
                this._kernelDetectionTask.delete(handle);
                that._proxy.$removeKernelDetectionTask(handle);
            }
        };
        this._kernelDetectionTask.set(handle, detectionTask);
        return detectionTask;
    }
    registerKernelSourceActionProvider(extension, viewType, provider) {
        const handle = this._kernelSourceActionProviderHandlePool++;
        const eventHandle = typeof provider.onDidChangeNotebookKernelSourceActions === 'function' ? handle : undefined;
        const that = this;
        this._kernelSourceActionProviders.set(handle, provider);
        this._logService.trace(`NotebookKernelSourceActionProvider[${handle}], CREATED by ${extension.identifier.value}`);
        this._proxy.$addKernelSourceActionProvider(handle, handle, viewType);
        let subscription;
        if (eventHandle !== undefined) {
            subscription = provider.onDidChangeNotebookKernelSourceActions(_ => this._proxy.$emitNotebookKernelSourceActionsChangeEvent(eventHandle));
        }
        return {
            dispose: () => {
                this._kernelSourceActionProviders.delete(handle);
                that._proxy.$removeKernelSourceActionProvider(handle, handle);
                subscription?.dispose();
            }
        };
    }
    async $provideKernelSourceActions(handle, token) {
        const provider = this._kernelSourceActionProviders.get(handle);
        if (provider) {
            const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.DisposableStore());
            const ret = await provider.provideNotebookKernelSourceActions(token);
            return ( (ret ?? []).map(
                item => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__.NotebookKernelSourceAction.from(item, this._commands.converter, disposables)
            ));
        }
        return [];
    }
    $acceptNotebookAssociation(handle, uri, value) {
        const obj = this._kernelData.get(handle);
        if (obj) {
            const notebook = this._extHostNotebook.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__.URI.revive(uri));
            if (value) {
                obj.associatedNotebooks.set(notebook.uri, true);
            }
            else {
                obj.associatedNotebooks.delete(notebook.uri);
            }
            this._logService.trace(`NotebookController[${handle}] ASSOCIATE notebook`, ( notebook.uri.toString()), value);
            obj.onDidChangeSelection.fire({
                selected: value,
                notebook: notebook.apiNotebook
            });
        }
    }
    async $executeCells(handle, uri, handles) {
        const obj = this._kernelData.get(handle);
        if (!obj) {
            return;
        }
        const document = this._extHostNotebook.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__.URI.revive(uri));
        const cells = [];
        for (const cellHandle of handles) {
            const cell = document.getCell(cellHandle);
            if (cell) {
                cells.push(cell.apiCell);
            }
        }
        try {
            this._logService.trace(`NotebookController[${handle}] EXECUTE cells`, ( document.uri.toString()), cells.length);
            await obj.controller.executeHandler.call(obj.controller, cells, document.apiNotebook, obj.controller);
        }
        catch (err) {
            this._logService.error(`NotebookController[${handle}] execute cells FAILED`, err);
            console.error(err);
        }
    }
    async $cancelCells(handle, uri, handles) {
        const obj = this._kernelData.get(handle);
        if (!obj) {
            return;
        }
        const document = this._extHostNotebook.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__.URI.revive(uri));
        if (obj.controller.interruptHandler) {
            await obj.controller.interruptHandler.call(obj.controller, document.apiNotebook);
        }
        else {
            for (const cellHandle of handles) {
                const cell = document.getCell(cellHandle);
                if (cell) {
                    this._activeExecutions.get(cell.uri)?.cancel();
                }
            }
        }
        if (obj.controller.interruptHandler) {
            const items = this._activeNotebookExecutions.get(document.uri);
            this._activeNotebookExecutions.delete(document.uri);
            if (handles.length && Array.isArray(items) && items.length) {
                items.forEach(d => d.dispose());
            }
        }
    }
    async $provideVariables(handle, requestId, notebookUri, parentId, kind, start, token) {
        const obj = this._kernelData.get(handle);
        if (!obj) {
            return;
        }
        const document = this._extHostNotebook.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__.URI.revive(notebookUri));
        const variableProvider = obj.controller.variableProvider;
        if (!variableProvider) {
            return;
        }
        let parent = undefined;
        if (parentId !== undefined) {
            parent = this.variableStore[parentId];
            if (!parent) {
                return;
            }
        }
        else {
            this.variableStore = {};
        }
        const requestKind = kind === 'named' ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_13__.NotebookVariablesRequestKind.Named : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_13__.NotebookVariablesRequestKind.Indexed;
        const variableResults = variableProvider.provideVariables(document.apiNotebook, parent, requestKind, start, token);
        let resultCount = 0;
        for await (const result of variableResults) {
            if (token.isCancellationRequested) {
                return;
            }
            const variable = {
                id: this.id++,
                name: result.variable.name,
                value: result.variable.value,
                type: result.variable.type,
                interfaces: result.variable.interfaces,
                language: result.variable.language,
                expression: result.variable.expression,
                hasNamedChildren: result.hasNamedChildren,
                indexedChildrenCount: result.indexedChildrenCount,
                extensionId: obj.extensionId.value,
            };
            this.variableStore[variable.id] = result.variable;
            this._proxy.$receiveVariable(requestId, variable);
            if (resultCount++ >= _contrib_notebook_common_notebookKernelService_js__WEBPACK_IMPORTED_MODULE_18__.variablePageSize) {
                return;
            }
        }
    }
    $acceptKernelMessageFromRenderer(handle, editorId, message) {
        const obj = this._kernelData.get(handle);
        if (!obj) {
            return;
        }
        const editor = this._extHostNotebook.getEditorById(editorId);
        obj.onDidReceiveMessage.fire(( Object.freeze({ editor: editor.apiEditor, message })));
    }
    $cellExecutionChanged(uri, cellHandle, state) {
        const document = this._extHostNotebook.getNotebookDocument(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__.URI.revive(uri));
        const cell = document.getCell(cellHandle);
        if (cell) {
            const newState = state ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__.NotebookCellExecutionState.to(state) : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_13__.NotebookCellExecutionState.Idle;
            if (newState !== undefined) {
                this._onDidChangeCellExecutionState.fire({
                    cell: cell.apiCell,
                    state: newState
                });
            }
        }
    }
    _createNotebookCellExecution(cell, controllerId) {
        if (cell.index < 0) {
            throw ( new Error('CANNOT execute cell that has been REMOVED from notebook'));
        }
        const notebook = this._extHostNotebook.getNotebookDocument(cell.notebook.uri);
        const cellObj = notebook.getCellFromApiCell(cell);
        if (!cellObj) {
            throw ( new Error('invalid cell'));
        }
        if (( this._activeExecutions.has(cellObj.uri))) {
            throw ( new Error(`duplicate execution for ${cellObj.uri}`));
        }
        const execution = ( new NotebookCellExecutionTask(controllerId, cellObj, this._proxy));
        this._activeExecutions.set(cellObj.uri, execution);
        const listener = execution.onDidChangeState(() => {
            if (execution.state === NotebookCellExecutionTaskState.Resolved) {
                execution.dispose();
                listener.dispose();
                this._activeExecutions.delete(cellObj.uri);
            }
        });
        return execution.asApiObject();
    }
    _createNotebookExecution(nb, controllerId) {
        const notebook = this._extHostNotebook.getNotebookDocument(nb.uri);
        const runningCell = nb.getCells().find(cell => {
            const apiCell = notebook.getCellFromApiCell(cell);
            return apiCell && ( this._activeExecutions.has(apiCell.uri));
        });
        if (runningCell) {
            throw ( new Error(`duplicate cell execution for ${runningCell.document.uri}`));
        }
        if (( this._activeNotebookExecutions.has(notebook.uri))) {
            throw ( new Error(`duplicate notebook execution for ${notebook.uri}`));
        }
        const execution = ( new NotebookExecutionTask(controllerId, notebook, this._proxy));
        const listener = execution.onDidChangeState(() => {
            if (execution.state === NotebookExecutionTaskState.Resolved) {
                execution.dispose();
                listener.dispose();
                this._activeNotebookExecutions.delete(notebook.uri);
            }
        });
        this._activeNotebookExecutions.set(notebook.uri, [execution, listener]);
        return execution.asApiObject();
    }
};
ExtHostNotebookKernels = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_9__.ILogService))
], ExtHostNotebookKernels));
var NotebookCellExecutionTaskState;
( (function(NotebookCellExecutionTaskState) {
    NotebookCellExecutionTaskState[NotebookCellExecutionTaskState["Init"] = 0] = "Init";
    NotebookCellExecutionTaskState[NotebookCellExecutionTaskState["Started"] = 1] = "Started";
    NotebookCellExecutionTaskState[NotebookCellExecutionTaskState["Resolved"] = 2] = "Resolved";
})(NotebookCellExecutionTaskState || (NotebookCellExecutionTaskState = {})));
class NotebookCellExecutionTask extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.Disposable {
    static { this.HANDLE = 0; }
    get state() { return this._state; }
    constructor(controllerId, _cell, _proxy) {
        super();
        this._cell = _cell;
        this._proxy = _proxy;
        this._handle = NotebookCellExecutionTask.HANDLE++;
        this._onDidChangeState = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        this.onDidChangeState = this._onDidChangeState.event;
        this._state = NotebookCellExecutionTaskState.Init;
        this._tokenSource = this._register(( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationTokenSource()));
        this._collector = ( new TimeoutBasedCollector(10, updates => this.update(updates)));
        this._executionOrder = _cell.internalMetadata.executionOrder;
        this._proxy.$createExecution(this._handle, controllerId, this._cell.notebook.uri, this._cell.handle);
    }
    cancel() {
        this._tokenSource.cancel();
    }
    async updateSoon(update) {
        await this._collector.addItem(update);
    }
    async update(update) {
        const updates = Array.isArray(update) ? update : [update];
        return this._proxy.$updateExecution(this._handle, ( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_17__.SerializableObjectWithBuffers(updates)));
    }
    verifyStateForOutput() {
        if (this._state === NotebookCellExecutionTaskState.Init) {
            throw ( new Error('Must call start before modifying cell output'));
        }
        if (this._state === NotebookCellExecutionTaskState.Resolved) {
            throw ( new Error('Cannot modify cell output after calling resolve'));
        }
    }
    cellIndexToHandle(cellOrCellIndex) {
        let cell = this._cell;
        if (cellOrCellIndex) {
            cell = this._cell.notebook.getCellFromApiCell(cellOrCellIndex);
        }
        if (!cell) {
            throw ( new Error('INVALID cell'));
        }
        return cell.handle;
    }
    validateAndConvertOutputs(items) {
        return ( items.map(output => {
            const newOutput = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_13__.NotebookCellOutput.ensureUniqueMimeTypes(output.items, true);
            if (newOutput === output.items) {
                return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__.NotebookCellOutput.from(output);
            }
            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__.NotebookCellOutput.from({
                items: newOutput,
                id: output.id,
                metadata: output.metadata
            });
        }));
    }
    async updateOutputs(outputs, cell, append) {
        const handle = this.cellIndexToHandle(cell);
        const outputDtos = this.validateAndConvertOutputs((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.asArray)(outputs));
        return this.updateSoon({
            editType: _contrib_notebook_common_notebookExecutionService_js__WEBPACK_IMPORTED_MODULE_15__.CellExecutionUpdateType.Output,
            cellHandle: handle,
            append,
            outputs: outputDtos
        });
    }
    async updateOutputItems(items, output, append) {
        items = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_13__.NotebookCellOutput.ensureUniqueMimeTypes((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.asArray)(items), true);
        return this.updateSoon({
            editType: _contrib_notebook_common_notebookExecutionService_js__WEBPACK_IMPORTED_MODULE_15__.CellExecutionUpdateType.OutputItems,
            items: ( items.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_12__.NotebookCellOutputItem.from)),
            outputId: output.id,
            append
        });
    }
    asApiObject() {
        const that = this;
        const result = {
            get token() { return that._tokenSource.token; },
            get cell() { return that._cell.apiCell; },
            get executionOrder() { return that._executionOrder; },
            set executionOrder(v) {
                that._executionOrder = v;
                that.update([{
                        editType: _contrib_notebook_common_notebookExecutionService_js__WEBPACK_IMPORTED_MODULE_15__.CellExecutionUpdateType.ExecutionState,
                        executionOrder: that._executionOrder
                    }]);
            },
            start(startTime) {
                if (that._state === NotebookCellExecutionTaskState.Resolved || that._state === NotebookCellExecutionTaskState.Started) {
                    throw ( new Error('Cannot call start again'));
                }
                that._state = NotebookCellExecutionTaskState.Started;
                that._onDidChangeState.fire();
                that.update({
                    editType: _contrib_notebook_common_notebookExecutionService_js__WEBPACK_IMPORTED_MODULE_15__.CellExecutionUpdateType.ExecutionState,
                    runStartTime: startTime
                });
            },
            end(success, endTime, executionError) {
                if (that._state === NotebookCellExecutionTaskState.Resolved) {
                    throw ( new Error('Cannot call resolve twice'));
                }
                that._state = NotebookCellExecutionTaskState.Resolved;
                that._onDidChangeState.fire();
                that._collector.flush();
                const error = executionError ? {
                    message: executionError.message,
                    stack: executionError.stack,
                    location: executionError?.location ? {
                        startLineNumber: executionError.location.start.line,
                        startColumn: executionError.location.start.character,
                        endLineNumber: executionError.location.end.line,
                        endColumn: executionError.location.end.character
                    } : undefined,
                    uri: executionError.uri
                } : undefined;
                that._proxy.$completeExecution(that._handle, ( new _services_extensions_common_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_17__.SerializableObjectWithBuffers({
                    runEndTime: endTime,
                    lastRunSuccess: success,
                    error
                })));
            },
            clearOutput(cell) {
                that.verifyStateForOutput();
                return that.updateOutputs([], cell, false);
            },
            appendOutput(outputs, cell) {
                that.verifyStateForOutput();
                return that.updateOutputs(outputs, cell, true);
            },
            replaceOutput(outputs, cell) {
                that.verifyStateForOutput();
                return that.updateOutputs(outputs, cell, false);
            },
            appendOutputItems(items, output) {
                that.verifyStateForOutput();
                return that.updateOutputItems(items, output, true);
            },
            replaceOutputItems(items, output) {
                that.verifyStateForOutput();
                return that.updateOutputItems(items, output, false);
            }
        };
        return ( Object.freeze(result));
    }
}
var NotebookExecutionTaskState;
( (function(NotebookExecutionTaskState) {
    NotebookExecutionTaskState[NotebookExecutionTaskState["Init"] = 0] = "Init";
    NotebookExecutionTaskState[NotebookExecutionTaskState["Started"] = 1] = "Started";
    NotebookExecutionTaskState[NotebookExecutionTaskState["Resolved"] = 2] = "Resolved";
})(NotebookExecutionTaskState || (NotebookExecutionTaskState = {})));
class NotebookExecutionTask extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.Disposable {
    static { this.HANDLE = 0; }
    get state() { return this._state; }
    constructor(controllerId, _notebook, _proxy) {
        super();
        this._notebook = _notebook;
        this._proxy = _proxy;
        this._handle = NotebookExecutionTask.HANDLE++;
        this._onDidChangeState = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        this.onDidChangeState = this._onDidChangeState.event;
        this._state = NotebookExecutionTaskState.Init;
        this._tokenSource = this._register(( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationTokenSource()));
        this._proxy.$createNotebookExecution(this._handle, controllerId, this._notebook.uri);
    }
    cancel() {
        this._tokenSource.cancel();
    }
    asApiObject() {
        const result = {
            start: () => {
                if (this._state === NotebookExecutionTaskState.Resolved || this._state === NotebookExecutionTaskState.Started) {
                    throw ( new Error('Cannot call start again'));
                }
                this._state = NotebookExecutionTaskState.Started;
                this._onDidChangeState.fire();
                this._proxy.$beginNotebookExecution(this._handle);
            },
            end: () => {
                if (this._state === NotebookExecutionTaskState.Resolved) {
                    throw ( new Error('Cannot call resolve twice'));
                }
                this._state = NotebookExecutionTaskState.Resolved;
                this._onDidChangeState.fire();
                this._proxy.$completeNotebookExecution(this._handle);
            },
        };
        return ( Object.freeze(result));
    }
}
class TimeoutBasedCollector {
    constructor(delay, callback) {
        this.delay = delay;
        this.callback = callback;
        this.batch = [];
        this.startedTimer = Date.now();
    }
    addItem(item) {
        this.batch.push(item);
        if (!this.currentDeferred) {
            this.currentDeferred = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_2__.DeferredPromise());
            this.startedTimer = Date.now();
            (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_2__.timeout)(this.delay).then(() => {
                return this.flush();
            });
        }
        if (Date.now() - this.startedTimer > this.delay) {
            return this.flush();
        }
        return this.currentDeferred.p;
    }
    flush() {
        if (this.batch.length === 0 || !this.currentDeferred) {
            return Promise.resolve();
        }
        const deferred = this.currentDeferred;
        this.currentDeferred = undefined;
        const batch = this.batch;
        this.batch = [];
        return this.callback(batch)
            .finally(() => deferred.complete());
    }
}
function createKernelId(extensionIdentifier, id) {
    return `${extensionIdentifier.value}/${id}`;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookRenderers.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookRenderers.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostNotebookRenderers: () => (/* binding */ ExtHostNotebookRenderers)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostNotebookEditor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostNotebookEditor.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostNotebookEditor.js");



class ExtHostNotebookRenderers {
    constructor(mainContext, _extHostNotebook) {
        this._extHostNotebook = _extHostNotebook;
        this._rendererMessageEmitters = ( new Map());
        this.proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadNotebookRenderers));
    }
    $postRendererMessage(editorId, rendererId, message) {
        const editor = this._extHostNotebook.getEditorById(editorId);
        this._rendererMessageEmitters.get(rendererId)?.fire({ editor: editor.apiEditor, message });
    }
    createRendererMessaging(manifest, rendererId) {
        if (!manifest.contributes?.notebookRenderer?.some(r => r.id === rendererId)) {
            throw ( new Error(
                `Extensions may only call createRendererMessaging() for renderers they contribute (got ${rendererId})`
            ));
        }
        const messaging = {
            onDidReceiveMessage: (listener, thisArg, disposables) => {
                return this.getOrCreateEmitterFor(rendererId).event(listener, thisArg, disposables);
            },
            postMessage: (message, editorOrAlias) => {
                if (( _extHostNotebookEditor_js__WEBPACK_IMPORTED_MODULE_2__.ExtHostNotebookEditor.apiEditorsToExtHost.has(message))) {
                    [message, editorOrAlias] = [editorOrAlias, message];
                }
                const extHostEditor = editorOrAlias && _extHostNotebookEditor_js__WEBPACK_IMPORTED_MODULE_2__.ExtHostNotebookEditor.apiEditorsToExtHost.get(editorOrAlias);
                return this.proxy.$postMessage(extHostEditor?.id, rendererId, message);
            },
        };
        return messaging;
    }
    getOrCreateEmitterFor(rendererId) {
        let emitter = this._rendererMessageEmitters.get(rendererId);
        if (emitter) {
            return emitter;
        }
        emitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter({
            onDidRemoveLastListener: () => {
                emitter?.dispose();
                this._rendererMessageEmitters.delete(rendererId);
            }
        }));
        this._rendererMessageEmitters.set(rendererId, emitter);
        return emitter;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostOutput.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostOutput.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostOutputService: () => (/* binding */ ExtHostOutputService),
/* harmony export */   IExtHostOutputService: () => (/* binding */ IExtHostOutputService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/log/common/log.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _services_output_common_output_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../services/output/common/output.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/output/common/output.js");
/* harmony import */ var _extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostFileSystemConsumer.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemConsumer.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostFileSystemInfo.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js");
/* harmony import */ var _base_common_date_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/date.js */ "./node_modules/vscode/vscode/src/vs/base/common/date.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");

















class ExtHostOutputChannel extends _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_5__.AbstractMessageLogger {
    get disposed() { return this._disposed; }
    constructor(id, name, logger, proxy, extension) {
        super();
        this.id = id;
        this.name = name;
        this.logger = logger;
        this.proxy = proxy;
        this.extension = extension;
        this.offset = 0;
        this._disposed = false;
        this.visible = false;
        this.setLevel(logger.getLevel());
        this._register(logger.onDidChangeLogLevel(level => this.setLevel(level)));
    }
    get logLevel() {
        return this.getLevel();
    }
    appendLine(value) {
        this.append(value + '\n');
    }
    append(value) {
        this.info(value);
    }
    clear() {
        const till = this.offset;
        this.logger.flush();
        this.proxy.$update(this.id, _services_output_common_output_js__WEBPACK_IMPORTED_MODULE_7__.OutputChannelUpdateMode.Clear, till);
    }
    replace(value) {
        const till = this.offset;
        this.info(value);
        this.proxy.$update(this.id, _services_output_common_output_js__WEBPACK_IMPORTED_MODULE_7__.OutputChannelUpdateMode.Replace, till);
        if (this.visible) {
            this.logger.flush();
        }
    }
    show(columnOrPreserveFocus, preserveFocus) {
        this.logger.flush();
        this.proxy.$reveal(this.id, !!(typeof columnOrPreserveFocus === 'boolean' ? columnOrPreserveFocus : preserveFocus));
    }
    hide() {
        this.proxy.$close(this.id);
    }
    log(level, message) {
        this.offset += _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_12__.VSBuffer.fromString(message).byteLength;
        (0,_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_5__.log)(this.logger, level, message);
        if (this.visible) {
            this.logger.flush();
            this.proxy.$update(this.id, _services_output_common_output_js__WEBPACK_IMPORTED_MODULE_7__.OutputChannelUpdateMode.Append);
        }
    }
    dispose() {
        super.dispose();
        if (!this._disposed) {
            this.proxy.$dispose(this.id);
            this._disposed = true;
        }
    }
}
class ExtHostLogOutputChannel extends ExtHostOutputChannel {
    appendLine(value) {
        this.append(value);
    }
}
let ExtHostOutputService = class ExtHostOutputService {
    constructor(extHostRpc, initData, extHostFileSystem, extHostFileSystemInfo, loggerService, logService) {
        this.initData = initData;
        this.extHostFileSystem = extHostFileSystem;
        this.extHostFileSystemInfo = extHostFileSystemInfo;
        this.loggerService = loggerService;
        this.logService = logService;
        this.extensionLogDirectoryPromise = ( new Map());
        this.namePool = 1;
        this.channels = ( new Map());
        this.visibleChannelId = null;
        this.proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadOutputService));
        this.outputsLocation = this.extHostFileSystemInfo.extUri.joinPath(initData.logsLocation, `output_logging_${(0,_base_common_date_js__WEBPACK_IMPORTED_MODULE_11__.toLocalISOString)(( new Date())).replace(/-|:|\.\d+Z$/g, '')}`);
    }
    $setVisibleChannel(visibleChannelId) {
        this.visibleChannelId = visibleChannelId;
        for (const [id, channel] of this.channels) {
            channel.visible = id === this.visibleChannelId;
        }
    }
    createOutputChannel(name, options, extension) {
        name = name.trim();
        if (!name) {
            throw ( new Error('illegal argument `name`. must not be falsy'));
        }
        const log = typeof options === 'object' && options.log;
        const languageId = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isString)(options) ? options : undefined;
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isString)(languageId) && !languageId.trim()) {
            throw ( new Error('illegal argument `languageId`. must not be empty'));
        }
        let logLevel;
        const logLevelValue = this.initData.environment.extensionLogLevel?.find(([identifier]) => _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifier.equals(extension.identifier, identifier))?.[1];
        if (logLevelValue) {
            logLevel = (0,_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_5__.parseLogLevel)(logLevelValue);
        }
        const extHostOutputChannel = log ? this.doCreateLogOutputChannel(name, logLevel, extension) : this.doCreateOutputChannel(name, languageId, extension);
        extHostOutputChannel.then(channel => {
            this.channels.set(channel.id, channel);
            channel.visible = channel.id === this.visibleChannelId;
        });
        return log ? this.createExtHostLogOutputChannel(name, logLevel ?? this.logService.getLevel(), extHostOutputChannel) : this.createExtHostOutputChannel(name, extHostOutputChannel);
    }
    async doCreateOutputChannel(name, languageId, extension) {
        if (!this.outputDirectoryPromise) {
            this.outputDirectoryPromise = this.extHostFileSystem.value.createDirectory(this.outputsLocation).then(() => this.outputsLocation);
        }
        const outputDir = await this.outputDirectoryPromise;
        const file = this.extHostFileSystemInfo.extUri.joinPath(outputDir, `${this.namePool++}-${name.replace(/[\\/:\*\?"<>\|]/g, '')}.log`);
        const logger = this.loggerService.createLogger(file, { logLevel: 'always', donotRotate: true, donotUseFormatters: true, hidden: true });
        const id = await this.proxy.$register(name, file, languageId, extension.identifier.value);
        return ( new ExtHostOutputChannel(id, name, logger, this.proxy, extension));
    }
    async doCreateLogOutputChannel(name, logLevel, extension) {
        const extensionLogDir = await this.createExtensionLogDirectory(extension);
        const fileName = name.replace(/[\\/:\*\?"<>\|]/g, '');
        const file = this.extHostFileSystemInfo.extUri.joinPath(extensionLogDir, `${fileName}.log`);
        const id = `${extension.identifier.value}.${fileName}`;
        const logger = this.loggerService.createLogger(file, { id, name, logLevel, extensionId: extension.identifier.value });
        return ( new ExtHostLogOutputChannel(id, name, logger, this.proxy, extension));
    }
    createExtensionLogDirectory(extension) {
        let extensionLogDirectoryPromise = this.extensionLogDirectoryPromise.get(extension.identifier.value);
        if (!extensionLogDirectoryPromise) {
            const extensionLogDirectory = this.extHostFileSystemInfo.extUri.joinPath(this.initData.logsLocation, extension.identifier.value);
            this.extensionLogDirectoryPromise.set(extension.identifier.value, extensionLogDirectoryPromise = (async () => {
                try {
                    await this.extHostFileSystem.value.createDirectory(extensionLogDirectory);
                }
                catch (err) {
                    if ((0,_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_14__.toFileSystemProviderErrorCode)(err) !== _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_14__.FileSystemProviderErrorCode.FileExists) {
                        throw err;
                    }
                }
                return extensionLogDirectory;
            })());
        }
        return extensionLogDirectoryPromise;
    }
    createExtHostOutputChannel(name, channelPromise) {
        let disposed = false;
        const validate = () => {
            if (disposed) {
                throw ( new Error('Channel has been closed'));
            }
        };
        return {
            get name() { return name; },
            append(value) {
                validate();
                channelPromise.then(channel => channel.append(value));
            },
            appendLine(value) {
                validate();
                channelPromise.then(channel => channel.appendLine(value));
            },
            clear() {
                validate();
                channelPromise.then(channel => channel.clear());
            },
            replace(value) {
                validate();
                channelPromise.then(channel => channel.replace(value));
            },
            show(columnOrPreserveFocus, preserveFocus) {
                validate();
                channelPromise.then(channel => channel.show(columnOrPreserveFocus, preserveFocus));
            },
            hide() {
                validate();
                channelPromise.then(channel => channel.hide());
            },
            dispose() {
                disposed = true;
                channelPromise.then(channel => channel.dispose());
            }
        };
    }
    createExtHostLogOutputChannel(name, logLevel, channelPromise) {
        const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_16__.DisposableStore());
        const validate = () => {
            if (disposables.isDisposed) {
                throw ( new Error('Channel has been closed'));
            }
        };
        const onDidChangeLogLevel = disposables.add(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_15__.Emitter()));
        function setLogLevel(newLogLevel) {
            logLevel = newLogLevel;
            onDidChangeLogLevel.fire(newLogLevel);
        }
        channelPromise.then(channel => {
            disposables.add(channel);
            if (channel.logLevel !== logLevel) {
                setLogLevel(channel.logLevel);
            }
            disposables.add(channel.onDidChangeLogLevel(e => setLogLevel(e)));
        });
        return {
            ...this.createExtHostOutputChannel(name, channelPromise),
            get logLevel() { return logLevel; },
            onDidChangeLogLevel: onDidChangeLogLevel.event,
            trace(value, ...args) {
                validate();
                channelPromise.then(channel => channel.trace(value, ...args));
            },
            debug(value, ...args) {
                validate();
                channelPromise.then(channel => channel.debug(value, ...args));
            },
            info(value, ...args) {
                validate();
                channelPromise.then(channel => channel.info(value, ...args));
            },
            warn(value, ...args) {
                validate();
                channelPromise.then(channel => channel.warn(value, ...args));
            },
            error(value, ...args) {
                validate();
                channelPromise.then(channel => channel.error(value, ...args));
            },
            dispose() {
                disposables.dispose();
            }
        };
    }
};
ExtHostOutputService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_3__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_9__.IExtHostInitDataService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostConsumerFileSystem)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostFileSystemInfo)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_6__.ILoggerService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_6__.ILogService))
], ExtHostOutputService));
const IExtHostOutputService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__.createDecorator)('IExtHostOutputService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostProfileContentHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostProfileContentHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostProfileContentHandlers: () => (/* binding */ ExtHostProfileContentHandlers)
/* harmony export */ });
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");





class ExtHostProfileContentHandlers {
    constructor(mainContext) {
        this.handlers = ( new Map());
        this.proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__.MainContext.MainThreadProfileContentHandlers));
    }
    registerProfileContentHandler(extension, id, handler) {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_3__.checkProposedApiEnabled)(extension, 'profileContentHandlers');
        if (( this.handlers.has(id))) {
            throw ( new Error(`Handler with id '${id}' already registered`));
        }
        this.handlers.set(id, handler);
        this.proxy.$registerProfileContentHandler(id, handler.name, handler.description, extension.identifier.value);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__.toDisposable)(() => {
            this.handlers.delete(id);
            this.proxy.$unregisterProfileContentHandler(id);
        });
    }
    async $saveProfile(id, name, content, token) {
        const handler = this.handlers.get(id);
        if (!handler) {
            throw ( new Error(`Unknown handler with id: ${id}`));
        }
        return handler.saveProfile(name, content, token);
    }
    async $readProfile(id, idOrUri, token) {
        const handler = this.handlers.get(id);
        if (!handler) {
            throw ( new Error(`Unknown handler with id: ${id}`));
        }
        return handler.readProfile((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(idOrUri) ? idOrUri : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(idOrUri), token);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostProgress.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostProgress.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostProgress: () => (/* binding */ ExtHostProgress)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/progress/common/progress.js */ "./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_decorators_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/decorators.js */ "./node_modules/vscode/vscode/src/vs/base/common/decorators.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");






class ExtHostProgress {
    constructor(proxy) {
        this._handles = 0;
        this._mapHandleToCancellationSource = ( new Map());
        this._proxy = proxy;
    }
    async withProgress(extension, options, task) {
        const handle = this._handles++;
        const { title, location, cancellable } = options;
        const source = { label: extension.displayName || extension.name, id: extension.identifier.value };
        this._proxy.$startProgress(handle, { location: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.ProgressLocation.from(location), title, source, cancellable }, !extension.isUnderDevelopment ? extension.identifier.value : undefined).catch(_base_common_errors_js__WEBPACK_IMPORTED_MODULE_5__.onUnexpectedExternalError);
        return this._withProgress(handle, task, !!cancellable);
    }
    _withProgress(handle, task, cancellable) {
        let source;
        if (cancellable) {
            source = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationTokenSource());
            this._mapHandleToCancellationSource.set(handle, source);
        }
        const progressEnd = (handle) => {
            this._proxy.$progressEnd(handle);
            this._mapHandleToCancellationSource.delete(handle);
            source?.dispose();
        };
        let p;
        try {
            p = task(( new ProgressCallback(this._proxy, handle)), cancellable && source ? source.token : _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationToken.None);
        }
        catch (err) {
            progressEnd(handle);
            throw err;
        }
        p.then(result => progressEnd(handle), err => progressEnd(handle));
        return p;
    }
    $acceptProgressCanceled(handle) {
        const source = this._mapHandleToCancellationSource.get(handle);
        if (source) {
            source.cancel();
            this._mapHandleToCancellationSource.delete(handle);
        }
    }
}
function mergeProgress(result, currentValue) {
    result.message = currentValue.message;
    if (typeof currentValue.increment === 'number') {
        if (typeof result.increment === 'number') {
            result.increment += currentValue.increment;
        }
        else {
            result.increment = currentValue.increment;
        }
    }
    return result;
}
class ProgressCallback extends _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_2__.Progress {
    constructor(_proxy, _handle) {
        super(p => this.throttledReport(p));
        this._proxy = _proxy;
        this._handle = _handle;
    }
    throttledReport(p) {
        this._proxy.$progressReport(this._handle, p);
    }
}
ProgressCallback.__decorator = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    (0,_base_common_decorators_js__WEBPACK_IMPORTED_MODULE_4__.throttle)(100, (result, currentValue) => mergeProgress(result, currentValue), () => Object.create(null))
], ProgressCallback.prototype, "throttledReport", null));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostQuickDiff.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostQuickDiff.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostQuickDiff: () => (/* binding */ ExtHostQuickDiff)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");




class ExtHostQuickDiff {
    static { this.handlePool = 0; }
    constructor(mainContext, uriTransformer) {
        this.uriTransformer = uriTransformer;
        this.providers = ( new Map());
        this.proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadQuickDiff));
    }
    $provideOriginalResource(handle, uriComponents, token) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(uriComponents);
        const provider = this.providers.get(handle);
        if (!provider) {
            return Promise.resolve(null);
        }
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_2__.asPromise)(() => provider.provideOriginalResource(uri, token))
            .then(r => r || null);
    }
    registerQuickDiffProvider(selector, quickDiffProvider, label, rootUri) {
        const handle = ExtHostQuickDiff.handlePool++;
        this.providers.set(handle, quickDiffProvider);
        this.proxy.$registerQuickDiffProvider(handle, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.DocumentSelector.from(selector, this.uriTransformer), label, rootUri);
        return {
            dispose: () => {
                this.proxy.$unregisterQuickDiffProvider(handle);
                this.providers.delete(handle);
            }
        };
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostQuickOpen.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostQuickOpen.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createExtHostQuickOpen: () => (/* binding */ createExtHostQuickOpen)
/* harmony export */ });
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");
/* harmony import */ var _base_common_themables_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");












function createExtHostQuickOpen(mainContext, workspace, commands) {
    const proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadQuickOpen));
    class ExtHostQuickOpenImpl {
        constructor(workspace, commands) {
            this._sessions = ( new Map());
            this._instances = 0;
            this._workspace = workspace;
            this._commands = commands;
        }
        showQuickPick(extension, itemsOrItemsPromise, options, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {
            this._onDidSelectItem = undefined;
            const itemsPromise = Promise.resolve(itemsOrItemsPromise);
            const instance = ++this._instances;
            const quickPickWidget = proxy.$show(instance, {
                title: options?.title,
                placeHolder: options?.placeHolder,
                matchOnDescription: options?.matchOnDescription,
                matchOnDetail: options?.matchOnDetail,
                ignoreFocusLost: options?.ignoreFocusOut,
                canPickMany: options?.canPickMany,
            }, token);
            const widgetClosedMarker = {};
            const widgetClosedPromise = quickPickWidget.then(() => widgetClosedMarker);
            return Promise.race([widgetClosedPromise, itemsPromise]).then(result => {
                if (result === widgetClosedMarker) {
                    return undefined;
                }
                const allowedTooltips = (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.isProposedApiEnabled)(extension, 'quickPickItemTooltip');
                return itemsPromise.then(items => {
                    const pickItems = [];
                    for (let handle = 0; handle < items.length; handle++) {
                        const item = items[handle];
                        if (typeof item === 'string') {
                            pickItems.push({ label: item, handle });
                        }
                        else if (item.kind === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.QuickPickItemKind.Separator) {
                            pickItems.push({ type: 'separator', label: item.label });
                        }
                        else {
                            if (item.tooltip && !allowedTooltips) {
                                console.warn(`Extension '${extension.identifier.value}' uses a tooltip which is proposed API that is only available when running out of dev or with the following command line switch: --enable-proposed-api ${extension.identifier.value}`);
                            }
                            const icon = (item.iconPath) ? getIconPathOrClass(item.iconPath) : undefined;
                            pickItems.push({
                                label: item.label,
                                iconPath: icon?.iconPath,
                                iconClass: icon?.iconClass,
                                description: item.description,
                                detail: item.detail,
                                picked: item.picked,
                                alwaysShow: item.alwaysShow,
                                tooltip: allowedTooltips ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.MarkdownString.fromStrict(item.tooltip) : undefined,
                                handle
                            });
                        }
                    }
                    if (options && typeof options.onDidSelectItem === 'function') {
                        this._onDidSelectItem = (handle) => {
                            options.onDidSelectItem(items[handle]);
                        };
                    }
                    proxy.$setItems(instance, pickItems);
                    return quickPickWidget.then(handle => {
                        if (typeof handle === 'number') {
                            return items[handle];
                        }
                        else if (Array.isArray(handle)) {
                            return ( handle.map(h => items[h]));
                        }
                        return undefined;
                    });
                });
            }).then(undefined, err => {
                if ((0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_6__.isCancellationError)(err)) {
                    return undefined;
                }
                proxy.$setError(instance, err);
                return Promise.reject(err);
            });
        }
        $onItemSelected(handle) {
            this._onDidSelectItem?.(handle);
        }
        showInput(options, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {
            this._validateInput = options?.validateInput;
            return proxy.$input(options, typeof this._validateInput === 'function', token)
                .then(undefined, err => {
                if ((0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_6__.isCancellationError)(err)) {
                    return undefined;
                }
                return Promise.reject(err);
            });
        }
        async $validateInput(input) {
            if (!this._validateInput) {
                return;
            }
            const result = await this._validateInput(input);
            if (!result || typeof result === 'string') {
                return result;
            }
            let severity;
            switch (result.severity) {
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.InputBoxValidationSeverity.Info:
                    severity = _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Info;
                    break;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.InputBoxValidationSeverity.Warning:
                    severity = _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Warning;
                    break;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.InputBoxValidationSeverity.Error:
                    severity = _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Error;
                    break;
                default:
                    severity = result.message ? _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Error : _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Ignore;
                    break;
            }
            return {
                content: result.message,
                severity
            };
        }
        async showWorkspaceFolderPick(options, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {
            const selectedFolder = await this._commands.executeCommand('_workbench.pickWorkspaceFolder', [options]);
            if (!selectedFolder) {
                return undefined;
            }
            const workspaceFolders = await this._workspace.getWorkspaceFolders2();
            if (!workspaceFolders) {
                return undefined;
            }
            return workspaceFolders.find(folder => ( folder.uri.toString()) === ( selectedFolder.uri.toString()));
        }
        createQuickPick(extension) {
            const session = ( new ExtHostQuickPick(extension, () => this._sessions.delete(session._id)));
            this._sessions.set(session._id, session);
            return session;
        }
        createInputBox(extension) {
            const session = ( new ExtHostInputBox(extension, () => this._sessions.delete(session._id)));
            this._sessions.set(session._id, session);
            return session;
        }
        $onDidChangeValue(sessionId, value) {
            const session = this._sessions.get(sessionId);
            session?._fireDidChangeValue(value);
        }
        $onDidAccept(sessionId) {
            const session = this._sessions.get(sessionId);
            session?._fireDidAccept();
        }
        $onDidChangeActive(sessionId, handles) {
            const session = this._sessions.get(sessionId);
            if (session instanceof ExtHostQuickPick) {
                session._fireDidChangeActive(handles);
            }
        }
        $onDidChangeSelection(sessionId, handles) {
            const session = this._sessions.get(sessionId);
            if (session instanceof ExtHostQuickPick) {
                session._fireDidChangeSelection(handles);
            }
        }
        $onDidTriggerButton(sessionId, handle) {
            const session = this._sessions.get(sessionId);
            session?._fireDidTriggerButton(handle);
        }
        $onDidTriggerItemButton(sessionId, itemHandle, buttonHandle) {
            const session = this._sessions.get(sessionId);
            if (session instanceof ExtHostQuickPick) {
                session._fireDidTriggerItemButton(itemHandle, buttonHandle);
            }
        }
        $onDidHide(sessionId) {
            const session = this._sessions.get(sessionId);
            session?._fireDidHide();
        }
    }
    class ExtHostQuickInput {
        static { this._nextId = 1; }
        constructor(_extensionId, _onDidDispose) {
            this._extensionId = _extensionId;
            this._onDidDispose = _onDidDispose;
            this._id = ExtHostQuickPick._nextId++;
            this._visible = false;
            this._expectingHide = false;
            this._enabled = true;
            this._busy = false;
            this._ignoreFocusOut = true;
            this._value = '';
            this._buttons = [];
            this._handlesToButtons = ( new Map());
            this._onDidAcceptEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this._onDidChangeValueEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this._onDidTriggerButtonEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this._onDidHideEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this._pendingUpdate = { id: this._id };
            this._disposed = false;
            this._disposables = [
                this._onDidTriggerButtonEmitter,
                this._onDidHideEmitter,
                this._onDidAcceptEmitter,
                this._onDidChangeValueEmitter
            ];
            this.onDidChangeValue = this._onDidChangeValueEmitter.event;
            this.onDidAccept = this._onDidAcceptEmitter.event;
            this.onDidTriggerButton = this._onDidTriggerButtonEmitter.event;
            this.onDidHide = this._onDidHideEmitter.event;
        }
        get title() {
            return this._title;
        }
        set title(title) {
            this._title = title;
            this.update({ title });
        }
        get step() {
            return this._steps;
        }
        set step(step) {
            this._steps = step;
            this.update({ step });
        }
        get totalSteps() {
            return this._totalSteps;
        }
        set totalSteps(totalSteps) {
            this._totalSteps = totalSteps;
            this.update({ totalSteps });
        }
        get enabled() {
            return this._enabled;
        }
        set enabled(enabled) {
            this._enabled = enabled;
            this.update({ enabled });
        }
        get busy() {
            return this._busy;
        }
        set busy(busy) {
            this._busy = busy;
            this.update({ busy });
        }
        get ignoreFocusOut() {
            return this._ignoreFocusOut;
        }
        set ignoreFocusOut(ignoreFocusOut) {
            this._ignoreFocusOut = ignoreFocusOut;
            this.update({ ignoreFocusOut });
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
            this.update({ value });
        }
        get placeholder() {
            return this._placeholder;
        }
        set placeholder(placeholder) {
            this._placeholder = placeholder;
            this.update({ placeholder });
        }
        get buttons() {
            return this._buttons;
        }
        set buttons(buttons) {
            this._buttons = buttons.slice();
            this._handlesToButtons.clear();
            buttons.forEach((button, i) => {
                const handle = button === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.QuickInputButtons.Back ? -1 : i;
                this._handlesToButtons.set(handle, button);
            });
            this.update({
                buttons: ( buttons.map((button, i) => {
                    return {
                        ...getIconPathOrClass(button.iconPath),
                        tooltip: button.tooltip,
                        handle: button === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.QuickInputButtons.Back ? -1 : i,
                    };
                }))
            });
        }
        show() {
            this._visible = true;
            this._expectingHide = true;
            this.update({ visible: true });
        }
        hide() {
            this._visible = false;
            this.update({ visible: false });
        }
        _fireDidAccept() {
            this._onDidAcceptEmitter.fire();
        }
        _fireDidChangeValue(value) {
            this._value = value;
            this._onDidChangeValueEmitter.fire(value);
        }
        _fireDidTriggerButton(handle) {
            const button = this._handlesToButtons.get(handle);
            if (button) {
                this._onDidTriggerButtonEmitter.fire(button);
            }
        }
        _fireDidHide() {
            if (this._expectingHide) {
                this._expectingHide = this._visible;
                this._onDidHideEmitter.fire();
            }
        }
        dispose() {
            if (this._disposed) {
                return;
            }
            this._disposed = true;
            this._fireDidHide();
            this._disposables = (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.dispose)(this._disposables);
            if (this._updateTimeout) {
                clearTimeout(this._updateTimeout);
                this._updateTimeout = undefined;
            }
            this._onDidDispose();
            proxy.$dispose(this._id);
        }
        update(properties) {
            if (this._disposed) {
                return;
            }
            for (const key of ( Object.keys(properties))) {
                const value = properties[key];
                this._pendingUpdate[key] = value === undefined ? null : value;
            }
            if ('visible' in this._pendingUpdate) {
                if (this._updateTimeout) {
                    clearTimeout(this._updateTimeout);
                    this._updateTimeout = undefined;
                }
                this.dispatchUpdate();
            }
            else if (this._visible && !this._updateTimeout) {
                this._updateTimeout = setTimeout(() => {
                    this._updateTimeout = undefined;
                    this.dispatchUpdate();
                }, 0);
            }
        }
        dispatchUpdate() {
            proxy.$createOrUpdate(this._pendingUpdate);
            this._pendingUpdate = { id: this._id };
        }
    }
    function getIconUris(iconPath) {
        if (iconPath instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ThemeIcon) {
            return { id: iconPath.id };
        }
        const dark = getDarkIconUri(iconPath);
        const light = getLightIconUri(iconPath);
        return {
            dark: typeof dark === 'string' ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.file(dark) : dark,
            light: typeof light === 'string' ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.file(light) : light
        };
    }
    function getLightIconUri(iconPath) {
        return typeof iconPath === 'object' && 'light' in iconPath ? iconPath.light : iconPath;
    }
    function getDarkIconUri(iconPath) {
        return typeof iconPath === 'object' && 'dark' in iconPath ? iconPath.dark : iconPath;
    }
    function getIconPathOrClass(icon) {
        const iconPathOrIconClass = getIconUris(icon);
        let iconPath;
        let iconClass;
        if ('id' in iconPathOrIconClass) {
            iconClass = _base_common_themables_js__WEBPACK_IMPORTED_MODULE_9__.ThemeIcon.asClassName(iconPathOrIconClass);
        }
        else {
            iconPath = iconPathOrIconClass;
        }
        return {
            iconPath,
            iconClass
        };
    }
    class ExtHostQuickPick extends ExtHostQuickInput {
        constructor(extension, onDispose) {
            super(extension.identifier, onDispose);
            this.extension = extension;
            this._items = [];
            this._handlesToItems = ( new Map());
            this._itemsToHandles = ( new Map());
            this._canSelectMany = false;
            this._matchOnDescription = true;
            this._matchOnDetail = true;
            this._sortByLabel = true;
            this._keepScrollPosition = false;
            this._activeItems = [];
            this._onDidChangeActiveEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this._selectedItems = [];
            this._onDidChangeSelectionEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this._onDidTriggerItemButtonEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
            this.onDidChangeActive = this._onDidChangeActiveEmitter.event;
            this.onDidChangeSelection = this._onDidChangeSelectionEmitter.event;
            this.onDidTriggerItemButton = this._onDidTriggerItemButtonEmitter.event;
            this._disposables.push(this._onDidChangeActiveEmitter, this._onDidChangeSelectionEmitter, this._onDidTriggerItemButtonEmitter);
            this.update({ type: 'quickPick' });
        }
        get items() {
            return this._items;
        }
        set items(items) {
            this._items = items.slice();
            this._handlesToItems.clear();
            this._itemsToHandles.clear();
            items.forEach((item, i) => {
                this._handlesToItems.set(i, item);
                this._itemsToHandles.set(item, i);
            });
            const allowedTooltips = (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.isProposedApiEnabled)(this.extension, 'quickPickItemTooltip');
            const pickItems = [];
            for (let handle = 0; handle < items.length; handle++) {
                const item = items[handle];
                if (item.kind === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.QuickPickItemKind.Separator) {
                    pickItems.push({ type: 'separator', label: item.label });
                }
                else {
                    if (item.tooltip && !allowedTooltips) {
                        console.warn(`Extension '${this.extension.identifier.value}' uses a tooltip which is proposed API that is only available when running out of dev or with the following command line switch: --enable-proposed-api ${this.extension.identifier.value}`);
                    }
                    const icon = (item.iconPath) ? getIconPathOrClass(item.iconPath) : undefined;
                    pickItems.push({
                        handle,
                        label: item.label,
                        iconPath: icon?.iconPath,
                        iconClass: icon?.iconClass,
                        description: item.description,
                        detail: item.detail,
                        picked: item.picked,
                        alwaysShow: item.alwaysShow,
                        tooltip: allowedTooltips ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_11__.MarkdownString.fromStrict(item.tooltip) : undefined,
                        buttons: item.buttons?.map((button, i) => {
                            return {
                                ...getIconPathOrClass(button.iconPath),
                                tooltip: button.tooltip,
                                handle: i
                            };
                        }),
                    });
                }
            }
            this.update({
                items: pickItems,
            });
        }
        get canSelectMany() {
            return this._canSelectMany;
        }
        set canSelectMany(canSelectMany) {
            this._canSelectMany = canSelectMany;
            this.update({ canSelectMany });
        }
        get matchOnDescription() {
            return this._matchOnDescription;
        }
        set matchOnDescription(matchOnDescription) {
            this._matchOnDescription = matchOnDescription;
            this.update({ matchOnDescription });
        }
        get matchOnDetail() {
            return this._matchOnDetail;
        }
        set matchOnDetail(matchOnDetail) {
            this._matchOnDetail = matchOnDetail;
            this.update({ matchOnDetail });
        }
        get sortByLabel() {
            return this._sortByLabel;
        }
        set sortByLabel(sortByLabel) {
            this._sortByLabel = sortByLabel;
            this.update({ sortByLabel });
        }
        get keepScrollPosition() {
            return this._keepScrollPosition;
        }
        set keepScrollPosition(keepScrollPosition) {
            this._keepScrollPosition = keepScrollPosition;
            this.update({ keepScrollPosition });
        }
        get activeItems() {
            return this._activeItems;
        }
        set activeItems(activeItems) {
            this._activeItems = activeItems.filter(item => ( this._itemsToHandles.has(item)));
            this.update({ activeItems: ( this._activeItems.map(item => this._itemsToHandles.get(item))) });
        }
        get selectedItems() {
            return this._selectedItems;
        }
        set selectedItems(selectedItems) {
            this._selectedItems = selectedItems.filter(item => ( this._itemsToHandles.has(item)));
            this.update({ selectedItems: ( this._selectedItems.map(item => this._itemsToHandles.get(item))) });
        }
        _fireDidChangeActive(handles) {
            const items = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__.coalesce)(( handles.map(handle => this._handlesToItems.get(handle))));
            this._activeItems = items;
            this._onDidChangeActiveEmitter.fire(items);
        }
        _fireDidChangeSelection(handles) {
            const items = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__.coalesce)(( handles.map(handle => this._handlesToItems.get(handle))));
            this._selectedItems = items;
            this._onDidChangeSelectionEmitter.fire(items);
        }
        _fireDidTriggerItemButton(itemHandle, buttonHandle) {
            const item = this._handlesToItems.get(itemHandle);
            if (!item || !item.buttons || !item.buttons.length) {
                return;
            }
            const button = item.buttons[buttonHandle];
            if (button) {
                this._onDidTriggerItemButtonEmitter.fire({
                    button,
                    item
                });
            }
        }
    }
    class ExtHostInputBox extends ExtHostQuickInput {
        constructor(extension, onDispose) {
            super(extension.identifier, onDispose);
            this._password = false;
            this.update({ type: 'inputBox' });
        }
        get password() {
            return this._password;
        }
        set password(password) {
            this._password = password;
            this.update({ password });
        }
        get prompt() {
            return this._prompt;
        }
        set prompt(prompt) {
            this._prompt = prompt;
            this.update({ prompt });
        }
        get valueSelection() {
            return this._valueSelection;
        }
        set valueSelection(valueSelection) {
            this._valueSelection = valueSelection;
            this.update({ valueSelection });
        }
        get validationMessage() {
            return this._validationMessage;
        }
        set validationMessage(validationMessage) {
            this._validationMessage = validationMessage;
            if (!validationMessage) {
                this.update({ validationMessage: undefined, severity: _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Ignore });
            }
            else if (typeof validationMessage === 'string') {
                this.update({ validationMessage, severity: _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Error });
            }
            else {
                this.update({ validationMessage: validationMessage.message, severity: validationMessage.severity ?? _base_common_severity_js__WEBPACK_IMPORTED_MODULE_8__["default"].Error });
            }
        }
    }
    return ( new ExtHostQuickOpenImpl(workspace, commands));
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRequireInterceptor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRequireInterceptor.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RequireInterceptor: () => (/* binding */ RequireInterceptor)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_performance_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/performance.js */ "./node_modules/vscode/vscode/src/vs/base/common/performance.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostConfiguration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");













var NodeModuleAliasingModuleFactory_1;
let RequireInterceptor = class RequireInterceptor {
    constructor(_apiFactory, _extensionRegistry, _instaService, _extHostConfiguration, _extHostExtensionService, _initData, _logService) {
        this._apiFactory = _apiFactory;
        this._extensionRegistry = _extensionRegistry;
        this._instaService = _instaService;
        this._extHostConfiguration = _extHostConfiguration;
        this._extHostExtensionService = _extHostExtensionService;
        this._initData = _initData;
        this._logService = _logService;
        this._factories = ( new Map());
        this._alternatives = [];
    }
    async install() {
        this._installInterceptor();
        (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_1__.mark)('code/extHost/willWaitForConfig');
        const configProvider = await this._extHostConfiguration.getConfigProvider();
        (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_1__.mark)('code/extHost/didWaitForConfig');
        const extensionPaths = await this._extHostExtensionService.getExtensionPathIndex();
        this.register(( new VSCodeNodeModuleFactory(
            this._apiFactory,
            extensionPaths,
            this._extensionRegistry,
            configProvider,
            this._logService
        )));
        this.register(this._instaService.createInstance(NodeModuleAliasingModuleFactory));
        if (this._initData.remote.isRemote) {
            this.register(this._instaService.createInstance(OpenNodeModuleFactory, extensionPaths, this._initData.environment.appUriScheme));
        }
    }
    register(interceptor) {
        if ('nodeModuleName' in interceptor) {
            if (Array.isArray(interceptor.nodeModuleName)) {
                for (const moduleName of interceptor.nodeModuleName) {
                    this._factories.set(moduleName, interceptor);
                }
            }
            else {
                this._factories.set(interceptor.nodeModuleName, interceptor);
            }
        }
        if (typeof interceptor.alternativeModuleName === 'function') {
            this._alternatives.push((moduleName) => {
                return interceptor.alternativeModuleName(moduleName);
            });
        }
    }
};
RequireInterceptor = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_9__.IInstantiationService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostConfiguration)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostExtensionService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostInitDataService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_11__.ILogService))
], RequireInterceptor));
let NodeModuleAliasingModuleFactory = class NodeModuleAliasingModuleFactory {
    static { NodeModuleAliasingModuleFactory_1 = this; }
    static { this.aliased = ( new Map([
        ['vscode-ripgrep', '@vscode/ripgrep'],
        ['vscode-windows-registry', '@vscode/windows-registry'],
    ])); }
    constructor(initData) {
        if (initData.environment.appRoot && NodeModuleAliasingModuleFactory_1.aliased.size) {
            const root = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_12__.escapeRegExpCharacters)(this.forceForwardSlashes(initData.environment.appRoot.fsPath));
            const npmIdChrs = `[a-z0-9_.-]`;
            const npmModuleName = `@${npmIdChrs}+\\/${npmIdChrs}+|${npmIdChrs}+`;
            const moduleFolders = 'node_modules|node_modules\\.asar(?:\\.unpacked)?';
            this.re = ( new RegExp(`^(${root}/${moduleFolders}\\/)(${npmModuleName})(.*)$`, 'i'));
        }
    }
    alternativeModuleName(name) {
        if (!this.re) {
            return;
        }
        const result = this.re.exec(this.forceForwardSlashes(name));
        if (!result) {
            return;
        }
        const [, prefix, moduleName, suffix] = result;
        const dealiased = NodeModuleAliasingModuleFactory_1.aliased.get(moduleName);
        if (dealiased === undefined) {
            return;
        }
        console.warn(`${moduleName} as been renamed to ${dealiased}, please update your imports`);
        return prefix + dealiased + suffix;
    }
    forceForwardSlashes(str) {
        return str.replace(/\\/g, '/');
    }
};
NodeModuleAliasingModuleFactory = NodeModuleAliasingModuleFactory_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostInitDataService))
], NodeModuleAliasingModuleFactory));
class VSCodeNodeModuleFactory {
    constructor(_apiFactory, _extensionPaths, _extensionRegistry, _configProvider, _logService) {
        this._apiFactory = _apiFactory;
        this._extensionPaths = _extensionPaths;
        this._extensionRegistry = _extensionRegistry;
        this._configProvider = _configProvider;
        this._logService = _logService;
        this.nodeModuleName = 'vscode';
        this._extApiImpl = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.ExtensionIdentifierMap());
    }
    load(_request, parent) {
        const ext = this._extensionPaths.findSubstr(parent);
        if (ext) {
            let apiImpl = this._extApiImpl.get(ext.identifier);
            if (!apiImpl) {
                apiImpl = this._apiFactory(ext, this._extensionRegistry, this._configProvider);
                this._extApiImpl.set(ext.identifier, apiImpl);
            }
            return apiImpl;
        }
        if (!this._defaultApiImpl) {
            let extensionPathsPretty = '';
            this._extensionPaths.forEach((value, index) => extensionPathsPretty += `\t${index} -> ${value.identifier.value}\n`);
            this._logService.warn(`Could not identify extension for 'vscode' require call from ${parent}. These are the extension path mappings: \n${extensionPathsPretty}`);
            this._defaultApiImpl = this._apiFactory(_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_5__.nullExtensionDescription, this._extensionRegistry, this._configProvider);
        }
        return this._defaultApiImpl;
    }
}
let OpenNodeModuleFactory = class OpenNodeModuleFactory {
    constructor(_extensionPaths, _appUriScheme, rpcService) {
        this._extensionPaths = _extensionPaths;
        this._appUriScheme = _appUriScheme;
        this.nodeModuleName = ['open', 'opn'];
        this._mainThreadTelemetry = ( rpcService.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadTelemetry));
        const mainThreadWindow = ( rpcService.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadWindow));
        this._impl = (target, options) => {
            const uri = ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(target));
            if (options) {
                return this.callOriginal(target, options);
            }
            if (uri.scheme === 'http' || uri.scheme === 'https') {
                return mainThreadWindow.$openUri(uri, target, { allowTunneling: true });
            }
            else if (uri.scheme === 'mailto' || uri.scheme === this._appUriScheme) {
                return mainThreadWindow.$openUri(uri, target, {});
            }
            return this.callOriginal(target, options);
        };
    }
    load(request, parent, original) {
        const extension = this._extensionPaths.findSubstr(parent);
        if (extension) {
            this._extensionId = extension.identifier.value;
            this.sendShimmingTelemetry();
        }
        this._original = original(request);
        return this._impl;
    }
    callOriginal(target, options) {
        this.sendNoForwardTelemetry();
        return this._original(target, options);
    }
    sendShimmingTelemetry() {
        if (!this._extensionId) {
            return;
        }
        this._mainThreadTelemetry.$publicLog2('shimming.open', { extension: this._extensionId });
    }
    sendNoForwardTelemetry() {
        if (!this._extensionId) {
            return;
        }
        this._mainThreadTelemetry.$publicLog2('shimming.open.call.noForward', { extension: this._extensionId });
    }
};
OpenNodeModuleFactory = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostRpcService))
], OpenNodeModuleFactory));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostRpcService: () => (/* binding */ ExtHostRpcService),
/* harmony export */   IExtHostRpcService: () => (/* binding */ IExtHostRpcService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IExtHostRpcService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('IExtHostRpcService'));
class ExtHostRpcService {
    constructor(rpcProtocol) {
        this.getProxy = rpcProtocol.getProxy.bind(rpcProtocol);
        this.set = rpcProtocol.set.bind(rpcProtocol);
        this.dispose = rpcProtocol.dispose.bind(rpcProtocol);
        this.assertRegistered = rpcProtocol.assertRegistered.bind(rpcProtocol);
        this.drain = rpcProtocol.drain.bind(rpcProtocol);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSCM.js":
/*!******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSCM.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostSCM: () => (/* binding */ ExtHostSCM),
/* harmony export */   ExtHostSCMInputBox: () => (/* binding */ ExtHostSCMInputBox)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_decorators_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/decorators.js */ "./node_modules/vscode/vscode/src/vs/base/common/decorators.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_comparers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/comparers.js */ "./node_modules/vscode/vscode/src/vs/base/common/comparers.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _base_common_themables_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");

















var ExtHostSCM_1;
function isUri(thing) {
    return thing instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI;
}
function uriEquals(a, b) {
    if (a.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_15__.Schemas.file && b.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_15__.Schemas.file && _base_common_platform_js__WEBPACK_IMPORTED_MODULE_16__.isLinux) {
        return ( a.toString()) === ( b.toString());
    }
    return ( a.toString()).toLowerCase() === ( b.toString()).toLowerCase();
}
function getIconResource(decorations) {
    if (!decorations) {
        return undefined;
    }
    else if (typeof decorations.iconPath === 'string') {
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.file(decorations.iconPath);
    }
    else if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(decorations.iconPath)) {
        return decorations.iconPath;
    }
    else if (_base_common_themables_js__WEBPACK_IMPORTED_MODULE_12__.ThemeIcon.isThemeIcon(decorations.iconPath)) {
        return decorations.iconPath;
    }
    else {
        return undefined;
    }
}
function getHistoryItemIconDto(icon) {
    if (!icon) {
        return undefined;
    }
    else if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(icon)) {
        return icon;
    }
    else if (_base_common_themables_js__WEBPACK_IMPORTED_MODULE_12__.ThemeIcon.isThemeIcon(icon)) {
        return icon;
    }
    else {
        const iconDto = icon;
        return { light: iconDto.light, dark: iconDto.dark };
    }
}
function toSCMHistoryItemDto(historyItem) {
    const icon = getHistoryItemIconDto(historyItem.icon);
    const labels = historyItem.labels?.map(l => ({ title: l.title, icon: getHistoryItemIconDto(l.icon) }));
    return { ...historyItem, icon, labels };
}
function compareResourceThemableDecorations(a, b) {
    if (!a.iconPath && !b.iconPath) {
        return 0;
    }
    else if (!a.iconPath) {
        return -1;
    }
    else if (!b.iconPath) {
        return 1;
    }
    const aPath = typeof a.iconPath === 'string' ? a.iconPath : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(a.iconPath) ? a.iconPath.fsPath : a.iconPath.id;
    const bPath = typeof b.iconPath === 'string' ? b.iconPath : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.isUri(b.iconPath) ? b.iconPath.fsPath : b.iconPath.id;
    return (0,_base_common_comparers_js__WEBPACK_IMPORTED_MODULE_8__.comparePaths)(aPath, bPath);
}
function compareResourceStatesDecorations(a, b) {
    let result = 0;
    if (a.strikeThrough !== b.strikeThrough) {
        return a.strikeThrough ? 1 : -1;
    }
    if (a.faded !== b.faded) {
        return a.faded ? 1 : -1;
    }
    if (a.tooltip !== b.tooltip) {
        return (a.tooltip || '').localeCompare(b.tooltip || '');
    }
    result = compareResourceThemableDecorations(a, b);
    if (result !== 0) {
        return result;
    }
    if (a.light && b.light) {
        result = compareResourceThemableDecorations(a.light, b.light);
    }
    else if (a.light) {
        return 1;
    }
    else if (b.light) {
        return -1;
    }
    if (result !== 0) {
        return result;
    }
    if (a.dark && b.dark) {
        result = compareResourceThemableDecorations(a.dark, b.dark);
    }
    else if (a.dark) {
        return 1;
    }
    else if (b.dark) {
        return -1;
    }
    return result;
}
function compareCommands(a, b) {
    if (a.command !== b.command) {
        return a.command < b.command ? -1 : 1;
    }
    if (a.title !== b.title) {
        return a.title < b.title ? -1 : 1;
    }
    if (a.tooltip !== b.tooltip) {
        if (a.tooltip !== undefined && b.tooltip !== undefined) {
            return a.tooltip < b.tooltip ? -1 : 1;
        }
        else if (a.tooltip !== undefined) {
            return 1;
        }
        else if (b.tooltip !== undefined) {
            return -1;
        }
    }
    if (a.arguments === b.arguments) {
        return 0;
    }
    else if (!a.arguments) {
        return -1;
    }
    else if (!b.arguments) {
        return 1;
    }
    else if (a.arguments.length !== b.arguments.length) {
        return a.arguments.length - b.arguments.length;
    }
    for (let i = 0; i < a.arguments.length; i++) {
        const aArg = a.arguments[i];
        const bArg = b.arguments[i];
        if (aArg === bArg) {
            continue;
        }
        if (isUri(aArg) && isUri(bArg) && uriEquals(aArg, bArg)) {
            continue;
        }
        return aArg < bArg ? -1 : 1;
    }
    return 0;
}
function compareResourceStates(a, b) {
    let result = (0,_base_common_comparers_js__WEBPACK_IMPORTED_MODULE_8__.comparePaths)(a.resourceUri.fsPath, b.resourceUri.fsPath, true);
    if (result !== 0) {
        return result;
    }
    if (a.command && b.command) {
        result = compareCommands(a.command, b.command);
    }
    else if (a.command) {
        return 1;
    }
    else if (b.command) {
        return -1;
    }
    if (result !== 0) {
        return result;
    }
    if (a.decorations && b.decorations) {
        result = compareResourceStatesDecorations(a.decorations, b.decorations);
    }
    else if (a.decorations) {
        return 1;
    }
    else if (b.decorations) {
        return -1;
    }
    if (a.multiFileDiffEditorModifiedUri && b.multiFileDiffEditorModifiedUri) {
        result = (0,_base_common_comparers_js__WEBPACK_IMPORTED_MODULE_8__.comparePaths)(a.multiFileDiffEditorModifiedUri.fsPath, b.multiFileDiffEditorModifiedUri.fsPath, true);
    }
    else if (a.multiFileDiffEditorModifiedUri) {
        return 1;
    }
    else if (b.multiFileDiffEditorModifiedUri) {
        return -1;
    }
    if (a.multiDiffEditorOriginalUri && b.multiDiffEditorOriginalUri) {
        result = (0,_base_common_comparers_js__WEBPACK_IMPORTED_MODULE_8__.comparePaths)(a.multiDiffEditorOriginalUri.fsPath, b.multiDiffEditorOriginalUri.fsPath, true);
    }
    else if (a.multiDiffEditorOriginalUri) {
        return 1;
    }
    else if (b.multiDiffEditorOriginalUri) {
        return -1;
    }
    return result;
}
function compareArgs(a, b) {
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}
function commandEquals(a, b) {
    return a.command === b.command
        && a.title === b.title
        && a.tooltip === b.tooltip
        && (a.arguments && b.arguments ? compareArgs(a.arguments, b.arguments) : a.arguments === b.arguments);
}
function commandListEquals(a, b) {
    return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__.equals)(a, b, commandEquals);
}
class ExtHostSCMInputBox {
    #proxy;
    #extHostDocuments;
    get value() {
        return this._value;
    }
    set value(value) {
        value = value ?? '';
        this.#proxy.$setInputBoxValue(this._sourceControlHandle, value);
        this.updateValue(value);
    }
    get onDidChange() {
        return this._onDidChange.event;
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(placeholder) {
        this.#proxy.$setInputBoxPlaceholder(this._sourceControlHandle, placeholder);
        this._placeholder = placeholder;
    }
    get validateInput() {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmValidation');
        return this._validateInput;
    }
    set validateInput(fn) {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmValidation');
        if (fn && typeof fn !== 'function') {
            throw ( new Error(
                `[${this._extension.identifier.value}]: Invalid SCM input box validation function`
            ));
        }
        this._validateInput = fn;
        this.#proxy.$setValidationProviderIsEnabled(this._sourceControlHandle, !!fn);
    }
    get enabled() {
        return this._enabled;
    }
    set enabled(enabled) {
        enabled = !!enabled;
        if (this._enabled === enabled) {
            return;
        }
        this._enabled = enabled;
        this.#proxy.$setInputBoxEnablement(this._sourceControlHandle, enabled);
    }
    get visible() {
        return this._visible;
    }
    set visible(visible) {
        visible = !!visible;
        if (this._visible === visible) {
            return;
        }
        this._visible = visible;
        this.#proxy.$setInputBoxVisibility(this._sourceControlHandle, visible);
    }
    get document() {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmTextDocument');
        return this.#extHostDocuments.getDocument(this._documentUri);
    }
    constructor(_extension, _extHostDocuments, proxy, _sourceControlHandle, _documentUri) {
        this._extension = _extension;
        this._sourceControlHandle = _sourceControlHandle;
        this._documentUri = _documentUri;
        this._value = '';
        this._onDidChange = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._placeholder = '';
        this._enabled = true;
        this._visible = true;
        this.#extHostDocuments = _extHostDocuments;
        this.#proxy = proxy;
    }
    showValidationMessage(message, type) {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmValidation');
        this.#proxy.$showValidationMessage(this._sourceControlHandle, message, type);
    }
    $onInputBoxValueChange(value) {
        this.updateValue(value);
    }
    updateValue(value) {
        this._value = value;
        this._onDidChange.fire(value);
    }
}
class ExtHostSourceControlResourceGroup {
    static { this._handlePool = 0; }
    get disposed() { return this._disposed; }
    get id() { return this._id; }
    get label() { return this._label; }
    set label(label) {
        this._label = label;
        this._proxy.$updateGroupLabel(this._sourceControlHandle, this.handle, label);
    }
    get hideWhenEmpty() { return this._hideWhenEmpty; }
    set hideWhenEmpty(hideWhenEmpty) {
        this._hideWhenEmpty = hideWhenEmpty;
        this._proxy.$updateGroup(this._sourceControlHandle, this.handle, this.features);
    }
    get features() {
        return {
            hideWhenEmpty: this.hideWhenEmpty
        };
    }
    get resourceStates() { return [...this._resourceStates]; }
    set resourceStates(resources) {
        this._resourceStates = [...resources];
        this._onDidUpdateResourceStates.fire();
    }
    constructor(_proxy, _commands, _sourceControlHandle, _id, _label, multiDiffEditorEnableViewChanges, _extension) {
        this._proxy = _proxy;
        this._commands = _commands;
        this._sourceControlHandle = _sourceControlHandle;
        this._id = _id;
        this._label = _label;
        this.multiDiffEditorEnableViewChanges = multiDiffEditorEnableViewChanges;
        this._extension = _extension;
        this._resourceHandlePool = 0;
        this._resourceStates = [];
        this._resourceStatesMap = ( new Map());
        this._resourceStatesCommandsMap = ( new Map());
        this._resourceStatesDisposablesMap = ( new Map());
        this._onDidUpdateResourceStates = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidUpdateResourceStates = this._onDidUpdateResourceStates.event;
        this._disposed = false;
        this._onDidDispose = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidDispose = this._onDidDispose.event;
        this._handlesSnapshot = [];
        this._resourceSnapshot = [];
        this._hideWhenEmpty = undefined;
        this.handle = ExtHostSourceControlResourceGroup._handlePool++;
    }
    getResourceState(handle) {
        return this._resourceStatesMap.get(handle);
    }
    $executeResourceCommand(handle, preserveFocus) {
        const command = this._resourceStatesCommandsMap.get(handle);
        if (!command) {
            return Promise.resolve(undefined);
        }
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.asPromise)(() => this._commands.executeCommand(command.command, ...(command.arguments || []), preserveFocus));
    }
    _takeResourceStateSnapshot() {
        const snapshot = [...this._resourceStates].sort(compareResourceStates);
        const diffs = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__.sortedDiff)(this._resourceSnapshot, snapshot, compareResourceStates);
        const splices = ( diffs.map(diff => {
            const toInsert = ( diff.toInsert.map(r => {
                const handle = this._resourceHandlePool++;
                this._resourceStatesMap.set(handle, r);
                const sourceUri = r.resourceUri;
                let command;
                if (r.command) {
                    if (r.command.command === 'vscode.open' || r.command.command === 'vscode.diff' || r.command.command === 'vscode.changes') {
                        const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.DisposableStore());
                        command = this._commands.converter.toInternal(r.command, disposables);
                        this._resourceStatesDisposablesMap.set(handle, disposables);
                    }
                    else {
                        this._resourceStatesCommandsMap.set(handle, r.command);
                    }
                }
                const hasScmMultiDiffEditorProposalEnabled = (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.isProposedApiEnabled)(this._extension, 'scmMultiDiffEditor');
                const multiFileDiffEditorOriginalUri = hasScmMultiDiffEditorProposalEnabled ? r.multiDiffEditorOriginalUri : undefined;
                const multiFileDiffEditorModifiedUri = hasScmMultiDiffEditorProposalEnabled ? r.multiFileDiffEditorModifiedUri : undefined;
                const icon = getIconResource(r.decorations);
                const lightIcon = r.decorations && getIconResource(r.decorations.light) || icon;
                const darkIcon = r.decorations && getIconResource(r.decorations.dark) || icon;
                const icons = [lightIcon, darkIcon];
                const tooltip = (r.decorations && r.decorations.tooltip) || '';
                const strikeThrough = r.decorations && !!r.decorations.strikeThrough;
                const faded = r.decorations && !!r.decorations.faded;
                const contextValue = r.contextValue || '';
                const rawResource = [handle, sourceUri, icons, tooltip, strikeThrough, faded, contextValue, command, multiFileDiffEditorOriginalUri, multiFileDiffEditorModifiedUri];
                return { rawResource, handle };
            }));
            return { start: diff.start, deleteCount: diff.deleteCount, toInsert };
        }));
        const rawResourceSplices = ( splices
            .map(({ start, deleteCount, toInsert }) => [start, deleteCount, ( toInsert.map(i => i.rawResource))]));
        const reverseSplices = splices.reverse();
        for (const { start, deleteCount, toInsert } of reverseSplices) {
            const handles = ( toInsert.map(i => i.handle));
            const handlesToDelete = this._handlesSnapshot.splice(start, deleteCount, ...handles);
            for (const handle of handlesToDelete) {
                this._resourceStatesMap.delete(handle);
                this._resourceStatesCommandsMap.delete(handle);
                this._resourceStatesDisposablesMap.get(handle)?.dispose();
                this._resourceStatesDisposablesMap.delete(handle);
            }
        }
        this._resourceSnapshot = snapshot;
        return rawResourceSplices;
    }
    dispose() {
        this._disposed = true;
        this._onDidDispose.fire();
    }
}
class ExtHostSourceControl {
    static { this._handlePool = 0; }
    #proxy;
    get id() {
        return this._id;
    }
    get label() {
        return this._label;
    }
    get rootUri() {
        return this._rootUri;
    }
    get inputBox() { return this._inputBox; }
    get count() {
        return this._count;
    }
    set count(count) {
        if (this._count === count) {
            return;
        }
        this._count = count;
        this.#proxy.$updateSourceControl(this.handle, { count });
    }
    get quickDiffProvider() {
        return this._quickDiffProvider;
    }
    set quickDiffProvider(quickDiffProvider) {
        this._quickDiffProvider = quickDiffProvider;
        let quickDiffLabel = undefined;
        if ((0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.isProposedApiEnabled)(this._extension, 'quickDiffProvider')) {
            quickDiffLabel = quickDiffProvider?.label;
        }
        this.#proxy.$updateSourceControl(this.handle, { hasQuickDiffProvider: !!quickDiffProvider, quickDiffLabel });
    }
    get historyProvider() {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmHistoryProvider');
        return this._historyProvider;
    }
    set historyProvider(historyProvider) {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmHistoryProvider');
        this._historyProvider = historyProvider;
        this._historyProviderDisposable.value = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.DisposableStore());
        this.#proxy.$updateSourceControl(this.handle, { hasHistoryProvider: !!historyProvider });
        if (historyProvider) {
            this._historyProviderDisposable.value.add(historyProvider.onDidChangeCurrentHistoryItemGroup(() => {
                this._historyProviderCurrentHistoryItemGroup = historyProvider?.currentHistoryItemGroup;
                this.#proxy.$onDidChangeHistoryProviderCurrentHistoryItemGroup(this.handle, this._historyProviderCurrentHistoryItemGroup);
            }));
        }
    }
    get commitTemplate() {
        return this._commitTemplate;
    }
    set commitTemplate(commitTemplate) {
        if (commitTemplate === this._commitTemplate) {
            return;
        }
        this._commitTemplate = commitTemplate;
        this.#proxy.$updateSourceControl(this.handle, { commitTemplate });
    }
    get acceptInputCommand() {
        return this._acceptInputCommand;
    }
    set acceptInputCommand(acceptInputCommand) {
        this._acceptInputDisposables.value = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.DisposableStore());
        this._acceptInputCommand = acceptInputCommand;
        const internal = this._commands.converter.toInternal(acceptInputCommand, this._acceptInputDisposables.value);
        this.#proxy.$updateSourceControl(this.handle, { acceptInputCommand: internal });
    }
    get actionButton() {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmActionButton');
        return this._actionButton;
    }
    set actionButton(actionButton) {
        (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(this._extension, 'scmActionButton');
        this._actionButtonDisposables.value = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.DisposableStore());
        this._actionButton = actionButton;
        const internal = actionButton !== undefined ?
            {
                command: this._commands.converter.toInternal(actionButton.command, this._actionButtonDisposables.value),
                secondaryCommands: actionButton.secondaryCommands?.map(commandGroup => {
                    return ( commandGroup.map(
                        command => this._commands.converter.toInternal(command, this._actionButtonDisposables.value)
                    ));
                }),
                description: actionButton.description,
                enabled: actionButton.enabled
            } : undefined;
        this.#proxy.$updateSourceControl(this.handle, { actionButton: internal ?? null });
    }
    get statusBarCommands() {
        return this._statusBarCommands;
    }
    set statusBarCommands(statusBarCommands) {
        this.logService.trace('ExtHostSourceControl#statusBarCommands', ( (statusBarCommands ?? []).map(c => c.command)).join(', '));
        if (this._statusBarCommands && statusBarCommands && commandListEquals(this._statusBarCommands, statusBarCommands)) {
            this.logService.trace('ExtHostSourceControl#statusBarCommands are equal');
            return;
        }
        this._statusBarDisposables.value = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.DisposableStore());
        this._statusBarCommands = statusBarCommands;
        const internal = ( (statusBarCommands || []).map(
            c => this._commands.converter.toInternal(c, this._statusBarDisposables.value)
        ));
        this.#proxy.$updateSourceControl(this.handle, { statusBarCommands: internal });
    }
    get selected() {
        return this._selected;
    }
    constructor(_extension, _extHostDocuments, proxy, _commands, logService, _id, _label, _rootUri) {
        this._extension = _extension;
        this._commands = _commands;
        this.logService = logService;
        this._id = _id;
        this._label = _label;
        this._rootUri = _rootUri;
        this._groups = ( new Map());
        this._count = undefined;
        this._quickDiffProvider = undefined;
        this._historyProviderDisposable = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.MutableDisposable());
        this._commitTemplate = undefined;
        this._acceptInputDisposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.MutableDisposable());
        this._acceptInputCommand = undefined;
        this._actionButtonDisposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.MutableDisposable());
        this._statusBarDisposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.MutableDisposable());
        this._statusBarCommands = undefined;
        this._selected = false;
        this._onDidChangeSelection = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this.onDidChangeSelection = this._onDidChangeSelection.event;
        this.handle = ExtHostSourceControl._handlePool++;
        this.createdResourceGroups = ( new Map());
        this.updatedResourceGroups = ( new Set());
        this.#proxy = proxy;
        const inputBoxDocumentUri = ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.from({
            scheme: _base_common_network_js__WEBPACK_IMPORTED_MODULE_15__.Schemas.vscodeSourceControl,
            path: `${_id}/scm${this.handle}/input`,
            query: _rootUri ? `rootUri=${encodeURIComponent(( _rootUri.toString()))}` : undefined
        }));
        this._inputBox = ( new ExtHostSCMInputBox(
            _extension,
            _extHostDocuments,
            this.#proxy,
            this.handle,
            inputBoxDocumentUri
        ));
        this.#proxy.$registerSourceControl(this.handle, _id, _label, _rootUri, inputBoxDocumentUri);
    }
    createResourceGroup(id, label, options) {
        const multiDiffEditorEnableViewChanges = (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.isProposedApiEnabled)(this._extension, 'scmMultiDiffEditor') && options?.multiDiffEditorEnableViewChanges === true;
        const group = ( new ExtHostSourceControlResourceGroup(
            this.#proxy,
            this._commands,
            this.handle,
            id,
            label,
            multiDiffEditorEnableViewChanges,
            this._extension
        ));
        const disposable = _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Event.once(group.onDidDispose)(() => this.createdResourceGroups.delete(group));
        this.createdResourceGroups.set(group, disposable);
        this.eventuallyAddResourceGroups();
        return group;
    }
    eventuallyAddResourceGroups() {
        const groups = [];
        const splices = [];
        for (const [group, disposable] of this.createdResourceGroups) {
            disposable.dispose();
            const updateListener = group.onDidUpdateResourceStates(() => {
                this.updatedResourceGroups.add(group);
                this.eventuallyUpdateResourceStates();
            });
            _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Event.once(group.onDidDispose)(() => {
                this.updatedResourceGroups.delete(group);
                updateListener.dispose();
                this._groups.delete(group.handle);
                this.#proxy.$unregisterGroup(this.handle, group.handle);
            });
            groups.push([group.handle, group.id, group.label, group.features, group.multiDiffEditorEnableViewChanges]);
            const snapshot = group._takeResourceStateSnapshot();
            if (snapshot.length > 0) {
                splices.push([group.handle, snapshot]);
            }
            this._groups.set(group.handle, group);
        }
        this.#proxy.$registerGroups(this.handle, groups, splices);
        this.createdResourceGroups.clear();
    }
    eventuallyUpdateResourceStates() {
        const splices = [];
        this.updatedResourceGroups.forEach(group => {
            const snapshot = group._takeResourceStateSnapshot();
            if (snapshot.length === 0) {
                return;
            }
            splices.push([group.handle, snapshot]);
        });
        if (splices.length > 0) {
            this.#proxy.$spliceResourceStates(this.handle, splices);
        }
        this.updatedResourceGroups.clear();
    }
    getResourceGroup(handle) {
        return this._groups.get(handle);
    }
    setSelectionState(selected) {
        this._selected = selected;
        this._onDidChangeSelection.fire(selected);
    }
    dispose() {
        this._acceptInputDisposables.dispose();
        this._actionButtonDisposables.dispose();
        this._statusBarDisposables.dispose();
        this._groups.forEach(group => group.dispose());
        this.#proxy.$unregisterSourceControl(this.handle);
    }
}
ExtHostSourceControl.__decorator = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    (0,_base_common_decorators_js__WEBPACK_IMPORTED_MODULE_3__.debounce)(100)
], ExtHostSourceControl.prototype, "eventuallyAddResourceGroups", null));
ExtHostSourceControl.__decorator = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    (0,_base_common_decorators_js__WEBPACK_IMPORTED_MODULE_3__.debounce)(100)
], ExtHostSourceControl.prototype, "eventuallyUpdateResourceStates", null));
let ExtHostSCM = class ExtHostSCM {
    static { ExtHostSCM_1 = this; }
    static { this._handlePool = 0; }
    get onDidChangeActiveProvider() { return this._onDidChangeActiveProvider.event; }
    constructor(mainContext, _commands, _extHostDocuments, logService) {
        this._commands = _commands;
        this._extHostDocuments = _extHostDocuments;
        this.logService = logService;
        this._sourceControls = ( new Map());
        this._sourceControlsByExtension = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.ExtensionIdentifierMap());
        this._onDidChangeActiveProvider = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.MainContext.MainThreadSCM));
        this._telemetry = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.MainContext.MainThreadTelemetry));
        _commands.registerArgumentProcessor({
            processArgument: arg => {
                if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_11__.MarshalledId.ScmResource) {
                    const sourceControl = this._sourceControls.get(arg.sourceControlHandle);
                    if (!sourceControl) {
                        return arg;
                    }
                    const group = sourceControl.getResourceGroup(arg.groupHandle);
                    if (!group) {
                        return arg;
                    }
                    return group.getResourceState(arg.handle);
                }
                else if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_11__.MarshalledId.ScmResourceGroup) {
                    const sourceControl = this._sourceControls.get(arg.sourceControlHandle);
                    if (!sourceControl) {
                        return arg;
                    }
                    return sourceControl.getResourceGroup(arg.groupHandle);
                }
                else if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_11__.MarshalledId.ScmProvider) {
                    const sourceControl = this._sourceControls.get(arg.handle);
                    if (!sourceControl) {
                        return arg;
                    }
                    return sourceControl;
                }
                return arg;
            }
        });
    }
    createSourceControl(extension, id, label, rootUri) {
        this.logService.trace('ExtHostSCM#createSourceControl', extension.identifier.value, id, label, rootUri);
        this._telemetry.$publicLog2('api/scm/createSourceControl', {
            extensionId: extension.identifier.value,
        });
        const handle = ExtHostSCM_1._handlePool++;
        const sourceControl = ( new ExtHostSourceControl(
            extension,
            this._extHostDocuments,
            this._proxy,
            this._commands,
            this.logService,
            id,
            label,
            rootUri
        ));
        this._sourceControls.set(handle, sourceControl);
        const sourceControls = this._sourceControlsByExtension.get(extension.identifier) || [];
        sourceControls.push(sourceControl);
        this._sourceControlsByExtension.set(extension.identifier, sourceControls);
        return sourceControl;
    }
    getLastInputBox(extension) {
        this.logService.trace('ExtHostSCM#getLastInputBox', extension.identifier.value);
        const sourceControls = this._sourceControlsByExtension.get(extension.identifier);
        const sourceControl = sourceControls && sourceControls[sourceControls.length - 1];
        return sourceControl && sourceControl.inputBox;
    }
    $provideOriginalResource(sourceControlHandle, uriComponents, token) {
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uriComponents);
        this.logService.trace('ExtHostSCM#$provideOriginalResource', sourceControlHandle, ( uri.toString()));
        const sourceControl = this._sourceControls.get(sourceControlHandle);
        if (!sourceControl || !sourceControl.quickDiffProvider || !sourceControl.quickDiffProvider.provideOriginalResource) {
            return Promise.resolve(null);
        }
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.asPromise)(() => sourceControl.quickDiffProvider.provideOriginalResource(uri, token))
            .then(r => r || null);
    }
    $onInputBoxValueChange(sourceControlHandle, value) {
        this.logService.trace('ExtHostSCM#$onInputBoxValueChange', sourceControlHandle);
        const sourceControl = this._sourceControls.get(sourceControlHandle);
        if (!sourceControl) {
            return Promise.resolve(undefined);
        }
        sourceControl.inputBox.$onInputBoxValueChange(value);
        return Promise.resolve(undefined);
    }
    $executeResourceCommand(sourceControlHandle, groupHandle, handle, preserveFocus) {
        this.logService.trace('ExtHostSCM#$executeResourceCommand', sourceControlHandle, groupHandle, handle);
        const sourceControl = this._sourceControls.get(sourceControlHandle);
        if (!sourceControl) {
            return Promise.resolve(undefined);
        }
        const group = sourceControl.getResourceGroup(groupHandle);
        if (!group) {
            return Promise.resolve(undefined);
        }
        return group.$executeResourceCommand(handle, preserveFocus);
    }
    $validateInput(sourceControlHandle, value, cursorPosition) {
        this.logService.trace('ExtHostSCM#$validateInput', sourceControlHandle);
        const sourceControl = this._sourceControls.get(sourceControlHandle);
        if (!sourceControl) {
            return Promise.resolve(undefined);
        }
        if (!sourceControl.inputBox.validateInput) {
            return Promise.resolve(undefined);
        }
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.asPromise)(() => sourceControl.inputBox.validateInput(value, cursorPosition)).then(result => {
            if (!result) {
                return Promise.resolve(undefined);
            }
            const message = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_13__.MarkdownString.fromStrict(result.message);
            if (!message) {
                return Promise.resolve(undefined);
            }
            return Promise.resolve([message, result.type]);
        });
    }
    $setSelectedSourceControl(selectedSourceControlHandle) {
        this.logService.trace('ExtHostSCM#$setSelectedSourceControl', selectedSourceControlHandle);
        if (selectedSourceControlHandle !== undefined) {
            this._sourceControls.get(selectedSourceControlHandle)?.setSelectionState(true);
        }
        if (this._selectedSourceControlHandle !== undefined) {
            this._sourceControls.get(this._selectedSourceControlHandle)?.setSelectionState(false);
        }
        this._selectedSourceControlHandle = selectedSourceControlHandle;
        return Promise.resolve(undefined);
    }
    async $resolveHistoryItemGroupCommonAncestor(sourceControlHandle, historyItemGroupId1, historyItemGroupId2, token) {
        const historyProvider = this._sourceControls.get(sourceControlHandle)?.historyProvider;
        return (await historyProvider?.resolveHistoryItemGroupCommonAncestor(historyItemGroupId1, historyItemGroupId2, token)) ?? undefined;
    }
    async $provideHistoryItems(sourceControlHandle, historyItemGroupId, options, token) {
        const historyProvider = this._sourceControls.get(sourceControlHandle)?.historyProvider;
        const historyItems = await historyProvider?.provideHistoryItems(historyItemGroupId, options, token);
        return historyItems?.map(item => toSCMHistoryItemDto(item)) ?? undefined;
    }
    async $provideHistoryItems2(sourceControlHandle, options, token) {
        const historyProvider = this._sourceControls.get(sourceControlHandle)?.historyProvider;
        const historyItems = await historyProvider?.provideHistoryItems2(options, token);
        return historyItems?.map(item => toSCMHistoryItemDto(item)) ?? undefined;
    }
    async $provideHistoryItemSummary(sourceControlHandle, historyItemId, historyItemParentId, token) {
        const historyProvider = this._sourceControls.get(sourceControlHandle)?.historyProvider;
        if (typeof historyProvider?.provideHistoryItemSummary !== 'function') {
            return undefined;
        }
        const historyItem = await historyProvider.provideHistoryItemSummary(historyItemId, historyItemParentId, token);
        return historyItem ? toSCMHistoryItemDto(historyItem) : undefined;
    }
    async $provideHistoryItemChanges(sourceControlHandle, historyItemId, historyItemParentId, token) {
        const historyProvider = this._sourceControls.get(sourceControlHandle)?.historyProvider;
        return (await historyProvider?.provideHistoryItemChanges(historyItemId, historyItemParentId, token)) ?? undefined;
    }
};
ExtHostSCM = ExtHostSCM_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_9__.ILogService))
], ExtHostSCM));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSearch.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSearch.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostSearch: () => (/* binding */ ExtHostSearch),
/* harmony export */   IExtHostSearch: () => (/* binding */ IExtHostSearch),
/* harmony export */   reviveQuery: () => (/* binding */ reviveQuery)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _services_search_common_fileSearchManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/search/common/fileSearchManager.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/fileSearchManager.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostUriTransformerService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriTransformerService.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _services_search_common_textSearchManager_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../services/search/common/textSearchManager.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/textSearchManager.js");










const IExtHostSearch = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__.createDecorator)('IExtHostSearch'));
let ExtHostSearch = class ExtHostSearch {
    constructor(extHostRpc, _uriTransformer, _logService) {
        this.extHostRpc = extHostRpc;
        this._uriTransformer = _uriTransformer;
        this._logService = _logService;
        this._proxy = ( this.extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadSearch));
        this._handlePool = 0;
        this._textSearchProvider = ( new Map());
        this._textSearchUsedSchemes = ( new Set());
        this._aiTextSearchProvider = ( new Map());
        this._aiTextSearchUsedSchemes = ( new Set());
        this._fileSearchProvider = ( new Map());
        this._fileSearchUsedSchemes = ( new Set());
        this._fileSearchManager = ( new _services_search_common_fileSearchManager_js__WEBPACK_IMPORTED_MODULE_4__.FileSearchManager());
    }
    _transformScheme(scheme) {
        return this._uriTransformer.transformOutgoingScheme(scheme);
    }
    registerTextSearchProvider(scheme, provider) {
        if (( this._textSearchUsedSchemes.has(scheme))) {
            throw ( new Error(`a text search provider for the scheme '${scheme}' is already registered`));
        }
        this._textSearchUsedSchemes.add(scheme);
        const handle = this._handlePool++;
        this._textSearchProvider.set(handle, provider);
        this._proxy.$registerTextSearchProvider(handle, this._transformScheme(scheme));
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            this._textSearchUsedSchemes.delete(scheme);
            this._textSearchProvider.delete(handle);
            this._proxy.$unregisterProvider(handle);
        });
    }
    registerAITextSearchProvider(scheme, provider) {
        if (( this._aiTextSearchUsedSchemes.has(scheme))) {
            throw ( new Error(
                `an AI text search provider for the scheme '${scheme}'is already registered`
            ));
        }
        this._aiTextSearchUsedSchemes.add(scheme);
        const handle = this._handlePool++;
        this._aiTextSearchProvider.set(handle, provider);
        this._proxy.$registerAITextSearchProvider(handle, this._transformScheme(scheme));
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            this._aiTextSearchUsedSchemes.delete(scheme);
            this._aiTextSearchProvider.delete(handle);
            this._proxy.$unregisterProvider(handle);
        });
    }
    registerFileSearchProvider(scheme, provider) {
        if (( this._fileSearchUsedSchemes.has(scheme))) {
            throw ( new Error(`a file search provider for the scheme '${scheme}' is already registered`));
        }
        this._fileSearchUsedSchemes.add(scheme);
        const handle = this._handlePool++;
        this._fileSearchProvider.set(handle, provider);
        this._proxy.$registerFileSearchProvider(handle, this._transformScheme(scheme));
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            this._fileSearchUsedSchemes.delete(scheme);
            this._fileSearchProvider.delete(handle);
            this._proxy.$unregisterProvider(handle);
        });
    }
    $provideFileSearchResults(handle, session, rawQuery, token) {
        const query = reviveQuery(rawQuery);
        const provider = this._fileSearchProvider.get(handle);
        if (provider) {
            return this._fileSearchManager.fileSearch(query, provider, batch => {
                this._proxy.$handleFileMatch(handle, session, ( batch.map(p => p.resource)));
            }, token);
        }
        else {
            throw ( new Error('3 unknown provider: ' + handle));
        }
    }
    async doInternalFileSearchWithCustomCallback(query, token, handleFileMatch) {
        return { messages: [] };
    }
    $clearCache(cacheKey) {
        this._fileSearchManager.clearCache(cacheKey);
        return Promise.resolve(undefined);
    }
    $provideTextSearchResults(handle, session, rawQuery, token) {
        const provider = this._textSearchProvider.get(handle);
        if (!provider || !provider.provideTextSearchResults) {
            throw ( new Error(`Unknown Text Search Provider ${handle}`));
        }
        const query = reviveQuery(rawQuery);
        const engine = this.createTextSearchManager(query, provider);
        return engine.search(progress => this._proxy.$handleTextMatch(handle, session, progress), token);
    }
    $provideAITextSearchResults(handle, session, rawQuery, token) {
        const provider = this._aiTextSearchProvider.get(handle);
        if (!provider || !provider.provideAITextSearchResults) {
            throw ( new Error(`Unknown AI Text Search Provider ${handle}`));
        }
        const query = reviveQuery(rawQuery);
        const engine = this.createAITextSearchManager(query, provider);
        return engine.search(progress => this._proxy.$handleTextMatch(handle, session, progress), token);
    }
    $enableExtensionHostSearch() { }
    createTextSearchManager(query, provider) {
        return ( new _services_search_common_textSearchManager_js__WEBPACK_IMPORTED_MODULE_9__.TextSearchManager({ query, provider }, {
            readdir: resource => Promise.resolve([]),
            toCanonicalName: encoding => encoding
        }, 'textSearchProvider'));
    }
    createAITextSearchManager(query, provider) {
        return ( new _services_search_common_textSearchManager_js__WEBPACK_IMPORTED_MODULE_9__.TextSearchManager({ query, provider }, {
            readdir: resource => Promise.resolve([]),
            toCanonicalName: encoding => encoding
        }, 'aiTextSearchProvider'));
    }
};
ExtHostSearch = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_6__.IURITransformerService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_7__.ILogService))
], ExtHostSearch));
function reviveQuery(rawQuery) {
    return {
        ...rawQuery,
        ...{
            folderQueries: rawQuery.folderQueries && ( rawQuery.folderQueries.map(reviveFolderQuery)),
            extraFileResources: rawQuery.extraFileResources && ( rawQuery.extraFileResources.map(components => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(components)))
        }
    };
}
function reviveFolderQuery(rawFolderQuery) {
    return {
        ...rawFolderQuery,
        folder: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(rawFolderQuery.folder)
    };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecretState.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecretState.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostSecretState: () => (/* binding */ ExtHostSecretState),
/* harmony export */   IExtHostSecretState: () => (/* binding */ IExtHostSecretState)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");



class ExtHostSecretState {
    constructor(mainContext) {
        this._onDidChangePassword = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChangePassword = this._onDidChangePassword.event;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadSecretState));
    }
    async $onDidChangePassword(e) {
        this._onDidChangePassword.fire(e);
    }
    get(extensionId, key) {
        return this._proxy.$getPassword(extensionId, key);
    }
    store(extensionId, key, value) {
        return this._proxy.$setPassword(extensionId, key, value);
    }
    delete(extensionId, key) {
        return this._proxy.$deletePassword(extensionId, key);
    }
}
const IExtHostSecretState = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__.createDecorator)('IExtHostSecretState'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecrets.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSecrets.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtensionSecrets: () => (/* binding */ ExtensionSecrets)
/* harmony export */ });
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");



class ExtensionSecrets {
    #secretState;
    constructor(extensionDescription, secretState) {
        this.disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore());
        this._id = _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.ExtensionIdentifier.toKey(extensionDescription.identifier);
        this.#secretState = secretState;
        this.onDidChange = ( _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Event.map(
            _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Event.filter(this.#secretState.onDidChangePassword, e => e.extensionId === this._id),
            e => ({ key: e.key }),
            this.disposables
        ));
    }
    dispose() {
        this.disposables.dispose();
    }
    get(key) {
        return this.#secretState.get(this._id, key);
    }
    store(key, value) {
        return this.#secretState.store(this._id, key, value);
    }
    delete(key) {
        return this.#secretState.delete(this._id, key);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostShare.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostShare.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostShare: () => (/* binding */ ExtHostShare)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");



class ExtHostShare {
    static { this.handlePool = 0; }
    constructor(mainContext, uriTransformer) {
        this.uriTransformer = uriTransformer;
        this.providers = ( new Map());
        this.proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadShare));
    }
    async $provideShare(handle, shareableItem, token) {
        const provider = this.providers.get(handle);
        const result = await provider?.provideShare({ selection: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.Range.to(shareableItem.selection), resourceUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(shareableItem.resourceUri) }, token);
        return result ?? undefined;
    }
    registerShareProvider(selector, provider) {
        const handle = ExtHostShare.handlePool++;
        this.providers.set(handle, provider);
        this.proxy.$registerShareProvider(handle, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_1__.DocumentSelector.from(selector, this.uriTransformer), provider.id, provider.label, provider.priority);
        return {
            dispose: () => {
                this.proxy.$unregisterShareProvider(handle);
                this.providers.delete(handle);
            }
        };
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSpeech.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostSpeech.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostSpeech: () => (/* binding */ ExtHostSpeech)
/* harmony export */ });
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");



class ExtHostSpeech {
    static { this.ID_POOL = 1; }
    constructor(mainContext) {
        this.providers = ( new Map());
        this.sessions = ( new Map());
        this.synthesizers = ( new Map());
        this.proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadSpeech));
    }
    async $createSpeechToTextSession(handle, session, language) {
        const provider = this.providers.get(handle);
        if (!provider) {
            return;
        }
        const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
        const cts = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource());
        this.sessions.set(session, cts);
        const speechToTextSession = await provider.provideSpeechToTextSession(cts.token, language ? { language } : undefined);
        if (!speechToTextSession) {
            return;
        }
        disposables.add(speechToTextSession.onDidChange(e => {
            if (cts.token.isCancellationRequested) {
                return;
            }
            this.proxy.$emitSpeechToTextEvent(session, e);
        }));
        disposables.add(cts.token.onCancellationRequested(() => disposables.dispose()));
    }
    async $cancelSpeechToTextSession(session) {
        this.sessions.get(session)?.dispose(true);
        this.sessions.delete(session);
    }
    async $createTextToSpeechSession(handle, session, language) {
        const provider = this.providers.get(handle);
        if (!provider) {
            return;
        }
        const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
        const cts = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource());
        this.sessions.set(session, cts);
        const textToSpeech = await provider.provideTextToSpeechSession(cts.token, language ? { language } : undefined);
        if (!textToSpeech) {
            return;
        }
        this.synthesizers.set(session, textToSpeech);
        disposables.add(textToSpeech.onDidChange(e => {
            if (cts.token.isCancellationRequested) {
                return;
            }
            this.proxy.$emitTextToSpeechEvent(session, e);
        }));
        disposables.add(cts.token.onCancellationRequested(() => disposables.dispose()));
    }
    async $synthesizeSpeech(session, text) {
        this.synthesizers.get(session)?.synthesize(text);
    }
    async $cancelTextToSpeechSession(session) {
        this.sessions.get(session)?.dispose(true);
        this.sessions.delete(session);
        this.synthesizers.delete(session);
    }
    async $createKeywordRecognitionSession(handle, session) {
        const provider = this.providers.get(handle);
        if (!provider) {
            return;
        }
        const disposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.DisposableStore());
        const cts = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource());
        this.sessions.set(session, cts);
        const keywordRecognitionSession = await provider.provideKeywordRecognitionSession(cts.token);
        if (!keywordRecognitionSession) {
            return;
        }
        disposables.add(keywordRecognitionSession.onDidChange(e => {
            if (cts.token.isCancellationRequested) {
                return;
            }
            this.proxy.$emitKeywordRecognitionEvent(session, e);
        }));
        disposables.add(cts.token.onCancellationRequested(() => disposables.dispose()));
    }
    async $cancelKeywordRecognitionSession(session) {
        this.sessions.get(session)?.dispose(true);
        this.sessions.delete(session);
    }
    registerProvider(extension, identifier, provider) {
        const handle = ExtHostSpeech.ID_POOL++;
        this.providers.set(handle, provider);
        this.proxy.$registerProvider(handle, identifier, { extension, displayName: extension.value });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.toDisposable)(() => {
            this.proxy.$unregisterProvider(handle);
            this.providers.delete(handle);
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStatusBar.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStatusBar.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostStatusBar: () => (/* binding */ ExtHostStatusBar),
/* harmony export */   ExtHostStatusBarEntry: () => (/* binding */ ExtHostStatusBarEntry)
/* harmony export */ });
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");






const _moduleId = "vs/workbench/api/common/extHostStatusBar";
class ExtHostStatusBarEntry {
    static { this.ID_GEN = 0; }
    static { this.ALLOWED_BACKGROUND_COLORS = ( (new Map([
        ['statusBarItem.errorBackground', ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.ThemeColor('statusBarItem.errorForeground')))],
        ['statusBarItem.warningBackground', ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.ThemeColor('statusBarItem.warningForeground')))]
    ]))); }
    #proxy;
    #commands;
    constructor(proxy, commands, staticItems, extension, id, alignment = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.StatusBarAlignment.Left, priority) {
        this._disposed = false;
        this._text = '';
        this._staleCommandRegistrations = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableStore()));
        this.#proxy = proxy;
        this.#commands = commands;
        if (id && extension) {
            this._entryId = (0,_extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.asStatusBarItemIdentifier)(extension.identifier, id);
            const item = staticItems.get(this._entryId);
            if (item) {
                alignment = item.alignLeft ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.StatusBarAlignment.Left : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.StatusBarAlignment.Right;
                priority = item.priority;
                this._visible = true;
                this.name = item.name;
                this.text = item.text;
                this.tooltip = item.tooltip;
                this.command = item.command;
                this.accessibilityInformation = item.accessibilityInformation;
            }
        }
        else {
            this._entryId = String(ExtHostStatusBarEntry.ID_GEN++);
        }
        this._extension = extension;
        this._id = id;
        this._alignment = alignment;
        this._priority = this.validatePriority(priority);
    }
    validatePriority(priority) {
        if (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_5__.isNumber)(priority)) {
            return undefined;
        }
        if (priority === Number.POSITIVE_INFINITY) {
            return Number.MAX_VALUE;
        }
        if (priority === Number.NEGATIVE_INFINITY) {
            return -Number.MAX_VALUE;
        }
        return priority;
    }
    get id() {
        return this._id ?? this._extension.identifier.value;
    }
    get alignment() {
        return this._alignment;
    }
    get priority() {
        return this._priority;
    }
    get text() {
        return this._text;
    }
    get name() {
        return this._name;
    }
    get tooltip() {
        return this._tooltip;
    }
    get color() {
        return this._color;
    }
    get backgroundColor() {
        return this._backgroundColor;
    }
    get command() {
        return this._command?.fromApi;
    }
    get accessibilityInformation() {
        return this._accessibilityInformation;
    }
    set text(text) {
        this._text = text;
        this.update();
    }
    set name(name) {
        this._name = name;
        this.update();
    }
    set tooltip(tooltip) {
        this._tooltip = tooltip;
        this.update();
    }
    set color(color) {
        this._color = color;
        this.update();
    }
    set backgroundColor(color) {
        if (color && !( (ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.has(color.id)))) {
            color = undefined;
        }
        this._backgroundColor = color;
        this.update();
    }
    set command(command) {
        if (this._command?.fromApi === command) {
            return;
        }
        if (this._latestCommandRegistration) {
            this._staleCommandRegistrations.add(this._latestCommandRegistration);
        }
        this._latestCommandRegistration = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableStore()));
        if (typeof command === 'string') {
            this._command = {
                fromApi: command,
                internal: this.#commands.toInternal({ title: '', command }, this._latestCommandRegistration),
            };
        }
        else if (command) {
            this._command = {
                fromApi: command,
                internal: this.#commands.toInternal(command, this._latestCommandRegistration),
            };
        }
        else {
            this._command = undefined;
        }
        this.update();
    }
    set accessibilityInformation(accessibilityInformation) {
        this._accessibilityInformation = accessibilityInformation;
        this.update();
    }
    show() {
        this._visible = true;
        this.update();
    }
    hide() {
        clearTimeout(this._timeoutHandle);
        this._visible = false;
        this.#proxy.$disposeEntry(this._entryId);
    }
    update() {
        if (this._disposed || !this._visible) {
            return;
        }
        clearTimeout(this._timeoutHandle);
        this._timeoutHandle = setTimeout(() => {
            this._timeoutHandle = undefined;
            let id;
            if (this._extension) {
                if (this._id) {
                    id = `${this._extension.identifier.value}.${this._id}`;
                }
                else {
                    id = this._extension.identifier.value;
                }
            }
            else {
                id = this._id;
            }
            let name;
            if (this._name) {
                name = this._name;
            }
            else {
                name = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(
                    _moduleId,
                    0,
                    "{0} (Extension)",
                    this._extension.displayName || this._extension.name
                ));
            }
            let color = this._color;
            if (this._backgroundColor) {
                color = ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.get(this._backgroundColor.id);
            }
            const tooltip = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.MarkdownString.fromStrict(this._tooltip);
            this.#proxy.$setEntry(this._entryId, id, this._extension?.identifier.value, name, this._text, tooltip, this._command?.internal, color, this._backgroundColor, this._alignment === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.StatusBarAlignment.Left, this._priority, this._accessibilityInformation);
            this._staleCommandRegistrations.clear();
        }, 0);
    }
    dispose() {
        this.hide();
        this._disposed = true;
    }
}
class StatusBarMessage {
    constructor(statusBar) {
        this._messages = [];
        this._item = statusBar.createStatusBarEntry(undefined, 'status.extensionMessage', _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.StatusBarAlignment.Left, Number.MIN_VALUE);
        this._item.name = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 1, "Extension Status"));
    }
    dispose() {
        this._messages.length = 0;
        this._item.dispose();
    }
    setMessage(message) {
        const data = { message };
        this._messages.unshift(data);
        this._update();
        return (
             (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.Disposable(() => {
                const idx = this._messages.indexOf(data);
                if (idx >= 0) {
                    this._messages.splice(idx, 1);
                    this._update();
                }
            }))
        );
    }
    _update() {
        if (this._messages.length > 0) {
            this._item.text = this._messages[0].message;
            this._item.show();
        }
        else {
            this._item.hide();
        }
    }
}
class ExtHostStatusBar {
    constructor(mainContext, commands) {
        this._existingItems = ( (new Map()));
        this._proxy = ( (mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.MainContext.MainThreadStatusBar)));
        this._commands = commands;
        this._statusMessage = ( (new StatusBarMessage(this)));
    }
    $acceptStaticEntries(added) {
        for (const item of added) {
            this._existingItems.set(item.entryId, item);
        }
    }
    createStatusBarEntry(extension, id, alignment, priority) {
        return (
             (new ExtHostStatusBarEntry(
                this._proxy,
                this._commands,
                this._existingItems,
                extension,
                id,
                alignment,
                priority
            ))
        );
    }
    setStatusBarMessage(text, timeoutOrThenable) {
        const d = this._statusMessage.setMessage(text);
        let handle;
        if (typeof timeoutOrThenable === 'number') {
            handle = setTimeout(() => d.dispose(), timeoutOrThenable);
        }
        else if (typeof timeoutOrThenable !== 'undefined') {
            timeoutOrThenable.then(() => d.dispose(), () => d.dispose());
        }
        return (
             (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_0__.Disposable(() => {
                d.dispose();
                clearTimeout(handle);
            }))
        );
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStorage.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStorage.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostStorage: () => (/* binding */ ExtHostStorage),
/* harmony export */   IExtHostStorage: () => (/* binding */ IExtHostStorage)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");



class ExtHostStorage {
    constructor(mainContext, _logService) {
        this._logService = _logService;
        this._onDidChangeStorage = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChangeStorage = this._onDidChangeStorage.event;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadStorage));
    }
    registerExtensionStorageKeysToSync(extension, keys) {
        this._proxy.$registerExtensionStorageKeysToSync(extension, keys);
    }
    async initializeExtensionStorage(shared, key, defaultValue) {
        const value = await this._proxy.$initializeExtensionStorage(shared, key);
        let parsedValue;
        if (value) {
            parsedValue = this.safeParseValue(shared, key, value);
        }
        return parsedValue || defaultValue;
    }
    setValue(shared, key, value) {
        return this._proxy.$setValue(shared, key, value);
    }
    $acceptValue(shared, key, value) {
        const parsedValue = this.safeParseValue(shared, key, value);
        if (parsedValue) {
            this._onDidChangeStorage.fire({ shared, key, value: parsedValue });
        }
    }
    safeParseValue(shared, key, value) {
        try {
            return JSON.parse(value);
        }
        catch (error) {
            this._logService.error(`[extHostStorage] unexpected error parsing storage contents (extensionId: ${key}, global: ${shared}): ${error}`);
        }
        return undefined;
    }
}
const IExtHostStorage = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_2__.createDecorator)('IExtHostStorage'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStoragePaths.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStoragePaths.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtensionStoragePaths: () => (/* binding */ ExtensionStoragePaths),
/* harmony export */   IExtensionStoragePaths: () => (/* binding */ IExtensionStoragePaths)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostFileSystemConsumer.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemConsumer.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");






const IExtensionStoragePaths = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_1__.createDecorator)('IExtensionStoragePaths'));
let ExtensionStoragePaths = class ExtensionStoragePaths {
    constructor(initData, _logService, _extHostFileSystem) {
        this._logService = _logService;
        this._extHostFileSystem = _extHostFileSystem;
        this._workspace = initData.workspace ?? undefined;
        this._environment = initData.environment;
        this.whenReady = this._getOrCreateWorkspaceStoragePath().then(value => this._value = value);
    }
    async _getWorkspaceStorageURI(storageName) {
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.joinPath(this._environment.workspaceStorageHome, storageName);
    }
    async _getOrCreateWorkspaceStoragePath() {
        if (!this._workspace) {
            return Promise.resolve(undefined);
        }
        const storageName = this._workspace.id;
        const storageUri = await this._getWorkspaceStorageURI(storageName);
        try {
            await this._extHostFileSystem.value.stat(storageUri);
            this._logService.trace('[ExtHostStorage] storage dir already exists', storageUri);
            return storageUri;
        }
        catch {
        }
        try {
            this._logService.trace('[ExtHostStorage] creating dir and metadata-file', storageUri);
            await this._extHostFileSystem.value.createDirectory(storageUri);
            await this._extHostFileSystem.value.writeFile(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.joinPath(storageUri, 'meta.json'), ( new TextEncoder()).encode(JSON.stringify({
                id: this._workspace.id,
                configuration: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.revive(this._workspace.configuration)?.toString(),
                name: this._workspace.name
            }, undefined, 2)));
            return storageUri;
        }
        catch (e) {
            this._logService.error('[ExtHostStorage]', e);
            return undefined;
        }
    }
    workspaceValue(extension) {
        if (this._value) {
            return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.joinPath(this._value, extension.identifier.value);
        }
        return undefined;
    }
    globalValue(extension) {
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_5__.URI.joinPath(this._environment.globalStorageHome, extension.identifier.value.toLowerCase());
    }
    onWillDeactivateAll() {
    }
};
ExtensionStoragePaths = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_2__.IExtHostInitDataService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_3__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostFileSystemConsumer_js__WEBPACK_IMPORTED_MODULE_4__.IExtHostConsumerFileSystem))
], ExtensionStoragePaths));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTask.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTask.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomExecutionDTO: () => (/* binding */ CustomExecutionDTO),
/* harmony export */   ExtHostTaskBase: () => (/* binding */ ExtHostTaskBase),
/* harmony export */   IExtHostTask: () => (/* binding */ IExtHostTask),
/* harmony export */   TaskDTO: () => (/* binding */ TaskDTO),
/* harmony export */   WorkerExtHostTask: () => (/* binding */ WorkerExtHostTask)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostWorkspace.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js");
/* harmony import */ var _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostDocumentsAndEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentsAndEditors.js");
/* harmony import */ var _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostConfiguration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostTerminalService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostApiDeprecationService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostApiDeprecationService.js");
/* harmony import */ var _contrib_tasks_common_tasks_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../contrib/tasks/common/tasks.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/tasks/common/tasks.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");




















var TaskDefinitionDTO;
( (function(TaskDefinitionDTO) {
    function from(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    TaskDefinitionDTO.from = from;
    function to(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    TaskDefinitionDTO.to = to;
})(TaskDefinitionDTO || (TaskDefinitionDTO = {})));
var TaskPresentationOptionsDTO;
( (function(TaskPresentationOptionsDTO) {
    function from(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    TaskPresentationOptionsDTO.from = from;
    function to(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    TaskPresentationOptionsDTO.to = to;
})(TaskPresentationOptionsDTO || (TaskPresentationOptionsDTO = {})));
var ProcessExecutionOptionsDTO;
( (function(ProcessExecutionOptionsDTO) {
    function from(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    ProcessExecutionOptionsDTO.from = from;
    function to(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    ProcessExecutionOptionsDTO.to = to;
})(ProcessExecutionOptionsDTO || (ProcessExecutionOptionsDTO = {})));
var ProcessExecutionDTO;
( (function(ProcessExecutionDTO) {
    function is(value) {
        if (value) {
            const candidate = value;
            return candidate && !!candidate.process;
        }
        else {
            return false;
        }
    }
    ProcessExecutionDTO.is = is;
    function from(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        const result = {
            process: value.process,
            args: value.args
        };
        if (value.options) {
            result.options = ProcessExecutionOptionsDTO.from(value.options);
        }
        return result;
    }
    ProcessExecutionDTO.from = from;
    function to(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ProcessExecution(value.process, value.args, value.options);
    }
    ProcessExecutionDTO.to = to;
})(ProcessExecutionDTO || (ProcessExecutionDTO = {})));
var ShellExecutionOptionsDTO;
( (function(ShellExecutionOptionsDTO) {
    function from(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    ShellExecutionOptionsDTO.from = from;
    function to(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return value;
    }
    ShellExecutionOptionsDTO.to = to;
})(ShellExecutionOptionsDTO || (ShellExecutionOptionsDTO = {})));
var ShellExecutionDTO;
( (function(ShellExecutionDTO) {
    function is(value) {
        if (value) {
            const candidate = value;
            return candidate && (!!candidate.commandLine || !!candidate.command);
        }
        else {
            return false;
        }
    }
    ShellExecutionDTO.is = is;
    function from(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        const result = {};
        if (value.commandLine !== undefined) {
            result.commandLine = value.commandLine;
        }
        else {
            result.command = value.command;
            result.args = value.args;
        }
        if (value.options) {
            result.options = ShellExecutionOptionsDTO.from(value.options);
        }
        return result;
    }
    ShellExecutionDTO.from = from;
    function to(value) {
        if (value === undefined || value === null || (value.command === undefined && value.commandLine === undefined)) {
            return undefined;
        }
        if (value.commandLine) {
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ShellExecution(value.commandLine, value.options);
        }
        else {
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ShellExecution(value.command, value.args ? value.args : [], value.options);
        }
    }
    ShellExecutionDTO.to = to;
})(ShellExecutionDTO || (ShellExecutionDTO = {})));
var CustomExecutionDTO;
( (function(CustomExecutionDTO) {
    function is(value) {
        if (value) {
            const candidate = value;
            return candidate && candidate.customExecution === 'customExecution';
        }
        else {
            return false;
        }
    }
    CustomExecutionDTO.is = is;
    function from(value) {
        return {
            customExecution: 'customExecution'
        };
    }
    CustomExecutionDTO.from = from;
    function to(taskId, providedCustomExeutions) {
        return providedCustomExeutions.get(taskId);
    }
    CustomExecutionDTO.to = to;
})(CustomExecutionDTO || (CustomExecutionDTO = {})));
var TaskGroupDTO;
( (function(TaskGroupDTO) {
    function from(value) {
        if (value === undefined || value === null) {
            return undefined;
        }
        return { _id: value.id, isDefault: value.isDefault };
    }
    TaskGroupDTO.from = from;
})(TaskGroupDTO || (TaskGroupDTO = {})));
var TaskDTO;
( (function(TaskDTO) {
    function fromMany(tasks, extension) {
        if (tasks === undefined || tasks === null) {
            return [];
        }
        const result = [];
        for (const task of tasks) {
            const converted = from(task, extension);
            if (converted) {
                result.push(converted);
            }
        }
        return result;
    }
    TaskDTO.fromMany = fromMany;
    function from(value, extension) {
        if (value === undefined || value === null) {
            return undefined;
        }
        let execution;
        if (value.execution instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ProcessExecution) {
            execution = ProcessExecutionDTO.from(value.execution);
        }
        else if (value.execution instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.ShellExecution) {
            execution = ShellExecutionDTO.from(value.execution);
        }
        else if (value.execution && value.execution instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.CustomExecution) {
            execution = CustomExecutionDTO.from(value.execution);
        }
        const definition = TaskDefinitionDTO.from(value.definition);
        let scope;
        if (value.scope) {
            if (typeof value.scope === 'number') {
                scope = value.scope;
            }
            else {
                scope = value.scope.uri;
            }
        }
        else {
            scope = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.TaskScope.Workspace;
        }
        if (!definition || !scope) {
            return undefined;
        }
        const result = {
            _id: value._id,
            definition,
            name: value.name,
            source: {
                extensionId: extension.identifier.value,
                label: value.source,
                scope: scope
            },
            execution: execution,
            isBackground: value.isBackground,
            group: TaskGroupDTO.from(value.group),
            presentationOptions: TaskPresentationOptionsDTO.from(value.presentationOptions),
            problemMatchers: value.problemMatchers,
            hasDefinedMatchers: value.hasDefinedMatchers,
            runOptions: value.runOptions ? value.runOptions : { reevaluateOnRerun: true },
            detail: value.detail
        };
        return result;
    }
    TaskDTO.from = from;
    async function to(value, workspace, providedCustomExeutions) {
        if (value === undefined || value === null) {
            return undefined;
        }
        let execution;
        if (ProcessExecutionDTO.is(value.execution)) {
            execution = ProcessExecutionDTO.to(value.execution);
        }
        else if (ShellExecutionDTO.is(value.execution)) {
            execution = ShellExecutionDTO.to(value.execution);
        }
        else if (CustomExecutionDTO.is(value.execution)) {
            execution = CustomExecutionDTO.to(value._id, providedCustomExeutions);
        }
        const definition = TaskDefinitionDTO.to(value.definition);
        let scope;
        if (value.source) {
            if (value.source.scope !== undefined) {
                if (typeof value.source.scope === 'number') {
                    scope = value.source.scope;
                }
                else {
                    scope = await workspace.resolveWorkspaceFolder(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(value.source.scope));
                }
            }
            else {
                scope = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.TaskScope.Workspace;
            }
        }
        if (!definition || !scope) {
            return undefined;
        }
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Task(definition, scope, value.name, value.source.label, execution, value.problemMatchers);
        if (value.isBackground !== undefined) {
            result.isBackground = value.isBackground;
        }
        if (value.group !== undefined) {
            result.group = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.TaskGroup.from(value.group._id);
            if (result.group && value.group.isDefault) {
                result.group = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.TaskGroup(result.group.id, result.group.label);
                if (value.group.isDefault === true) {
                    result.group.isDefault = value.group.isDefault;
                }
            }
        }
        if (value.presentationOptions) {
            result.presentationOptions = TaskPresentationOptionsDTO.to(value.presentationOptions);
        }
        if (value._id) {
            result._id = value._id;
        }
        if (value.detail) {
            result.detail = value.detail;
        }
        return result;
    }
    TaskDTO.to = to;
})(TaskDTO || (TaskDTO = {})));
var TaskFilterDTO;
( (function(TaskFilterDTO) {
    function from(value) {
        return value;
    }
    TaskFilterDTO.from = from;
    function to(value) {
        if (!value) {
            return undefined;
        }
        return Object.assign(Object.create(null), value);
    }
    TaskFilterDTO.to = to;
})(TaskFilterDTO || (TaskFilterDTO = {})));
class TaskExecutionImpl {
    #tasks;
    constructor(tasks, _id, _task) {
        this._id = _id;
        this._task = _task;
        this.#tasks = tasks;
    }
    get task() {
        return this._task;
    }
    terminate() {
        this.#tasks.terminateTask(this);
    }
    fireDidStartProcess(value) {
    }
    fireDidEndProcess(value) {
    }
}
let ExtHostTaskBase = class ExtHostTaskBase {
    constructor(extHostRpc, initData, workspaceService, editorService, configurationService, extHostTerminalService, logService, deprecationService) {
        this._onDidExecuteTask = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter());
        this._onDidTerminateTask = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter());
        this._onDidTaskProcessStarted = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter());
        this._onDidTaskProcessEnded = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter());
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__.MainContext.MainThreadTask));
        this._workspaceProvider = workspaceService;
        this._editorService = editorService;
        this._configurationService = configurationService;
        this._terminalService = extHostTerminalService;
        this._handleCounter = 0;
        this._handlers = ( new Map());
        this._taskExecutions = ( new Map());
        this._taskExecutionPromises = ( new Map());
        this._providedCustomExecutions2 = ( new Map());
        this._notProvidedCustomExecutions = ( new Set());
        this._activeCustomExecutions2 = ( new Map());
        this._logService = logService;
        this._deprecationService = deprecationService;
        this._proxy.$registerSupportedExecutions(true);
    }
    registerTaskProvider(extension, type, provider) {
        if (!provider) {
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Disposable(() => { });
        }
        const handle = this.nextHandle();
        this._handlers.set(handle, { type, provider, extension });
        this._proxy.$registerTaskProvider(handle, type);
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Disposable(() => {
            this._handlers.delete(handle);
            this._proxy.$unregisterTaskProvider(handle);
        });
    }
    registerTaskSystem(scheme, info) {
        this._proxy.$registerTaskSystem(scheme, info);
    }
    fetchTasks(filter) {
        return this._proxy.$fetchTasks(TaskFilterDTO.from(filter)).then(async (values) => {
            const result = [];
            for (const value of values) {
                const task = await TaskDTO.to(value, this._workspaceProvider, this._providedCustomExecutions2);
                if (task) {
                    result.push(task);
                }
            }
            return result;
        });
    }
    get taskExecutions() {
        const result = [];
        this._taskExecutions.forEach(value => result.push(value));
        return result;
    }
    terminateTask(execution) {
        if (!(execution instanceof TaskExecutionImpl)) {
            throw ( new Error('No valid task execution provided'));
        }
        return this._proxy.$terminateTask(execution._id);
    }
    get onDidStartTask() {
        return this._onDidExecuteTask.event;
    }
    async $onDidStartTask(execution, terminalId, resolvedDefinition) {
        const customExecution = this._providedCustomExecutions2.get(execution.id);
        if (customExecution) {
            this._activeCustomExecutions2.set(execution.id, customExecution);
            this._terminalService.attachPtyToTerminal(terminalId, await customExecution.callback(resolvedDefinition));
        }
        this._lastStartedTask = execution.id;
        this._onDidExecuteTask.fire({
            execution: await this.getTaskExecution(execution)
        });
    }
    get onDidEndTask() {
        return this._onDidTerminateTask.event;
    }
    async $OnDidEndTask(execution) {
        if (!( this._taskExecutionPromises.has(execution.id))) {
            return;
        }
        const _execution = await this.getTaskExecution(execution);
        this._taskExecutionPromises.delete(execution.id);
        this._taskExecutions.delete(execution.id);
        this.customExecutionComplete(execution);
        this._onDidTerminateTask.fire({
            execution: _execution
        });
    }
    get onDidStartTaskProcess() {
        return this._onDidTaskProcessStarted.event;
    }
    async $onDidStartTaskProcess(value) {
        const execution = await this.getTaskExecution(value.id);
        this._onDidTaskProcessStarted.fire({
            execution: execution,
            processId: value.processId
        });
    }
    get onDidEndTaskProcess() {
        return this._onDidTaskProcessEnded.event;
    }
    async $onDidEndTaskProcess(value) {
        const execution = await this.getTaskExecution(value.id);
        this._onDidTaskProcessEnded.fire({
            execution: execution,
            exitCode: value.exitCode
        });
    }
    $provideTasks(handle, validTypes) {
        const handler = this._handlers.get(handle);
        if (!handler) {
            return Promise.reject(( new Error('no handler found')));
        }
        const taskIdPromises = [];
        const fetchPromise = (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_2__.asPromise)(() => handler.provider.provideTasks(_base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_9__.CancellationToken.None)).then(value => {
            return this.provideTasksInternal(validTypes, taskIdPromises, handler, value);
        });
        return ( new Promise((resolve) => {
            fetchPromise.then((result) => {
                Promise.all(taskIdPromises).then(() => {
                    resolve(result);
                });
            });
        }));
    }
    async $resolveTask(handle, taskDTO) {
        const handler = this._handlers.get(handle);
        if (!handler) {
            return Promise.reject(( new Error('no handler found')));
        }
        if (taskDTO.definition.type !== handler.type) {
            throw ( new Error(
                `Unexpected: Task of type [${taskDTO.definition.type}] cannot be resolved by provider of type [${handler.type}].`
            ));
        }
        const task = await TaskDTO.to(taskDTO, this._workspaceProvider, this._providedCustomExecutions2);
        if (!task) {
            throw ( new Error('Unexpected: Task cannot be resolved.'));
        }
        const resolvedTask = await handler.provider.resolveTask(task, _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_9__.CancellationToken.None);
        if (!resolvedTask) {
            return;
        }
        this.checkDeprecation(resolvedTask, handler);
        const resolvedTaskDTO = TaskDTO.from(resolvedTask, handler.extension);
        if (!resolvedTaskDTO) {
            throw ( new Error('Unexpected: Task cannot be resolved.'));
        }
        if (resolvedTask.definition !== task.definition) {
            throw ( new Error(
                'Unexpected: The resolved task definition must be the same object as the original task definition. The task definition cannot be changed.'
            ));
        }
        if (CustomExecutionDTO.is(resolvedTaskDTO.execution)) {
            await this.addCustomExecution(resolvedTaskDTO, resolvedTask, true);
        }
        return await this.resolveTaskInternal(resolvedTaskDTO);
    }
    nextHandle() {
        return this._handleCounter++;
    }
    async addCustomExecution(taskDTO, task, isProvided) {
        const taskId = await this._proxy.$createTaskId(taskDTO);
        if (!isProvided && !( this._providedCustomExecutions2.has(taskId))) {
            this._notProvidedCustomExecutions.add(taskId);
            this._activeCustomExecutions2.set(taskId, task.execution);
        }
        this._providedCustomExecutions2.set(taskId, task.execution);
    }
    async getTaskExecution(execution, task) {
        if (typeof execution === 'string') {
            const taskExecution = this._taskExecutionPromises.get(execution);
            if (!taskExecution) {
                throw ( new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_19__.ErrorNoTelemetry('Unexpected: The specified task is missing an execution'));
            }
            return taskExecution;
        }
        const result = this._taskExecutionPromises.get(execution.id);
        if (result) {
            return result;
        }
        let executionPromise;
        if (!task) {
            executionPromise = TaskDTO.to(execution.task, this._workspaceProvider, this._providedCustomExecutions2).then(t => {
                if (!t) {
                    throw ( new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_19__.ErrorNoTelemetry('Unexpected: Task does not exist.'));
                }
                return ( new TaskExecutionImpl(this, execution.id, t));
            });
        }
        else {
            executionPromise = Promise.resolve(( new TaskExecutionImpl(this, execution.id, task)));
        }
        this._taskExecutionPromises.set(execution.id, executionPromise);
        return executionPromise.then(taskExecution => {
            this._taskExecutions.set(execution.id, taskExecution);
            return taskExecution;
        });
    }
    checkDeprecation(task, handler) {
        const tTask = task;
        if (tTask._deprecated) {
            this._deprecationService.report('Task.constructor', handler.extension, 'Use the Task constructor that takes a `scope` instead.');
        }
    }
    customExecutionComplete(execution) {
        const extensionCallback2 = this._activeCustomExecutions2.get(execution.id);
        if (extensionCallback2) {
            this._activeCustomExecutions2.delete(execution.id);
        }
        if (( this._notProvidedCustomExecutions.has(execution.id)) && (this._lastStartedTask !== execution.id)) {
            this._providedCustomExecutions2.delete(execution.id);
            this._notProvidedCustomExecutions.delete(execution.id);
        }
        const iterator = ( this._notProvidedCustomExecutions.values());
        let iteratorResult = iterator.next();
        while (!iteratorResult.done) {
            if (!( this._activeCustomExecutions2.has(iteratorResult.value)) && (this._lastStartedTask !== iteratorResult.value)) {
                this._providedCustomExecutions2.delete(iteratorResult.value);
                this._notProvidedCustomExecutions.delete(iteratorResult.value);
            }
            iteratorResult = iterator.next();
        }
    }
};
ExtHostTaskBase = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_11__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostInitDataService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostWorkspace)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostDocumentsAndEditors)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostConfiguration)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostTerminalService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_16__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, _extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_17__.IExtHostApiDeprecationService))
], ExtHostTaskBase));
let WorkerExtHostTask = class WorkerExtHostTask extends ExtHostTaskBase {
    constructor(extHostRpc, initData, workspaceService, editorService, configurationService, extHostTerminalService, logService, deprecationService) {
        super(extHostRpc, initData, workspaceService, editorService, configurationService, extHostTerminalService, logService, deprecationService);
        this.registerTaskSystem(_base_common_network_js__WEBPACK_IMPORTED_MODULE_14__.Schemas.vscodeRemote, {
            scheme: _base_common_network_js__WEBPACK_IMPORTED_MODULE_14__.Schemas.vscodeRemote,
            authority: '',
            platform: (0,_base_common_platform_js__WEBPACK_IMPORTED_MODULE_15__.PlatformToString)(_base_common_platform_js__WEBPACK_IMPORTED_MODULE_15__.Platform.Web)
        });
    }
    async executeTask(extension, task) {
        if (!task.execution) {
            throw ( new Error('Tasks to execute must include an execution'));
        }
        const dto = TaskDTO.from(task, extension);
        if (dto === undefined) {
            throw ( new Error('Task is not valid'));
        }
        if (CustomExecutionDTO.is(dto.execution)) {
            await this.addCustomExecution(dto, task, false);
        }
        else {
            throw ( new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_19__.NotSupportedError());
        }
        const execution = await this.getTaskExecution(await this._proxy.$getTaskExecution(dto), task);
        this._proxy.$executeTask(dto).catch(error => { throw ( new Error(error)); });
        return execution;
    }
    provideTasksInternal(validTypes, taskIdPromises, handler, value) {
        const taskDTOs = [];
        if (value) {
            for (const task of value) {
                this.checkDeprecation(task, handler);
                if (!task.definition || !validTypes[task.definition.type]) {
                    const source = task.source ? task.source : 'No task source';
                    this._logService.warn(`The task [${source}, ${task.name}] uses an undefined task type. The task will be ignored in the future.`);
                }
                const taskDTO = TaskDTO.from(task, handler.extension);
                if (taskDTO && CustomExecutionDTO.is(taskDTO.execution)) {
                    taskDTOs.push(taskDTO);
                    taskIdPromises.push(this.addCustomExecution(taskDTO, task, true));
                }
                else {
                    this._logService.warn('Only custom execution tasks supported.');
                }
            }
        }
        return {
            tasks: taskDTOs,
            extension: handler.extension
        };
    }
    async resolveTaskInternal(resolvedTaskDTO) {
        if (CustomExecutionDTO.is(resolvedTaskDTO.execution)) {
            return resolvedTaskDTO;
        }
        else {
            this._logService.warn('Only custom execution tasks supported.');
        }
        return undefined;
    }
    async $resolveVariables(uriComponents, toResolve) {
        const result = {
            process: undefined,
            variables: Object.create(null)
        };
        return result;
    }
    async $jsonTasksSupported() {
        return false;
    }
    async $findExecutable(command, cwd, paths) {
        return undefined;
    }
};
WorkerExtHostTask = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_11__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostInitDataService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostWorkspace)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostDocumentsAndEditors)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostConfiguration)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(5, _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostTerminalService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(6, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_16__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(7, _extHostApiDeprecationService_js__WEBPACK_IMPORTED_MODULE_17__.IExtHostApiDeprecationService))
], WorkerExtHostTask));
const IExtHostTask = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_13__.createDecorator)('IExtHostTask'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTelemetry.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTelemetry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTelemetry: () => (/* binding */ ExtHostTelemetry),
/* harmony export */   ExtHostTelemetryLogger: () => (/* binding */ ExtHostTelemetryLogger),
/* harmony export */   IExtHostTelemetry: () => (/* binding */ IExtHostTelemetry),
/* harmony export */   isNewAppInstall: () => (/* binding */ isNewAppInstall)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _platform_telemetry_common_telemetry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/telemetry/common/telemetry.js */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetry.js");
/* harmony import */ var _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../platform/log/common/log.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../services/extensions/common/extensionHostProtocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionHostProtocol.js");
/* harmony import */ var _platform_remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../platform/remote/common/remoteHosts.js */ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteHosts.js");
/* harmony import */ var _platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/telemetry/common/telemetryUtils.js */ "./node_modules/vscode/vscode/src/vs/platform/telemetry/common/telemetryUtils.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");














const _moduleId = "vs/workbench/api/common/extHostTelemetry";
let ExtHostTelemetry = class ExtHostTelemetry extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_12__.Disposable {
    constructor(initData, loggerService) {
        super();
        this.initData = initData;
        this.loggerService = loggerService;
        this._onDidChangeTelemetryEnabled = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidChangeTelemetryEnabled = this._onDidChangeTelemetryEnabled.event;
        this._onDidChangeTelemetryConfiguration = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter())));
        this.onDidChangeTelemetryConfiguration = this._onDidChangeTelemetryConfiguration.event;
        this._productConfig = { usage: true, error: true };
        this._level = _platform_telemetry_common_telemetry_js__WEBPACK_IMPORTED_MODULE_3__.TelemetryLevel.NONE;
        this._telemetryIsSupported = false;
        this._inLoggingOnlyMode = false;
        this._telemetryLoggers = ( (new Map()));
        this.extHostTelemetryLogFile = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(this.initData.environment.extensionTelemetryLogResource);
        this._inLoggingOnlyMode = this.initData.environment.isExtensionTelemetryLoggingOnly;
        this._outputLogger = loggerService.createLogger(this.extHostTelemetryLogFile, { id: _platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_9__.extensionTelemetryLogChannelId, name: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_13__.localizeWithPath)(
            _moduleId,
            0,
            "Extension Telemetry{0}",
            this._inLoggingOnlyMode ? ' (Not Sent)' : ''
        )), hidden: true });
        this._register(this._outputLogger);
        this._register(loggerService.onDidChangeLogLevel(arg => {
            if ((0,_platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_4__.isLogLevel)(arg)) {
                this.updateLoggerVisibility();
            }
        }));
        this._outputLogger.info('Below are logs for extension telemetry events sent to the telemetry output channel API once the log level is set to trace.');
        this._outputLogger.info('===========================================================');
    }
    updateLoggerVisibility() {
        this.loggerService.setVisibility(this.extHostTelemetryLogFile, this._telemetryIsSupported && this.loggerService.getLogLevel() === _platform_log_common_log_js__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Trace);
    }
    getTelemetryConfiguration() {
        return this._level === _platform_telemetry_common_telemetry_js__WEBPACK_IMPORTED_MODULE_3__.TelemetryLevel.USAGE;
    }
    getTelemetryDetails() {
        return {
            isCrashEnabled: this._level >= _platform_telemetry_common_telemetry_js__WEBPACK_IMPORTED_MODULE_3__.TelemetryLevel.CRASH,
            isErrorsEnabled: this._productConfig.error ? this._level >= _platform_telemetry_common_telemetry_js__WEBPACK_IMPORTED_MODULE_3__.TelemetryLevel.ERROR : false,
            isUsageEnabled: this._productConfig.usage ? this._level >= _platform_telemetry_common_telemetry_js__WEBPACK_IMPORTED_MODULE_3__.TelemetryLevel.USAGE : false
        };
    }
    instantiateLogger(extension, sender, options) {
        const telemetryDetails = this.getTelemetryDetails();
        const logger = ( (new ExtHostTelemetryLogger(
            sender,
            options,
            extension,
            this._outputLogger,
            this._inLoggingOnlyMode,
            this.getBuiltInCommonProperties(extension),
            { isUsageEnabled: telemetryDetails.isUsageEnabled, isErrorsEnabled: telemetryDetails.isErrorsEnabled }
        )));
        const loggers = this._telemetryLoggers.get(extension.identifier.value) ?? [];
        this._telemetryLoggers.set(extension.identifier.value, [...loggers, logger]);
        return logger.apiTelemetryLogger;
    }
    $initializeTelemetryLevel(level, supportsTelemetry, productConfig) {
        this._level = level;
        this._telemetryIsSupported = supportsTelemetry;
        this._productConfig = productConfig ?? { usage: true, error: true };
        this.updateLoggerVisibility();
    }
    getBuiltInCommonProperties(extension) {
        const commonProperties = Object.create(null);
        commonProperties['common.extname'] = `${extension.publisher}.${extension.name}`;
        commonProperties['common.extversion'] = extension.version;
        commonProperties['common.vscodemachineid'] = this.initData.telemetryInfo.machineId;
        commonProperties['common.vscodesessionid'] = this.initData.telemetryInfo.sessionId;
        commonProperties['common.sqmid'] = this.initData.telemetryInfo.sqmId;
        commonProperties['common.devDeviceId'] = this.initData.telemetryInfo.devDeviceId;
        commonProperties['common.vscodeversion'] = this.initData.version;
        commonProperties['common.isnewappinstall'] = isNewAppInstall(this.initData.telemetryInfo.firstSessionDate);
        commonProperties['common.product'] = this.initData.environment.appHost;
        switch (this.initData.uiKind) {
            case _services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_7__.UIKind.Web:
                commonProperties['common.uikind'] = 'web';
                break;
            case _services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_7__.UIKind.Desktop:
                commonProperties['common.uikind'] = 'desktop';
                break;
            default:
                commonProperties['common.uikind'] = 'unknown';
        }
        commonProperties['common.remotename'] = (0,_platform_remote_common_remoteHosts_js__WEBPACK_IMPORTED_MODULE_8__.getRemoteName)((0,_platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_9__.cleanRemoteAuthority)(this.initData.remote.authority));
        return commonProperties;
    }
    $onDidChangeTelemetryLevel(level) {
        this._oldTelemetryEnablement = this.getTelemetryConfiguration();
        this._level = level;
        const telemetryDetails = this.getTelemetryDetails();
        this._telemetryLoggers.forEach((loggers, key) => {
            const newLoggers = loggers.filter(l => !l.isDisposed);
            if (newLoggers.length === 0) {
                this._telemetryLoggers.delete(key);
            }
            else {
                this._telemetryLoggers.set(key, newLoggers);
            }
        });
        this._telemetryLoggers.forEach(loggers => {
            for (const logger of loggers) {
                logger.updateTelemetryEnablements(telemetryDetails.isUsageEnabled, telemetryDetails.isErrorsEnabled);
            }
        });
        if (this._oldTelemetryEnablement !== this.getTelemetryConfiguration()) {
            this._onDidChangeTelemetryEnabled.fire(this.getTelemetryConfiguration());
        }
        this._onDidChangeTelemetryConfiguration.fire(this.getTelemetryDetails());
        this.updateLoggerVisibility();
    }
    onExtensionError(extension, error) {
        const loggers = this._telemetryLoggers.get(extension.value);
        const nonDisposedLoggers = loggers?.filter(l => !l.isDisposed);
        if (!nonDisposedLoggers) {
            this._telemetryLoggers.delete(extension.value);
            return false;
        }
        let errorEmitted = false;
        for (const logger of nonDisposedLoggers) {
            if (logger.ignoreUnhandledExtHostErrors) {
                continue;
            }
            logger.logError(error);
            errorEmitted = true;
        }
        return errorEmitted;
    }
};
ExtHostTelemetry = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostInitDataService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILoggerService)))
], ExtHostTelemetry)));
class ExtHostTelemetryLogger {
    static validateSender(sender) {
        if (typeof sender !== 'object') {
            throw ( (new TypeError('TelemetrySender argument is invalid')));
        }
        if (typeof sender.sendEventData !== 'function') {
            throw ( (new TypeError('TelemetrySender.sendEventData must be a function')));
        }
        if (typeof sender.sendErrorData !== 'function') {
            throw ( (new TypeError('TelemetrySender.sendErrorData must be a function')));
        }
        if (typeof sender.flush !== 'undefined' && typeof sender.flush !== 'function') {
            throw ( (new TypeError('TelemetrySender.flush must be a function or undefined')));
        }
    }
    constructor(sender, options, _extension, _logger, _inLoggingOnlyMode, _commonProperties, telemetryEnablements) {
        this._extension = _extension;
        this._logger = _logger;
        this._inLoggingOnlyMode = _inLoggingOnlyMode;
        this._commonProperties = _commonProperties;
        this._onDidChangeEnableStates = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this.ignoreUnhandledExtHostErrors = options?.ignoreUnhandledErrors ?? false;
        this._ignoreBuiltinCommonProperties = options?.ignoreBuiltInCommonProperties ?? false;
        this._additionalCommonProperties = options?.additionalCommonProperties;
        this._sender = sender;
        this._telemetryEnablements = { isUsageEnabled: telemetryEnablements.isUsageEnabled, isErrorsEnabled: telemetryEnablements.isErrorsEnabled };
    }
    updateTelemetryEnablements(isUsageEnabled, isErrorsEnabled) {
        if (this._apiObject) {
            this._telemetryEnablements = { isUsageEnabled, isErrorsEnabled };
            this._onDidChangeEnableStates.fire(this._apiObject);
        }
    }
    mixInCommonPropsAndCleanData(data) {
        let updatedData = 'properties' in data ? (data.properties ?? {}) : data;
        updatedData = (0,_platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_9__.cleanData)(updatedData, []);
        if (this._additionalCommonProperties) {
            updatedData = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_10__.mixin)(updatedData, this._additionalCommonProperties);
        }
        if (!this._ignoreBuiltinCommonProperties) {
            updatedData = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_10__.mixin)(updatedData, this._commonProperties);
        }
        if ('properties' in data) {
            data.properties = updatedData;
        }
        else {
            data = updatedData;
        }
        return data;
    }
    logEvent(eventName, data) {
        if (!this._sender) {
            return;
        }
        if (this._extension.publisher === 'vscode') {
            eventName = this._extension.name + '/' + eventName;
        }
        else {
            eventName = this._extension.identifier.value + '/' + eventName;
        }
        data = this.mixInCommonPropsAndCleanData(data || {});
        if (!this._inLoggingOnlyMode) {
            this._sender?.sendEventData(eventName, data);
        }
        this._logger.trace(eventName, data);
    }
    logUsage(eventName, data) {
        if (!this._telemetryEnablements.isUsageEnabled) {
            return;
        }
        this.logEvent(eventName, data);
    }
    logError(eventNameOrException, data) {
        if (!this._telemetryEnablements.isErrorsEnabled || !this._sender) {
            return;
        }
        if (typeof eventNameOrException === 'string') {
            this.logEvent(eventNameOrException, data);
        }
        else {
            const errorData = {
                name: eventNameOrException.name,
                message: eventNameOrException.message,
                stack: eventNameOrException.stack,
                cause: eventNameOrException.cause
            };
            const cleanedErrorData = (0,_platform_telemetry_common_telemetryUtils_js__WEBPACK_IMPORTED_MODULE_9__.cleanData)(errorData, []);
            const cleanedError = ( (new Error(cleanedErrorData.message, {
                cause: cleanedErrorData.cause
            })));
            cleanedError.stack = cleanedErrorData.stack;
            cleanedError.name = cleanedErrorData.name;
            data = this.mixInCommonPropsAndCleanData(data || {});
            if (!this._inLoggingOnlyMode) {
                this._sender.sendErrorData(cleanedError, data);
            }
            this._logger.trace('exception', data);
        }
    }
    get apiTelemetryLogger() {
        if (!this._apiObject) {
            const that = this;
            const obj = {
                logUsage: that.logUsage.bind(that),
                get isUsageEnabled() {
                    return that._telemetryEnablements.isUsageEnabled;
                },
                get isErrorsEnabled() {
                    return that._telemetryEnablements.isErrorsEnabled;
                },
                logError: that.logError.bind(that),
                dispose: that.dispose.bind(that),
                onDidChangeEnableStates: that._onDidChangeEnableStates.event.bind(that)
            };
            this._apiObject = ( (Object.freeze(obj)));
        }
        return this._apiObject;
    }
    get isDisposed() {
        return !this._sender;
    }
    dispose() {
        if (this._sender?.flush) {
            let tempSender = this._sender;
            this._sender = undefined;
            Promise.resolve(tempSender.flush()).then(tempSender = undefined);
            this._apiObject = undefined;
        }
        else {
            this._sender = undefined;
        }
    }
}
function isNewAppInstall(firstSessionDate) {
    const installAge = Date.now() - ( (new Date(firstSessionDate))).getTime();
    return isNaN(installAge) ? false : installAge < 1000 * 60 * 60 * 24;
}
const IExtHostTelemetry = ( ((0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_1__.createDecorator)('IExtHostTelemetry')));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalService.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalService.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseExtHostTerminalService: () => (/* binding */ BaseExtHostTerminalService),
/* harmony export */   ExtHostTerminal: () => (/* binding */ ExtHostTerminal),
/* harmony export */   IExtHostTerminalService: () => (/* binding */ IExtHostTerminalService),
/* harmony export */   WorkerExtHostTerminalService: () => (/* binding */ WorkerExtHostTerminalService)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _platform_terminal_common_environmentVariableShared_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../platform/terminal/common/environmentVariableShared.js */ "./node_modules/vscode/vscode/src/vs/platform/terminal/common/environmentVariableShared.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_uuid_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/uuid.js */ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js");
/* harmony import */ var _platform_terminal_common_terminal_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../platform/terminal/common/terminal.js */ "./node_modules/vscode/vscode/src/vs/platform/terminal/common/terminal.js");
/* harmony import */ var _platform_terminal_common_terminalDataBuffering_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../platform/terminal/common/terminalDataBuffering.js */ "./node_modules/vscode/vscode/src/vs/platform/terminal/common/terminalDataBuffering.js");
/* harmony import */ var _base_common_themables_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../base/common/themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");




















const _moduleId = "vs/workbench/api/common/extHostTerminalService";
const IExtHostTerminalService = ( ((0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__.createDecorator)('IExtHostTerminalService')));
class ExtHostTerminal extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.Disposable {
    constructor(_proxy, _id, _creationOptions, _name) {
        super();
        this._proxy = _proxy;
        this._id = _id;
        this._creationOptions = _creationOptions;
        this._name = _name;
        this._disposed = false;
        this._state = { isInteractedWith: false };
        this.isOpen = false;
        this._onWillDispose = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter())));
        this.onWillDispose = this._onWillDispose.event;
        this._creationOptions = ( (Object.freeze(this._creationOptions)));
        this._pidPromise = ( (new Promise(c => this._pidPromiseComplete = c)));
        const that = this;
        this.value = {
            get name() {
                return that._name || '';
            },
            get processId() {
                return that._pidPromise;
            },
            get creationOptions() {
                return that._creationOptions;
            },
            get exitStatus() {
                return that._exitStatus;
            },
            get state() {
                return that._state;
            },
            get selection() {
                return that._selection;
            },
            get shellIntegration() {
                return that.shellIntegration;
            },
            sendText(text, shouldExecute = true) {
                that._checkDisposed();
                that._proxy.$sendText(that._id, text, shouldExecute);
            },
            show(preserveFocus) {
                that._checkDisposed();
                that._proxy.$show(that._id, preserveFocus);
            },
            hide() {
                that._checkDisposed();
                that._proxy.$hide(that._id);
            },
            dispose() {
                if (!that._disposed) {
                    that._disposed = true;
                    that._proxy.$dispose(that._id);
                }
            },
            get dimensions() {
                if (that._cols === undefined || that._rows === undefined) {
                    return undefined;
                }
                return {
                    columns: that._cols,
                    rows: that._rows
                };
            }
        };
    }
    dispose() {
        this._onWillDispose.fire();
        super.dispose();
    }
    async create(options, internalOptions) {
        if (typeof this._id !== 'string') {
            throw ( (new Error('Terminal has already been created')));
        }
        await this._proxy.$createTerminal(this._id, {
            name: options.name,
            shellPath: options.shellPath ?? undefined,
            shellArgs: options.shellArgs ?? undefined,
            cwd: options.cwd ?? internalOptions?.cwd ?? undefined,
            env: options.env ?? undefined,
            icon: asTerminalIcon(options.iconPath) ?? undefined,
            color: _base_common_themables_js__WEBPACK_IMPORTED_MODULE_15__.ThemeColor.isThemeColor(options.color) ? options.color.id : undefined,
            initialText: options.message ?? undefined,
            strictEnv: options.strictEnv ?? undefined,
            hideFromUser: options.hideFromUser ?? undefined,
            forceShellIntegration: internalOptions?.forceShellIntegration ?? undefined,
            isFeatureTerminal: internalOptions?.isFeatureTerminal ?? undefined,
            isExtensionOwnedTerminal: true,
            useShellEnvironment: internalOptions?.useShellEnvironment ?? undefined,
            location: internalOptions?.location || this._serializeParentTerminal(options.location, internalOptions?.resolvedExtHostIdentifier),
            isTransient: options.isTransient ?? undefined,
        });
    }
    async createExtensionTerminal(location, internalOptions, parentTerminal, iconPath, color) {
        if (typeof this._id !== 'string') {
            throw ( (new Error('Terminal has already been created')));
        }
        await this._proxy.$createTerminal(this._id, {
            name: this._name,
            isExtensionCustomPtyTerminal: true,
            icon: iconPath,
            color: _base_common_themables_js__WEBPACK_IMPORTED_MODULE_15__.ThemeColor.isThemeColor(color) ? color.id : undefined,
            location: internalOptions?.location || this._serializeParentTerminal(location, parentTerminal),
            isTransient: true
        });
        if (typeof this._id === 'string') {
            throw ( (new Error('Terminal creation failed')));
        }
        return this._id;
    }
    _serializeParentTerminal(location, parentTerminal) {
        if (typeof location === 'object') {
            if ('parentTerminal' in location && location.parentTerminal && parentTerminal) {
                return { parentTerminal };
            }
            if ('viewColumn' in location) {
                return { viewColumn: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.ViewColumn.from(location.viewColumn), preserveFocus: location.preserveFocus };
            }
            return undefined;
        }
        return location;
    }
    _checkDisposed() {
        if (this._disposed) {
            throw ( (new Error('Terminal has already been disposed')));
        }
    }
    set name(name) {
        this._name = name;
    }
    setExitStatus(code, reason) {
        this._exitStatus = ( (Object.freeze({ code, reason })));
    }
    setDimensions(cols, rows) {
        if (cols === this._cols && rows === this._rows) {
            return false;
        }
        if (cols === 0 || rows === 0) {
            return false;
        }
        this._cols = cols;
        this._rows = rows;
        return true;
    }
    setInteractedWith() {
        if (!this._state.isInteractedWith) {
            this._state = { isInteractedWith: true };
            return true;
        }
        return false;
    }
    setSelection(selection) {
        this._selection = selection;
    }
    _setProcessId(processId) {
        if (this._pidPromiseComplete) {
            this._pidPromiseComplete(processId);
            this._pidPromiseComplete = undefined;
        }
        else {
            this._pidPromise.then(pid => {
                if (pid !== processId) {
                    this._pidPromise = Promise.resolve(processId);
                }
            });
        }
    }
}
class ExtHostPseudoterminal {
    get onProcessReady() { return this._onProcessReady.event; }
    constructor(_pty) {
        this._pty = _pty;
        this.id = 0;
        this.shouldPersist = false;
        this._onProcessData = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onProcessData = this._onProcessData.event;
        this._onProcessReady = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this._onDidChangeProperty = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidChangeProperty = this._onDidChangeProperty.event;
        this._onProcessExit = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onProcessExit = this._onProcessExit.event;
    }
    refreshProperty(property) {
        throw ( (new Error(
            `refreshProperty is not suppported in extension owned terminals. property: ${property}`
        )));
    }
    updateProperty(property, value) {
        throw ( (new Error(
            `updateProperty is not suppported in extension owned terminals. property: ${property}, value: ${value}`
        )));
    }
    async start() {
        return undefined;
    }
    shutdown() {
        this._pty.close();
    }
    input(data) {
        this._pty.handleInput?.(data);
    }
    resize(cols, rows) {
        this._pty.setDimensions?.({ columns: cols, rows });
    }
    clearBuffer() {
    }
    async processBinary(data) {
    }
    acknowledgeDataEvent(charCount) {
    }
    async setUnicodeVersion(version) {
    }
    getInitialCwd() {
        return Promise.resolve('');
    }
    getCwd() {
        return Promise.resolve('');
    }
    startSendingEvents(initialDimensions) {
        this._pty.onDidWrite(e => this._onProcessData.fire(e));
        this._pty.onDidClose?.((e = undefined) => {
            this._onProcessExit.fire(e === void 0 ? undefined : e);
        });
        this._pty.onDidOverrideDimensions?.(e => {
            if (e) {
                this._onDidChangeProperty.fire({ type: _platform_terminal_common_terminal_js__WEBPACK_IMPORTED_MODULE_13__.ProcessPropertyType.OverrideDimensions, value: { cols: e.columns, rows: e.rows } });
            }
        });
        this._pty.onDidChangeName?.(title => {
            this._onDidChangeProperty.fire({ type: _platform_terminal_common_terminal_js__WEBPACK_IMPORTED_MODULE_13__.ProcessPropertyType.Title, value: title });
        });
        this._pty.open(initialDimensions ? initialDimensions : undefined);
        if (initialDimensions) {
            this._pty.setDimensions?.(initialDimensions);
        }
        this._onProcessReady.fire({ pid: -1, cwd: '', windowsPty: undefined });
    }
}
let nextLinkId = 1;
let BaseExtHostTerminalService = class BaseExtHostTerminalService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.Disposable {
    get activeTerminal() { return this._activeTerminal?.value; }
    get terminals() { return (
         (this._terminals.map(term => term.value))
    ); }
    constructor(supportsProcesses, _extHostCommands, extHostRpc) {
        super();
        this._extHostCommands = _extHostCommands;
        this._terminals = [];
        this._terminalProcesses = ( (new Map()));
        this._terminalProcessDisposables = {};
        this._extensionTerminalAwaitingStart = {};
        this._getTerminalPromises = {};
        this._environmentVariableCollections = ( (new Map()));
        this._lastQuickFixCommands = this._register(( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.MutableDisposable())));
        this._linkProviders = ( (new Set()));
        this._profileProviders = ( (new Map()));
        this._quickFixProviders = ( (new Map()));
        this._terminalLinkCache = ( (new Map()));
        this._terminalLinkCancellationSource = ( (new Map()));
        this._onDidCloseTerminal = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidCloseTerminal = this._onDidCloseTerminal.event;
        this._onDidOpenTerminal = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidOpenTerminal = this._onDidOpenTerminal.event;
        this._onDidChangeActiveTerminal = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidChangeActiveTerminal = this._onDidChangeActiveTerminal.event;
        this._onDidChangeTerminalDimensions = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidChangeTerminalDimensions = this._onDidChangeTerminalDimensions.event;
        this._onDidChangeTerminalState = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidChangeTerminalState = this._onDidChangeTerminalState.event;
        this._onDidChangeShell = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.onDidChangeShell = this._onDidChangeShell.event;
        this._onDidWriteTerminalData = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter({
            onWillAddFirstListener: () => this._proxy.$startSendingDataEvents(),
            onDidRemoveLastListener: () => this._proxy.$stopSendingDataEvents()
        })));
        this.onDidWriteTerminalData = this._onDidWriteTerminalData.event;
        this._onDidExecuteCommand = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter({
            onWillAddFirstListener: () => this._proxy.$startSendingCommandEvents(),
            onDidRemoveLastListener: () => this._proxy.$stopSendingCommandEvents()
        })));
        this.onDidExecuteTerminalCommand = this._onDidExecuteCommand.event;
        this._proxy = ( (extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadTerminalService)));
        this._bufferer = ( (new _platform_terminal_common_terminalDataBuffering_js__WEBPACK_IMPORTED_MODULE_14__.TerminalDataBufferer(this._proxy.$sendProcessData)));
        this._proxy.$registerProcessSupport(supportsProcesses);
        this._extHostCommands.registerArgumentProcessor({
            processArgument: arg => {
                const deserialize = (arg) => {
                    const cast = arg;
                    return this.getTerminalById(cast.instanceId)?.value;
                };
                switch (arg?.$mid) {
                    case _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_19__.MarshalledId.TerminalContext: return deserialize(arg);
                    default: {
                        if (Array.isArray(arg)) {
                            for (let i = 0; i < arg.length; i++) {
                                if (arg[i].$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_19__.MarshalledId.TerminalContext) {
                                    arg[i] = deserialize(arg[i]);
                                }
                                else {
                                    break;
                                }
                            }
                        }
                        return arg;
                    }
                }
            }
        });
        this._register({
            dispose: () => {
                for (const [_, terminalProcess] of this._terminalProcesses) {
                    terminalProcess.shutdown(true);
                }
            }
        });
    }
    getDefaultShell(useAutomationShell) {
        const profile = useAutomationShell ? this._defaultAutomationProfile : this._defaultProfile;
        return profile?.path || '';
    }
    getDefaultShellArgs(useAutomationShell) {
        const profile = useAutomationShell ? this._defaultAutomationProfile : this._defaultProfile;
        return profile?.args || [];
    }
    createExtensionTerminal(options, internalOptions) {
        const terminal = ( (new ExtHostTerminal(this._proxy, (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_12__.generateUuid)(), options, options.name)));
        const p = ( (new ExtHostPseudoterminal(options.pty)));
        terminal.createExtensionTerminal(options.location, internalOptions, this._serializeParentTerminal(options, internalOptions).resolvedExtHostIdentifier, asTerminalIcon(options.iconPath), asTerminalColor(options.color)).then(id => {
            const disposable = this._setupExtHostProcessListeners(id, p);
            this._terminalProcessDisposables[id] = disposable;
        });
        this._terminals.push(terminal);
        return terminal.value;
    }
    _serializeParentTerminal(options, internalOptions) {
        internalOptions = internalOptions ? internalOptions : {};
        if (options.location && typeof options.location === 'object' && 'parentTerminal' in options.location) {
            const parentTerminal = options.location.parentTerminal;
            if (parentTerminal) {
                const parentExtHostTerminal = this._terminals.find(t => t.value === parentTerminal);
                if (parentExtHostTerminal) {
                    internalOptions.resolvedExtHostIdentifier = parentExtHostTerminal._id;
                }
            }
        }
        else if (options.location && typeof options.location !== 'object') {
            internalOptions.location = options.location;
        }
        else if (internalOptions.location && typeof internalOptions.location === 'object' && 'splitActiveTerminal' in internalOptions.location) {
            internalOptions.location = { splitActiveTerminal: true };
        }
        return internalOptions;
    }
    attachPtyToTerminal(id, pty) {
        const terminal = this.getTerminalById(id);
        if (!terminal) {
            throw ( (new Error(`Cannot resolve terminal with id ${id} for virtual process`)));
        }
        const p = ( (new ExtHostPseudoterminal(pty)));
        const disposable = this._setupExtHostProcessListeners(id, p);
        this._terminalProcessDisposables[id] = disposable;
    }
    async $acceptActiveTerminalChanged(id) {
        const original = this._activeTerminal;
        if (id === null) {
            this._activeTerminal = undefined;
            if (original !== this._activeTerminal) {
                this._onDidChangeActiveTerminal.fire(this._activeTerminal);
            }
            return;
        }
        const terminal = this.getTerminalById(id);
        if (terminal) {
            this._activeTerminal = terminal;
            if (original !== this._activeTerminal) {
                this._onDidChangeActiveTerminal.fire(this._activeTerminal.value);
            }
        }
    }
    async $acceptTerminalProcessData(id, data) {
        const terminal = this.getTerminalById(id);
        if (terminal) {
            this._onDidWriteTerminalData.fire({ terminal: terminal.value, data });
        }
    }
    async $acceptTerminalDimensions(id, cols, rows) {
        const terminal = this.getTerminalById(id);
        if (terminal) {
            if (terminal.setDimensions(cols, rows)) {
                this._onDidChangeTerminalDimensions.fire({
                    terminal: terminal.value,
                    dimensions: terminal.value.dimensions
                });
            }
        }
    }
    async $acceptDidExecuteCommand(id, command) {
        const terminal = this.getTerminalById(id);
        if (terminal) {
            this._onDidExecuteCommand.fire({ terminal: terminal.value, ...command });
        }
    }
    async $acceptTerminalMaximumDimensions(id, cols, rows) {
        this._terminalProcesses.get(id)?.resize(cols, rows);
    }
    async $acceptTerminalTitleChange(id, name) {
        const terminal = this.getTerminalById(id);
        if (terminal) {
            terminal.name = name;
        }
    }
    async $acceptTerminalClosed(id, exitCode, exitReason) {
        const index = this._getTerminalObjectIndexById(this._terminals, id);
        if (index !== null) {
            const terminal = this._terminals.splice(index, 1)[0];
            terminal.setExitStatus(exitCode, exitReason);
            this._onDidCloseTerminal.fire(terminal.value);
        }
    }
    $acceptTerminalOpened(id, extHostTerminalId, name, shellLaunchConfigDto) {
        if (extHostTerminalId) {
            const index = this._getTerminalObjectIndexById(this._terminals, extHostTerminalId);
            if (index !== null) {
                this._terminals[index]._id = id;
                this._onDidOpenTerminal.fire(this.terminals[index]);
                this._terminals[index].isOpen = true;
                return;
            }
        }
        const creationOptions = {
            name: shellLaunchConfigDto.name,
            shellPath: shellLaunchConfigDto.executable,
            shellArgs: shellLaunchConfigDto.args,
            cwd: typeof shellLaunchConfigDto.cwd === 'string' ? shellLaunchConfigDto.cwd : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.revive(shellLaunchConfigDto.cwd),
            env: shellLaunchConfigDto.env,
            hideFromUser: shellLaunchConfigDto.hideFromUser
        };
        const terminal = ( (new ExtHostTerminal(this._proxy, id, creationOptions, name)));
        this._terminals.push(terminal);
        this._onDidOpenTerminal.fire(terminal.value);
        terminal.isOpen = true;
    }
    async $acceptTerminalProcessId(id, processId) {
        const terminal = this.getTerminalById(id);
        terminal?._setProcessId(processId);
    }
    async $startExtensionTerminal(id, initialDimensions) {
        const terminal = this.getTerminalById(id);
        if (!terminal) {
            return { message: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_8__.localizeWithPath)(
                _moduleId,
                0,
                "Could not find the terminal with id {0} on the extension host",
                id
            )) };
        }
        if (!terminal.isOpen) {
            await ( (new Promise(r => {
                const listener = this.onDidOpenTerminal(async (e) => {
                    if (e === terminal.value) {
                        listener.dispose();
                        r();
                    }
                });
            })));
        }
        const terminalProcess = this._terminalProcesses.get(id);
        if (terminalProcess) {
            terminalProcess.startSendingEvents(initialDimensions);
        }
        else {
            this._extensionTerminalAwaitingStart[id] = { initialDimensions };
        }
        return undefined;
    }
    _setupExtHostProcessListeners(id, p) {
        const disposables = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.DisposableStore()));
        disposables.add(p.onProcessReady(e => this._proxy.$sendProcessReady(id, e.pid, e.cwd, e.windowsPty)));
        disposables.add(p.onDidChangeProperty(property => this._proxy.$sendProcessProperty(id, property)));
        this._bufferer.startBuffering(id, p.onProcessData);
        disposables.add(p.onProcessExit(exitCode => this._onProcessExit(id, exitCode)));
        this._terminalProcesses.set(id, p);
        const awaitingStart = this._extensionTerminalAwaitingStart[id];
        if (awaitingStart && p instanceof ExtHostPseudoterminal) {
            p.startSendingEvents(awaitingStart.initialDimensions);
            delete this._extensionTerminalAwaitingStart[id];
        }
        return disposables;
    }
    $acceptProcessAckDataEvent(id, charCount) {
        this._terminalProcesses.get(id)?.acknowledgeDataEvent(charCount);
    }
    $acceptProcessInput(id, data) {
        this._terminalProcesses.get(id)?.input(data);
    }
    $acceptTerminalInteraction(id) {
        const terminal = this.getTerminalById(id);
        if (terminal?.setInteractedWith()) {
            this._onDidChangeTerminalState.fire(terminal.value);
        }
    }
    $acceptTerminalSelection(id, selection) {
        this.getTerminalById(id)?.setSelection(selection);
    }
    $acceptProcessResize(id, cols, rows) {
        try {
            this._terminalProcesses.get(id)?.resize(cols, rows);
        }
        catch (error) {
            if (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {
                throw (error);
            }
        }
    }
    $acceptProcessShutdown(id, immediate) {
        this._terminalProcesses.get(id)?.shutdown(immediate);
    }
    $acceptProcessRequestInitialCwd(id) {
        this._terminalProcesses.get(id)?.getInitialCwd().then(initialCwd => this._proxy.$sendProcessProperty(id, { type: _platform_terminal_common_terminal_js__WEBPACK_IMPORTED_MODULE_13__.ProcessPropertyType.InitialCwd, value: initialCwd }));
    }
    $acceptProcessRequestCwd(id) {
        this._terminalProcesses.get(id)?.getCwd().then(cwd => this._proxy.$sendProcessProperty(id, { type: _platform_terminal_common_terminal_js__WEBPACK_IMPORTED_MODULE_13__.ProcessPropertyType.Cwd, value: cwd }));
    }
    $acceptProcessRequestLatency(id) {
        return Promise.resolve(id);
    }
    registerLinkProvider(provider) {
        this._linkProviders.add(provider);
        if (this._linkProviders.size === 1) {
            this._proxy.$startLinkProvider();
        }
        return (
             (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.Disposable(() => {
                this._linkProviders.delete(provider);
                if (this._linkProviders.size === 0) {
                    this._proxy.$stopLinkProvider();
                }
            }))
        );
    }
    registerProfileProvider(extension, id, provider) {
        if (( (this._profileProviders.has(id)))) {
            throw ( (new Error(`Terminal profile provider "${id}" already registered`)));
        }
        this._profileProviders.set(id, provider);
        this._proxy.$registerProfileProvider(id, extension.identifier.value);
        return (
             (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.Disposable(() => {
                this._profileProviders.delete(id);
                this._proxy.$unregisterProfileProvider(id);
            }))
        );
    }
    registerTerminalQuickFixProvider(id, extensionId, provider) {
        if (( (this._quickFixProviders.has(id)))) {
            throw ( (new Error(`Terminal quick fix provider "${id}" is already registered`)));
        }
        this._quickFixProviders.set(id, provider);
        this._proxy.$registerQuickFixProvider(id, extensionId);
        return (
             (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.Disposable(() => {
                this._quickFixProviders.delete(id);
                this._proxy.$unregisterQuickFixProvider(id);
            }))
        );
    }
    async $provideTerminalQuickFixes(id, matchResult) {
        const token = ( (new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_11__.CancellationTokenSource())).token;
        if (token.isCancellationRequested) {
            return;
        }
        const provider = this._quickFixProviders.get(id);
        if (!provider) {
            return;
        }
        const quickFixes = await provider.provideTerminalQuickFixes(matchResult, token);
        if (quickFixes === null || (Array.isArray(quickFixes) && quickFixes.length === 0)) {
            return undefined;
        }
        const store = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.DisposableStore()));
        this._lastQuickFixCommands.value = store;
        if (!Array.isArray(quickFixes)) {
            return quickFixes ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TerminalQuickFix.from(quickFixes, this._extHostCommands.converter, store) : undefined;
        }
        const result = [];
        for (const fix of quickFixes) {
            const converted = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_17__.TerminalQuickFix.from(fix, this._extHostCommands.converter, store);
            if (converted) {
                result.push(converted);
            }
        }
        return result;
    }
    async $createContributedProfileTerminal(id, options) {
        const token = ( (new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_11__.CancellationTokenSource())).token;
        let profile = await this._profileProviders.get(id)?.provideTerminalProfile(token);
        if (token.isCancellationRequested) {
            return;
        }
        if (profile && !('options' in profile)) {
            profile = { options: profile };
        }
        if (!profile || !('options' in profile)) {
            throw ( (new Error(`No terminal profile options provided for id "${id}"`)));
        }
        if ('pty' in profile.options) {
            this.createExtensionTerminal(profile.options, options);
            return;
        }
        this.createTerminalFromOptions(profile.options, options);
    }
    async $provideLinks(terminalId, line) {
        const terminal = this.getTerminalById(terminalId);
        if (!terminal) {
            return [];
        }
        this._terminalLinkCache.delete(terminalId);
        const oldToken = this._terminalLinkCancellationSource.get(terminalId);
        oldToken?.dispose(true);
        const cancellationSource = ( (new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_11__.CancellationTokenSource()));
        this._terminalLinkCancellationSource.set(terminalId, cancellationSource);
        const result = [];
        const context = { terminal: terminal.value, line };
        const promises = [];
        for (const provider of this._linkProviders) {
            promises.push(_base_common_async_js__WEBPACK_IMPORTED_MODULE_16__.Promises.withAsyncBody(async (r) => {
                cancellationSource.token.onCancellationRequested(() => r({ provider, links: [] }));
                const links = (await provider.provideTerminalLinks(context, cancellationSource.token)) || [];
                if (!cancellationSource.token.isCancellationRequested) {
                    r({ provider, links });
                }
            }));
        }
        const provideResults = await Promise.all(promises);
        if (cancellationSource.token.isCancellationRequested) {
            return [];
        }
        const cacheLinkMap = ( (new Map()));
        for (const provideResult of provideResults) {
            if (provideResult && provideResult.links.length > 0) {
                result.push(...( (provideResult.links.map(providerLink => {
                    const link = {
                        id: nextLinkId++,
                        startIndex: providerLink.startIndex,
                        length: providerLink.length,
                        label: providerLink.tooltip
                    };
                    cacheLinkMap.set(link.id, {
                        provider: provideResult.provider,
                        link: providerLink
                    });
                    return link;
                }))));
            }
        }
        this._terminalLinkCache.set(terminalId, cacheLinkMap);
        return result;
    }
    $activateLink(terminalId, linkId) {
        const cachedLink = this._terminalLinkCache.get(terminalId)?.get(linkId);
        if (!cachedLink) {
            return;
        }
        cachedLink.provider.handleTerminalLink(cachedLink.link);
    }
    _onProcessExit(id, exitCode) {
        this._bufferer.stopBuffering(id);
        this._terminalProcesses.delete(id);
        delete this._extensionTerminalAwaitingStart[id];
        const processDiposable = this._terminalProcessDisposables[id];
        if (processDiposable) {
            processDiposable.dispose();
            delete this._terminalProcessDisposables[id];
        }
        this._proxy.$sendProcessExit(id, exitCode);
    }
    getTerminalById(id) {
        return this._getTerminalObjectById(this._terminals, id);
    }
    getTerminalIdByApiObject(terminal) {
        const index = this._terminals.findIndex(item => {
            return item.value === terminal;
        });
        return index >= 0 ? index : null;
    }
    _getTerminalObjectById(array, id) {
        const index = this._getTerminalObjectIndexById(array, id);
        return index !== null ? array[index] : null;
    }
    _getTerminalObjectIndexById(array, id) {
        const index = array.findIndex(item => {
            return item._id === id;
        });
        return index >= 0 ? index : null;
    }
    getEnvironmentVariableCollection(extension) {
        let collection = this._environmentVariableCollections.get(extension.identifier.value);
        if (!collection) {
            collection = this._register(( (new UnifiedEnvironmentVariableCollection())));
            this._setEnvironmentVariableCollection(extension.identifier.value, collection);
        }
        return collection.getScopedEnvironmentVariableCollection(undefined);
    }
    _syncEnvironmentVariableCollection(extensionIdentifier, collection) {
        const serialized = (0,_platform_terminal_common_environmentVariableShared_js__WEBPACK_IMPORTED_MODULE_10__.serializeEnvironmentVariableCollection)(collection.map);
        const serializedDescription = (0,_platform_terminal_common_environmentVariableShared_js__WEBPACK_IMPORTED_MODULE_10__.serializeEnvironmentDescriptionMap)(collection.descriptionMap);
        this._proxy.$setEnvironmentVariableCollection(extensionIdentifier, collection.persistent, serialized.length === 0 ? undefined : serialized, serializedDescription);
    }
    $initEnvironmentVariableCollections(collections) {
        collections.forEach(entry => {
            const extensionIdentifier = entry[0];
            const collection = this._register(( (new UnifiedEnvironmentVariableCollection(entry[1]))));
            this._setEnvironmentVariableCollection(extensionIdentifier, collection);
        });
    }
    $acceptDefaultProfile(profile, automationProfile) {
        const oldProfile = this._defaultProfile;
        this._defaultProfile = profile;
        this._defaultAutomationProfile = automationProfile;
        if (oldProfile?.path !== profile.path) {
            this._onDidChangeShell.fire(profile.path);
        }
    }
    _setEnvironmentVariableCollection(extensionIdentifier, collection) {
        this._environmentVariableCollections.set(extensionIdentifier, collection);
        this._register(collection.onDidChangeCollection(() => {
            this._syncEnvironmentVariableCollection(extensionIdentifier, collection);
        }));
    }
};
BaseExtHostTerminalService = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_18__.IExtHostCommands))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__.IExtHostRpcService)))
], BaseExtHostTerminalService)));
class UnifiedEnvironmentVariableCollection extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.Disposable {
    get persistent() { return this._persistent; }
    set persistent(value) {
        this._persistent = value;
        this._onDidChangeCollection.fire();
    }
    get onDidChangeCollection() { return this._onDidChangeCollection && this._onDidChangeCollection.event; }
    constructor(serialized) {
        super();
        this.map = ( (new Map()));
        this.scopedCollections = ( (new Map()));
        this.descriptionMap = ( (new Map()));
        this._persistent = true;
        this._onDidChangeCollection = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.map = ( (new Map(serialized)));
    }
    getScopedEnvironmentVariableCollection(scope) {
        const scopedCollectionKey = this.getScopeKey(scope);
        let scopedCollection = this.scopedCollections.get(scopedCollectionKey);
        if (!scopedCollection) {
            scopedCollection = ( (new ScopedEnvironmentVariableCollection(this, scope)));
            this.scopedCollections.set(scopedCollectionKey, scopedCollection);
            this._register(scopedCollection.onDidChangeCollection(() => this._onDidChangeCollection.fire()));
        }
        return scopedCollection;
    }
    replace(variable, value, options, scope) {
        this._setIfDiffers(variable, { value, type: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.EnvironmentVariableMutatorType.Replace, options: options ?? { applyAtProcessCreation: true }, scope });
    }
    append(variable, value, options, scope) {
        this._setIfDiffers(variable, { value, type: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.EnvironmentVariableMutatorType.Append, options: options ?? { applyAtProcessCreation: true }, scope });
    }
    prepend(variable, value, options, scope) {
        this._setIfDiffers(variable, { value, type: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.EnvironmentVariableMutatorType.Prepend, options: options ?? { applyAtProcessCreation: true }, scope });
    }
    _setIfDiffers(variable, mutator) {
        if (mutator.options && mutator.options.applyAtProcessCreation === false && !mutator.options.applyAtShellIntegration) {
            throw ( (new Error(
                'EnvironmentVariableMutatorOptions must apply at either process creation or shell integration'
            )));
        }
        const key = this.getKey(variable, mutator.scope);
        const current = this.map.get(key);
        const newOptions = mutator.options ? {
            applyAtProcessCreation: mutator.options.applyAtProcessCreation ?? false,
            applyAtShellIntegration: mutator.options.applyAtShellIntegration ?? false,
        } : {
            applyAtProcessCreation: true
        };
        if (!current ||
            current.value !== mutator.value ||
            current.type !== mutator.type ||
            current.options?.applyAtProcessCreation !== newOptions.applyAtProcessCreation ||
            current.options?.applyAtShellIntegration !== newOptions.applyAtShellIntegration ||
            current.scope?.workspaceFolder?.index !== mutator.scope?.workspaceFolder?.index) {
            const key = this.getKey(variable, mutator.scope);
            const value = {
                variable,
                ...mutator,
                options: newOptions
            };
            this.map.set(key, value);
            this._onDidChangeCollection.fire();
        }
    }
    get(variable, scope) {
        const key = this.getKey(variable, scope);
        const value = this.map.get(key);
        return value ? convertMutator(value) : undefined;
    }
    getKey(variable, scope) {
        const scopeKey = this.getScopeKey(scope);
        return scopeKey.length ? `${variable}:::${scopeKey}` : variable;
    }
    getScopeKey(scope) {
        return this.getWorkspaceKey(scope?.workspaceFolder) ?? '';
    }
    getWorkspaceKey(workspaceFolder) {
        return workspaceFolder ? ( (workspaceFolder.uri.toString())) : undefined;
    }
    getVariableMap(scope) {
        const map = ( (new Map()));
        for (const [_, value] of this.map) {
            if (this.getScopeKey(value.scope) === this.getScopeKey(scope)) {
                map.set(value.variable, convertMutator(value));
            }
        }
        return map;
    }
    delete(variable, scope) {
        const key = this.getKey(variable, scope);
        this.map.delete(key);
        this._onDidChangeCollection.fire();
    }
    clear(scope) {
        if (scope?.workspaceFolder) {
            for (const [key, mutator] of this.map) {
                if (mutator.scope?.workspaceFolder?.index === scope.workspaceFolder.index) {
                    this.map.delete(key);
                }
            }
            this.clearDescription(scope);
        }
        else {
            this.map.clear();
            this.descriptionMap.clear();
        }
        this._onDidChangeCollection.fire();
    }
    setDescription(description, scope) {
        const key = this.getScopeKey(scope);
        const current = this.descriptionMap.get(key);
        if (!current || current.description !== description) {
            let descriptionStr;
            if (typeof description === 'string') {
                descriptionStr = description;
            }
            else {
                descriptionStr = description?.value.split('\n\n')[0];
            }
            const value = { description: descriptionStr, scope };
            this.descriptionMap.set(key, value);
            this._onDidChangeCollection.fire();
        }
    }
    getDescription(scope) {
        const key = this.getScopeKey(scope);
        return this.descriptionMap.get(key)?.description;
    }
    clearDescription(scope) {
        const key = this.getScopeKey(scope);
        this.descriptionMap.delete(key);
    }
}
class ScopedEnvironmentVariableCollection {
    get persistent() { return this.collection.persistent; }
    set persistent(value) {
        this.collection.persistent = value;
    }
    get onDidChangeCollection() { return this._onDidChangeCollection && this._onDidChangeCollection.event; }
    constructor(collection, scope) {
        this.collection = collection;
        this.scope = scope;
        this._onDidChangeCollection = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
    }
    getScoped(scope) {
        return this.collection.getScopedEnvironmentVariableCollection(scope);
    }
    replace(variable, value, options) {
        this.collection.replace(variable, value, options, this.scope);
    }
    append(variable, value, options) {
        this.collection.append(variable, value, options, this.scope);
    }
    prepend(variable, value, options) {
        this.collection.prepend(variable, value, options, this.scope);
    }
    get(variable) {
        return this.collection.get(variable, this.scope);
    }
    forEach(callback, thisArg) {
        this.collection.getVariableMap(this.scope).forEach((value, variable) => callback.call(thisArg, variable, value, this), this.scope);
    }
    [Symbol.iterator]() {
        return this.collection.getVariableMap(this.scope).entries();
    }
    delete(variable) {
        this.collection.delete(variable, this.scope);
        this._onDidChangeCollection.fire(undefined);
    }
    clear() {
        this.collection.clear(this.scope);
    }
    set description(description) {
        this.collection.setDescription(description, this.scope);
    }
    get description() {
        return this.collection.getDescription(this.scope);
    }
}
let WorkerExtHostTerminalService = class WorkerExtHostTerminalService extends BaseExtHostTerminalService {
    constructor(extHostCommands, extHostRpc) {
        super(false, extHostCommands, extHostRpc);
    }
    createTerminal(name, shellPath, shellArgs) {
        throw ( (new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_9__.NotSupportedError()));
    }
    createTerminalFromOptions(options, internalOptions) {
        throw ( (new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_9__.NotSupportedError()));
    }
};
WorkerExtHostTerminalService = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_18__.IExtHostCommands))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__.IExtHostRpcService)))
], WorkerExtHostTerminalService)));
function asTerminalIcon(iconPath) {
    if (!iconPath || typeof iconPath === 'string') {
        return undefined;
    }
    if (!('id' in iconPath)) {
        return iconPath;
    }
    return {
        id: iconPath.id,
        color: iconPath.color
    };
}
function asTerminalColor(color) {
    return _base_common_themables_js__WEBPACK_IMPORTED_MODULE_15__.ThemeColor.isThemeColor(color) ? color : undefined;
}
function convertMutator(mutator) {
    const newMutator = { ...mutator };
    delete newMutator.scope;
    newMutator.options = newMutator.options ?? undefined;
    delete newMutator.variable;
    return newMutator;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalShellIntegration.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalShellIntegration.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTerminalShellIntegration: () => (/* binding */ ExtHostTerminalShellIntegration),
/* harmony export */   IExtHostTerminalShellIntegration: () => (/* binding */ IExtHostTerminalShellIntegration)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostTerminalService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTerminalService.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");










const IExtHostTerminalShellIntegration = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_3__.createDecorator)('IExtHostTerminalShellIntegration'));
let ExtHostTerminalShellIntegration = class ExtHostTerminalShellIntegration extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor(extHostRpc, _extHostTerminalService) {
        super();
        this._extHostTerminalService = _extHostTerminalService;
        this._activeShellIntegrations = ( new Map());
        this._onDidChangeTerminalShellIntegration = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.Emitter());
        this.onDidChangeTerminalShellIntegration = this._onDidChangeTerminalShellIntegration.event;
        this._onDidStartTerminalShellExecution = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.Emitter());
        this.onDidStartTerminalShellExecution = this._onDidStartTerminalShellExecution.event;
        this._onDidEndTerminalShellExecution = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.Emitter());
        this.onDidEndTerminalShellExecution = this._onDidEndTerminalShellExecution.event;
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__.MainContext.MainThreadTerminalShellIntegration));
        this._register((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {
            for (const [_, integration] of this._activeShellIntegrations) {
                integration.dispose();
            }
            this._activeShellIntegrations.clear();
        }));
    }
    $shellIntegrationChange(instanceId) {
        const terminal = this._extHostTerminalService.getTerminalById(instanceId);
        if (!terminal) {
            return;
        }
        const apiTerminal = terminal.value;
        let shellIntegration = this._activeShellIntegrations.get(instanceId);
        if (!shellIntegration) {
            shellIntegration = ( new InternalTerminalShellIntegration(terminal.value, this._onDidStartTerminalShellExecution));
            this._activeShellIntegrations.set(instanceId, shellIntegration);
            shellIntegration.store.add(terminal.onWillDispose(() => this._activeShellIntegrations.get(instanceId)?.dispose()));
            shellIntegration.store.add(shellIntegration.onDidRequestShellExecution(commandLine => this._proxy.$executeCommand(instanceId, commandLine)));
            shellIntegration.store.add(shellIntegration.onDidRequestEndExecution(e => this._onDidEndTerminalShellExecution.fire(e)));
            shellIntegration.store.add(shellIntegration.onDidRequestChangeShellIntegration(e => this._onDidChangeTerminalShellIntegration.fire(e)));
            terminal.shellIntegration = shellIntegration.value;
        }
        this._onDidChangeTerminalShellIntegration.fire({
            terminal: apiTerminal,
            shellIntegration: shellIntegration.value
        });
    }
    $shellExecutionStart(instanceId, commandLineValue, commandLineConfidence, isTrusted, cwd) {
        if (!( this._activeShellIntegrations.has(instanceId))) {
            this.$shellIntegrationChange(instanceId);
        }
        const commandLine = {
            value: commandLineValue,
            confidence: commandLineConfidence,
            isTrusted
        };
        this._activeShellIntegrations.get(instanceId)?.startShellExecution(commandLine, cwd);
    }
    $shellExecutionEnd(instanceId, commandLineValue, commandLineConfidence, isTrusted, exitCode) {
        const commandLine = {
            value: commandLineValue,
            confidence: commandLineConfidence,
            isTrusted
        };
        this._activeShellIntegrations.get(instanceId)?.endShellExecution(commandLine, exitCode);
    }
    $shellExecutionData(instanceId, data) {
        this._activeShellIntegrations.get(instanceId)?.emitData(data);
    }
    $cwdChange(instanceId, cwd) {
        this._activeShellIntegrations.get(instanceId)?.setCwd((0,_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.isUriComponents)(cwd) ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.revive(cwd) : cwd);
    }
    $closeTerminal(instanceId) {
        this._activeShellIntegrations.get(instanceId)?.dispose();
        this._activeShellIntegrations.delete(instanceId);
    }
};
ExtHostTerminalShellIntegration = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_5__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostTerminalService_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostTerminalService))
], ExtHostTerminalShellIntegration));
class InternalTerminalShellIntegration extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    get currentExecution() { return this._currentExecution; }
    constructor(_terminal, _onDidStartTerminalShellExecution) {
        super();
        this._terminal = _terminal;
        this._onDidStartTerminalShellExecution = _onDidStartTerminalShellExecution;
        this._ignoreNextExecution = false;
        this.store = this._register(( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.DisposableStore()));
        this._onDidRequestChangeShellIntegration = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.Emitter()));
        this.onDidRequestChangeShellIntegration = this._onDidRequestChangeShellIntegration.event;
        this._onDidRequestShellExecution = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.Emitter()));
        this.onDidRequestShellExecution = this._onDidRequestShellExecution.event;
        this._onDidRequestEndExecution = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_7__.Emitter()));
        this.onDidRequestEndExecution = this._onDidRequestEndExecution.event;
        const that = this;
        this.value = {
            get cwd() {
                return that._cwd;
            },
            executeCommand(commandLineOrExecutable, args) {
                let commandLineValue = commandLineOrExecutable;
                if (args) {
                    commandLineValue += ` "${( args.map(e => `${e.replaceAll('"', '\\"')}`)).join('" "')}"`;
                }
                that._onDidRequestShellExecution.fire(commandLineValue);
                const commandLine = {
                    value: commandLineValue,
                    confidence: _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.TerminalShellExecutionCommandLineConfidence.High,
                    isTrusted: true
                };
                const execution = that.startShellExecution(commandLine, that._cwd, true).value;
                that._ignoreNextExecution = true;
                return execution;
            }
        };
    }
    startShellExecution(commandLine, cwd, fireEventInMicrotask) {
        if (this._ignoreNextExecution && this._currentExecution) {
            this._ignoreNextExecution = false;
        }
        else {
            if (this._currentExecution) {
                this._currentExecution.endExecution(undefined);
                this._onDidRequestEndExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value, exitCode: undefined });
            }
            const currentExecution = this._currentExecution = ( new InternalTerminalShellExecution(commandLine, cwd));
            if (fireEventInMicrotask) {
                queueMicrotask(() => this._onDidStartTerminalShellExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: currentExecution.value }));
            }
            else {
                this._onDidStartTerminalShellExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value });
            }
        }
        return this._currentExecution;
    }
    emitData(data) {
        this.currentExecution?.emitData(data);
    }
    endShellExecution(commandLine, exitCode) {
        if (this._currentExecution) {
            this._currentExecution.endExecution(commandLine);
            this._onDidRequestEndExecution.fire({ terminal: this._terminal, shellIntegration: this.value, execution: this._currentExecution.value, exitCode });
            this._currentExecution = undefined;
        }
    }
    setCwd(cwd) {
        let wasChanged = false;
        if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(this._cwd)) {
            wasChanged = !_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(cwd) || ( this._cwd.toString()) !== ( cwd.toString());
        }
        else if (this._cwd !== cwd) {
            wasChanged = true;
        }
        if (wasChanged) {
            this._cwd = cwd;
            this._onDidRequestChangeShellIntegration.fire({ terminal: this._terminal, shellIntegration: this.value });
        }
    }
}
class InternalTerminalShellExecution {
    constructor(_commandLine, cwd) {
        this._commandLine = _commandLine;
        this.cwd = cwd;
        this._ended = false;
        const that = this;
        this.value = {
            get commandLine() {
                return that._commandLine;
            },
            get cwd() {
                return that.cwd;
            },
            read() {
                return that._createDataStream();
            }
        };
    }
    _createDataStream() {
        if (!this._dataStream) {
            if (this._ended) {
                return _base_common_async_js__WEBPACK_IMPORTED_MODULE_9__.AsyncIterableObject.EMPTY;
            }
            this._dataStream = ( new ShellExecutionDataStream());
        }
        return this._dataStream.createIterable();
    }
    emitData(data) {
        this._dataStream?.emitData(data);
    }
    endExecution(commandLine) {
        if (commandLine) {
            this._commandLine = commandLine;
        }
        this._dataStream?.endExecution();
        this._dataStream = undefined;
        this._ended = true;
    }
}
class ShellExecutionDataStream extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor() {
        super(...arguments);
        this._emitters = [];
    }
    createIterable() {
        if (!this._barrier) {
            this._barrier = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_9__.Barrier());
        }
        const barrier = this._barrier;
        const iterable = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_9__.AsyncIterableObject(async (emitter) => {
            this._emitters.push(emitter);
            await barrier.wait();
        }));
        return iterable;
    }
    emitData(data) {
        for (const emitter of this._emitters) {
            emitter.emitOne(data);
        }
    }
    endExecution() {
        this._barrier?.open();
        this._barrier = undefined;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestItem.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestItem.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTestItemCollection: () => (/* binding */ ExtHostTestItemCollection),
/* harmony export */   TestItemImpl: () => (/* binding */ TestItemImpl),
/* harmony export */   TestItemRootImpl: () => (/* binding */ TestItemRootImpl),
/* harmony export */   toItemFromContext: () => (/* binding */ toItemFromContext)
/* harmony export */ });
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _extHostTestingPrivateApi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTestingPrivateApi.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestingPrivateApi.js");
/* harmony import */ var _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../contrib/testing/common/testId.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testId.js");
/* harmony import */ var _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../contrib/testing/common/testItemCollection.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testItemCollection.js");
/* harmony import */ var _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../contrib/testing/common/testTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testTypes.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");







const testItemPropAccessor = (api, defaultValue, equals, toUpdate) => {
    let value = defaultValue;
    return {
        enumerable: true,
        configurable: false,
        get() {
            return value;
        },
        set(newValue) {
            if (!equals(value, newValue)) {
                const oldValue = value;
                value = newValue;
                api.listener?.(toUpdate(newValue, oldValue));
            }
        },
    };
};
const strictEqualComparator = (a, b) => a === b;
const propComparators = {
    range: (a, b) => {
        if (a === b) {
            return true;
        }
        if (!a || !b) {
            return false;
        }
        return a.isEqual(b);
    },
    label: strictEqualComparator,
    description: strictEqualComparator,
    sortText: strictEqualComparator,
    busy: strictEqualComparator,
    error: strictEqualComparator,
    canResolveChildren: strictEqualComparator,
    tags: (a, b) => {
        if (a.length !== b.length) {
            return false;
        }
        if (( a.some(t1 => !b.find(t2 => t1.id === t2.id)))) {
            return false;
        }
        return true;
    },
};
const evSetProps = (fn) => v => ({ op: _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_3__.TestItemEventOp.SetProp, update: fn(v) });
const makePropDescriptors = (api, label) => ({
    range: (() => {
        let value;
        const updateProps = evSetProps(r => ({ range: _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_0__.Range.lift(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Range.from(r)) }));
        return {
            enumerable: true,
            configurable: false,
            get() {
                return value;
            },
            set(newValue) {
                api.listener?.({ op: _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_3__.TestItemEventOp.DocumentSynced });
                if (!propComparators.range(value, newValue)) {
                    value = newValue;
                    api.listener?.(updateProps(newValue));
                }
            },
        };
    })(),
    label: testItemPropAccessor(api, label, propComparators.label, evSetProps(label => ({ label }))),
    description: testItemPropAccessor(api, undefined, propComparators.description, evSetProps(description => ({ description }))),
    sortText: testItemPropAccessor(api, undefined, propComparators.sortText, evSetProps(sortText => ({ sortText }))),
    canResolveChildren: testItemPropAccessor(api, false, propComparators.canResolveChildren, state => ({
        op: _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_3__.TestItemEventOp.UpdateCanResolveChildren,
        state,
    })),
    busy: testItemPropAccessor(api, false, propComparators.busy, evSetProps(busy => ({ busy }))),
    error: testItemPropAccessor(api, undefined, propComparators.error, evSetProps(error => ({ error: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.MarkdownString.fromStrict(error) || null }))),
    tags: testItemPropAccessor(api, [], propComparators.tags, (current, previous) => ({
        op: _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_3__.TestItemEventOp.SetTags,
        new: ( current.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.TestTag.from)),
        old: ( previous.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.TestTag.from)),
    })),
});
const toItemFromPlain = (item) => {
    const testId = _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_2__.TestId.fromString(item.extId);
    const testItem = ( new TestItemImpl(
        testId.controllerId,
        testId.localId,
        item.label,
        _base_common_uri_js__WEBPACK_IMPORTED_MODULE_6__.URI.revive(item.uri) || undefined
    ));
    testItem.range = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Range.to(item.range || undefined);
    testItem.description = item.description || undefined;
    testItem.sortText = item.sortText || undefined;
    testItem.tags = ( item.tags.map(t => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.TestTag.to({ id: (0,_contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_4__.denamespaceTestTag)(t).tagId })));
    return testItem;
};
const toItemFromContext = (context) => {
    let node;
    for (const test of context.tests) {
        const next = toItemFromPlain(test.item);
        (0,_extHostTestingPrivateApi_js__WEBPACK_IMPORTED_MODULE_1__.getPrivateApiFor)(next).parent = node;
        node = next;
    }
    return node;
};
class TestItemImpl {
    constructor(controllerId, id, label, uri) {
        if (id.includes(_contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_2__.TestIdPathParts.Delimiter)) {
            throw ( new Error(`Test IDs may not include the ${JSON.stringify(id)} symbol`));
        }
        const api = (0,_extHostTestingPrivateApi_js__WEBPACK_IMPORTED_MODULE_1__.createPrivateApiFor)(this, controllerId);
        Object.defineProperties(this, {
            id: {
                value: id,
                enumerable: true,
                writable: false,
            },
            uri: {
                value: uri,
                enumerable: true,
                writable: false,
            },
            parent: {
                enumerable: false,
                get() {
                    return api.parent instanceof TestItemRootImpl ? undefined : api.parent;
                },
            },
            children: {
                value: (0,_contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_3__.createTestItemChildren)(api, _extHostTestingPrivateApi_js__WEBPACK_IMPORTED_MODULE_1__.getPrivateApiFor, TestItemImpl),
                enumerable: true,
                writable: false,
            },
            ...makePropDescriptors(api, label),
        });
    }
}
class TestItemRootImpl extends TestItemImpl {
    constructor(controllerId, label) {
        super(controllerId, controllerId, label, undefined);
        this._isRoot = true;
    }
}
class ExtHostTestItemCollection extends _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_3__.TestItemCollection {
    constructor(controllerId, controllerLabel, editors) {
        super({
            controllerId,
            getDocumentVersion: uri => uri && editors.getDocument(uri)?.version,
            getApiFor: _extHostTestingPrivateApi_js__WEBPACK_IMPORTED_MODULE_1__.getPrivateApiFor,
            getChildren: (item) => item.children,
            root: ( new TestItemRootImpl(controllerId, controllerLabel)),
            toITestItem: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.TestItem.from,
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTesting.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTesting.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTesting: () => (/* binding */ ExtHostTesting),
/* harmony export */   IExtHostTesting: () => (/* binding */ IExtHostTesting),
/* harmony export */   TestRunCoordinator: () => (/* binding */ TestRunCoordinator),
/* harmony export */   TestRunDto: () => (/* binding */ TestRunDto),
/* harmony export */   TestRunProfileImpl: () => (/* binding */ TestRunProfileImpl)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_functional_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/functional.js */ "./node_modules/vscode/vscode/src/vs/base/common/functional.js");
/* harmony import */ var _base_common_hash_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/hash.js */ "./node_modules/vscode/vscode/src/vs/base/common/hash.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uuid_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../base/common/uuid.js */ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostCommands_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./extHostCommands.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostCommands.js");
/* harmony import */ var _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./extHostDocumentsAndEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentsAndEditors.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTestItem_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostTestItem.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestItem.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _contrib_testing_common_constants_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../contrib/testing/common/constants.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/constants.js");
/* harmony import */ var _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../contrib/testing/common/testId.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testId.js");
/* harmony import */ var _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../../contrib/testing/common/testItemCollection.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testItemCollection.js");
/* harmony import */ var _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../contrib/testing/common/testTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testTypes.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");

























let followupCounter = 0;
const testResultInternalIDs = ( new WeakMap());
const IExtHostTesting = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_11__.createDecorator)('IExtHostTesting'));
let ExtHostTesting = class ExtHostTesting extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.Disposable {
    constructor(rpc, logService, commands, editors) {
        super();
        this.logService = logService;
        this.commands = commands;
        this.editors = editors;
        this.resultsChangedEmitter = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter()));
        this.controllers = ( new Map());
        this.defaultProfilesChangedEmitter = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter()));
        this.followupProviders = ( new Set());
        this.testFollowups = ( new Map());
        this.onResultsChanged = this.resultsChangedEmitter.event;
        this.results = [];
        this.proxy = ( rpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_13__.MainContext.MainThreadTesting));
        this.observer = ( new TestObservers(this.proxy));
        this.runTracker = ( new TestRunCoordinator(this.proxy, logService));
        commands.registerArgumentProcessor({
            processArgument: arg => {
                switch (arg?.$mid) {
                    case _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_8__.MarshalledId.TestItemContext: {
                        const cast = arg;
                        const targetTest = cast.tests[cast.tests.length - 1].item.extId;
                        const controller = this.controllers.get(_contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.root(targetTest));
                        return controller?.collection.tree.get(targetTest)?.actual ?? (0,_extHostTestItem_js__WEBPACK_IMPORTED_MODULE_17__.toItemFromContext)(arg);
                    }
                    case _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_8__.MarshalledId.TestMessageMenuArgs: {
                        const { test, message } = arg;
                        const extId = test.item.extId;
                        return {
                            test: this.controllers.get(_contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.root(extId))?.collection.tree.get(extId)?.actual
                                ?? (0,_extHostTestItem_js__WEBPACK_IMPORTED_MODULE_17__.toItemFromContext)({ $mid: _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_8__.MarshalledId.TestItemContext, tests: [test] }),
                            message: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestMessage.to(message),
                        };
                    }
                    default: return arg;
                }
            }
        });
        commands.registerCommand(false, 'testing.getExplorerSelection', async () => {
            const inner = await commands.executeCommand(_contrib_testing_common_constants_js__WEBPACK_IMPORTED_MODULE_20__.TestCommandId.GetExplorerSelection);
            const lookup = (i) => {
                const controller = this.controllers.get(_contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.root(i));
                if (!controller) {
                    return undefined;
                }
                return _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.isRoot(i) ? controller.controller : controller.collection.tree.get(i)?.actual;
            };
            return {
                include: inner?.include.map(lookup).filter(_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isDefined) || [],
                exclude: inner?.exclude.map(lookup).filter(_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isDefined) || [],
            };
        });
    }
    createTestController(extension, controllerId, label, refreshHandler) {
        if (( this.controllers.has(controllerId))) {
            throw ( new Error(`Attempt to insert a duplicate controller with ID "${controllerId}"`));
        }
        const disposable = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.DisposableStore());
        const collection = disposable.add(( new _extHostTestItem_js__WEBPACK_IMPORTED_MODULE_17__.ExtHostTestItemCollection(controllerId, label, this.editors)));
        collection.root.label = label;
        const profiles = ( new Map());
        const activeProfiles = ( new Set());
        const proxy = this.proxy;
        const controller = {
            items: collection.root.children,
            get label() {
                return label;
            },
            set label(value) {
                label = value;
                collection.root.label = value;
                proxy.$updateController(controllerId, { label });
            },
            get refreshHandler() {
                return refreshHandler;
            },
            set refreshHandler(value) {
                refreshHandler = value;
                proxy.$updateController(controllerId, { canRefresh: !!value });
            },
            get id() {
                return controllerId;
            },
            createRunProfile: (label, group, runHandler, isDefault, tag, supportsContinuousRun) => {
                let profileId = (0,_base_common_hash_js__WEBPACK_IMPORTED_MODULE_6__.hash)(label);
                while (( profiles.has(profileId))) {
                    profileId++;
                }
                return ( new TestRunProfileImpl(
                    this.proxy,
                    profiles,
                    activeProfiles,
                    this.defaultProfilesChangedEmitter.event,
                    controllerId,
                    profileId,
                    label,
                    group,
                    runHandler,
                    isDefault,
                    tag,
                    supportsContinuousRun
                ));
            },
            createTestItem(id, label, uri) {
                return ( new _extHostTestItem_js__WEBPACK_IMPORTED_MODULE_17__.TestItemImpl(controllerId, id, label, uri));
            },
            createTestRun: (request, name, persist = true) => {
                return this.runTracker.createTestRun(extension, controllerId, collection, request, name, persist);
            },
            invalidateTestResults: items => {
                if (items === undefined) {
                    this.proxy.$markTestRetired(undefined);
                }
                else {
                    const itemsArr = items instanceof Array ? items : [items];
                    this.proxy.$markTestRetired(( itemsArr.map(i => ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(i, controllerId).toString()))));
                }
            },
            set resolveHandler(fn) {
                collection.resolveHandler = fn;
            },
            get resolveHandler() {
                return collection.resolveHandler;
            },
            dispose: () => {
                disposable.dispose();
            },
        };
        proxy.$registerTestController(controllerId, label, !!refreshHandler);
        disposable.add((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.toDisposable)(() => proxy.$unregisterTestController(controllerId)));
        const info = { controller, collection, profiles, extension, activeProfiles };
        this.controllers.set(controllerId, info);
        disposable.add((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.toDisposable)(() => this.controllers.delete(controllerId)));
        disposable.add(collection.onDidGenerateDiff(diff => proxy.$publishDiff(controllerId, ( diff.map(_contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestsDiffOp.serialize)))));
        return controller;
    }
    createTestObserver() {
        return this.observer.checkout();
    }
    async runTests(req, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationToken.None) {
        const profile = tryGetProfileFromTestRunReq(req);
        if (!profile) {
            throw ( new Error('The request passed to `vscode.test.runTests` must include a profile'));
        }
        const controller = this.controllers.get(profile.controllerId);
        if (!controller) {
            throw ( new Error('Controller not found'));
        }
        await this.proxy.$runTests({
            preserveFocus: req.preserveFocus ?? true,
            group: profileGroupToBitset[profile.kind],
            targets: [{
                    testIds: req.include?.map(t => ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(t, controller.collection.root.id).toString())) ?? [controller.collection.root.id],
                    profileId: profile.profileId,
                    controllerId: profile.controllerId,
                }],
            exclude: req.exclude?.map(t => t.id),
        }, token);
    }
    registerTestFollowupProvider(provider) {
        this.followupProviders.add(provider);
        return { dispose: () => { this.followupProviders.delete(provider); } };
    }
    $syncTests() {
        for (const { collection } of ( this.controllers.values())) {
            collection.flushDiff();
        }
        return Promise.resolve();
    }
    async $getCoverageDetails(coverageId, testId, token) {
        const details = await this.runTracker.getCoverageDetails(coverageId, testId, token);
        return details?.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestCoverage.fromDetails);
    }
    async $disposeRun(runId) {
        this.runTracker.disposeTestRun(runId);
    }
    $configureRunProfile(controllerId, profileId) {
        this.controllers.get(controllerId)?.profiles.get(profileId)?.configureHandler?.();
    }
    $setDefaultRunProfiles(profiles) {
        const evt = ( new Map());
        for (const [controllerId, profileIds] of Object.entries(profiles)) {
            const ctrl = this.controllers.get(controllerId);
            if (!ctrl) {
                continue;
            }
            const changes = ( new Map());
            const added = profileIds.filter(id => !( ctrl.activeProfiles.has(id)));
            const removed = [...ctrl.activeProfiles].filter(id => !profileIds.includes(id));
            for (const id of added) {
                changes.set(id, true);
                ctrl.activeProfiles.add(id);
            }
            for (const id of removed) {
                changes.set(id, false);
                ctrl.activeProfiles.delete(id);
            }
            if (changes.size) {
                evt.set(controllerId, changes);
            }
        }
        this.defaultProfilesChangedEmitter.fire(evt);
    }
    async $refreshTests(controllerId, token) {
        await this.controllers.get(controllerId)?.controller.refreshHandler?.(token);
    }
    $publishTestResults(results) {
        this.results = ( Object.freeze(( results
            .map(r => {
            const o = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestResults.to(r);
            testResultInternalIDs.set(o, r.id);
            return o;
        }))
            .concat(this.results)
            .sort((a, b) => b.completedAt - a.completedAt)
            .slice(0, 32)));
        this.resultsChangedEmitter.fire();
    }
    async $expandTest(testId, levels) {
        const collection = this.controllers.get(_contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromString(testId).controllerId)?.collection;
        if (collection) {
            await collection.expand(testId, levels < 0 ? Infinity : levels);
            collection.flushDiff();
        }
    }
    $acceptDiff(diff) {
        this.observer.applyDiff(( diff.map(d => _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestsDiffOp.deserialize({ asCanonicalUri: u => u }, d))));
    }
    async $runControllerTests(reqs, token) {
        return Promise.all(( reqs.map(req => this.runControllerTestRequest(req, false, token))));
    }
    async $startContinuousRun(reqs, token) {
        const cts = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationTokenSource(token));
        const res = await Promise.all(( reqs.map(req => this.runControllerTestRequest(req, true, cts.token))));
        if (!token.isCancellationRequested && !( res.some(r => r.error))) {
            await ( new Promise(r => token.onCancellationRequested(r)));
        }
        cts.dispose(true);
        return res;
    }
    async $provideTestFollowups(req, token) {
        const results = this.results.find(r => testResultInternalIDs.get(r) === req.resultId);
        const test = results && findTestInResultSnapshot(_contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromString(req.extId), results?.results);
        if (!test) {
            return [];
        }
        let followups = [];
        await Promise.all(( [...this.followupProviders].map(async (provider) => {
            try {
                const r = await provider.provideFollowup(results, test, req.taskIndex, req.messageIndex, token);
                if (r) {
                    followups = followups.concat(r);
                }
            }
            catch (e) {
                this.logService.error(`Error thrown while providing followup for test message`, e);
            }
        })));
        if (token.isCancellationRequested) {
            return [];
        }
        return ( followups.map(command => {
            const id = followupCounter++;
            this.testFollowups.set(id, command);
            return { title: command.title, id };
        }));
    }
    $disposeTestFollowups(id) {
        for (const i of id) {
            this.testFollowups.delete(i);
        }
    }
    $executeTestFollowup(id) {
        const command = this.testFollowups.get(id);
        if (!command) {
            return Promise.resolve();
        }
        return this.commands.executeCommand(command.command, ...(command.arguments || []));
    }
    $cancelExtensionTestRun(runId) {
        if (runId === undefined) {
            this.runTracker.cancelAllRuns();
        }
        else {
            this.runTracker.cancelRunById(runId);
        }
    }
    getMetadataForRun(run) {
        for (const tracker of this.runTracker.trackers) {
            const taskId = tracker.getTaskIdForRun(run);
            if (taskId) {
                return { taskId, runId: tracker.id };
            }
        }
        return undefined;
    }
    async runControllerTestRequest(req, isContinuous, token) {
        const lookup = this.controllers.get(req.controllerId);
        if (!lookup) {
            return {};
        }
        const { collection, profiles, extension } = lookup;
        const profile = profiles.get(req.profileId);
        if (!profile) {
            return {};
        }
        const includeTests = ( req.testIds
            .map((testId) => collection.tree.get(testId)))
            .filter(_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isDefined);
        const excludeTests = ( req.excludeExtIds
            .map(id => lookup.collection.tree.get(id)))
            .filter(_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isDefined)
            .filter(exclude => ( includeTests.some(include => include.fullId.compare(exclude.fullId) === _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestPosition.IsChild)));
        if (!includeTests.length) {
            return {};
        }
        const publicReq = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_19__.TestRunRequest(( includeTests.some(i => i.actual instanceof _extHostTestItem_js__WEBPACK_IMPORTED_MODULE_17__.TestItemRootImpl)) ? undefined : ( includeTests.map(t => t.actual)), ( excludeTests.map(t => t.actual)), profile, isContinuous));
        const tracker = (0,_contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.isStartControllerTests)(req) && this.runTracker.prepareForMainThreadTestRun(extension, publicReq, TestRunDto.fromInternal(req, lookup.collection), profile, token);
        try {
            await profile.runHandler(publicReq, token);
            return {};
        }
        catch (e) {
            return { error: String(e) };
        }
        finally {
            if (tracker) {
                if (tracker.hasRunningTasks && !token.isCancellationRequested) {
                    await _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Event.toPromise(tracker.onEnd);
                }
            }
        }
    }
};
ExtHostTesting = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_16__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_12__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostCommands_js__WEBPACK_IMPORTED_MODULE_14__.IExtHostCommands)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_15__.IExtHostDocumentsAndEditors))
], ExtHostTesting));
const RUN_CANCEL_DEADLINE = 10_000;
var TestRunTrackerState;
( (function(TestRunTrackerState) {
    TestRunTrackerState[TestRunTrackerState["Running"] = 0] = "Running";
    TestRunTrackerState[TestRunTrackerState["Cancelling"] = 1] = "Cancelling";
    TestRunTrackerState[TestRunTrackerState["Ended"] = 2] = "Ended";
})(TestRunTrackerState || (TestRunTrackerState = {})));
class TestRunTracker extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.Disposable {
    get hasRunningTasks() {
        return this.running > 0;
    }
    get id() {
        return this.dto.id;
    }
    constructor(dto, proxy, logService, profile, extension, parentToken) {
        super();
        this.dto = dto;
        this.proxy = proxy;
        this.logService = logService;
        this.profile = profile;
        this.extension = extension;
        this.state = TestRunTrackerState.Running;
        this.running = 0;
        this.tasks = ( new Map());
        this.sharedTestIds = ( new Set());
        this.endEmitter = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter()));
        this.publishedCoverage = ( new Map());
        this.onEnd = this.endEmitter.event;
        this.cts = this._register(( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationTokenSource(parentToken)));
        const forciblyEnd = this._register(( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.RunOnceScheduler(() => this.forciblyEndTasks(), RUN_CANCEL_DEADLINE)));
        this._register(this.cts.token.onCancellationRequested(() => forciblyEnd.schedule()));
        const didDisposeEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        this.onDidDispose = didDisposeEmitter.event;
        this._register((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_7__.toDisposable)(() => {
            didDisposeEmitter.fire();
            didDisposeEmitter.dispose();
        }));
    }
    getTaskIdForRun(run) {
        for (const [taskId, { run: r }] of this.tasks) {
            if (r === run) {
                return taskId;
            }
        }
        return undefined;
    }
    cancel() {
        if (this.state === TestRunTrackerState.Running) {
            this.cts.cancel();
            this.state = TestRunTrackerState.Cancelling;
        }
        else if (this.state === TestRunTrackerState.Cancelling) {
            this.forciblyEndTasks();
        }
    }
    async getCoverageDetails(id, testId, token) {
        const [, taskId] = _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromString(id).path;
        const coverage = this.publishedCoverage.get(id);
        if (!coverage) {
            return [];
        }
        const { report, extIds } = coverage;
        const task = this.tasks.get(taskId);
        if (!task) {
            throw ( new Error('unreachable: run task was not found'));
        }
        let testItem;
        if (testId && report instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_19__.FileCoverage) {
            const index = extIds.indexOf(testId);
            if (index === -1) {
                return [];
            }
            testItem = report.fromTests[index];
        }
        const details = testItem
            ? this.profile?.loadDetailedCoverageForTest?.(task.run, report, testItem, token)
            : this.profile?.loadDetailedCoverage?.(task.run, report, token);
        return (await details) ?? [];
    }
    createRun(name) {
        const runId = this.dto.id;
        const ctrlId = this.dto.controllerId;
        const taskId = (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_10__.generateUuid)();
        const guardTestMutation = (fn) => (test, ...args) => {
            if (ended) {
                this.logService.warn(`Setting the state of test "${test.id}" is a no-op after the run ends.`);
                return;
            }
            this.ensureTestIsKnown(test);
            fn(test, ...args);
        };
        const appendMessages = (test, messages) => {
            const converted = messages instanceof Array
                ? ( messages.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestMessage.from))
                : [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestMessage.from(messages)];
            if (test.uri && test.range) {
                const defaultLocation = { range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.Range.from(test.range), uri: test.uri };
                for (const message of converted) {
                    message.location = message.location || defaultLocation;
                }
            }
            this.proxy.$appendTestMessagesInRun(runId, taskId, ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, ctrlId).toString()), converted);
        };
        let ended = false;
        const run = {
            isPersisted: this.dto.isPersisted,
            token: this.cts.token,
            name,
            onDidDispose: this.onDidDispose,
            addCoverage: (coverage) => {
                if (ended) {
                    return;
                }
                const fromTests = coverage instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_19__.FileCoverage ? coverage.fromTests : [];
                if (fromTests.length) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_24__.checkProposedApiEnabled)(this.extension, 'attributableCoverage');
                    for (const test of fromTests) {
                        this.ensureTestIsKnown(test);
                    }
                }
                const uriStr = ( coverage.uri.toString());
                const id = ( ( new _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId([runId, taskId, uriStr])).toString());
                this.publishedCoverage.set(id, { report: coverage, extIds: ( fromTests.map(t => ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(t, ctrlId).toString()))) });
                this.proxy.$appendCoverage(runId, taskId, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestCoverage.fromFile(ctrlId, id, coverage));
            },
            enqueued: guardTestMutation(test => {
                this.proxy.$updateTestStateInRun(runId, taskId, ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, ctrlId).toString()), _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestResultState.Queued);
            }),
            skipped: guardTestMutation(test => {
                this.proxy.$updateTestStateInRun(runId, taskId, ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, ctrlId).toString()), _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestResultState.Skipped);
            }),
            started: guardTestMutation(test => {
                this.proxy.$updateTestStateInRun(runId, taskId, ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, ctrlId).toString()), _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestResultState.Running);
            }),
            errored: guardTestMutation((test, messages, duration) => {
                appendMessages(test, messages);
                this.proxy.$updateTestStateInRun(runId, taskId, ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, ctrlId).toString()), _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestResultState.Errored, duration);
            }),
            failed: guardTestMutation((test, messages, duration) => {
                appendMessages(test, messages);
                this.proxy.$updateTestStateInRun(runId, taskId, ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, ctrlId).toString()), _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestResultState.Failed, duration);
            }),
            passed: guardTestMutation((test, duration) => {
                this.proxy.$updateTestStateInRun(runId, taskId, ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, this.dto.controllerId).toString()), _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestResultState.Passed, duration);
            }),
            appendOutput: (output, location$1, test) => {
                if (ended) {
                    return;
                }
                if (test) {
                    this.ensureTestIsKnown(test);
                }
                this.proxy.$appendOutputToRun(runId, taskId, _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_2__.VSBuffer.fromString(output), location$1 && _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.location.from(location$1), test && ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, ctrlId).toString()));
            },
            end: () => {
                if (ended) {
                    return;
                }
                ended = true;
                this.proxy.$finishedTestRunTask(runId, taskId);
                if (!--this.running) {
                    this.markEnded();
                }
            }
        };
        this.running++;
        this.tasks.set(taskId, { run });
        this.proxy.$startedTestRunTask(runId, { id: taskId, name, running: true });
        return run;
    }
    forciblyEndTasks() {
        for (const { run } of ( this.tasks.values())) {
            run.end();
        }
    }
    markEnded() {
        if (this.state !== TestRunTrackerState.Ended) {
            this.state = TestRunTrackerState.Ended;
            this.endEmitter.fire();
        }
    }
    ensureTestIsKnown(test) {
        if (!(test instanceof _extHostTestItem_js__WEBPACK_IMPORTED_MODULE_17__.TestItemImpl)) {
            throw ( new _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_22__.InvalidTestItemError(test.id));
        }
        if (( this.sharedTestIds.has(( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(test, this.dto.controllerId).toString())))) {
            return;
        }
        const chain = [];
        const root = this.dto.colllection.root;
        while (true) {
            const converted = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestItem.from(test);
            chain.unshift(converted);
            if (( this.sharedTestIds.has(converted.extId))) {
                break;
            }
            this.sharedTestIds.add(converted.extId);
            if (test === root) {
                break;
            }
            test = test.parent || root;
        }
        this.proxy.$addTestsToRun(this.dto.controllerId, this.dto.id, chain);
    }
    dispose() {
        this.markEnded();
        super.dispose();
    }
}
class TestRunCoordinator {
    get trackers() {
        return ( this.tracked.values());
    }
    constructor(proxy, logService) {
        this.proxy = proxy;
        this.logService = logService;
        this.tracked = ( new Map());
        this.trackedById = ( new Map());
    }
    getCoverageDetails(id, testId, token) {
        const runId = _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.root(id);
        return this.trackedById.get(runId)?.getCoverageDetails(id, testId, token) || [];
    }
    disposeTestRun(runId) {
        this.trackedById.get(runId)?.dispose();
        this.trackedById.delete(runId);
        for (const [req, { id }] of this.tracked) {
            if (id === runId) {
                this.tracked.delete(req);
            }
        }
    }
    prepareForMainThreadTestRun(extension, req, dto, profile, token) {
        return this.getTracker(req, dto, profile, extension, token);
    }
    cancelRunById(runId) {
        this.trackedById.get(runId)?.cancel();
    }
    cancelAllRuns() {
        for (const tracker of ( this.tracked.values())) {
            tracker.cancel();
        }
    }
    createTestRun(extension, controllerId, collection, request, name, persist) {
        const existing = this.tracked.get(request);
        if (existing) {
            return existing.createRun(name);
        }
        const dto = TestRunDto.fromPublic(controllerId, collection, request, persist);
        const profile = tryGetProfileFromTestRunReq(request);
        this.proxy.$startedExtensionTestRun({
            controllerId,
            continuous: !!request.continuous,
            profile: profile && { group: profileGroupToBitset[profile.kind], id: profile.profileId },
            exclude: request.exclude?.map(t => ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(t, collection.root.id).toString())) ?? [],
            id: dto.id,
            include: request.include?.map(t => ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.fromExtHostTestItem(t, collection.root.id).toString())) ?? [collection.root.id],
            preserveFocus: request.preserveFocus ?? true,
            persist
        });
        const tracker = this.getTracker(request, dto, request.profile, extension);
        _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Event.once(tracker.onEnd)(() => {
            this.proxy.$finishedExtensionTestRun(dto.id);
        });
        return tracker.createRun(name);
    }
    getTracker(req, dto, profile, extension, token) {
        const tracker = ( new TestRunTracker(dto, this.proxy, this.logService, profile, extension, token));
        this.tracked.set(req, tracker);
        this.trackedById.set(tracker.id, tracker);
        return tracker;
    }
}
const tryGetProfileFromTestRunReq = (request) => {
    if (!request.profile) {
        return undefined;
    }
    if (!(request.profile instanceof TestRunProfileImpl)) {
        throw ( new Error(
            `TestRunRequest.profile is not an instance created from TestController.createRunProfile`
        ));
    }
    return request.profile;
};
class TestRunDto {
    static fromPublic(controllerId, collection, request, persist) {
        return ( new TestRunDto(controllerId, (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_10__.generateUuid)(), persist, collection));
    }
    static fromInternal(request, collection) {
        return ( new TestRunDto(request.controllerId, request.runId, true, collection));
    }
    constructor(controllerId, id, isPersisted, colllection) {
        this.controllerId = controllerId;
        this.id = id;
        this.isPersisted = isPersisted;
        this.colllection = colllection;
    }
}
class MirroredChangeCollector {
    get isEmpty() {
        return this.added.size === 0 && this.removed.size === 0 && this.updated.size === 0;
    }
    constructor(emitter) {
        this.emitter = emitter;
        this.added = ( new Set());
        this.updated = ( new Set());
        this.removed = ( new Set());
        this.alreadyRemoved = ( new Set());
    }
    add(node) {
        this.added.add(node);
    }
    update(node) {
        Object.assign(node.revived, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestItem.toPlain(node.item));
        if (!( this.added.has(node))) {
            this.updated.add(node);
        }
    }
    remove(node) {
        if (( this.added.has(node))) {
            this.added.delete(node);
            return;
        }
        this.updated.delete(node);
        const parentId = _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_21__.TestId.parentId(node.item.extId);
        if (parentId && ( this.alreadyRemoved.has(( parentId.toString())))) {
            this.alreadyRemoved.add(node.item.extId);
            return;
        }
        this.removed.add(node);
    }
    getChangeEvent() {
        const { added, updated, removed } = this;
        return {
            get added() { return ( [...added].map(n => n.revived)); },
            get updated() { return ( [...updated].map(n => n.revived)); },
            get removed() { return ( [...removed].map(n => n.revived)); },
        };
    }
    complete() {
        if (!this.isEmpty) {
            this.emitter.fire(this.getChangeEvent());
        }
    }
}
class MirroredTestCollection extends _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.AbstractIncrementalTestCollection {
    constructor() {
        super(...arguments);
        this.changeEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        this.onDidChangeTests = this.changeEmitter.event;
    }
    get rootTests() {
        return this.roots;
    }
    getMirroredTestDataById(itemId) {
        return this.items.get(itemId);
    }
    getMirroredTestDataByReference(item) {
        return this.items.get(item.id);
    }
    createItem(item, parent) {
        return {
            ...item,
            revived: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestItem.toPlain(item.item),
            depth: parent ? parent.depth + 1 : 0,
            children: ( new Set()),
        };
    }
    createChangeCollector() {
        return ( new MirroredChangeCollector(this.changeEmitter));
    }
}
class TestObservers {
    constructor(proxy) {
        this.proxy = proxy;
    }
    checkout() {
        if (!this.current) {
            this.current = this.createObserverData();
        }
        const current = this.current;
        current.observers++;
        return {
            onDidChangeTest: current.tests.onDidChangeTests,
            get tests() { return ( [...current.tests.rootTests].map(t => t.revived)); },
            dispose: (0,_base_common_functional_js__WEBPACK_IMPORTED_MODULE_5__.createSingleCallFunction)(() => {
                if (--current.observers === 0) {
                    this.proxy.$unsubscribeFromDiffs();
                    this.current = undefined;
                }
            }),
        };
    }
    getMirroredTestDataByReference(ref) {
        return this.current?.tests.getMirroredTestDataByReference(ref);
    }
    applyDiff(diff) {
        this.current?.tests.apply(diff);
    }
    createObserverData() {
        const tests = ( new MirroredTestCollection({ asCanonicalUri: u => u }));
        this.proxy.$subscribeToDiffs();
        return { observers: 0, tests, };
    }
}
const updateProfile = (impl, proxy, initial, update) => {
    if (initial) {
        Object.assign(initial, update);
    }
    else {
        proxy.$updateTestRunConfig(impl.controllerId, impl.profileId, update);
    }
};
class TestRunProfileImpl {
    #proxy;
    #activeProfiles;
    #onDidChangeDefaultProfiles;
    #initialPublish;
    #profiles;
    get label() {
        return this._label;
    }
    set label(label) {
        if (label !== this._label) {
            this._label = label;
            updateProfile(this, this.#proxy, this.#initialPublish, { label });
        }
    }
    get supportsContinuousRun() {
        return this._supportsContinuousRun;
    }
    set supportsContinuousRun(supports) {
        if (supports !== this._supportsContinuousRun) {
            this._supportsContinuousRun = supports;
            updateProfile(this, this.#proxy, this.#initialPublish, { supportsContinuousRun: supports });
        }
    }
    get isDefault() {
        return ( this.#activeProfiles.has(this.profileId));
    }
    set isDefault(isDefault) {
        if (isDefault !== this.isDefault) {
            if (isDefault) {
                this.#activeProfiles.add(this.profileId);
            }
            else {
                this.#activeProfiles.delete(this.profileId);
            }
            updateProfile(this, this.#proxy, this.#initialPublish, { isDefault });
        }
    }
    get tag() {
        return this._tag;
    }
    set tag(tag) {
        if (tag?.id !== this._tag?.id) {
            this._tag = tag;
            updateProfile(this, this.#proxy, this.#initialPublish, {
                tag: tag ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestTag.namespace(this.controllerId, tag.id) : null,
            });
        }
    }
    get configureHandler() {
        return this._configureHandler;
    }
    set configureHandler(handler) {
        if (handler !== this._configureHandler) {
            this._configureHandler = handler;
            updateProfile(this, this.#proxy, this.#initialPublish, { hasConfigurationHandler: !!handler });
        }
    }
    get onDidChangeDefault() {
        return _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Event.chain(this.#onDidChangeDefaultProfiles, $ => ( $
            .map(ev => ev.get(this.controllerId)?.get(this.profileId)))
            .filter(_base_common_types_js__WEBPACK_IMPORTED_MODULE_9__.isDefined));
    }
    constructor(proxy, profiles, activeProfiles, onDidChangeActiveProfiles, controllerId, profileId, _label, kind, runHandler, _isDefault = false, _tag = undefined, _supportsContinuousRun = false) {
        this.controllerId = controllerId;
        this.profileId = profileId;
        this._label = _label;
        this.kind = kind;
        this.runHandler = runHandler;
        this._tag = _tag;
        this._supportsContinuousRun = _supportsContinuousRun;
        this.#proxy = proxy;
        this.#profiles = profiles;
        this.#activeProfiles = activeProfiles;
        this.#onDidChangeDefaultProfiles = onDidChangeActiveProfiles;
        profiles.set(profileId, this);
        const groupBitset = profileGroupToBitset[kind];
        if (typeof groupBitset !== 'number') {
            throw ( new Error(`Unknown TestRunProfile.group ${kind}`));
        }
        if (_isDefault) {
            activeProfiles.add(profileId);
        }
        this.#initialPublish = {
            profileId: profileId,
            controllerId,
            tag: _tag ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_18__.TestTag.namespace(this.controllerId, _tag.id) : null,
            label: _label,
            group: groupBitset,
            isDefault: _isDefault,
            hasConfigurationHandler: false,
            supportsContinuousRun: _supportsContinuousRun,
        };
        queueMicrotask(() => {
            if (this.#initialPublish) {
                this.#proxy.$publishTestRunProfile(this.#initialPublish);
                this.#initialPublish = undefined;
            }
        });
    }
    dispose() {
        if (this.#profiles?.delete(this.profileId)) {
            this.#profiles = undefined;
            this.#proxy.$removeTestProfile(this.controllerId, this.profileId);
        }
        this.#initialPublish = undefined;
    }
}
const profileGroupToBitset = {
    [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_19__.TestRunProfileKind.Coverage]: _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestRunProfileBitset.Coverage,
    [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_19__.TestRunProfileKind.Debug]: _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestRunProfileBitset.Debug,
    [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_19__.TestRunProfileKind.Run]: _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_23__.TestRunProfileBitset.Run,
};
function findTestInResultSnapshot(extId, snapshot) {
    for (let i = 0; i < extId.path.length; i++) {
        const item = snapshot.find(s => s.id === extId.path[i]);
        if (!item) {
            return undefined;
        }
        if (i === extId.path.length - 1) {
            return item;
        }
        snapshot = item.children;
    }
    return undefined;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestingPrivateApi.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestingPrivateApi.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createPrivateApiFor: () => (/* binding */ createPrivateApiFor),
/* harmony export */   getPrivateApiFor: () => (/* binding */ getPrivateApiFor)
/* harmony export */ });
/* harmony import */ var _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../contrib/testing/common/testItemCollection.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testItemCollection.js");

const eventPrivateApis = ( new WeakMap());
const createPrivateApiFor = (impl, controllerId) => {
    const api = { controllerId };
    eventPrivateApis.set(impl, api);
    return api;
};
const getPrivateApiFor = (impl) => {
    const api = eventPrivateApis.get(impl);
    if (!api) {
        throw ( new _contrib_testing_common_testItemCollection_js__WEBPACK_IMPORTED_MODULE_0__.InvalidTestItemError(impl?.id || '<unknown>'));
    }
    return api;
};



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTextEditor.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTextEditor.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTextEditor: () => (/* binding */ ExtHostTextEditor),
/* harmony export */   ExtHostTextEditorOptions: () => (/* binding */ ExtHostTextEditorOptions),
/* harmony export */   TextEditorDecorationType: () => (/* binding */ TextEditorDecorationType)
/* harmony export */ });
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/assert.js */ "./node_modules/vscode/vscode/src/vs/base/common/assert.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_idGenerator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/idGenerator.js */ "./node_modules/vscode/vscode/src/vs/base/common/idGenerator.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");





class TextEditorDecorationType {
    static { this._Keys = ( new _base_common_idGenerator_js__WEBPACK_IMPORTED_MODULE_2__.IdGenerator('TextEditorDecorationType')); }
    constructor(proxy, extension, options) {
        const key = TextEditorDecorationType._Keys.nextId();
        proxy.$registerTextEditorDecorationType(extension.identifier, key, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.DecorationRenderOptions.from(options));
        this.value = ( Object.freeze({
            key,
            dispose() {
                proxy.$removeTextEditorDecorationType(key);
            }
        }));
    }
}
class TextEditorEdit {
    constructor(document, options) {
        this._collectedEdits = [];
        this._setEndOfLine = undefined;
        this._finalized = false;
        this._document = document;
        this._documentVersionId = document.version;
        this._undoStopBefore = options.undoStopBefore;
        this._undoStopAfter = options.undoStopAfter;
    }
    finalize() {
        this._finalized = true;
        return {
            documentVersionId: this._documentVersionId,
            edits: this._collectedEdits,
            setEndOfLine: this._setEndOfLine,
            undoStopBefore: this._undoStopBefore,
            undoStopAfter: this._undoStopAfter
        };
    }
    _throwIfFinalized() {
        if (this._finalized) {
            throw ( new Error('Edit is only valid while callback runs'));
        }
    }
    replace(location, value) {
        this._throwIfFinalized();
        let range = null;
        if (location instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Position) {
            range = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range(location, location));
        }
        else if (location instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range) {
            range = location;
        }
        else {
            throw ( new Error('Unrecognized location'));
        }
        this._pushEdit(range, value, false);
    }
    insert(location, value) {
        this._throwIfFinalized();
        this._pushEdit(( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range(location, location)), value, true);
    }
    delete(location) {
        this._throwIfFinalized();
        let range = null;
        if (location instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range) {
            range = location;
        }
        else {
            throw ( new Error('Unrecognized location'));
        }
        this._pushEdit(range, null, true);
    }
    _pushEdit(range, text, forceMoveMarkers) {
        const validRange = this._document.validateRange(range);
        this._collectedEdits.push({
            range: validRange,
            text: text,
            forceMoveMarkers: forceMoveMarkers
        });
    }
    setEndOfLine(endOfLine) {
        this._throwIfFinalized();
        if (endOfLine !== _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.EndOfLine.LF && endOfLine !== _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.EndOfLine.CRLF) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.illegalArgument)('endOfLine');
        }
        this._setEndOfLine = endOfLine;
    }
}
class ExtHostTextEditorOptions {
    constructor(proxy, id, source, logService) {
        this._proxy = proxy;
        this._id = id;
        this._accept(source);
        this._logService = logService;
        const that = this;
        this.value = {
            get tabSize() {
                return that._tabSize;
            },
            set tabSize(value) {
                that._setTabSize(value);
            },
            get indentSize() {
                return that._indentSize;
            },
            set indentSize(value) {
                that._setIndentSize(value);
            },
            get insertSpaces() {
                return that._insertSpaces;
            },
            set insertSpaces(value) {
                that._setInsertSpaces(value);
            },
            get cursorStyle() {
                return that._cursorStyle;
            },
            set cursorStyle(value) {
                that._setCursorStyle(value);
            },
            get lineNumbers() {
                return that._lineNumbers;
            },
            set lineNumbers(value) {
                that._setLineNumbers(value);
            }
        };
    }
    _accept(source) {
        this._tabSize = source.tabSize;
        this._indentSize = source.indentSize;
        this._originalIndentSize = source.originalIndentSize;
        this._insertSpaces = source.insertSpaces;
        this._cursorStyle = source.cursorStyle;
        this._lineNumbers = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.TextEditorLineNumbersStyle.to(source.lineNumbers);
    }
    _validateTabSize(value) {
        if (value === 'auto') {
            return 'auto';
        }
        if (typeof value === 'number') {
            const r = Math.floor(value);
            return (r > 0 ? r : null);
        }
        if (typeof value === 'string') {
            const r = parseInt(value, 10);
            if (isNaN(r)) {
                return null;
            }
            return (r > 0 ? r : null);
        }
        return null;
    }
    _setTabSize(value) {
        const tabSize = this._validateTabSize(value);
        if (tabSize === null) {
            return;
        }
        if (typeof tabSize === 'number') {
            if (this._tabSize === tabSize) {
                return;
            }
            this._tabSize = tabSize;
        }
        this._warnOnError('setTabSize', this._proxy.$trySetOptions(this._id, {
            tabSize: tabSize
        }));
    }
    _validateIndentSize(value) {
        if (value === 'tabSize') {
            return 'tabSize';
        }
        if (typeof value === 'number') {
            const r = Math.floor(value);
            return (r > 0 ? r : null);
        }
        if (typeof value === 'string') {
            const r = parseInt(value, 10);
            if (isNaN(r)) {
                return null;
            }
            return (r > 0 ? r : null);
        }
        return null;
    }
    _setIndentSize(value) {
        const indentSize = this._validateIndentSize(value);
        if (indentSize === null) {
            return;
        }
        if (typeof indentSize === 'number') {
            if (this._originalIndentSize === indentSize) {
                return;
            }
            this._indentSize = indentSize;
            this._originalIndentSize = indentSize;
        }
        this._warnOnError('setIndentSize', this._proxy.$trySetOptions(this._id, {
            indentSize: indentSize
        }));
    }
    _validateInsertSpaces(value) {
        if (value === 'auto') {
            return 'auto';
        }
        return (value === 'false' ? false : Boolean(value));
    }
    _setInsertSpaces(value) {
        const insertSpaces = this._validateInsertSpaces(value);
        if (typeof insertSpaces === 'boolean') {
            if (this._insertSpaces === insertSpaces) {
                return;
            }
            this._insertSpaces = insertSpaces;
        }
        this._warnOnError('setInsertSpaces', this._proxy.$trySetOptions(this._id, {
            insertSpaces: insertSpaces
        }));
    }
    _setCursorStyle(value) {
        if (this._cursorStyle === value) {
            return;
        }
        this._cursorStyle = value;
        this._warnOnError('setCursorStyle', this._proxy.$trySetOptions(this._id, {
            cursorStyle: value
        }));
    }
    _setLineNumbers(value) {
        if (this._lineNumbers === value) {
            return;
        }
        this._lineNumbers = value;
        this._warnOnError('setLineNumbers', this._proxy.$trySetOptions(this._id, {
            lineNumbers: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.TextEditorLineNumbersStyle.from(value)
        }));
    }
    assign(newOptions) {
        const bulkConfigurationUpdate = {};
        let hasUpdate = false;
        if (typeof newOptions.tabSize !== 'undefined') {
            const tabSize = this._validateTabSize(newOptions.tabSize);
            if (tabSize === 'auto') {
                hasUpdate = true;
                bulkConfigurationUpdate.tabSize = tabSize;
            }
            else if (typeof tabSize === 'number' && this._tabSize !== tabSize) {
                this._tabSize = tabSize;
                hasUpdate = true;
                bulkConfigurationUpdate.tabSize = tabSize;
            }
        }
        if (typeof newOptions.indentSize !== 'undefined') {
            const indentSize = this._validateIndentSize(newOptions.indentSize);
            if (indentSize === 'tabSize') {
                hasUpdate = true;
                bulkConfigurationUpdate.indentSize = indentSize;
            }
            else if (typeof indentSize === 'number' && this._originalIndentSize !== indentSize) {
                this._indentSize = indentSize;
                this._originalIndentSize = indentSize;
                hasUpdate = true;
                bulkConfigurationUpdate.indentSize = indentSize;
            }
        }
        if (typeof newOptions.insertSpaces !== 'undefined') {
            const insertSpaces = this._validateInsertSpaces(newOptions.insertSpaces);
            if (insertSpaces === 'auto') {
                hasUpdate = true;
                bulkConfigurationUpdate.insertSpaces = insertSpaces;
            }
            else if (this._insertSpaces !== insertSpaces) {
                this._insertSpaces = insertSpaces;
                hasUpdate = true;
                bulkConfigurationUpdate.insertSpaces = insertSpaces;
            }
        }
        if (typeof newOptions.cursorStyle !== 'undefined') {
            if (this._cursorStyle !== newOptions.cursorStyle) {
                this._cursorStyle = newOptions.cursorStyle;
                hasUpdate = true;
                bulkConfigurationUpdate.cursorStyle = newOptions.cursorStyle;
            }
        }
        if (typeof newOptions.lineNumbers !== 'undefined') {
            if (this._lineNumbers !== newOptions.lineNumbers) {
                this._lineNumbers = newOptions.lineNumbers;
                hasUpdate = true;
                bulkConfigurationUpdate.lineNumbers = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.TextEditorLineNumbersStyle.from(newOptions.lineNumbers);
            }
        }
        if (hasUpdate) {
            this._warnOnError('setOptions', this._proxy.$trySetOptions(this._id, bulkConfigurationUpdate));
        }
    }
    _warnOnError(action, promise) {
        promise.catch(err => {
            this._logService.warn(`ExtHostTextEditorOptions '${action}' failed:'`);
            this._logService.warn(err);
        });
    }
}
class ExtHostTextEditor {
    constructor(id, _proxy, _logService, document, selections, options, visibleRanges, viewColumn) {
        this.id = id;
        this._proxy = _proxy;
        this._logService = _logService;
        this._disposed = false;
        this._hasDecorationsForKey = ( new Set());
        this._selections = selections;
        this._options = ( new ExtHostTextEditorOptions(this._proxy, this.id, options, _logService));
        this._visibleRanges = visibleRanges;
        this._viewColumn = viewColumn;
        const that = this;
        this.value = ( Object.freeze({
            get document() {
                return document.value;
            },
            set document(_value) {
                throw ( new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.ReadonlyError('document'));
            },
            get selection() {
                return that._selections && that._selections[0];
            },
            set selection(value) {
                if (!(value instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Selection)) {
                    throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.illegalArgument)('selection');
                }
                that._selections = [value];
                that._trySetSelection();
            },
            get selections() {
                return that._selections;
            },
            set selections(value) {
                if (!Array.isArray(value) || ( value.some(a => !(a instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Selection)))) {
                    throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.illegalArgument)('selections');
                }
                that._selections = value;
                that._trySetSelection();
            },
            get visibleRanges() {
                return that._visibleRanges;
            },
            set visibleRanges(_value) {
                throw ( new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.ReadonlyError('visibleRanges'));
            },
            get options() {
                return that._options.value;
            },
            set options(value) {
                if (!that._disposed) {
                    that._options.assign(value);
                }
            },
            get viewColumn() {
                return that._viewColumn;
            },
            set viewColumn(_value) {
                throw ( new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.ReadonlyError('viewColumn'));
            },
            edit(callback, options = { undoStopBefore: true, undoStopAfter: true }) {
                if (that._disposed) {
                    return Promise.reject(( new Error('TextEditor#edit not possible on closed editors')));
                }
                const edit = ( new TextEditorEdit(document.value, options));
                callback(edit);
                return that._applyEdit(edit);
            },
            insertSnippet(snippet, where, options = { undoStopBefore: true, undoStopAfter: true }) {
                if (that._disposed) {
                    return Promise.reject(( new Error('TextEditor#insertSnippet not possible on closed editors')));
                }
                let ranges;
                if (!where || (Array.isArray(where) && where.length === 0)) {
                    ranges = ( that._selections.map(range => _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from(range)));
                }
                else if (where instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Position) {
                    const { lineNumber, column } = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Position.from(where);
                    ranges = [{ startLineNumber: lineNumber, startColumn: column, endLineNumber: lineNumber, endColumn: column }];
                }
                else if (where instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range) {
                    ranges = [_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from(where)];
                }
                else {
                    ranges = [];
                    for (const posOrRange of where) {
                        if (posOrRange instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.Range) {
                            ranges.push(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from(posOrRange));
                        }
                        else {
                            const { lineNumber, column } = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Position.from(posOrRange);
                            ranges.push({ startLineNumber: lineNumber, startColumn: column, endLineNumber: lineNumber, endColumn: column });
                        }
                    }
                }
                return _proxy.$tryInsertSnippet(id, document.value.version, snippet.value, ranges, options);
            },
            setDecorations(decorationType, ranges) {
                const willBeEmpty = (ranges.length === 0);
                if (willBeEmpty && !( that._hasDecorationsForKey.has(decorationType.key))) {
                    return;
                }
                if (willBeEmpty) {
                    that._hasDecorationsForKey.delete(decorationType.key);
                }
                else {
                    that._hasDecorationsForKey.add(decorationType.key);
                }
                that._runOnProxy(() => {
                    if ((0,_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.isDecorationOptionsArr)(ranges)) {
                        return _proxy.$trySetDecorations(id, decorationType.key, (0,_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.fromRangeOrRangeWithMessage)(ranges));
                    }
                    else {
                        const _ranges = ( new Array(4 * ranges.length));
                        for (let i = 0, len = ranges.length; i < len; i++) {
                            const range = ranges[i];
                            _ranges[4 * i] = range.start.line + 1;
                            _ranges[4 * i + 1] = range.start.character + 1;
                            _ranges[4 * i + 2] = range.end.line + 1;
                            _ranges[4 * i + 3] = range.end.character + 1;
                        }
                        return _proxy.$trySetDecorationsFast(id, decorationType.key, _ranges);
                    }
                });
            },
            revealRange(range, revealType) {
                that._runOnProxy(() => _proxy.$tryRevealRange(id, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from(range), (revealType || _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.TextEditorRevealType.Default)));
            },
            show(column) {
                _proxy.$tryShowEditor(id, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.ViewColumn.from(column));
            },
            hide() {
                _proxy.$tryHideEditor(id);
            }
        }));
    }
    dispose() {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._disposed);
        this._disposed = true;
    }
    _acceptOptions(options) {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._disposed);
        this._options._accept(options);
    }
    _acceptVisibleRanges(value) {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._disposed);
        this._visibleRanges = value;
    }
    _acceptViewColumn(value) {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._disposed);
        this._viewColumn = value;
    }
    _acceptSelections(selections) {
        (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_0__.ok)(!this._disposed);
        this._selections = selections;
    }
    async _trySetSelection() {
        const selection = ( this._selections.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Selection.from));
        await this._runOnProxy(() => this._proxy.$trySetSelections(this.id, selection));
        return this.value;
    }
    _applyEdit(editBuilder) {
        const editData = editBuilder.finalize();
        if (editData.edits.length === 0 && !editData.setEndOfLine) {
            return Promise.resolve(true);
        }
        const editRanges = ( editData.edits.map(edit => edit.range));
        editRanges.sort((a, b) => {
            if (a.end.line === b.end.line) {
                if (a.end.character === b.end.character) {
                    if (a.start.line === b.start.line) {
                        return a.start.character - b.start.character;
                    }
                    return a.start.line - b.start.line;
                }
                return a.end.character - b.end.character;
            }
            return a.end.line - b.end.line;
        });
        for (let i = 0, count = editRanges.length - 1; i < count; i++) {
            const rangeEnd = editRanges[i].end;
            const nextRangeStart = editRanges[i + 1].start;
            if (nextRangeStart.isBefore(rangeEnd)) {
                return Promise.reject(( new Error('Overlapping ranges are not allowed!')));
            }
        }
        const edits = ( editData.edits.map((edit) => {
            return {
                range: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.Range.from(edit.range),
                text: edit.text,
                forceMoveMarkers: edit.forceMoveMarkers
            };
        }));
        return this._proxy.$tryApplyEdits(this.id, editData.documentVersionId, edits, {
            setEndOfLine: typeof editData.setEndOfLine === 'number' ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.EndOfLine.from(editData.setEndOfLine) : undefined,
            undoStopBefore: editData.undoStopBefore,
            undoStopAfter: editData.undoStopAfter
        });
    }
    _runOnProxy(callback) {
        if (this._disposed) {
            this._logService.warn('TextEditor is closed/disposed');
            return Promise.resolve(undefined);
        }
        return callback().then(() => this, err => {
            if (!(err instanceof Error && err.name === 'DISPOSED')) {
                this._logService.warn(err);
            }
            return null;
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTextEditors.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTextEditors.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostEditors: () => (/* binding */ ExtHostEditors)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTextEditor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTextEditor.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTextEditor.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");







class ExtHostEditors extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor(mainContext, _extHostDocumentsAndEditors) {
        super();
        this._extHostDocumentsAndEditors = _extHostDocumentsAndEditors;
        this._onDidChangeTextEditorSelection = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this._onDidChangeTextEditorOptions = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this._onDidChangeTextEditorVisibleRanges = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this._onDidChangeTextEditorViewColumn = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this._onDidChangeActiveTextEditor = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this._onDidChangeVisibleTextEditors = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChangeTextEditorSelection = this._onDidChangeTextEditorSelection.event;
        this.onDidChangeTextEditorOptions = this._onDidChangeTextEditorOptions.event;
        this.onDidChangeTextEditorVisibleRanges = this._onDidChangeTextEditorVisibleRanges.event;
        this.onDidChangeTextEditorViewColumn = this._onDidChangeTextEditorViewColumn.event;
        this.onDidChangeActiveTextEditor = this._onDidChangeActiveTextEditor.event;
        this.onDidChangeVisibleTextEditors = this._onDidChangeVisibleTextEditors.event;
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadTextEditors));
        this._register(this._extHostDocumentsAndEditors.onDidChangeVisibleTextEditors(e => this._onDidChangeVisibleTextEditors.fire(e)));
        this._register(this._extHostDocumentsAndEditors.onDidChangeActiveTextEditor(e => this._onDidChangeActiveTextEditor.fire(e)));
    }
    getActiveTextEditor() {
        return this._extHostDocumentsAndEditors.activeEditor();
    }
    getVisibleTextEditors(internal) {
        const editors = this._extHostDocumentsAndEditors.allEditors();
        return internal
            ? editors
            : ( editors.map(editor => editor.value));
    }
    async showTextDocument(document, columnOrOptions, preserveFocus) {
        let options;
        if (typeof columnOrOptions === 'number') {
            options = {
                position: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.ViewColumn.from(columnOrOptions),
                preserveFocus
            };
        }
        else if (typeof columnOrOptions === 'object') {
            options = {
                position: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.ViewColumn.from(columnOrOptions.viewColumn),
                preserveFocus: columnOrOptions.preserveFocus,
                selection: typeof columnOrOptions.selection === 'object' ? _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Range.from(columnOrOptions.selection) : undefined,
                pinned: typeof columnOrOptions.preview === 'boolean' ? !columnOrOptions.preview : undefined
            };
        }
        else {
            options = {
                preserveFocus: false
            };
        }
        const editorId = await this._proxy.$tryShowTextDocument(document.uri, options);
        const editor = editorId && this._extHostDocumentsAndEditors.getEditor(editorId);
        if (editor) {
            return editor.value;
        }
        if (editorId) {
            throw ( new Error(`Could NOT open editor for "${( document.uri.toString())}" because another editor opened in the meantime.`));
        }
        else {
            throw ( new Error(`Could NOT open editor for "${( document.uri.toString())}".`));
        }
    }
    createTextEditorDecorationType(extension, options) {
        return ( new _extHostTextEditor_js__WEBPACK_IMPORTED_MODULE_4__.TextEditorDecorationType(this._proxy, extension, options)).value;
    }
    $acceptEditorPropertiesChanged(id, data) {
        const textEditor = this._extHostDocumentsAndEditors.getEditor(id);
        if (!textEditor) {
            throw ( new Error('unknown text editor'));
        }
        if (data.options) {
            textEditor._acceptOptions(data.options);
        }
        if (data.selections) {
            const selections = ( data.selections.selections.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Selection.to));
            textEditor._acceptSelections(selections);
        }
        if (data.visibleRanges) {
            const visibleRanges = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( data.visibleRanges.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Range.to)));
            textEditor._acceptVisibleRanges(visibleRanges);
        }
        if (data.options) {
            this._onDidChangeTextEditorOptions.fire({
                textEditor: textEditor.value,
                options: { ...data.options, lineNumbers: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.TextEditorLineNumbersStyle.to(data.options.lineNumbers) }
            });
        }
        if (data.selections) {
            const kind = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_6__.TextEditorSelectionChangeKind.fromValue(data.selections.source);
            const selections = ( data.selections.selections.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Selection.to));
            this._onDidChangeTextEditorSelection.fire({
                textEditor: textEditor.value,
                selections,
                kind
            });
        }
        if (data.visibleRanges) {
            const visibleRanges = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( data.visibleRanges.map(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.Range.to)));
            this._onDidChangeTextEditorVisibleRanges.fire({
                textEditor: textEditor.value,
                visibleRanges
            });
        }
    }
    $acceptEditorPositionData(data) {
        for (const id in data) {
            const textEditor = this._extHostDocumentsAndEditors.getEditor(id);
            if (!textEditor) {
                throw ( new Error('Unknown text editor'));
            }
            const viewColumn = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.ViewColumn.to(data[id]);
            if (textEditor.value.viewColumn !== viewColumn) {
                textEditor._acceptViewColumn(viewColumn);
                this._onDidChangeTextEditorViewColumn.fire({ textEditor: textEditor.value, viewColumn });
            }
        }
    }
    getDiffInformation(id) {
        return Promise.resolve(this._proxy.$getDiffInformation(id));
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTheming.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTheming.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTheming: () => (/* binding */ ExtHostTheming)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");




let ExtHostTheming = class ExtHostTheming {
    constructor(_extHostRpc) {
        this._actual = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.ColorTheme(_extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.ColorThemeKind.Dark));
        this._onDidChangeActiveColorTheme = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter());
    }
    get activeColorTheme() {
        return this._actual;
    }
    $onColorThemeChange(type) {
        let kind;
        switch (type) {
            case 'light':
                kind = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.ColorThemeKind.Light;
                break;
            case 'hcDark':
                kind = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.ColorThemeKind.HighContrast;
                break;
            case 'hcLight':
                kind = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.ColorThemeKind.HighContrastLight;
                break;
            default:
                kind = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.ColorThemeKind.Dark;
        }
        this._actual = ( new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_1__.ColorTheme(kind));
        this._onDidChangeActiveColorTheme.fire(this._actual);
    }
    get onDidChangeActiveColorTheme() {
        return this._onDidChangeActiveColorTheme.event;
    }
};
ExtHostTheming = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_2__.IExtHostRpcService))
], ExtHostTheming));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTimeline.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTimeline.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTimeline: () => (/* binding */ ExtHostTimeline)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");









class ExtHostTimeline {
    constructor(mainContext, commands) {
        this._providers = ( new Map());
        this._itemsBySourceAndUriMap = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_2__.MainContext.MainThreadTimeline));
        commands.registerArgumentProcessor({
            processArgument: (arg, extension) => {
                if (arg && arg.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_7__.MarshalledId.TimelineActionContext) {
                    if (this._providers.get(arg.source) && _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.ExtensionIdentifier.equals(extension, this._providers.get(arg.source)?.extension)) {
                        const uri = arg.uri === undefined ? undefined : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(arg.uri);
                        return this._itemsBySourceAndUriMap.get(arg.source)?.get(getUriKey(uri))?.get(arg.handle);
                    }
                    else {
                        return undefined;
                    }
                }
                return arg;
            }
        });
    }
    async $getTimeline(id, uri, options, token) {
        const item = this._providers.get(id);
        return item?.provider.provideTimeline(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(uri), options, token);
    }
    registerTimelineProvider(scheme, provider, extensionId, commandConverter) {
        const timelineDisposables = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableStore());
        const convertTimelineItem = this.convertTimelineItem(provider.id, commandConverter, timelineDisposables).bind(this);
        let disposable;
        if (provider.onDidChange) {
            disposable = provider.onDidChange(e => this._proxy.$emitTimelineChangeEvent({ uri: undefined, reset: true, ...e, id: provider.id }), this);
        }
        const itemsBySourceAndUriMap = this._itemsBySourceAndUriMap;
        return this.registerTimelineProviderCore({
            ...provider,
            scheme: scheme,
            onDidChange: undefined,
            async provideTimeline(uri, options, token) {
                if (options?.resetCache) {
                    timelineDisposables.clear();
                    itemsBySourceAndUriMap.get(provider.id)?.clear();
                }
                const result = await provider.provideTimeline(uri, options, token);
                if (result === undefined || result === null) {
                    return undefined;
                }
                const convertItem = convertTimelineItem(uri, options);
                return {
                    ...result,
                    source: provider.id,
                    items: ( result.items.map(convertItem))
                };
            },
            dispose() {
                for (const sourceMap of ( itemsBySourceAndUriMap.values())) {
                    sourceMap.get(provider.id)?.clear();
                }
                disposable?.dispose();
                timelineDisposables.dispose();
            }
        }, extensionId);
    }
    convertTimelineItem(source, commandConverter, disposables) {
        return (uri, options) => {
            let items;
            if (options?.cacheResults) {
                let itemsByUri = this._itemsBySourceAndUriMap.get(source);
                if (itemsByUri === undefined) {
                    itemsByUri = ( new Map());
                    this._itemsBySourceAndUriMap.set(source, itemsByUri);
                }
                const uriKey = getUriKey(uri);
                items = itemsByUri.get(uriKey);
                if (items === undefined) {
                    items = ( new Map());
                    itemsByUri.set(uriKey, items);
                }
            }
            return (item) => {
                const { iconPath, ...props } = item;
                const handle = `${source}|${item.id ?? item.timestamp}`;
                items?.set(handle, item);
                let icon;
                let iconDark;
                let themeIcon;
                if (item.iconPath) {
                    if (iconPath instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.ThemeIcon) {
                        themeIcon = { id: iconPath.id, color: iconPath.color };
                    }
                    else if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.isUri(iconPath)) {
                        icon = iconPath;
                        iconDark = iconPath;
                    }
                    else {
                        ({ light: icon, dark: iconDark } = iconPath);
                    }
                }
                let tooltip;
                if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.MarkdownString.isMarkdownString(props.tooltip)) {
                    tooltip = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.MarkdownString.from(props.tooltip);
                }
                else if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isString)(props.tooltip)) {
                    tooltip = props.tooltip;
                }
                else if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.MarkdownString.isMarkdownString(props.detail)) {
                    console.warn('Using deprecated TimelineItem.detail, migrate to TimelineItem.tooltip');
                    tooltip = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_5__.MarkdownString.from(props.detail);
                }
                else if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isString)(props.detail)) {
                    console.warn('Using deprecated TimelineItem.detail, migrate to TimelineItem.tooltip');
                    tooltip = props.detail;
                }
                return {
                    ...props,
                    id: props.id ?? undefined,
                    handle: handle,
                    source: source,
                    command: item.command ? commandConverter.toInternal(item.command, disposables) : undefined,
                    icon: icon,
                    iconDark: iconDark,
                    themeIcon: themeIcon,
                    tooltip,
                    accessibilityInformation: item.accessibilityInformation
                };
            };
        };
    }
    registerTimelineProviderCore(provider, extension) {
        const existing = this._providers.get(provider.id);
        if (existing) {
            throw ( new Error(`Timeline Provider ${provider.id} already exists.`));
        }
        this._proxy.$registerTimelineProvider({
            id: provider.id,
            label: provider.label,
            scheme: provider.scheme
        });
        this._providers.set(provider.id, { provider, extension });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            for (const sourceMap of ( this._itemsBySourceAndUriMap.values())) {
                sourceMap.get(provider.id)?.clear();
            }
            this._providers.delete(provider.id);
            this._proxy.$unregisterTimelineProvider(provider.id);
            provider.dispose();
        });
    }
}
function getUriKey(uri) {
    return uri?.toString();
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTreeViews.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTreeViews.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTreeViews: () => (/* binding */ ExtHostTreeViews)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _common_views_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../common/views.js */ "./node_modules/vscode/vscode/src/vs/workbench/common/views.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/htmlContent.js */ "./node_modules/vscode/vscode/src/vs/base/common/htmlContent.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _editor_common_services_treeViewsDnd_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../editor/common/services/treeViewsDnd.js */ "./node_modules/vscode/vscode/src/vs/editor/common/services/treeViewsDnd.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");















const _moduleId = "vs/workbench/api/common/extHostTreeViews";
function toTreeItemLabel(label, extension) {
    if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isString)(label)) {
        return { label };
    }
    if (label
        && typeof label === 'object'
        && typeof label.label === 'string') {
        let highlights = undefined;
        if (Array.isArray(label.highlights)) {
            highlights = label.highlights.filter((highlight => highlight.length === 2 && typeof highlight[0] === 'number' && typeof highlight[1] === 'number'));
            highlights = highlights.length ? highlights : undefined;
        }
        return { label: label.label, highlights };
    }
    return undefined;
}
class ExtHostTreeViews extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.Disposable {
    constructor(_proxy, commands, logService) {
        super();
        this._proxy = _proxy;
        this.commands = commands;
        this.logService = logService;
        this.treeViews = ( new Map());
        this.treeDragAndDropService = ( new _editor_common_services_treeViewsDnd_js__WEBPACK_IMPORTED_MODULE_13__.TreeViewsDnDService());
        function isTreeViewConvertableItem(arg) {
            return arg && arg.$treeViewId && (arg.$treeItemHandle || arg.$selectedTreeItems || arg.$focusedTreeItem);
        }
        commands.registerArgumentProcessor({
            processArgument: arg => {
                if (isTreeViewConvertableItem(arg)) {
                    return this.convertArgument(arg);
                }
                else if (Array.isArray(arg) && (arg.length > 0)) {
                    return ( arg.map(item => {
                        if (isTreeViewConvertableItem(item)) {
                            return this.convertArgument(item);
                        }
                        return item;
                    }));
                }
                return arg;
            }
        });
    }
    registerTreeDataProvider(id, treeDataProvider, extension) {
        const treeView = this.createTreeView(id, { treeDataProvider }, extension);
        return { dispose: () => treeView.dispose() };
    }
    createTreeView(viewId, options, extension) {
        if (!options || !options.treeDataProvider) {
            throw ( new Error('Options with treeDataProvider is mandatory'));
        }
        const dropMimeTypes = options.dragAndDropController?.dropMimeTypes ?? [];
        const dragMimeTypes = options.dragAndDropController?.dragMimeTypes ?? [];
        const hasHandleDrag = !!options.dragAndDropController?.handleDrag;
        const hasHandleDrop = !!options.dragAndDropController?.handleDrop;
        const treeView = this.createExtHostTreeView(viewId, options, extension);
        const proxyOptions = { showCollapseAll: !!options.showCollapseAll, canSelectMany: !!options.canSelectMany, dropMimeTypes, dragMimeTypes, hasHandleDrag, hasHandleDrop, manuallyManageCheckboxes: !!options.manageCheckboxStateManually };
        const registerPromise = this._proxy.$registerTreeViewDataProvider(viewId, proxyOptions);
        const view = {
            get onDidCollapseElement() { return treeView.onDidCollapseElement; },
            get onDidExpandElement() { return treeView.onDidExpandElement; },
            get selection() { return treeView.selectedElements; },
            get onDidChangeSelection() { return treeView.onDidChangeSelection; },
            get activeItem() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(extension, 'treeViewActiveItem');
                return treeView.focusedElement;
            },
            get onDidChangeActiveItem() {
                (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(extension, 'treeViewActiveItem');
                return treeView.onDidChangeActiveItem;
            },
            get visible() { return treeView.visible; },
            get onDidChangeVisibility() { return treeView.onDidChangeVisibility; },
            get onDidChangeCheckboxState() {
                return treeView.onDidChangeCheckboxState;
            },
            get message() { return treeView.message; },
            set message(message) {
                if ((0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_11__.isMarkdownString)(message)) {
                    (0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_14__.checkProposedApiEnabled)(extension, 'treeViewMarkdownMessage');
                }
                treeView.message = message;
            },
            get title() { return treeView.title; },
            set title(title) {
                treeView.title = title;
            },
            get description() {
                return treeView.description;
            },
            set description(description) {
                treeView.description = description;
            },
            get badge() {
                return treeView.badge;
            },
            set badge(badge) {
                if ((badge !== undefined) && _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.ViewBadge.isViewBadge(badge)) {
                    treeView.badge = {
                        value: Math.floor(Math.abs(badge.value)),
                        tooltip: badge.tooltip
                    };
                }
                else if (badge === undefined) {
                    treeView.badge = undefined;
                }
            },
            reveal: (element, options) => {
                return treeView.reveal(element, options);
            },
            dispose: async () => {
                await registerPromise;
                this.treeViews.delete(viewId);
                treeView.dispose();
            }
        };
        this._register(view);
        return view;
    }
    $getChildren(treeViewId, treeItemHandle) {
        const treeView = this.treeViews.get(treeViewId);
        if (!treeView) {
            return Promise.reject(( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(treeViewId)));
        }
        return treeView.getChildren(treeItemHandle);
    }
    async $handleDrop(destinationViewId, requestId, treeDataTransferDTO, targetItemHandle, token, operationUuid, sourceViewId, sourceTreeItemHandles) {
        const treeView = this.treeViews.get(destinationViewId);
        if (!treeView) {
            return Promise.reject(( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(destinationViewId)));
        }
        const treeDataTransfer = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.DataTransfer.toDataTransfer(treeDataTransferDTO, async (dataItemIndex) => {
            return (await this._proxy.$resolveDropFileData(destinationViewId, requestId, dataItemIndex)).buffer;
        });
        if ((sourceViewId === destinationViewId) && sourceTreeItemHandles) {
            await this.addAdditionalTransferItems(treeDataTransfer, treeView, sourceTreeItemHandles, token, operationUuid);
        }
        return treeView.onDrop(treeDataTransfer, targetItemHandle, token);
    }
    async addAdditionalTransferItems(treeDataTransfer, treeView, sourceTreeItemHandles, token, operationUuid) {
        const existingTransferOperation = this.treeDragAndDropService.removeDragOperationTransfer(operationUuid);
        if (existingTransferOperation) {
            (await existingTransferOperation)?.forEach((value, key) => {
                if (value) {
                    treeDataTransfer.set(key, value);
                }
            });
        }
        else if (operationUuid && treeView.handleDrag) {
            const willDropPromise = treeView.handleDrag(sourceTreeItemHandles, treeDataTransfer, token);
            this.treeDragAndDropService.addDragOperationTransfer(operationUuid, willDropPromise);
            await willDropPromise;
        }
        return treeDataTransfer;
    }
    async $handleDrag(sourceViewId, sourceTreeItemHandles, operationUuid, token) {
        const treeView = this.treeViews.get(sourceViewId);
        if (!treeView) {
            return Promise.reject(( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(sourceViewId)));
        }
        const treeDataTransfer = await this.addAdditionalTransferItems(new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.DataTransfer(), treeView, sourceTreeItemHandles, token, operationUuid);
        if (!treeDataTransfer || token.isCancellationRequested) {
            return;
        }
        return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.DataTransfer.from(treeDataTransfer);
    }
    async $hasResolve(treeViewId) {
        const treeView = this.treeViews.get(treeViewId);
        if (!treeView) {
            throw ( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(treeViewId));
        }
        return treeView.hasResolve;
    }
    $resolve(treeViewId, treeItemHandle, token) {
        const treeView = this.treeViews.get(treeViewId);
        if (!treeView) {
            throw ( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(treeViewId));
        }
        return treeView.resolveTreeItem(treeItemHandle, token);
    }
    $setExpanded(treeViewId, treeItemHandle, expanded) {
        const treeView = this.treeViews.get(treeViewId);
        if (!treeView) {
            throw ( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(treeViewId));
        }
        treeView.setExpanded(treeItemHandle, expanded);
    }
    $setSelectionAndFocus(treeViewId, selectedHandles, focusedHandle) {
        const treeView = this.treeViews.get(treeViewId);
        if (!treeView) {
            throw ( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(treeViewId));
        }
        treeView.setSelectionAndFocus(selectedHandles, focusedHandle);
    }
    $setVisible(treeViewId, isVisible) {
        const treeView = this.treeViews.get(treeViewId);
        if (!treeView) {
            if (!isVisible) {
                return;
            }
            throw ( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(treeViewId));
        }
        treeView.setVisible(isVisible);
    }
    $changeCheckboxState(treeViewId, checkboxUpdate) {
        const treeView = this.treeViews.get(treeViewId);
        if (!treeView) {
            throw ( new _common_views_js__WEBPACK_IMPORTED_MODULE_5__.NoTreeViewError(treeViewId));
        }
        treeView.setCheckboxState(checkboxUpdate);
    }
    createExtHostTreeView(id, options, extension) {
        const treeView = this._register(( new ExtHostTreeView(
            id,
            options,
            this._proxy,
            this.commands.converter,
            this.logService,
            extension
        )));
        this.treeViews.set(id, treeView);
        return treeView;
    }
    convertArgument(arg) {
        const treeView = this.treeViews.get(arg.$treeViewId);
        if (treeView && '$treeItemHandle' in arg) {
            return treeView.getExtensionElement(arg.$treeItemHandle);
        }
        if (treeView && '$focusedTreeItem' in arg && arg.$focusedTreeItem) {
            return treeView.focusedElement;
        }
        return null;
    }
}
class ExtHostTreeView extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.Disposable {
    static { this.LABEL_HANDLE_PREFIX = '0'; }
    static { this.ID_HANDLE_PREFIX = '1'; }
    get visible() { return this._visible; }
    get selectedElements() { return ( this._selectedHandles.map(handle => this.getExtensionElement(handle))).filter(element => !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isUndefinedOrNull)(element)); }
    get focusedElement() { return (this._focusedHandle ? this.getExtensionElement(this._focusedHandle) : undefined); }
    constructor(viewId, options, proxy, commands, logService, extension) {
        super();
        this.viewId = viewId;
        this.proxy = proxy;
        this.commands = commands;
        this.logService = logService;
        this.extension = extension;
        this.roots = undefined;
        this.elements = ( new Map());
        this.nodes = ( new Map());
        this._visible = false;
        this._selectedHandles = [];
        this._focusedHandle = undefined;
        this._onDidExpandElement = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter()));
        this.onDidExpandElement = this._onDidExpandElement.event;
        this._onDidCollapseElement = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter()));
        this.onDidCollapseElement = this._onDidCollapseElement.event;
        this._onDidChangeSelection = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter()));
        this.onDidChangeSelection = this._onDidChangeSelection.event;
        this._onDidChangeActiveItem = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter()));
        this.onDidChangeActiveItem = this._onDidChangeActiveItem.event;
        this._onDidChangeVisibility = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter()));
        this.onDidChangeVisibility = this._onDidChangeVisibility.event;
        this._onDidChangeCheckboxState = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter()));
        this.onDidChangeCheckboxState = this._onDidChangeCheckboxState.event;
        this._onDidChangeData = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Emitter()));
        this.refreshPromise = Promise.resolve();
        this.refreshQueue = Promise.resolve();
        this._message = '';
        this._title = '';
        this._refreshCancellationSource = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_12__.CancellationTokenSource());
        if (extension.contributes && extension.contributes.views) {
            for (const location in extension.contributes.views) {
                for (const view of extension.contributes.views[location]) {
                    if (view.id === viewId) {
                        this._title = view.name;
                    }
                }
            }
        }
        this.dataProvider = options.treeDataProvider;
        this.dndController = options.dragAndDropController;
        if (this.dataProvider.onDidChangeTreeData) {
            this._register(this.dataProvider.onDidChangeTreeData(elementOrElements => {
                if (Array.isArray(elementOrElements) && elementOrElements.length === 0) {
                    return;
                }
                this._onDidChangeData.fire({ message: false, element: elementOrElements });
            }));
        }
        let refreshingPromise;
        let promiseCallback;
        const onDidChangeData = _base_common_event_js__WEBPACK_IMPORTED_MODULE_3__.Event.debounce(this._onDidChangeData.event, (result, current) => {
            if (!result) {
                result = { message: false, elements: [] };
            }
            if (current.element !== false) {
                if (!refreshingPromise) {
                    refreshingPromise = ( new Promise(c => promiseCallback = c));
                    this.refreshPromise = this.refreshPromise.then(() => refreshingPromise);
                }
                if (Array.isArray(current.element)) {
                    result.elements.push(...current.element);
                }
                else {
                    result.elements.push(current.element);
                }
            }
            if (current.message) {
                result.message = true;
            }
            return result;
        }, 200, true);
        this._register(onDidChangeData(({ message, elements }) => {
            if (elements.length) {
                this.refreshQueue = this.refreshQueue.then(() => {
                    const _promiseCallback = promiseCallback;
                    refreshingPromise = null;
                    return this.refresh(elements).then(() => _promiseCallback());
                });
            }
            if (message) {
                this.proxy.$setMessage(this.viewId, _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.MarkdownString.fromStrict(this._message) ?? '');
            }
        }));
    }
    async getChildren(parentHandle) {
        const parentElement = parentHandle ? this.getExtensionElement(parentHandle) : undefined;
        if (parentHandle && !parentElement) {
            this.logService.error(`No tree item with id \'${parentHandle}\' found.`);
            return Promise.resolve([]);
        }
        let childrenNodes = this.getChildrenNodes(parentHandle);
        if (!childrenNodes) {
            childrenNodes = await this.fetchChildrenNodes(parentElement);
        }
        return childrenNodes ? ( childrenNodes.map(n => n.item)) : undefined;
    }
    getExtensionElement(treeItemHandle) {
        return this.elements.get(treeItemHandle);
    }
    reveal(element, options) {
        options = options ? options : { select: true, focus: false };
        const select = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isUndefinedOrNull)(options.select) ? true : options.select;
        const focus = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isUndefinedOrNull)(options.focus) ? false : options.focus;
        const expand = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isUndefinedOrNull)(options.expand) ? false : options.expand;
        if (typeof this.dataProvider.getParent !== 'function') {
            return Promise.reject(( new Error(
                `Required registered TreeDataProvider to implement 'getParent' method to access 'reveal' method`
            )));
        }
        if (element) {
            return this.refreshPromise
                .then(() => this.resolveUnknownParentChain(element))
                .then(parentChain => this.resolveTreeNode(element, parentChain[parentChain.length - 1])
                .then(treeNode => this.proxy.$reveal(this.viewId, { item: treeNode.item, parentChain: ( parentChain.map(p => p.item)) }, { select, focus, expand })), error => this.logService.error(error));
        }
        else {
            return this.proxy.$reveal(this.viewId, undefined, { select, focus, expand });
        }
    }
    get message() {
        return this._message;
    }
    set message(message) {
        this._message = message;
        this._onDidChangeData.fire({ message: true, element: false });
    }
    get title() {
        return this._title;
    }
    set title(title) {
        this._title = title;
        this.proxy.$setTitle(this.viewId, title, this._description);
    }
    get description() {
        return this._description;
    }
    set description(description) {
        this._description = description;
        this.proxy.$setTitle(this.viewId, this._title, description);
    }
    get badge() {
        return this._badge;
    }
    set badge(badge) {
        if (this._badge?.value === badge?.value &&
            this._badge?.tooltip === badge?.tooltip) {
            return;
        }
        this._badge = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.ViewBadge.from(badge);
        this.proxy.$setBadge(this.viewId, badge);
    }
    setExpanded(treeItemHandle, expanded) {
        const element = this.getExtensionElement(treeItemHandle);
        if (element) {
            if (expanded) {
                this._onDidExpandElement.fire(( Object.freeze({ element })));
            }
            else {
                this._onDidCollapseElement.fire(( Object.freeze({ element })));
            }
        }
    }
    setSelectionAndFocus(selectedHandles, focusedHandle) {
        const changedSelection = !(0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__.equals)(this._selectedHandles, selectedHandles);
        this._selectedHandles = selectedHandles;
        const changedFocus = this._focusedHandle !== focusedHandle;
        this._focusedHandle = focusedHandle;
        if (changedSelection) {
            this._onDidChangeSelection.fire(( Object.freeze({ selection: this.selectedElements })));
        }
        if (changedFocus) {
            this._onDidChangeActiveItem.fire(( Object.freeze({ activeItem: this.focusedElement })));
        }
    }
    setVisible(visible) {
        if (visible !== this._visible) {
            this._visible = visible;
            this._onDidChangeVisibility.fire(( Object.freeze({ visible: this._visible })));
        }
    }
    async setCheckboxState(checkboxUpdates) {
        const items = (await Promise.all(( checkboxUpdates.map(async (checkboxUpdate) => {
            const extensionItem = this.getExtensionElement(checkboxUpdate.treeItemHandle);
            if (extensionItem) {
                return {
                    extensionItem: extensionItem,
                    treeItem: await this.dataProvider.getTreeItem(extensionItem),
                    newState: checkboxUpdate.newState ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.TreeItemCheckboxState.Checked : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.TreeItemCheckboxState.Unchecked
                };
            }
            return Promise.resolve(undefined);
        })))).filter((item) => item !== undefined);
        items.forEach(item => {
            item.treeItem.checkboxState = item.newState ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.TreeItemCheckboxState.Checked : _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.TreeItemCheckboxState.Unchecked;
        });
        this._onDidChangeCheckboxState.fire({ items: ( items.map(item => [item.extensionItem, item.newState])) });
    }
    async handleDrag(sourceTreeItemHandles, treeDataTransfer, token) {
        const extensionTreeItems = [];
        for (const sourceHandle of sourceTreeItemHandles) {
            const extensionItem = this.getExtensionElement(sourceHandle);
            if (extensionItem) {
                extensionTreeItems.push(extensionItem);
            }
        }
        if (!this.dndController?.handleDrag || (extensionTreeItems.length === 0)) {
            return;
        }
        await this.dndController.handleDrag(extensionTreeItems, treeDataTransfer, token);
        return treeDataTransfer;
    }
    get hasHandleDrag() {
        return !!this.dndController?.handleDrag;
    }
    async onDrop(treeDataTransfer, targetHandleOrNode, token) {
        const target = targetHandleOrNode ? this.getExtensionElement(targetHandleOrNode) : undefined;
        if ((!target && targetHandleOrNode) || !this.dndController?.handleDrop) {
            return;
        }
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_6__.asPromise)(() => this.dndController?.handleDrop
            ? this.dndController.handleDrop(target, treeDataTransfer, token)
            : undefined);
    }
    get hasResolve() {
        return !!this.dataProvider.resolveTreeItem;
    }
    async resolveTreeItem(treeItemHandle, token) {
        if (!this.dataProvider.resolveTreeItem) {
            return;
        }
        const element = this.elements.get(treeItemHandle);
        if (element) {
            const node = this.nodes.get(element);
            if (node) {
                const resolve = (await this.dataProvider.resolveTreeItem(node.extensionItem, element, token)) ?? node.extensionItem;
                this.validateTreeItem(resolve);
                node.item.tooltip = this.getTooltip(resolve.tooltip);
                node.item.command = this.getCommand(node.disposableStore, resolve.command);
                return node.item;
            }
        }
        return;
    }
    resolveUnknownParentChain(element) {
        return this.resolveParent(element)
            .then((parent) => {
            if (!parent) {
                return Promise.resolve([]);
            }
            return this.resolveUnknownParentChain(parent)
                .then(result => this.resolveTreeNode(parent, result[result.length - 1])
                .then(parentNode => {
                result.push(parentNode);
                return result;
            }));
        });
    }
    resolveParent(element) {
        const node = this.nodes.get(element);
        if (node) {
            return Promise.resolve(node.parent ? this.elements.get(node.parent.item.handle) : undefined);
        }
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_6__.asPromise)(() => this.dataProvider.getParent(element));
    }
    resolveTreeNode(element, parent) {
        const node = this.nodes.get(element);
        if (node) {
            return Promise.resolve(node);
        }
        return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_6__.asPromise)(() => this.dataProvider.getTreeItem(element))
            .then(extTreeItem => this.createHandle(element, extTreeItem, parent, true))
            .then(handle => this.getChildren(parent ? parent.item.handle : undefined)
            .then(() => {
            const cachedElement = this.getExtensionElement(handle);
            if (cachedElement) {
                const node = this.nodes.get(cachedElement);
                if (node) {
                    return Promise.resolve(node);
                }
            }
            throw ( new Error(
                `Cannot resolve tree item for element ${handle} from extension ${this.extension.identifier.value}`
            ));
        }));
    }
    getChildrenNodes(parentNodeOrHandle) {
        if (parentNodeOrHandle) {
            let parentNode;
            if (typeof parentNodeOrHandle === 'string') {
                const parentElement = this.getExtensionElement(parentNodeOrHandle);
                parentNode = parentElement ? this.nodes.get(parentElement) : undefined;
            }
            else {
                parentNode = parentNodeOrHandle;
            }
            return parentNode ? parentNode.children || undefined : undefined;
        }
        return this.roots;
    }
    async fetchChildrenNodes(parentElement) {
        this.clearChildren(parentElement);
        const cts = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_12__.CancellationTokenSource(this._refreshCancellationSource.token));
        try {
            const parentNode = parentElement ? this.nodes.get(parentElement) : undefined;
            const elements = await this.dataProvider.getChildren(parentElement);
            if (cts.token.isCancellationRequested) {
                return undefined;
            }
            const coalescedElements = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__.coalesce)(elements || []);
            const treeItems = await Promise.all(( (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__.coalesce)(coalescedElements).map(element => {
                return this.dataProvider.getTreeItem(element);
            })));
            if (cts.token.isCancellationRequested) {
                return undefined;
            }
            const items = ( treeItems.map(
                (item, index) => item ? this.createAndRegisterTreeNode(coalescedElements[index], item, parentNode) : null
            ));
            return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_9__.coalesce)(items);
        }
        finally {
            cts.dispose();
        }
    }
    refresh(elements) {
        const hasRoot = ( elements.some(element => !element));
        if (hasRoot) {
            this._refreshCancellationSource.dispose(true);
            this._refreshCancellationSource = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_12__.CancellationTokenSource());
            this.clearAll();
            return this.proxy.$refresh(this.viewId);
        }
        else {
            const handlesToRefresh = this.getHandlesToRefresh(elements);
            if (handlesToRefresh.length) {
                return this.refreshHandles(handlesToRefresh);
            }
        }
        return Promise.resolve(undefined);
    }
    getHandlesToRefresh(elements) {
        const elementsToUpdate = ( new Set());
        const elementNodes = ( elements.map(element => this.nodes.get(element)));
        for (const elementNode of elementNodes) {
            if (elementNode && !( elementsToUpdate.has(elementNode.item.handle))) {
                let currentNode = elementNode;
                while (currentNode && currentNode.parent && elementNodes.findIndex(node => currentNode && currentNode.parent && node && node.item.handle === currentNode.parent.item.handle) === -1) {
                    const parentElement = this.elements.get(currentNode.parent.item.handle);
                    currentNode = parentElement ? this.nodes.get(parentElement) : undefined;
                }
                if (currentNode && !currentNode.parent) {
                    elementsToUpdate.add(elementNode.item.handle);
                }
            }
        }
        const handlesToUpdate = [];
        elementsToUpdate.forEach((handle) => {
            const element = this.elements.get(handle);
            if (element) {
                const node = this.nodes.get(element);
                if (node && (!node.parent || !( elementsToUpdate.has(node.parent.item.handle)))) {
                    handlesToUpdate.push(handle);
                }
            }
        });
        return handlesToUpdate;
    }
    refreshHandles(itemHandles) {
        const itemsToRefresh = {};
        return Promise.all(( itemHandles.map(treeItemHandle => this.refreshNode(treeItemHandle)
            .then(node => {
            if (node) {
                itemsToRefresh[treeItemHandle] = node.item;
            }
        }))))
            .then(() => ( Object.keys(itemsToRefresh)).length ? this.proxy.$refresh(this.viewId, itemsToRefresh) : undefined);
    }
    refreshNode(treeItemHandle) {
        const extElement = this.getExtensionElement(treeItemHandle);
        if (extElement) {
            const existing = this.nodes.get(extElement);
            if (existing) {
                this.clearChildren(extElement);
                return (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_6__.asPromise)(() => this.dataProvider.getTreeItem(extElement))
                    .then(extTreeItem => {
                    if (extTreeItem) {
                        const newNode = this.createTreeNode(extElement, extTreeItem, existing.parent);
                        this.updateNodeCache(extElement, newNode, existing, existing.parent);
                        existing.dispose();
                        return newNode;
                    }
                    return null;
                });
            }
        }
        return Promise.resolve(null);
    }
    createAndRegisterTreeNode(element, extTreeItem, parentNode) {
        const node = this.createTreeNode(element, extTreeItem, parentNode);
        if (extTreeItem.id && ( this.elements.has(node.item.handle))) {
            throw ( new Error(
                (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 0, 'Element with id {0} is already registered', extTreeItem.id)
            ));
        }
        this.addNodeToCache(element, node);
        this.addNodeToParentCache(node, parentNode);
        return node;
    }
    getTooltip(tooltip) {
        if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.MarkdownString.isMarkdownString(tooltip)) {
            return _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_10__.MarkdownString.from(tooltip);
        }
        return tooltip;
    }
    getCommand(disposable, command) {
        return command ? { ...this.commands.toInternal(command, disposable), originalId: command.command } : undefined;
    }
    getCheckbox(extensionTreeItem) {
        if (extensionTreeItem.checkboxState === undefined) {
            return undefined;
        }
        let checkboxState;
        let tooltip = undefined;
        let accessibilityInformation = undefined;
        if (typeof extensionTreeItem.checkboxState === 'number') {
            checkboxState = extensionTreeItem.checkboxState;
        }
        else {
            checkboxState = extensionTreeItem.checkboxState.state;
            tooltip = extensionTreeItem.checkboxState.tooltip;
            accessibilityInformation = extensionTreeItem.checkboxState.accessibilityInformation;
        }
        return { isChecked: checkboxState === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.TreeItemCheckboxState.Checked, tooltip, accessibilityInformation };
    }
    validateTreeItem(extensionTreeItem) {
        if (!_extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.TreeItem.isTreeItem(extensionTreeItem, this.extension)) {
            throw ( new Error(
                `Extension ${this.extension.identifier.value} has provided an invalid tree item.`
            ));
        }
    }
    createTreeNode(element, extensionTreeItem, parent) {
        this.validateTreeItem(extensionTreeItem);
        const disposableStore = this._register(( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_4__.DisposableStore()));
        const handle = this.createHandle(element, extensionTreeItem, parent);
        const icon = this.getLightIconPath(extensionTreeItem);
        const item = {
            handle,
            parentHandle: parent ? parent.item.handle : undefined,
            label: toTreeItemLabel(extensionTreeItem.label),
            description: extensionTreeItem.description,
            resourceUri: extensionTreeItem.resourceUri,
            tooltip: this.getTooltip(extensionTreeItem.tooltip),
            command: this.getCommand(disposableStore, extensionTreeItem.command),
            contextValue: extensionTreeItem.contextValue,
            icon,
            iconDark: this.getDarkIconPath(extensionTreeItem) || icon,
            themeIcon: this.getThemeIcon(extensionTreeItem),
            collapsibleState: (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_8__.isUndefinedOrNull)(extensionTreeItem.collapsibleState) ? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.TreeItemCollapsibleState.None : extensionTreeItem.collapsibleState,
            accessibilityInformation: extensionTreeItem.accessibilityInformation,
            checkbox: this.getCheckbox(extensionTreeItem),
        };
        return {
            item,
            extensionItem: extensionTreeItem,
            parent,
            children: undefined,
            disposableStore,
            dispose() { disposableStore.dispose(); }
        };
    }
    getThemeIcon(extensionTreeItem) {
        return extensionTreeItem.iconPath instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.ThemeIcon ? extensionTreeItem.iconPath : undefined;
    }
    createHandle(element, { id, label, resourceUri }, parent, returnFirst) {
        if (id) {
            return `${ExtHostTreeView.ID_HANDLE_PREFIX}/${id}`;
        }
        const treeItemLabel = toTreeItemLabel(label);
        const prefix = parent ? parent.item.handle : ExtHostTreeView.LABEL_HANDLE_PREFIX;
        let elementId = treeItemLabel ? treeItemLabel.label : resourceUri ? (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_1__.basename)(resourceUri) : '';
        elementId = elementId.indexOf('/') !== -1 ? elementId.replace('/', '//') : elementId;
        const existingHandle = ( this.nodes.has(element)) ? this.nodes.get(element).item.handle : undefined;
        const childrenNodes = (this.getChildrenNodes(parent) || []);
        let handle;
        let counter = 0;
        do {
            handle = `${prefix}/${counter}:${elementId}`;
            if (returnFirst || !( this.elements.has(handle)) || existingHandle === handle) {
                break;
            }
            counter++;
        } while (counter <= childrenNodes.length);
        return handle;
    }
    getLightIconPath(extensionTreeItem) {
        if (extensionTreeItem.iconPath && !(extensionTreeItem.iconPath instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.ThemeIcon)) {
            if (typeof extensionTreeItem.iconPath === 'string'
                || _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(extensionTreeItem.iconPath)) {
                return this.getIconPath(extensionTreeItem.iconPath);
            }
            return this.getIconPath(extensionTreeItem.iconPath.light);
        }
        return undefined;
    }
    getDarkIconPath(extensionTreeItem) {
        if (extensionTreeItem.iconPath && !(extensionTreeItem.iconPath instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.ThemeIcon) && extensionTreeItem.iconPath.dark) {
            return this.getIconPath(extensionTreeItem.iconPath.dark);
        }
        return undefined;
    }
    getIconPath(iconPath) {
        if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(iconPath)) {
            return iconPath;
        }
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.file(iconPath);
    }
    addNodeToCache(element, node) {
        this.elements.set(node.item.handle, element);
        this.nodes.set(element, node);
    }
    updateNodeCache(element, newNode, existing, parentNode) {
        this.elements.delete(newNode.item.handle);
        this.nodes.delete(element);
        if (newNode.item.handle !== existing.item.handle) {
            this.elements.delete(existing.item.handle);
        }
        this.addNodeToCache(element, newNode);
        const childrenNodes = (this.getChildrenNodes(parentNode) || []);
        const childNode = childrenNodes.filter(c => c.item.handle === existing.item.handle)[0];
        if (childNode) {
            childrenNodes.splice(childrenNodes.indexOf(childNode), 1, newNode);
        }
    }
    addNodeToParentCache(node, parentNode) {
        if (parentNode) {
            if (!parentNode.children) {
                parentNode.children = [];
            }
            parentNode.children.push(node);
        }
        else {
            if (!this.roots) {
                this.roots = [];
            }
            this.roots.push(node);
        }
    }
    clearChildren(parentElement) {
        if (parentElement) {
            const node = this.nodes.get(parentElement);
            if (node) {
                if (node.children) {
                    for (const child of node.children) {
                        const childElement = this.elements.get(child.item.handle);
                        if (childElement) {
                            this.clear(childElement);
                        }
                    }
                }
                node.children = undefined;
            }
        }
        else {
            this.clearAll();
        }
    }
    clear(element) {
        const node = this.nodes.get(element);
        if (node) {
            if (node.children) {
                for (const child of node.children) {
                    const childElement = this.elements.get(child.item.handle);
                    if (childElement) {
                        this.clear(childElement);
                    }
                }
            }
            this.nodes.delete(element);
            this.elements.delete(node.item.handle);
            node.dispose();
        }
    }
    clearAll() {
        this.roots = undefined;
        this.elements.clear();
        this.nodes.forEach(node => node.dispose());
        this.nodes.clear();
    }
    dispose() {
        super.dispose();
        this._refreshCancellationSource.dispose();
        this.clearAll();
        this.proxy.$disposeTree(this.viewId);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTunnelService.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTunnelService.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostTunnelService: () => (/* binding */ ExtHostTunnelService),
/* harmony export */   IExtHostTunnelService: () => (/* binding */ IExtHostTunnelService),
/* harmony export */   TunnelDtoConverter: () => (/* binding */ TunnelDtoConverter)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_tunnel_common_tunnel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../platform/tunnel/common/tunnel.js */ "./node_modules/vscode/vscode/src/vs/platform/tunnel/common/tunnel.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");












const _moduleId = "vs/workbench/api/common/extHostTunnelService";
class ExtensionTunnel extends _platform_tunnel_common_tunnel_js__WEBPACK_IMPORTED_MODULE_7__.DisposableTunnel {
}
var TunnelDtoConverter;
( ((function(TunnelDtoConverter) {
    function fromApiTunnel(tunnel) {
        return {
            remoteAddress: tunnel.remoteAddress,
            localAddress: tunnel.localAddress,
            public: !!tunnel.public,
            privacy: tunnel.privacy ?? (tunnel.public ? _platform_tunnel_common_tunnel_js__WEBPACK_IMPORTED_MODULE_7__.TunnelPrivacyId.Public : _platform_tunnel_common_tunnel_js__WEBPACK_IMPORTED_MODULE_7__.TunnelPrivacyId.Private),
            protocol: tunnel.protocol
        };
    }
    TunnelDtoConverter.fromApiTunnel = fromApiTunnel;
    function fromServiceTunnel(tunnel) {
        return {
            remoteAddress: {
                host: tunnel.tunnelRemoteHost,
                port: tunnel.tunnelRemotePort
            },
            localAddress: tunnel.localAddress,
            public: tunnel.privacy !== _platform_tunnel_common_tunnel_js__WEBPACK_IMPORTED_MODULE_7__.TunnelPrivacyId.ConstantPrivate && tunnel.privacy !== _platform_tunnel_common_tunnel_js__WEBPACK_IMPORTED_MODULE_7__.TunnelPrivacyId.ConstantPrivate,
            privacy: tunnel.privacy,
            protocol: tunnel.protocol
        };
    }
    TunnelDtoConverter.fromServiceTunnel = fromServiceTunnel;
})(TunnelDtoConverter || (TunnelDtoConverter = {}))));
const IExtHostTunnelService = ( ((0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__.createDecorator)('IExtHostTunnelService')));
let ExtHostTunnelService = class ExtHostTunnelService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
    constructor(extHostRpc, initData, logService) {
        super();
        this.logService = logService;
        this._showCandidatePort = () => { return Promise.resolve(true); };
        this._extensionTunnels = ( (new Map()));
        this._onDidChangeTunnels = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_2__.Emitter()));
        this.onDidChangeTunnels = this._onDidChangeTunnels.event;
        this._providerHandleCounter = 0;
        this._portAttributesProviders = ( (new Map()));
        this._proxy = ( (extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_8__.MainContext.MainThreadTunnelService)));
    }
    async openTunnel(extension, forward) {
        this.logService.trace(`ForwardedPorts: (ExtHostTunnelService) ${extension.identifier.value} called openTunnel API for ${forward.remoteAddress.host}:${forward.remoteAddress.port}.`);
        const tunnel = await this._proxy.$openTunnel(forward, extension.displayName);
        if (tunnel) {
            const disposableTunnel = ( (new ExtensionTunnel(tunnel.remoteAddress, tunnel.localAddress, () => {
                return this._proxy.$closeTunnel(tunnel.remoteAddress);
            })));
            this._register(disposableTunnel);
            return disposableTunnel;
        }
        return undefined;
    }
    async getTunnels() {
        return this._proxy.$getTunnels();
    }
    nextPortAttributesProviderHandle() {
        return this._providerHandleCounter++;
    }
    registerPortsAttributesProvider(portSelector, provider) {
        if (portSelector.portRange === undefined && portSelector.commandPattern === undefined) {
            this.logService.error('PortAttributesProvider must specify either a portRange or a commandPattern');
        }
        const providerHandle = this.nextPortAttributesProviderHandle();
        this._portAttributesProviders.set(providerHandle, { selector: portSelector, provider });
        this._proxy.$registerPortsAttributesProvider(portSelector, providerHandle);
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_11__.Disposable(() => {
            this._portAttributesProviders.delete(providerHandle);
            this._proxy.$unregisterPortsAttributesProvider(providerHandle);
        });
    }
    async $providePortAttributes(handles, ports, pid, commandLine, cancellationToken) {
        const providedAttributes = [];
        for (const handle of handles) {
            const provider = this._portAttributesProviders.get(handle);
            if (!provider) {
                return [];
            }
            providedAttributes.push(...(await Promise.all(( (ports.map(async (port) => {
                let providedAttributes;
                try {
                    providedAttributes = await provider.provider.providePortAttributes({ port, pid, commandLine }, cancellationToken);
                }
                catch (e) {
                    providedAttributes = await provider.provider.providePortAttributes(port, pid, commandLine, cancellationToken);
                }
                return { providedAttributes, port };
            }))))));
        }
        const allAttributes = providedAttributes.filter(attribute => !!attribute.providedAttributes);
        return (allAttributes.length > 0) ? ( (allAttributes.map(attributes => {
            return {
                autoForwardAction: attributes.providedAttributes.autoForwardAction,
                port: attributes.port
            };
        }))) : [];
    }
    async $registerCandidateFinder(_enable) { }
    registerTunnelProvider(provider, information) {
        if (this._forwardPortProvider) {
            throw ( (new Error(
                'A tunnel provider has already been registered. Only the first tunnel provider to be registered will be used.'
            )));
        }
        this._forwardPortProvider = async (tunnelOptions, tunnelCreationOptions) => {
            const result = await provider.provideTunnel(tunnelOptions, tunnelCreationOptions, _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.None);
            return result ?? undefined;
        };
        const tunnelFeatures = information.tunnelFeatures ? {
            elevation: !!information.tunnelFeatures?.elevation,
            privacyOptions: information.tunnelFeatures?.privacyOptions,
            protocol: information.tunnelFeatures.protocol === undefined ? true : information.tunnelFeatures.protocol,
        } : undefined;
        this._proxy.$setTunnelProvider(tunnelFeatures);
        return Promise.resolve((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            this._forwardPortProvider = undefined;
            this._proxy.$setTunnelProvider(undefined);
        }));
    }
    async setTunnelFactory(provider, managedRemoteAuthority) {
        if (provider) {
            if (provider.candidatePortSource !== undefined) {
                this._proxy.$setCandidatePortSource(provider.candidatePortSource);
            }
            if (provider.showCandidatePort) {
                this._showCandidatePort = provider.showCandidatePort;
                this._proxy.$setCandidateFilter();
            }
            const tunnelFactory = provider.tunnelFactory ?? (managedRemoteAuthority ? this.makeManagedTunnelFactory(managedRemoteAuthority) : undefined);
            if (tunnelFactory) {
                this._forwardPortProvider = tunnelFactory;
                let privacyOptions = provider.tunnelFeatures?.privacyOptions ?? [];
                if (provider.tunnelFeatures?.public && (privacyOptions.length === 0)) {
                    privacyOptions = [
                        {
                            id: 'private',
                            label: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 0, "Private")),
                            themeIcon: 'lock'
                        },
                        {
                            id: 'public',
                            label: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(_moduleId, 1, "Public")),
                            themeIcon: 'eye'
                        }
                    ];
                }
                const tunnelFeatures = provider.tunnelFeatures ? {
                    elevation: !!provider.tunnelFeatures?.elevation,
                    public: !!provider.tunnelFeatures?.public,
                    privacyOptions,
                    protocol: true
                } : undefined;
                this._proxy.$setTunnelProvider(tunnelFeatures);
            }
        }
        else {
            this._forwardPortProvider = undefined;
        }
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            this._forwardPortProvider = undefined;
        });
    }
    makeManagedTunnelFactory(_authority) {
        return undefined;
    }
    async $closeTunnel(remote, silent) {
        if (( (this._extensionTunnels.has(remote.host)))) {
            const hostMap = this._extensionTunnels.get(remote.host);
            if (( (hostMap.has(remote.port)))) {
                if (silent) {
                    hostMap.get(remote.port).disposeListener.dispose();
                }
                await hostMap.get(remote.port).tunnel.dispose();
                hostMap.delete(remote.port);
            }
        }
    }
    async $onDidTunnelsChange() {
        this._onDidChangeTunnels.fire();
    }
    async $forwardPort(tunnelOptions, tunnelCreationOptions) {
        if (this._forwardPortProvider) {
            try {
                this.logService.trace('ForwardedPorts: (ExtHostTunnelService) Getting tunnel from provider.');
                const providedPort = this._forwardPortProvider(tunnelOptions, tunnelCreationOptions);
                this.logService.trace('ForwardedPorts: (ExtHostTunnelService) Got tunnel promise from provider.');
                if (providedPort !== undefined) {
                    const tunnel = await providedPort;
                    this.logService.trace('ForwardedPorts: (ExtHostTunnelService) Successfully awaited tunnel from provider.');
                    if (tunnel === undefined) {
                        this.logService.error('ForwardedPorts: (ExtHostTunnelService) Resolved tunnel is undefined');
                        return undefined;
                    }
                    if (!( (this._extensionTunnels.has(tunnelOptions.remoteAddress.host)))) {
                        this._extensionTunnels.set(tunnelOptions.remoteAddress.host, ( (new Map())));
                    }
                    const disposeListener = this._register(tunnel.onDidDispose(() => {
                        this.logService.trace('ForwardedPorts: (ExtHostTunnelService) Extension fired tunnel\'s onDidDispose.');
                        return this._proxy.$closeTunnel(tunnel.remoteAddress);
                    }));
                    this._extensionTunnels.get(tunnelOptions.remoteAddress.host).set(tunnelOptions.remoteAddress.port, { tunnel, disposeListener });
                    return TunnelDtoConverter.fromApiTunnel(tunnel);
                }
                else {
                    this.logService.trace('ForwardedPorts: (ExtHostTunnelService) Tunnel is undefined');
                }
            }
            catch (e) {
                this.logService.trace('ForwardedPorts: (ExtHostTunnelService) tunnel provider error');
                if (e instanceof Error) {
                    return e.message;
                }
            }
        }
        return undefined;
    }
    async $applyCandidateFilter(candidates) {
        const filter = await Promise.all(( (candidates.map(
            candidate => this._showCandidatePort(candidate.host, candidate.port, candidate.detail ?? '')
        ))));
        const result = candidates.filter((candidate, index) => filter[index]);
        this.logService.trace(`ForwardedPorts: (ExtHostTunnelService) filtered from ${( (candidates.map(port => port.port))).join(', ')} to ${( (result.map(port => port.port))).join(', ')}`);
        return result;
    }
};
ExtHostTunnelService = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostRpcService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_9__.IExtHostInitDataService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_6__.ILogService)))
], ExtHostTunnelService)));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CallHierarchyIncomingCall: () => (/* binding */ CallHierarchyIncomingCall),
/* harmony export */   CallHierarchyItem: () => (/* binding */ CallHierarchyItem),
/* harmony export */   CallHierarchyOutgoingCall: () => (/* binding */ CallHierarchyOutgoingCall),
/* harmony export */   ChatAgentCompletionItem: () => (/* binding */ ChatAgentCompletionItem),
/* harmony export */   ChatAgentRequest: () => (/* binding */ ChatAgentRequest),
/* harmony export */   ChatAgentResult: () => (/* binding */ ChatAgentResult),
/* harmony export */   ChatAgentUserActionEvent: () => (/* binding */ ChatAgentUserActionEvent),
/* harmony export */   ChatAgentValueReference: () => (/* binding */ ChatAgentValueReference),
/* harmony export */   ChatFollowup: () => (/* binding */ ChatFollowup),
/* harmony export */   ChatLocation: () => (/* binding */ ChatLocation),
/* harmony export */   ChatResponseAnchorPart: () => (/* binding */ ChatResponseAnchorPart),
/* harmony export */   ChatResponseCommandButtonPart: () => (/* binding */ ChatResponseCommandButtonPart),
/* harmony export */   ChatResponseConfirmationPart: () => (/* binding */ ChatResponseConfirmationPart),
/* harmony export */   ChatResponseDetectedParticipantPart: () => (/* binding */ ChatResponseDetectedParticipantPart),
/* harmony export */   ChatResponseFilesPart: () => (/* binding */ ChatResponseFilesPart),
/* harmony export */   ChatResponseMarkdownPart: () => (/* binding */ ChatResponseMarkdownPart),
/* harmony export */   ChatResponseMarkdownWithVulnerabilitiesPart: () => (/* binding */ ChatResponseMarkdownWithVulnerabilitiesPart),
/* harmony export */   ChatResponsePart: () => (/* binding */ ChatResponsePart),
/* harmony export */   ChatResponseProgressPart: () => (/* binding */ ChatResponseProgressPart),
/* harmony export */   ChatResponseReferencePart: () => (/* binding */ ChatResponseReferencePart),
/* harmony export */   ChatResponseTextEditPart: () => (/* binding */ ChatResponseTextEditPart),
/* harmony export */   ChatResponseWarningPart: () => (/* binding */ ChatResponseWarningPart),
/* harmony export */   ChatTask: () => (/* binding */ ChatTask),
/* harmony export */   ChatTaskResult: () => (/* binding */ ChatTaskResult),
/* harmony export */   CodeActionTriggerKind: () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   ColorPresentation: () => (/* binding */ ColorPresentation),
/* harmony export */   CompletionContext: () => (/* binding */ CompletionContext),
/* harmony export */   CompletionItem: () => (/* binding */ CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionTriggerKind: () => (/* binding */ CompletionTriggerKind),
/* harmony export */   DataTransfer: () => (/* binding */ DataTransfer),
/* harmony export */   DataTransferItem: () => (/* binding */ DataTransferItem),
/* harmony export */   DebugTreeItem: () => (/* binding */ DebugTreeItem),
/* harmony export */   DecorationRangeBehavior: () => (/* binding */ DecorationRangeBehavior),
/* harmony export */   DecorationRenderOptions: () => (/* binding */ DecorationRenderOptions),
/* harmony export */   DefinitionLink: () => (/* binding */ DefinitionLink),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   DiagnosticRelatedInformation: () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   DiagnosticSeverity: () => (/* binding */ DiagnosticSeverity),
/* harmony export */   DiagnosticTag: () => (/* binding */ DiagnosticTag),
/* harmony export */   DocumentHighlight: () => (/* binding */ DocumentHighlight),
/* harmony export */   DocumentLink: () => (/* binding */ DocumentLink),
/* harmony export */   DocumentSelector: () => (/* binding */ DocumentSelector),
/* harmony export */   DocumentSymbol: () => (/* binding */ DocumentSymbol),
/* harmony export */   EndOfLine: () => (/* binding */ EndOfLine),
/* harmony export */   EvaluatableExpression: () => (/* binding */ EvaluatableExpression),
/* harmony export */   FoldingRange: () => (/* binding */ FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   GlobPattern: () => (/* binding */ GlobPattern),
/* harmony export */   Hover: () => (/* binding */ Hover),
/* harmony export */   InlayHint: () => (/* binding */ InlayHint),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlayHintLabelPart: () => (/* binding */ InlayHintLabelPart),
/* harmony export */   InlineValue: () => (/* binding */ InlineValue),
/* harmony export */   InlineValueContext: () => (/* binding */ InlineValueContext),
/* harmony export */   LanguageModelChatMessage: () => (/* binding */ LanguageModelChatMessage),
/* harmony export */   LanguageModelChatMessageRole: () => (/* binding */ LanguageModelChatMessageRole),
/* harmony export */   LanguageModelToolDescription: () => (/* binding */ LanguageModelToolDescription),
/* harmony export */   LanguageSelector: () => (/* binding */ LanguageSelector),
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   MappedEditsContext: () => (/* binding */ MappedEditsContext),
/* harmony export */   MarkdownString: () => (/* binding */ MarkdownString),
/* harmony export */   MultiDocumentHighlight: () => (/* binding */ MultiDocumentHighlight),
/* harmony export */   NotebookCellData: () => (/* binding */ NotebookCellData),
/* harmony export */   NotebookCellExecutionState: () => (/* binding */ NotebookCellExecutionState),
/* harmony export */   NotebookCellExecutionSummary: () => (/* binding */ NotebookCellExecutionSummary),
/* harmony export */   NotebookCellKind: () => (/* binding */ NotebookCellKind),
/* harmony export */   NotebookCellOutput: () => (/* binding */ NotebookCellOutput),
/* harmony export */   NotebookCellOutputItem: () => (/* binding */ NotebookCellOutputItem),
/* harmony export */   NotebookData: () => (/* binding */ NotebookData),
/* harmony export */   NotebookDocumentContentOptions: () => (/* binding */ NotebookDocumentContentOptions),
/* harmony export */   NotebookExclusiveDocumentPattern: () => (/* binding */ NotebookExclusiveDocumentPattern),
/* harmony export */   NotebookKernelSourceAction: () => (/* binding */ NotebookKernelSourceAction),
/* harmony export */   NotebookRange: () => (/* binding */ NotebookRange),
/* harmony export */   NotebookRendererScript: () => (/* binding */ NotebookRendererScript),
/* harmony export */   NotebookStatusBarItem: () => (/* binding */ NotebookStatusBarItem),
/* harmony export */   ParameterInformation: () => (/* binding */ ParameterInformation),
/* harmony export */   PartialAcceptInfo: () => (/* binding */ PartialAcceptInfo),
/* harmony export */   PartialAcceptTriggerKind: () => (/* binding */ PartialAcceptTriggerKind),
/* harmony export */   Position: () => (/* binding */ Position),
/* harmony export */   ProgressLocation: () => (/* binding */ ProgressLocation),
/* harmony export */   Range: () => (/* binding */ Range),
/* harmony export */   Selection: () => (/* binding */ Selection),
/* harmony export */   SelectionRange: () => (/* binding */ SelectionRange),
/* harmony export */   SignatureHelp: () => (/* binding */ SignatureHelp),
/* harmony export */   SignatureInformation: () => (/* binding */ SignatureInformation),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   TerminalQuickFix: () => (/* binding */ TerminalQuickFix),
/* harmony export */   TestCoverage: () => (/* binding */ TestCoverage),
/* harmony export */   TestItem: () => (/* binding */ TestItem),
/* harmony export */   TestMessage: () => (/* binding */ TestMessage),
/* harmony export */   TestResults: () => (/* binding */ TestResults),
/* harmony export */   TestTag: () => (/* binding */ TestTag),
/* harmony export */   TextDocumentSaveReason: () => (/* binding */ TextDocumentSaveReason),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   TextEditorLineNumbersStyle: () => (/* binding */ TextEditorLineNumbersStyle),
/* harmony export */   TextEditorOpenOptions: () => (/* binding */ TextEditorOpenOptions),
/* harmony export */   ThemableDecorationAttachmentRenderOptions: () => (/* binding */ ThemableDecorationAttachmentRenderOptions),
/* harmony export */   ThemableDecorationRenderOptions: () => (/* binding */ ThemableDecorationRenderOptions),
/* harmony export */   TokenType: () => (/* binding */ TokenType),
/* harmony export */   TypeHierarchyItem: () => (/* binding */ TypeHierarchyItem),
/* harmony export */   ViewBadge: () => (/* binding */ ViewBadge),
/* harmony export */   ViewColumn: () => (/* binding */ ViewColumn),
/* harmony export */   WorkspaceEdit: () => (/* binding */ WorkspaceEdit),
/* harmony export */   WorkspaceSymbol: () => (/* binding */ WorkspaceSymbol),
/* harmony export */   fromRangeOrRangeWithMessage: () => (/* binding */ fromRangeOrRangeWithMessage),
/* harmony export */   isDecorationOptionsArr: () => (/* binding */ isDecorationOptionsArr),
/* harmony export */   location: () => (/* binding */ location),
/* harmony export */   pathOrURIToURI: () => (/* binding */ pathOrURIToURI)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_dataTransfer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/dataTransfer.js */ "./node_modules/vscode/vscode/src/vs/base/common/dataTransfer.js");
/* harmony import */ var _base_common_functional_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/functional.js */ "./node_modules/vscode/vscode/src/vs/base/common/functional.js");
/* harmony import */ var _base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/htmlContent.js */ "./node_modules/vscode/vscode/src/vs/base/common/htmlContent.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _external_vscode_marked_lib_marked_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../external/vscode-marked/lib/marked.esm.js */ "./node_modules/vscode/external/vscode-marked/lib/marked.esm.js");
/* harmony import */ var _base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/marshalling.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshalling.js");
/* harmony import */ var _base_common_mime_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/mime.js */ "./node_modules/vscode/vscode/src/vs/base/common/mime.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_prefixTree_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../base/common/prefixTree.js */ "./node_modules/vscode/vscode/src/vs/base/common/prefixTree.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_themables_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../base/common/themables.js */ "./node_modules/vscode/vscode/src/vs/base/common/themables.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../editor/common/config/editorOptions.js */ "./node_modules/vscode/vscode/src/vs/editor/common/config/editorOptions.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../editor/common/encodedTokenAttributes.js */ "./node_modules/vscode/vscode/src/vs/editor/common/encodedTokenAttributes.js");
/* harmony import */ var _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../editor/common/languages.js */ "./node_modules/vscode/vscode/src/vs/editor/common/languages.js");
/* harmony import */ var _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../../editor/common/model.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model.js");
/* harmony import */ var _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../../platform/markers/common/markers.js */ "./node_modules/vscode/vscode/src/vs/platform/markers/common/markers.js");
/* harmony import */ var _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../../../platform/progress/common/progress.js */ "./node_modules/vscode/vscode/src/vs/platform/progress/common/progress.js");
/* harmony import */ var _extHostTestingPrivateApi_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./extHostTestingPrivateApi.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTestingPrivateApi.js");
/* harmony import */ var _common_editor_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../../common/editor.js */ "./node_modules/vscode/vscode/src/vs/workbench/common/editor.js");
/* harmony import */ var _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../contrib/chat/common/chatAgents.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatAgents.js");
/* harmony import */ var _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../../contrib/chat/common/languageModels.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/languageModels.js");
/* harmony import */ var _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../contrib/debug/common/debug.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debug.js");
/* harmony import */ var _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../contrib/notebook/common/notebookCommon.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookCommon.js");
/* harmony import */ var _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../../contrib/testing/common/testId.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testId.js");
/* harmony import */ var _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../../contrib/testing/common/testTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testTypes.js");
/* harmony import */ var _services_editor_common_editorService_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../../services/editor/common/editorService.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorService.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
































var Selection;
( (function(Selection) {
    function to(selection) {
        const { selectionStartLineNumber, selectionStartColumn, positionLineNumber, positionColumn } = selection;
        const start = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Position(selectionStartLineNumber - 1, selectionStartColumn - 1);
        const end = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Position(positionLineNumber - 1, positionColumn - 1);
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Selection(start, end);
    }
    Selection.to = to;
    function from(selection) {
        const { anchor, active } = selection;
        return {
            selectionStartLineNumber: anchor.line + 1,
            selectionStartColumn: anchor.character + 1,
            positionLineNumber: active.line + 1,
            positionColumn: active.character + 1
        };
    }
    Selection.from = from;
})(Selection || (Selection = {})));
var Range;
( (function(Range) {
    function from(range) {
        if (!range) {
            return undefined;
        }
        const { start, end } = range;
        return {
            startLineNumber: start.line + 1,
            startColumn: start.character + 1,
            endLineNumber: end.line + 1,
            endColumn: end.character + 1
        };
    }
    Range.from = from;
    function to(range) {
        if (!range) {
            return undefined;
        }
        const { startLineNumber, startColumn, endLineNumber, endColumn } = range;
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Range(startLineNumber - 1, startColumn - 1, endLineNumber - 1, endColumn - 1);
    }
    Range.to = to;
})(Range || (Range = {})));
var Location;
( (function(Location) {
    function from(location) {
        return {
            uri: location.uri,
            range: Range.from(location.range)
        };
    }
    Location.from = from;
    function to(location) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Location(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(location.uri), Range.to(location.range));
    }
    Location.to = to;
})(Location || (Location = {})));
var TokenType;
( (function(TokenType) {
    function to(type) {
        switch (type) {
            case _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_17__.StandardTokenType.Comment: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.StandardTokenType.Comment;
            case _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_17__.StandardTokenType.Other: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.StandardTokenType.Other;
            case _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_17__.StandardTokenType.RegEx: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.StandardTokenType.RegEx;
            case _editor_common_encodedTokenAttributes_js__WEBPACK_IMPORTED_MODULE_17__.StandardTokenType.String: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.StandardTokenType.String;
        }
    }
    TokenType.to = to;
})(TokenType || (TokenType = {})));
var Position;
( (function(Position) {
    function to(position) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Position(position.lineNumber - 1, position.column - 1);
    }
    Position.to = to;
    function from(position) {
        return { lineNumber: position.line + 1, column: position.character + 1 };
    }
    Position.from = from;
})(Position || (Position = {})));
var DocumentSelector;
( (function(DocumentSelector) {
    function from(value, uriTransformer, extension) {
        return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.asArray)(value).map(sel => _doTransformDocumentSelector(sel, uriTransformer, extension))));
    }
    DocumentSelector.from = from;
    function _doTransformDocumentSelector(selector, uriTransformer, extension) {
        if (typeof selector === 'string') {
            return {
                $serialized: true,
                language: selector,
                isBuiltin: extension?.isBuiltin,
            };
        }
        if (selector) {
            return {
                $serialized: true,
                language: selector.language,
                scheme: _transformScheme(selector.scheme, uriTransformer),
                pattern: GlobPattern.from(selector.pattern) ?? undefined,
                exclusive: selector.exclusive,
                notebookType: selector.notebookType,
                isBuiltin: extension?.isBuiltin
            };
        }
        return undefined;
    }
    function _transformScheme(scheme, uriTransformer) {
        if (uriTransformer && typeof scheme === 'string') {
            return uriTransformer.transformOutgoingScheme(scheme);
        }
        return scheme;
    }
})(DocumentSelector || (DocumentSelector = {})));
var DiagnosticTag;
( (function(DiagnosticTag) {
    function from(value) {
        switch (value) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticTag.Unnecessary:
                return _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerTag.Unnecessary;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticTag.Deprecated:
                return _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerTag.Deprecated;
        }
        return undefined;
    }
    DiagnosticTag.from = from;
    function to(value) {
        switch (value) {
            case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerTag.Unnecessary:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticTag.Unnecessary;
            case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerTag.Deprecated:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticTag.Deprecated;
            default:
                return undefined;
        }
    }
    DiagnosticTag.to = to;
})(DiagnosticTag || (DiagnosticTag = {})));
var Diagnostic;
( (function(Diagnostic) {
    function from(value) {
        let code;
        if (value.code) {
            if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isString)(value.code) || (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isNumber)(value.code)) {
                code = String(value.code);
            }
            else {
                code = {
                    value: String(value.code.value),
                    target: value.code.target,
                };
            }
        }
        return {
            ...Range.from(value.range),
            message: value.message,
            source: value.source,
            code,
            severity: DiagnosticSeverity.from(value.severity),
            relatedInformation: value.relatedInformation && ( value.relatedInformation.map(DiagnosticRelatedInformation.from)),
            tags: Array.isArray(value.tags) ? (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( value.tags.map(DiagnosticTag.from))) : undefined,
        };
    }
    Diagnostic.from = from;
    function to(value) {
        const res = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Diagnostic(Range.to(value), value.message, DiagnosticSeverity.to(value.severity));
        res.source = value.source;
        res.code = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isString)(value.code) ? value.code : value.code?.value;
        res.relatedInformation = value.relatedInformation && ( value.relatedInformation.map(DiagnosticRelatedInformation.to));
        res.tags = value.tags && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.coalesce)(( value.tags.map(DiagnosticTag.to)));
        return res;
    }
    Diagnostic.to = to;
})(Diagnostic || (Diagnostic = {})));
var DiagnosticRelatedInformation;
( (function(DiagnosticRelatedInformation) {
    function from(value) {
        return {
            ...Range.from(value.location.range),
            message: value.message,
            resource: value.location.uri
        };
    }
    DiagnosticRelatedInformation.from = from;
    function to(value) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticRelatedInformation(new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Location(value.resource, Range.to(value)), value.message);
    }
    DiagnosticRelatedInformation.to = to;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {})));
var DiagnosticSeverity;
( (function(DiagnosticSeverity) {
    function from(value) {
        switch (value) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Error:
                return _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Error;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Warning:
                return _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Warning;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Information:
                return _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Info;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Hint:
                return _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Hint;
        }
        return _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Error;
    }
    DiagnosticSeverity.from = from;
    function to(value) {
        switch (value) {
            case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Info:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Information;
            case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Warning:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Warning;
            case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Error:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Error;
            case _platform_markers_common_markers_js__WEBPACK_IMPORTED_MODULE_20__.MarkerSeverity.Hint:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Hint;
            default:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DiagnosticSeverity.Error;
        }
    }
    DiagnosticSeverity.to = to;
})(DiagnosticSeverity || (DiagnosticSeverity = {})));
var ViewColumn;
( (function(ViewColumn) {
    function from(column) {
        if (typeof column === 'number' && column >= _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ViewColumn.One) {
            return column - 1;
        }
        if (column === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ViewColumn.Beside) {
            return _services_editor_common_editorService_js__WEBPACK_IMPORTED_MODULE_30__.SIDE_GROUP;
        }
        return _services_editor_common_editorService_js__WEBPACK_IMPORTED_MODULE_30__.ACTIVE_GROUP;
    }
    ViewColumn.from = from;
    function to(position) {
        if (typeof position === 'number' && position >= 0) {
            return position + 1;
        }
        throw ( new Error(`invalid 'EditorGroupColumn'`));
    }
    ViewColumn.to = to;
})(ViewColumn || (ViewColumn = {})));
function isDecorationOptions(something) {
    return (typeof something.range !== 'undefined');
}
function isDecorationOptionsArr(something) {
    if (something.length === 0) {
        return true;
    }
    return isDecorationOptions(something[0]) ? true : false;
}
var MarkdownString;
( (function(MarkdownString) {
    function fromMany(markup) {
        return ( markup.map(MarkdownString.from));
    }
    MarkdownString.fromMany = fromMany;
    function isCodeblock(thing) {
        return thing && typeof thing === 'object'
            && typeof thing.language === 'string'
            && typeof thing.value === 'string';
    }
    function from(markup) {
        let res;
        if (isCodeblock(markup)) {
            const { language, value } = markup;
            res = { value: '```' + language + '\n' + value + '\n```\n' };
        }
        else if (_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.MarkdownString.isMarkdownString(markup)) {
            res = { value: markup.value, isTrusted: markup.isTrusted, supportThemeIcons: markup.supportThemeIcons, supportHtml: markup.supportHtml, baseUri: markup.baseUri };
        }
        else if (typeof markup === 'string') {
            res = { value: markup };
        }
        else {
            res = { value: '' };
        }
        const resUris = Object.create(null);
        res.uris = resUris;
        const collectUri = (href) => {
            try {
                let uri = ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.parse(href, true));
                uri = uri.with({ query: _uriMassage(uri.query, resUris) });
                resUris[href] = uri;
            }
            catch (e) {
            }
            return '';
        };
        const renderer = new _external_vscode_marked_lib_marked_esm_js__WEBPACK_IMPORTED_MODULE_6__["default"].Renderer();
        renderer.link = collectUri;
        renderer.image = href => typeof href === 'string' ? collectUri((0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_4__.parseHrefAndDimensions)(href).href) : '';
        (0,_external_vscode_marked_lib_marked_esm_js__WEBPACK_IMPORTED_MODULE_6__["default"])(res.value, { renderer });
        return res;
    }
    MarkdownString.from = from;
    function _uriMassage(part, bucket) {
        if (!part) {
            return part;
        }
        let data;
        try {
            data = (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__.parse)(part);
        }
        catch (e) {
        }
        if (!data) {
            return part;
        }
        let changed = false;
        data = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_9__.cloneAndChange)(data, value => {
            if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(value)) {
                const key = `__uri_${( Math.random().toString(16)).slice(2, 8)}`;
                bucket[key] = value;
                changed = true;
                return key;
            }
            else {
                return undefined;
            }
        });
        if (!changed) {
            return part;
        }
        return JSON.stringify(data);
    }
    function to(value) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.MarkdownString(value.value, value.supportThemeIcons);
        result.isTrusted = value.isTrusted;
        result.supportHtml = value.supportHtml;
        result.baseUri = value.baseUri ? ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.from(value.baseUri)) : undefined;
        return result;
    }
    MarkdownString.to = to;
    function fromStrict(value) {
        if (!value) {
            return undefined;
        }
        return typeof value === 'string' ? value : MarkdownString.from(value);
    }
    MarkdownString.fromStrict = fromStrict;
})(MarkdownString || (MarkdownString = {})));
function fromRangeOrRangeWithMessage(ranges) {
    if (isDecorationOptionsArr(ranges)) {
        return ( ranges.map((r) => {
            return {
                range: Range.from(r.range),
                hoverMessage: Array.isArray(r.hoverMessage)
                    ? MarkdownString.fromMany(r.hoverMessage)
                    : (r.hoverMessage ? MarkdownString.from(r.hoverMessage) : undefined),
                renderOptions:  r.renderOptions
            };
        }));
    }
    else {
        return ( ranges.map((r) => {
            return {
                range: Range.from(r)
            };
        }));
    }
}
function pathOrURIToURI(value) {
    if (typeof value === 'undefined') {
        return value;
    }
    if (typeof value === 'string') {
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.file(value);
    }
    else {
        return value;
    }
}
var ThemableDecorationAttachmentRenderOptions;
( (function(ThemableDecorationAttachmentRenderOptions) {
    function from(options) {
        if (typeof options === 'undefined') {
            return options;
        }
        return {
            contentText: options.contentText,
            contentIconPath: options.contentIconPath ? pathOrURIToURI(options.contentIconPath) : undefined,
            border: options.border,
            borderColor: options.borderColor,
            fontStyle: options.fontStyle,
            fontWeight: options.fontWeight,
            textDecoration: options.textDecoration,
            color: options.color,
            backgroundColor: options.backgroundColor,
            margin: options.margin,
            width: options.width,
            height: options.height,
        };
    }
    ThemableDecorationAttachmentRenderOptions.from = from;
})(
    ThemableDecorationAttachmentRenderOptions || (ThemableDecorationAttachmentRenderOptions = {})
));
var ThemableDecorationRenderOptions;
( (function(ThemableDecorationRenderOptions) {
    function from(options) {
        if (typeof options === 'undefined') {
            return options;
        }
        return {
            backgroundColor: options.backgroundColor,
            outline: options.outline,
            outlineColor: options.outlineColor,
            outlineStyle: options.outlineStyle,
            outlineWidth: options.outlineWidth,
            border: options.border,
            borderColor: options.borderColor,
            borderRadius: options.borderRadius,
            borderSpacing: options.borderSpacing,
            borderStyle: options.borderStyle,
            borderWidth: options.borderWidth,
            fontStyle: options.fontStyle,
            fontWeight: options.fontWeight,
            textDecoration: options.textDecoration,
            cursor: options.cursor,
            color: options.color,
            opacity: options.opacity,
            letterSpacing: options.letterSpacing,
            gutterIconPath: options.gutterIconPath ? pathOrURIToURI(options.gutterIconPath) : undefined,
            gutterIconSize: options.gutterIconSize,
            overviewRulerColor: options.overviewRulerColor,
            before: options.before ? ThemableDecorationAttachmentRenderOptions.from(options.before) : undefined,
            after: options.after ? ThemableDecorationAttachmentRenderOptions.from(options.after) : undefined,
        };
    }
    ThemableDecorationRenderOptions.from = from;
})(ThemableDecorationRenderOptions || (ThemableDecorationRenderOptions = {})));
var DecorationRangeBehavior;
( (function(DecorationRangeBehavior) {
    function from(value) {
        if (typeof value === 'undefined') {
            return value;
        }
        switch (value) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DecorationRangeBehavior.OpenOpen:
                return _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DecorationRangeBehavior.ClosedClosed:
                return _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DecorationRangeBehavior.OpenClosed:
                return _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.TrackedRangeStickiness.GrowsOnlyWhenTypingBefore;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DecorationRangeBehavior.ClosedOpen:
                return _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.TrackedRangeStickiness.GrowsOnlyWhenTypingAfter;
        }
    }
    DecorationRangeBehavior.from = from;
})(DecorationRangeBehavior || (DecorationRangeBehavior = {})));
var DecorationRenderOptions;
( (function(DecorationRenderOptions) {
    function from(options) {
        return {
            isWholeLine: options.isWholeLine,
            rangeBehavior: options.rangeBehavior ? DecorationRangeBehavior.from(options.rangeBehavior) : undefined,
            overviewRulerLane: options.overviewRulerLane,
            light: options.light ? ThemableDecorationRenderOptions.from(options.light) : undefined,
            dark: options.dark ? ThemableDecorationRenderOptions.from(options.dark) : undefined,
            backgroundColor: options.backgroundColor,
            outline: options.outline,
            outlineColor: options.outlineColor,
            outlineStyle: options.outlineStyle,
            outlineWidth: options.outlineWidth,
            border: options.border,
            borderColor: options.borderColor,
            borderRadius: options.borderRadius,
            borderSpacing: options.borderSpacing,
            borderStyle: options.borderStyle,
            borderWidth: options.borderWidth,
            fontStyle: options.fontStyle,
            fontWeight: options.fontWeight,
            textDecoration: options.textDecoration,
            cursor: options.cursor,
            color: options.color,
            opacity: options.opacity,
            letterSpacing: options.letterSpacing,
            gutterIconPath: options.gutterIconPath ? pathOrURIToURI(options.gutterIconPath) : undefined,
            gutterIconSize: options.gutterIconSize,
            overviewRulerColor: options.overviewRulerColor,
            before: options.before ? ThemableDecorationAttachmentRenderOptions.from(options.before) : undefined,
            after: options.after ? ThemableDecorationAttachmentRenderOptions.from(options.after) : undefined,
        };
    }
    DecorationRenderOptions.from = from;
})(DecorationRenderOptions || (DecorationRenderOptions = {})));
var TextEdit;
( (function(TextEdit) {
    function from(edit) {
        return {
            text: edit.newText,
            eol: edit.newEol && EndOfLine.from(edit.newEol),
            range: Range.from(edit.range)
        };
    }
    TextEdit.from = from;
    function to(edit) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEdit(Range.to(edit.range), edit.text);
        result.newEol = (typeof edit.eol === 'undefined' ? undefined : EndOfLine.to(edit.eol));
        return result;
    }
    TextEdit.to = to;
})(TextEdit || (TextEdit = {})));
var WorkspaceEdit;
( (function(WorkspaceEdit) {
    function from(value, versionInfo) {
        const result = {
            edits: []
        };
        if (value instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.WorkspaceEdit) {
            const toCreate = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_5__.ResourceSet());
            for (const entry of value._allEntries()) {
                if (entry._type === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FileEditType.File && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(entry.to) && entry.from === undefined) {
                    toCreate.add(entry.to);
                }
            }
            for (const entry of value._allEntries()) {
                if (entry._type === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FileEditType.File) {
                    let contents;
                    if (entry.options?.contents) {
                        if (ArrayBuffer.isView(entry.options.contents)) {
                            contents = { type: 'base64', value: (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.encodeBase64)(_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.wrap(entry.options.contents)) };
                        }
                        else {
                            contents = { type: 'dataTransferItem', id: entry.options.contents._itemId };
                        }
                    }
                    result.edits.push({
                        oldResource: entry.from,
                        newResource: entry.to,
                        options: { ...entry.options, contents },
                        metadata: entry.metadata
                    });
                }
                else if (entry._type === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FileEditType.Text) {
                    result.edits.push({
                        resource: entry.uri,
                        textEdit: TextEdit.from(entry.edit),
                        versionId: !( toCreate.has(entry.uri)) ? versionInfo?.getTextDocumentVersion(entry.uri) : undefined,
                        metadata: entry.metadata
                    });
                }
                else if (entry._type === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FileEditType.Snippet) {
                    result.edits.push({
                        resource: entry.uri,
                        textEdit: {
                            range: Range.from(entry.range),
                            text: entry.edit.value,
                            insertAsSnippet: true
                        },
                        versionId: !( toCreate.has(entry.uri)) ? versionInfo?.getTextDocumentVersion(entry.uri) : undefined,
                        metadata: entry.metadata
                    });
                }
                else if (entry._type === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FileEditType.Cell) {
                    result.edits.push({
                        metadata: entry.metadata,
                        resource: entry.uri,
                        cellEdit: entry.edit,
                        notebookMetadata: entry.notebookMetadata,
                        notebookVersionId: versionInfo?.getNotebookDocumentVersion(entry.uri)
                    });
                }
                else if (entry._type === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FileEditType.CellReplace) {
                    result.edits.push({
                        metadata: entry.metadata,
                        resource: entry.uri,
                        notebookVersionId: versionInfo?.getNotebookDocumentVersion(entry.uri),
                        cellEdit: {
                            editType: _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.CellEditType.Replace,
                            index: entry.index,
                            count: entry.count,
                            cells: ( entry.cells.map(NotebookCellData.from))
                        }
                    });
                }
            }
        }
        return result;
    }
    WorkspaceEdit.from = from;
    function to(value) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.WorkspaceEdit();
        const edits = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_5__.ResourceMap());
        for (const edit of value.edits) {
            if (edit.textEdit) {
                const item = edit;
                const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(item.resource);
                const range = Range.to(item.textEdit.range);
                const text = item.textEdit.text;
                const isSnippet = item.textEdit.insertAsSnippet;
                let editOrSnippetTest;
                if (isSnippet) {
                    editOrSnippetTest = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SnippetTextEdit.replace(range, new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SnippetString(text));
                }
                else {
                    editOrSnippetTest = _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEdit.replace(range, text);
                }
                const array = edits.get(uri);
                if (!array) {
                    edits.set(uri, [editOrSnippetTest]);
                }
                else {
                    array.push(editOrSnippetTest);
                }
            }
            else {
                result.renameFile(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(edit.oldResource), _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(edit.newResource), edit.options);
            }
        }
        for (const [uri, array] of edits) {
            result.set(uri, array);
        }
        return result;
    }
    WorkspaceEdit.to = to;
})(WorkspaceEdit || (WorkspaceEdit = {})));
var SymbolKind;
( (function(SymbolKind) {
    const _fromMapping = Object.create(null);
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.File] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.File;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Module] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Module;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Namespace] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Namespace;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Package] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Package;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Class] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Class;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Method] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Method;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Property] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Property;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Field] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Field;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Constructor] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Constructor;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Enum] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Enum;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Interface] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Interface;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Function] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Function;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Variable] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Variable;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Constant] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Constant;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.String] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.String;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Number] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Number;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Boolean] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Boolean;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Array] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Array;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Object] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Object;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Key] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Key;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Null] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Null;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.EnumMember] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.EnumMember;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Struct] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Struct;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Event] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Event;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Operator] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Operator;
    _fromMapping[_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.TypeParameter] = _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.TypeParameter;
    function from(kind) {
        return typeof _fromMapping[kind] === 'number' ? _fromMapping[kind] : _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolKind.Property;
    }
    SymbolKind.from = from;
    function to(kind) {
        for (const k in _fromMapping) {
            if (_fromMapping[k] === kind) {
                return Number(k);
            }
        }
        return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolKind.Property;
    }
    SymbolKind.to = to;
})(SymbolKind || (SymbolKind = {})));
var SymbolTag;
( (function(SymbolTag) {
    function from(kind) {
        switch (kind) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolTag.Deprecated: return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolTag.Deprecated;
        }
    }
    SymbolTag.from = from;
    function to(kind) {
        switch (kind) {
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.SymbolTag.Deprecated: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolTag.Deprecated;
        }
    }
    SymbolTag.to = to;
})(SymbolTag || (SymbolTag = {})));
var WorkspaceSymbol;
( (function(WorkspaceSymbol) {
    function from(info) {
        return {
            name: info.name,
            kind: SymbolKind.from(info.kind),
            tags: info.tags && ( info.tags.map(SymbolTag.from)),
            containerName: info.containerName,
            location: location.from(info.location)
        };
    }
    WorkspaceSymbol.from = from;
    function to(info) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SymbolInformation(info.name, SymbolKind.to(info.kind), info.containerName, location.to(info.location));
        result.tags = info.tags && ( info.tags.map(SymbolTag.to));
        return result;
    }
    WorkspaceSymbol.to = to;
})(WorkspaceSymbol || (WorkspaceSymbol = {})));
var DocumentSymbol;
( (function(DocumentSymbol) {
    function from(info) {
        const result = {
            name: info.name || '!!MISSING: name!!',
            detail: info.detail,
            range: Range.from(info.range),
            selectionRange: Range.from(info.selectionRange),
            kind: SymbolKind.from(info.kind),
            tags: info.tags?.map(SymbolTag.from) ?? []
        };
        if (info.children) {
            result.children = ( info.children.map(from));
        }
        return result;
    }
    DocumentSymbol.from = from;
    function to(info) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DocumentSymbol(info.name, info.detail, SymbolKind.to(info.kind), Range.to(info.range), Range.to(info.selectionRange));
        if ((0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.isNonEmptyArray)(info.tags)) {
            result.tags = ( info.tags.map(SymbolTag.to));
        }
        if (info.children) {
            result.children = ( info.children.map(to));
        }
        return result;
    }
    DocumentSymbol.to = to;
})(DocumentSymbol || (DocumentSymbol = {})));
var CallHierarchyItem;
( (function(CallHierarchyItem) {
    function to(item) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CallHierarchyItem(SymbolKind.to(item.kind), item.name, item.detail || '', _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(item.uri), Range.to(item.range), Range.to(item.selectionRange));
        result._sessionId = item._sessionId;
        result._itemId = item._itemId;
        return result;
    }
    CallHierarchyItem.to = to;
    function from(item, sessionId, itemId) {
        sessionId = sessionId ?? item._sessionId;
        itemId = itemId ?? item._itemId;
        if (sessionId === undefined || itemId === undefined) {
            throw ( new Error('invalid item'));
        }
        return {
            _sessionId: sessionId,
            _itemId: itemId,
            name: item.name,
            detail: item.detail,
            kind: SymbolKind.from(item.kind),
            uri: item.uri,
            range: Range.from(item.range),
            selectionRange: Range.from(item.selectionRange),
            tags: item.tags?.map(SymbolTag.from)
        };
    }
    CallHierarchyItem.from = from;
})(CallHierarchyItem || (CallHierarchyItem = {})));
var CallHierarchyIncomingCall;
( (function(CallHierarchyIncomingCall) {
    function to(item) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CallHierarchyIncomingCall(CallHierarchyItem.to(item.from), ( item.fromRanges.map(r => Range.to(r))));
    }
    CallHierarchyIncomingCall.to = to;
})(CallHierarchyIncomingCall || (CallHierarchyIncomingCall = {})));
var CallHierarchyOutgoingCall;
( (function(CallHierarchyOutgoingCall) {
    function to(item) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CallHierarchyOutgoingCall(CallHierarchyItem.to(item.to), ( item.fromRanges.map(r => Range.to(r))));
    }
    CallHierarchyOutgoingCall.to = to;
})(CallHierarchyOutgoingCall || (CallHierarchyOutgoingCall = {})));
var location;
( (function(location) {
    function from(value) {
        return {
            range: value.range && Range.from(value.range),
            uri: value.uri
        };
    }
    location.from = from;
    function to(value) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Location(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(value.uri), Range.to(value.range));
    }
    location.to = to;
})(location || (location = {})));
var DefinitionLink;
( (function(DefinitionLink) {
    function from(value) {
        const definitionLink = value;
        const location = value;
        return {
            originSelectionRange: definitionLink.originSelectionRange
                ? Range.from(definitionLink.originSelectionRange)
                : undefined,
            uri: definitionLink.targetUri ? definitionLink.targetUri : location.uri,
            range: Range.from(definitionLink.targetRange ? definitionLink.targetRange : location.range),
            targetSelectionRange: definitionLink.targetSelectionRange
                ? Range.from(definitionLink.targetSelectionRange)
                : undefined,
        };
    }
    DefinitionLink.from = from;
    function to(value) {
        return {
            targetUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(value.uri),
            targetRange: Range.to(value.range),
            targetSelectionRange: value.targetSelectionRange
                ? Range.to(value.targetSelectionRange)
                : undefined,
            originSelectionRange: value.originSelectionRange
                ? Range.to(value.originSelectionRange)
                : undefined
        };
    }
    DefinitionLink.to = to;
})(DefinitionLink || (DefinitionLink = {})));
var Hover;
( (function(Hover) {
    function from(hover) {
        const convertedHover = {
            range: Range.from(hover.range),
            contents: MarkdownString.fromMany(hover.contents),
            canIncreaseVerbosity: hover.canIncreaseVerbosity,
            canDecreaseVerbosity: hover.canDecreaseVerbosity,
        };
        return convertedHover;
    }
    Hover.from = from;
    function to(info) {
        const contents = ( info.contents.map(MarkdownString.to));
        const range = Range.to(info.range);
        const canIncreaseVerbosity = info.canIncreaseVerbosity;
        const canDecreaseVerbosity = info.canDecreaseVerbosity;
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.VerboseHover(contents, range, canIncreaseVerbosity, canDecreaseVerbosity);
    }
    Hover.to = to;
})(Hover || (Hover = {})));
var EvaluatableExpression;
( (function(EvaluatableExpression) {
    function from(expression) {
        return {
            range: Range.from(expression.range),
            expression: expression.expression
        };
    }
    EvaluatableExpression.from = from;
    function to(info) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.EvaluatableExpression(Range.to(info.range), info.expression);
    }
    EvaluatableExpression.to = to;
})(EvaluatableExpression || (EvaluatableExpression = {})));
var InlineValue;
( (function(InlineValue) {
    function from(inlineValue) {
        if (inlineValue instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InlineValueText) {
            return {
                type: 'text',
                range: Range.from(inlineValue.range),
                text: inlineValue.text
            };
        }
        else if (inlineValue instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InlineValueVariableLookup) {
            return {
                type: 'variable',
                range: Range.from(inlineValue.range),
                variableName: inlineValue.variableName,
                caseSensitiveLookup: inlineValue.caseSensitiveLookup
            };
        }
        else if (inlineValue instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InlineValueEvaluatableExpression) {
            return {
                type: 'expression',
                range: Range.from(inlineValue.range),
                expression: inlineValue.expression
            };
        }
        else {
            throw ( new Error(`Unknown 'InlineValue' type`));
        }
    }
    InlineValue.from = from;
    function to(inlineValue) {
        switch (inlineValue.type) {
            case 'text':
                return {
                    range: Range.to(inlineValue.range),
                    text: inlineValue.text
                };
            case 'variable':
                return {
                    range: Range.to(inlineValue.range),
                    variableName: inlineValue.variableName,
                    caseSensitiveLookup: inlineValue.caseSensitiveLookup
                };
            case 'expression':
                return {
                    range: Range.to(inlineValue.range),
                    expression: inlineValue.expression
                };
        }
    }
    InlineValue.to = to;
})(InlineValue || (InlineValue = {})));
var InlineValueContext;
( (function(InlineValueContext) {
    function from(inlineValueContext) {
        return {
            frameId: inlineValueContext.frameId,
            stoppedLocation: Range.from(inlineValueContext.stoppedLocation)
        };
    }
    InlineValueContext.from = from;
    function to(inlineValueContext) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InlineValueContext(inlineValueContext.frameId, Range.to(inlineValueContext.stoppedLocation));
    }
    InlineValueContext.to = to;
})(InlineValueContext || (InlineValueContext = {})));
var DocumentHighlight;
( (function(DocumentHighlight) {
    function from(documentHighlight) {
        return {
            range: Range.from(documentHighlight.range),
            kind: documentHighlight.kind
        };
    }
    DocumentHighlight.from = from;
    function to(occurrence) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DocumentHighlight(Range.to(occurrence.range), occurrence.kind);
    }
    DocumentHighlight.to = to;
})(DocumentHighlight || (DocumentHighlight = {})));
var MultiDocumentHighlight;
( (function(MultiDocumentHighlight) {
    function from(multiDocumentHighlight) {
        return {
            uri: multiDocumentHighlight.uri,
            highlights: ( multiDocumentHighlight.highlights.map(DocumentHighlight.from))
        };
    }
    MultiDocumentHighlight.from = from;
    function to(multiDocumentHighlight) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.MultiDocumentHighlight(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(multiDocumentHighlight.uri), ( multiDocumentHighlight.highlights.map(DocumentHighlight.to)));
    }
    MultiDocumentHighlight.to = to;
})(MultiDocumentHighlight || (MultiDocumentHighlight = {})));
var CompletionTriggerKind;
( (function(CompletionTriggerKind) {
    function to(kind) {
        switch (kind) {
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionTriggerKind.TriggerCharacter:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionTriggerKind.TriggerCharacter;
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionTriggerKind.TriggerForIncompleteCompletions:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionTriggerKind.TriggerForIncompleteCompletions;
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionTriggerKind.Invoke:
            default:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionTriggerKind.Invoke;
        }
    }
    CompletionTriggerKind.to = to;
})(CompletionTriggerKind || (CompletionTriggerKind = {})));
var CompletionContext;
( (function(CompletionContext) {
    function to(context) {
        return {
            triggerKind: CompletionTriggerKind.to(context.triggerKind),
            triggerCharacter: context.triggerCharacter
        };
    }
    CompletionContext.to = to;
})(CompletionContext || (CompletionContext = {})));
var CompletionItemTag;
( (function(CompletionItemTag) {
    function from(kind) {
        switch (kind) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemTag.Deprecated: return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemTag.Deprecated;
        }
    }
    CompletionItemTag.from = from;
    function to(kind) {
        switch (kind) {
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemTag.Deprecated: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemTag.Deprecated;
        }
    }
    CompletionItemTag.to = to;
})(CompletionItemTag || (CompletionItemTag = {})));
var CompletionItemKind;
( (function(CompletionItemKind) {
    const _from = ( new Map([
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Method, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Method],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Function, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Function],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Constructor, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Constructor],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Field, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Field],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Variable, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Variable],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Class, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Class],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Interface, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Interface],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Struct, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Struct],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Module, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Module],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Property, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Property],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Unit, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Unit],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Value, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Value],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Constant, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Constant],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Enum, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Enum],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.EnumMember, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.EnumMember],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Keyword, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Keyword],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Snippet, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Snippet],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Text, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Text],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Color, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Color],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.File, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.File],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Reference, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Reference],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Folder, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Folder],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Event, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Event],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Operator, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Operator],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.TypeParameter, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.TypeParameter],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Issue, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Issue],
        [_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.User, _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.User],
    ]));
    function from(kind) {
        return _from.get(kind) ?? _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Property;
    }
    CompletionItemKind.from = from;
    const _to = ( new Map([
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Method, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Method],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Function, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Function],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Constructor, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Constructor],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Field, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Field],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Variable, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Variable],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Class, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Class],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Interface, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Interface],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Struct, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Struct],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Module, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Module],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Property, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Property],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Unit, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Unit],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Value, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Value],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Constant, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Constant],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Enum, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Enum],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.EnumMember, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.EnumMember],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Keyword, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Keyword],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Snippet, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Snippet],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Text, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Text],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Color, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Color],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.File, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.File],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Reference, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Reference],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Folder, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Folder],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Event, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Event],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Operator, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Operator],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.TypeParameter, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.TypeParameter],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.User, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.User],
        [_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemKind.Issue, _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Issue],
    ]));
    function to(kind) {
        return _to.get(kind) ?? _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItemKind.Property;
    }
    CompletionItemKind.to = to;
})(CompletionItemKind || (CompletionItemKind = {})));
var CompletionItem;
( (function(CompletionItem) {
    function to(suggestion, converter) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CompletionItem(suggestion.label);
        result.insertText = suggestion.insertText;
        result.kind = CompletionItemKind.to(suggestion.kind);
        result.tags = suggestion.tags?.map(CompletionItemTag.to);
        result.detail = suggestion.detail;
        result.documentation = (0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_4__.isMarkdownString)(suggestion.documentation) ? MarkdownString.to(suggestion.documentation) : suggestion.documentation;
        result.sortText = suggestion.sortText;
        result.filterText = suggestion.filterText;
        result.preselect = suggestion.preselect;
        result.commitCharacters = suggestion.commitCharacters;
        if (_editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_16__.Range.isIRange(suggestion.range)) {
            result.range = Range.to(suggestion.range);
        }
        else if (typeof suggestion.range === 'object') {
            result.range = { inserting: Range.to(suggestion.range.insert), replacing: Range.to(suggestion.range.replace) };
        }
        result.keepWhitespace = typeof suggestion.insertTextRules === 'undefined' ? false : Boolean(suggestion.insertTextRules & _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemInsertTextRule.KeepWhitespace);
        if (typeof suggestion.insertTextRules !== 'undefined' && suggestion.insertTextRules & _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CompletionItemInsertTextRule.InsertAsSnippet) {
            result.insertText = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SnippetString(suggestion.insertText);
        }
        else {
            result.insertText = suggestion.insertText;
            result.textEdit = result.range instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Range ? new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEdit(result.range, result.insertText) : undefined;
        }
        if (suggestion.additionalTextEdits && suggestion.additionalTextEdits.length > 0) {
            result.additionalTextEdits = ( suggestion.additionalTextEdits.map(e => TextEdit.to(e)));
        }
        result.command = converter && suggestion.command ? converter.fromInternal(suggestion.command) : undefined;
        return result;
    }
    CompletionItem.to = to;
})(CompletionItem || (CompletionItem = {})));
var ParameterInformation;
( (function(ParameterInformation) {
    function from(info) {
        if (typeof info.label !== 'string' && !Array.isArray(info.label)) {
            throw ( new TypeError('Invalid label'));
        }
        return {
            label: info.label,
            documentation: MarkdownString.fromStrict(info.documentation)
        };
    }
    ParameterInformation.from = from;
    function to(info) {
        return {
            label: info.label,
            documentation: (0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_4__.isMarkdownString)(info.documentation) ? MarkdownString.to(info.documentation) : info.documentation
        };
    }
    ParameterInformation.to = to;
})(ParameterInformation || (ParameterInformation = {})));
var SignatureInformation;
( (function(SignatureInformation) {
    function from(info) {
        return {
            label: info.label,
            documentation: MarkdownString.fromStrict(info.documentation),
            parameters: Array.isArray(info.parameters) ? ( info.parameters.map(ParameterInformation.from)) : [],
            activeParameter: info.activeParameter,
        };
    }
    SignatureInformation.from = from;
    function to(info) {
        return {
            label: info.label,
            documentation: (0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_4__.isMarkdownString)(info.documentation) ? MarkdownString.to(info.documentation) : info.documentation,
            parameters: Array.isArray(info.parameters) ? ( info.parameters.map(ParameterInformation.to)) : [],
            activeParameter: info.activeParameter,
        };
    }
    SignatureInformation.to = to;
})(SignatureInformation || (SignatureInformation = {})));
var SignatureHelp;
( (function(SignatureHelp) {
    function from(help) {
        return {
            activeSignature: help.activeSignature,
            activeParameter: help.activeParameter,
            signatures: Array.isArray(help.signatures) ? ( help.signatures.map(SignatureInformation.from)) : [],
        };
    }
    SignatureHelp.from = from;
    function to(help) {
        return {
            activeSignature: help.activeSignature,
            activeParameter: help.activeParameter,
            signatures: Array.isArray(help.signatures) ? ( help.signatures.map(SignatureInformation.to)) : [],
        };
    }
    SignatureHelp.to = to;
})(SignatureHelp || (SignatureHelp = {})));
var InlayHint;
( (function(InlayHint) {
    function to(converter, hint) {
        const res = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InlayHint(Position.to(hint.position), typeof hint.label === 'string' ? hint.label : ( hint.label.map(InlayHintLabelPart.to.bind(undefined, converter))), hint.kind && InlayHintKind.to(hint.kind));
        res.textEdits = hint.textEdits && ( hint.textEdits.map(TextEdit.to));
        res.tooltip = (0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_4__.isMarkdownString)(hint.tooltip) ? MarkdownString.to(hint.tooltip) : hint.tooltip;
        res.paddingLeft = hint.paddingLeft;
        res.paddingRight = hint.paddingRight;
        return res;
    }
    InlayHint.to = to;
})(InlayHint || (InlayHint = {})));
var InlayHintLabelPart;
( (function(InlayHintLabelPart) {
    function to(converter, part) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InlayHintLabelPart(part.label);
        result.tooltip = (0,_base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_4__.isMarkdownString)(part.tooltip)
            ? MarkdownString.to(part.tooltip)
            : part.tooltip;
        if (_editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.Command.is(part.command)) {
            result.command = converter.fromInternal(part.command);
        }
        if (part.location) {
            result.location = location.to(part.location);
        }
        return result;
    }
    InlayHintLabelPart.to = to;
})(InlayHintLabelPart || (InlayHintLabelPart = {})));
var InlayHintKind;
( (function(InlayHintKind) {
    function from(kind) {
        return kind;
    }
    InlayHintKind.from = from;
    function to(kind) {
        return kind;
    }
    InlayHintKind.to = to;
})(InlayHintKind || (InlayHintKind = {})));
var DocumentLink;
( (function(DocumentLink) {
    function from(link) {
        return {
            range: Range.from(link.range),
            url: link.target,
            tooltip: link.tooltip
        };
    }
    DocumentLink.from = from;
    function to(link) {
        let target = undefined;
        if (link.url) {
            try {
                target = typeof link.url === 'string' ? ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.parse(link.url, true)) : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(link.url);
            }
            catch (err) {
            }
        }
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DocumentLink(Range.to(link.range), target);
        result.tooltip = link.tooltip;
        return result;
    }
    DocumentLink.to = to;
})(DocumentLink || (DocumentLink = {})));
var ColorPresentation;
( (function(ColorPresentation) {
    function to(colorPresentation) {
        const cp = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ColorPresentation(colorPresentation.label);
        if (colorPresentation.textEdit) {
            cp.textEdit = TextEdit.to(colorPresentation.textEdit);
        }
        if (colorPresentation.additionalTextEdits) {
            cp.additionalTextEdits = ( colorPresentation.additionalTextEdits.map(value => TextEdit.to(value)));
        }
        return cp;
    }
    ColorPresentation.to = to;
    function from(colorPresentation) {
        return {
            label: colorPresentation.label,
            textEdit: colorPresentation.textEdit ? TextEdit.from(colorPresentation.textEdit) : undefined,
            additionalTextEdits: colorPresentation.additionalTextEdits ? ( colorPresentation.additionalTextEdits.map(value => TextEdit.from(value))) : undefined
        };
    }
    ColorPresentation.from = from;
})(ColorPresentation || (ColorPresentation = {})));
var Color;
( (function(Color) {
    function to(c) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Color(c[0], c[1], c[2], c[3]);
    }
    Color.to = to;
    function from(color) {
        return [color.red, color.green, color.blue, color.alpha];
    }
    Color.from = from;
})(Color || (Color = {})));
var SelectionRange;
( (function(SelectionRange) {
    function from(obj) {
        return { range: Range.from(obj.range) };
    }
    SelectionRange.from = from;
    function to(obj) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.SelectionRange(Range.to(obj.range));
    }
    SelectionRange.to = to;
})(SelectionRange || (SelectionRange = {})));
var TextDocumentSaveReason;
( (function(TextDocumentSaveReason) {
    function to(reason) {
        switch (reason) {
            case _common_editor_js__WEBPACK_IMPORTED_MODULE_23__.SaveReason.AUTO:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextDocumentSaveReason.AfterDelay;
            case _common_editor_js__WEBPACK_IMPORTED_MODULE_23__.SaveReason.EXPLICIT:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextDocumentSaveReason.Manual;
            case _common_editor_js__WEBPACK_IMPORTED_MODULE_23__.SaveReason.FOCUS_CHANGE:
            case _common_editor_js__WEBPACK_IMPORTED_MODULE_23__.SaveReason.WINDOW_CHANGE:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextDocumentSaveReason.FocusOut;
        }
    }
    TextDocumentSaveReason.to = to;
})(TextDocumentSaveReason || (TextDocumentSaveReason = {})));
var TextEditorLineNumbersStyle;
( (function(TextEditorLineNumbersStyle) {
    function from(style) {
        switch (style) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.Off:
                return _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.Off;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.Relative:
                return _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.Relative;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.Interval:
                return _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.Interval;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.On:
            default:
                return _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.On;
        }
    }
    TextEditorLineNumbersStyle.from = from;
    function to(style) {
        switch (style) {
            case _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.Off:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.Off;
            case _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.Relative:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.Relative;
            case _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.Interval:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.Interval;
            case _editor_common_config_editorOptions_js__WEBPACK_IMPORTED_MODULE_15__.RenderLineNumbersType.On:
            default:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TextEditorLineNumbersStyle.On;
        }
    }
    TextEditorLineNumbersStyle.to = to;
})(TextEditorLineNumbersStyle || (TextEditorLineNumbersStyle = {})));
var EndOfLine;
( (function(EndOfLine) {
    function from(eol) {
        if (eol === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.EndOfLine.CRLF) {
            return _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.EndOfLineSequence.CRLF;
        }
        else if (eol === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.EndOfLine.LF) {
            return _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.EndOfLineSequence.LF;
        }
        return undefined;
    }
    EndOfLine.from = from;
    function to(eol) {
        if (eol === _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.EndOfLineSequence.CRLF) {
            return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.EndOfLine.CRLF;
        }
        else if (eol === _editor_common_model_js__WEBPACK_IMPORTED_MODULE_19__.EndOfLineSequence.LF) {
            return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.EndOfLine.LF;
        }
        return undefined;
    }
    EndOfLine.to = to;
})(EndOfLine || (EndOfLine = {})));
var ProgressLocation;
( (function(ProgressLocation) {
    function from(loc) {
        if (typeof loc === 'object') {
            return loc.viewId;
        }
        switch (loc) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ProgressLocation.SourceControl: return _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_21__.ProgressLocation.Scm;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ProgressLocation.Window: return _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_21__.ProgressLocation.Window;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ProgressLocation.Notification: return _platform_progress_common_progress_js__WEBPACK_IMPORTED_MODULE_21__.ProgressLocation.Notification;
        }
        throw ( new Error(`Unknown 'ProgressLocation'`));
    }
    ProgressLocation.from = from;
})(ProgressLocation || (ProgressLocation = {})));
var FoldingRange;
( (function(FoldingRange) {
    function from(r) {
        const range = { start: r.start + 1, end: r.end + 1 };
        if (r.kind) {
            range.kind = FoldingRangeKind.from(r.kind);
        }
        return range;
    }
    FoldingRange.from = from;
    function to(r) {
        const range = { start: r.start - 1, end: r.end - 1 };
        if (r.kind) {
            range.kind = FoldingRangeKind.to(r.kind);
        }
        return range;
    }
    FoldingRange.to = to;
})(FoldingRange || (FoldingRange = {})));
var FoldingRangeKind;
( (function(FoldingRangeKind) {
    function from(kind) {
        if (kind) {
            switch (kind) {
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FoldingRangeKind.Comment:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.FoldingRangeKind.Comment;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FoldingRangeKind.Imports:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.FoldingRangeKind.Imports;
                case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FoldingRangeKind.Region:
                    return _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.FoldingRangeKind.Region;
            }
        }
        return undefined;
    }
    FoldingRangeKind.from = from;
    function to(kind) {
        if (kind) {
            switch (kind.value) {
                case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.FoldingRangeKind.Comment.value:
                    return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FoldingRangeKind.Comment;
                case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.FoldingRangeKind.Imports.value:
                    return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FoldingRangeKind.Imports;
                case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.FoldingRangeKind.Region.value:
                    return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FoldingRangeKind.Region;
            }
        }
        return undefined;
    }
    FoldingRangeKind.to = to;
})(FoldingRangeKind || (FoldingRangeKind = {})));
var TextEditorOpenOptions;
( (function(TextEditorOpenOptions) {
    function from(options) {
        if (options) {
            return {
                pinned: typeof options.preview === 'boolean' ? !options.preview : undefined,
                inactive: options.background,
                preserveFocus: options.preserveFocus,
                selection: typeof options.selection === 'object' ? Range.from(options.selection) : undefined,
                override: typeof options.override === 'boolean' ? _common_editor_js__WEBPACK_IMPORTED_MODULE_23__.DEFAULT_EDITOR_ASSOCIATION.id : undefined
            };
        }
        return undefined;
    }
    TextEditorOpenOptions.from = from;
})(TextEditorOpenOptions || (TextEditorOpenOptions = {})));
var GlobPattern;
( (function(GlobPattern) {
    function from(pattern) {
        if (pattern instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.RelativePattern) {
            return pattern.toJSON();
        }
        if (typeof pattern === 'string') {
            return pattern;
        }
        if (isRelativePatternShape(pattern) || isLegacyRelativePatternShape(pattern)) {
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.RelativePattern(pattern.baseUri ?? pattern.base, pattern.pattern).toJSON();
        }
        return pattern;
    }
    GlobPattern.from = from;
    function isRelativePatternShape(obj) {
        const rp = obj;
        if (!rp) {
            return false;
        }
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(rp.baseUri) && typeof rp.pattern === 'string';
    }
    function isLegacyRelativePatternShape(obj) {
        const rp = obj;
        if (!rp) {
            return false;
        }
        return typeof rp.base === 'string' && typeof rp.pattern === 'string';
    }
    function to(pattern) {
        if (typeof pattern === 'string') {
            return pattern;
        }
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.RelativePattern(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(pattern.baseUri), pattern.pattern);
    }
    GlobPattern.to = to;
})(GlobPattern || (GlobPattern = {})));
var LanguageSelector;
( (function(LanguageSelector) {
    function from(selector) {
        if (!selector) {
            return undefined;
        }
        else if (Array.isArray(selector)) {
            return ( selector.map(from));
        }
        else if (typeof selector === 'string') {
            return selector;
        }
        else {
            const filter = selector;
            return {
                language: filter.language,
                scheme: filter.scheme,
                pattern: GlobPattern.from(filter.pattern),
                exclusive: filter.exclusive,
                notebookType: filter.notebookType
            };
        }
    }
    LanguageSelector.from = from;
})(LanguageSelector || (LanguageSelector = {})));
var MappedEditsContext;
( (function(MappedEditsContext) {
    function is(v) {
        return (!!v && typeof v === 'object' &&
            'documents' in v &&
            Array.isArray(v.documents) &&
            v.documents.every(subArr => Array.isArray(subArr) &&
                subArr.every(docRef => docRef && typeof docRef === 'object' &&
                    'uri' in docRef && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(docRef.uri) &&
                    'version' in docRef && typeof docRef.version === 'number' &&
                    'ranges' in docRef && Array.isArray(docRef.ranges) && docRef.ranges.every((r) => r instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.Range))));
    }
    MappedEditsContext.is = is;
    function from(extContext) {
        return {
            documents: ( extContext.documents.map((subArray) => ( subArray.map((r) => ({
                uri: ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.from(r.uri)),
                version: r.version,
                ranges: ( r.ranges.map((r) => Range.from(r))),
            }))))),
        };
    }
    MappedEditsContext.from = from;
})(MappedEditsContext || (MappedEditsContext = {})));
var NotebookRange;
( (function(NotebookRange) {
    function from(range) {
        return { start: range.start, end: range.end };
    }
    NotebookRange.from = from;
    function to(range) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookRange(range.start, range.end);
    }
    NotebookRange.to = to;
})(NotebookRange || (NotebookRange = {})));
var NotebookCellExecutionSummary;
( (function(NotebookCellExecutionSummary) {
    function to(data) {
        return {
            timing: typeof data.runStartTime === 'number' && typeof data.runEndTime === 'number' ? { startTime: data.runStartTime, endTime: data.runEndTime } : undefined,
            executionOrder: data.executionOrder,
            success: data.lastRunSuccess
        };
    }
    NotebookCellExecutionSummary.to = to;
    function from(data) {
        return {
            lastRunSuccess: data.success,
            runStartTime: data.timing?.startTime,
            runEndTime: data.timing?.endTime,
            executionOrder: data.executionOrder
        };
    }
    NotebookCellExecutionSummary.from = from;
})(NotebookCellExecutionSummary || (NotebookCellExecutionSummary = {})));
var NotebookCellExecutionState;
( (function(NotebookCellExecutionState) {
    function to(state) {
        if (state === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.NotebookCellExecutionState.Unconfirmed) {
            return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellExecutionState.Pending;
        }
        else if (state === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.NotebookCellExecutionState.Pending) {
            return undefined;
        }
        else if (state === _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.NotebookCellExecutionState.Executing) {
            return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellExecutionState.Executing;
        }
        else {
            throw ( new Error(`Unknown state: ${state}`));
        }
    }
    NotebookCellExecutionState.to = to;
})(NotebookCellExecutionState || (NotebookCellExecutionState = {})));
var NotebookCellKind;
( (function(NotebookCellKind) {
    function from(data) {
        switch (data) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellKind.Markup:
                return _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.CellKind.Markup;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellKind.Code:
            default:
                return _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.CellKind.Code;
        }
    }
    NotebookCellKind.from = from;
    function to(data) {
        switch (data) {
            case _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.CellKind.Markup:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellKind.Markup;
            case _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.CellKind.Code:
            default:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellKind.Code;
        }
    }
    NotebookCellKind.to = to;
})(NotebookCellKind || (NotebookCellKind = {})));
var NotebookData;
( (function(NotebookData) {
    function from(data) {
        const res = {
            metadata: data.metadata ?? Object.create(null),
            cells: [],
        };
        for (const cell of data.cells) {
            _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellData.validate(cell);
            res.cells.push(NotebookCellData.from(cell));
        }
        return res;
    }
    NotebookData.from = from;
    function to(data) {
        const res = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookData(( data.cells.map(NotebookCellData.to)));
        if (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isEmptyObject)(data.metadata)) {
            res.metadata = data.metadata;
        }
        return res;
    }
    NotebookData.to = to;
})(NotebookData || (NotebookData = {})));
var NotebookCellData;
( (function(NotebookCellData) {
    function from(data) {
        return {
            cellKind: NotebookCellKind.from(data.kind),
            language: data.languageId,
            mime: data.mime,
            source: data.value,
            metadata: data.metadata,
            internalMetadata: NotebookCellExecutionSummary.from(data.executionSummary ?? {}),
            outputs: data.outputs ? ( data.outputs.map(NotebookCellOutput.from)) : []
        };
    }
    NotebookCellData.from = from;
    function to(data) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellData(NotebookCellKind.to(data.cellKind), data.source, data.language, data.mime, data.outputs ? ( data.outputs.map(NotebookCellOutput.to)) : undefined, data.metadata, data.internalMetadata ? NotebookCellExecutionSummary.to(data.internalMetadata) : undefined);
    }
    NotebookCellData.to = to;
})(NotebookCellData || (NotebookCellData = {})));
var NotebookCellOutputItem;
( (function(NotebookCellOutputItem) {
    function from(item) {
        return {
            mime: item.mime,
            valueBytes: _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.wrap(item.data),
        };
    }
    NotebookCellOutputItem.from = from;
    function to(item) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellOutputItem(item.valueBytes.buffer, item.mime);
    }
    NotebookCellOutputItem.to = to;
})(NotebookCellOutputItem || (NotebookCellOutputItem = {})));
var NotebookCellOutput;
( (function(NotebookCellOutput) {
    function from(output) {
        return {
            outputId: output.id,
            items: ( output.items.map(NotebookCellOutputItem.from)),
            metadata: output.metadata
        };
    }
    NotebookCellOutput.from = from;
    function to(output) {
        const items = ( output.items.map(NotebookCellOutputItem.to));
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellOutput(items, output.outputId, output.metadata);
    }
    NotebookCellOutput.to = to;
})(NotebookCellOutput || (NotebookCellOutput = {})));
var NotebookExclusiveDocumentPattern;
( (function(NotebookExclusiveDocumentPattern) {
    function from(pattern) {
        if (isExclusivePattern(pattern)) {
            return {
                include: GlobPattern.from(pattern.include) ?? undefined,
                exclude: GlobPattern.from(pattern.exclude) ?? undefined,
            };
        }
        return GlobPattern.from(pattern) ?? undefined;
    }
    NotebookExclusiveDocumentPattern.from = from;
    function to(pattern) {
        if (isExclusivePattern(pattern)) {
            return {
                include: GlobPattern.to(pattern.include),
                exclude: GlobPattern.to(pattern.exclude)
            };
        }
        return GlobPattern.to(pattern);
    }
    NotebookExclusiveDocumentPattern.to = to;
    function isExclusivePattern(obj) {
        const ep = obj;
        if (!ep) {
            return false;
        }
        return !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isUndefinedOrNull)(ep.include) && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isUndefinedOrNull)(ep.exclude);
    }
})(
    NotebookExclusiveDocumentPattern || (NotebookExclusiveDocumentPattern = {})
));
var NotebookStatusBarItem;
( (function(NotebookStatusBarItem) {
    function from(item, commandsConverter, disposables) {
        const command = typeof item.command === 'string' ? { title: '', command: item.command } : item.command;
        return {
            alignment: item.alignment === _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookCellStatusBarAlignment.Left ? _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.CellStatusbarAlignment.Left : _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_27__.CellStatusbarAlignment.Right,
            command: commandsConverter.toInternal(command, disposables),
            text: item.text,
            tooltip: item.tooltip,
            accessibilityInformation: item.accessibilityInformation,
            priority: item.priority
        };
    }
    NotebookStatusBarItem.from = from;
})(NotebookStatusBarItem || (NotebookStatusBarItem = {})));
var NotebookKernelSourceAction;
( (function(NotebookKernelSourceAction) {
    function from(item, commandsConverter, disposables) {
        const command = typeof item.command === 'string' ? { title: '', command: item.command } : item.command;
        return {
            command: commandsConverter.toInternal(command, disposables),
            label: item.label,
            description: item.description,
            detail: item.detail,
            documentation: item.documentation
        };
    }
    NotebookKernelSourceAction.from = from;
})(NotebookKernelSourceAction || (NotebookKernelSourceAction = {})));
var NotebookDocumentContentOptions;
( (function(NotebookDocumentContentOptions) {
    function from(options) {
        return {
            transientOutputs: options?.transientOutputs ?? false,
            transientCellMetadata: options?.transientCellMetadata ?? {},
            transientDocumentMetadata: options?.transientDocumentMetadata ?? {},
            cellContentMetadata: options?.cellContentMetadata ?? {}
        };
    }
    NotebookDocumentContentOptions.from = from;
})(NotebookDocumentContentOptions || (NotebookDocumentContentOptions = {})));
var NotebookRendererScript;
( (function(NotebookRendererScript) {
    function from(preload) {
        return {
            uri: preload.uri,
            provides: preload.provides
        };
    }
    NotebookRendererScript.from = from;
    function to(preload) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.NotebookRendererScript(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(preload.uri), preload.provides);
    }
    NotebookRendererScript.to = to;
})(NotebookRendererScript || (NotebookRendererScript = {})));
var TestMessage;
( (function(TestMessage) {
    function from(message) {
        return {
            message: MarkdownString.fromStrict(message.message) || '',
            type: _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_29__.TestMessageType.Error,
            expected: message.expectedOutput,
            actual: message.actualOutput,
            contextValue: message.contextValue,
            location: message.location && ({ range: Range.from(message.location.range), uri: message.location.uri }),
        };
    }
    TestMessage.from = from;
    function to(item) {
        const message = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TestMessage(typeof item.message === 'string' ? item.message : MarkdownString.to(item.message));
        message.actualOutput = item.actual;
        message.expectedOutput = item.expected;
        message.contextValue = item.contextValue;
        message.location = item.location ? location.to(item.location) : undefined;
        return message;
    }
    TestMessage.to = to;
})(TestMessage || (TestMessage = {})));
var TestTag;
( (function(TestTag) {
    TestTag.namespace = _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_29__.namespaceTestTag;
    TestTag.denamespace = _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_29__.denamespaceTestTag;
})(TestTag || (TestTag = {})));
var TestItem;
( (function(TestItem) {
    function from(item) {
        const ctrlId = (0,_extHostTestingPrivateApi_js__WEBPACK_IMPORTED_MODULE_22__.getPrivateApiFor)(item).controllerId;
        return {
            extId: ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_28__.TestId.fromExtHostTestItem(item, ctrlId).toString()),
            label: item.label,
            uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(item.uri),
            busy: item.busy,
            tags: ( item.tags.map(t => TestTag.namespace(ctrlId, t.id))),
            range: _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_16__.Range.lift(Range.from(item.range)),
            description: item.description || null,
            sortText: item.sortText || null,
            error: item.error ? (MarkdownString.fromStrict(item.error) || null) : null,
        };
    }
    TestItem.from = from;
    function toPlain(item) {
        return {
            parent: undefined,
            error: undefined,
            id: _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_28__.TestId.fromString(item.extId).localId,
            label: item.label,
            uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(item.uri),
            tags: ( (item.tags || []).map(t => {
                const { tagId } = TestTag.denamespace(t);
                return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TestTag(tagId);
            })),
            children: {
                add: () => { },
                delete: () => { },
                forEach: () => { },
                *[Symbol.iterator]() { },
                get: () => undefined,
                replace: () => { },
                size: 0,
            },
            range: Range.to(item.range || undefined),
            canResolveChildren: false,
            busy: item.busy,
            description: item.description || undefined,
            sortText: item.sortText || undefined,
        };
    }
    TestItem.toPlain = toPlain;
})(TestItem || (TestItem = {})));
( (function(TestTag) {
    function from(tag) {
        return { id: tag.id };
    }
    TestTag.from = from;
    function to(tag) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TestTag(tag.id);
    }
    TestTag.to = to;
})(TestTag || (TestTag = {})));
var TestResults;
( (function(TestResults) {
    const convertTestResultItem = (node, parent) => {
        const item = node.value;
        if (!item) {
            return undefined;
        }
        const snapshot = ({
            ...TestItem.toPlain(item.item),
            parent,
            taskStates: ( item.tasks.map(t => ({
                state: t.state,
                duration: t.duration,
                messages: ( t.messages
                    .filter((m) => m.type === _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_29__.TestMessageType.Error)
                    .map(TestMessage.to)),
            }))),
            children: [],
        });
        if (node.children) {
            for (const child of ( node.children.values())) {
                const c = convertTestResultItem(child, snapshot);
                if (c) {
                    snapshot.children.push(c);
                }
            }
        }
        return snapshot;
    };
    function to(serialized) {
        const tree = ( new _base_common_prefixTree_js__WEBPACK_IMPORTED_MODULE_10__.WellDefinedPrefixTree());
        for (const item of serialized.items) {
            tree.insert(_contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_28__.TestId.fromString(item.item.extId).path, item);
        }
        const queue = [tree.nodes];
        const roots = [];
        while (queue.length) {
            for (const node of queue.pop()) {
                if (node.value) {
                    roots.push(node);
                }
                else if (node.children) {
                    queue.push(( node.children.values()));
                }
            }
        }
        return {
            completedAt: serialized.completedAt,
            results: ( roots.map(r => convertTestResultItem(r))).filter(_base_common_types_js__WEBPACK_IMPORTED_MODULE_13__.isDefined),
        };
    }
    TestResults.to = to;
})(TestResults || (TestResults = {})));
var TestCoverage;
( (function(TestCoverage) {
    function fromCoverageCount(count) {
        return { covered: count.covered, total: count.total };
    }
    function fromLocation(location) {
        return 'line' in location ? Position.from(location) : Range.from(location);
    }
    function fromDetails(coverage) {
        if (typeof coverage.executed === 'number' && coverage.executed < 0) {
            throw ( new Error(`Invalid coverage count ${coverage.executed}`));
        }
        if ('branches' in coverage) {
            return {
                count: coverage.executed,
                location: fromLocation(coverage.location),
                type: _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_29__.DetailType.Statement,
                branches: coverage.branches.length
                    ? ( coverage.branches.map(
                    b => ({ count: b.executed, location: b.location && fromLocation(b.location), label: b.label })
                ))
                    : undefined,
            };
        }
        else {
            return {
                type: _contrib_testing_common_testTypes_js__WEBPACK_IMPORTED_MODULE_29__.DetailType.Declaration,
                name: coverage.name,
                count: coverage.executed,
                location: fromLocation(coverage.location),
            };
        }
    }
    TestCoverage.fromDetails = fromDetails;
    function fromFile(controllerId, id, coverage) {
        (0,_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.validateTestCoverageCount)(coverage.statementCoverage);
        (0,_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.validateTestCoverageCount)(coverage.branchCoverage);
        (0,_extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.validateTestCoverageCount)(coverage.declarationCoverage);
        return {
            id,
            uri: coverage.uri,
            statement: fromCoverageCount(coverage.statementCoverage),
            branch: coverage.branchCoverage && fromCoverageCount(coverage.branchCoverage),
            declaration: coverage.declarationCoverage && fromCoverageCount(coverage.declarationCoverage),
            testIds: coverage instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.FileCoverage && coverage.fromTests.length ?
                ( coverage.fromTests.map(t => ( _contrib_testing_common_testId_js__WEBPACK_IMPORTED_MODULE_28__.TestId.fromExtHostTestItem(t, controllerId).toString()))) : undefined,
        };
    }
    TestCoverage.fromFile = fromFile;
})(TestCoverage || (TestCoverage = {})));
var CodeActionTriggerKind;
( (function(CodeActionTriggerKind) {
    function to(value) {
        switch (value) {
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CodeActionTriggerType.Invoke:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CodeActionTriggerKind.Invoke;
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.CodeActionTriggerType.Auto:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.CodeActionTriggerKind.Automatic;
        }
    }
    CodeActionTriggerKind.to = to;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {})));
var TypeHierarchyItem;
( (function(TypeHierarchyItem) {
    function to(item) {
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.TypeHierarchyItem(SymbolKind.to(item.kind), item.name, item.detail || '', _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(item.uri), Range.to(item.range), Range.to(item.selectionRange));
        result._sessionId = item._sessionId;
        result._itemId = item._itemId;
        return result;
    }
    TypeHierarchyItem.to = to;
    function from(item, sessionId, itemId) {
        sessionId = sessionId ?? item._sessionId;
        itemId = itemId ?? item._itemId;
        if (sessionId === undefined || itemId === undefined) {
            throw ( new Error('invalid item'));
        }
        return {
            _sessionId: sessionId,
            _itemId: itemId,
            kind: SymbolKind.from(item.kind),
            name: item.name,
            detail: item.detail ?? '',
            uri: item.uri,
            range: Range.from(item.range),
            selectionRange: Range.from(item.selectionRange),
            tags: item.tags?.map(SymbolTag.from)
        };
    }
    TypeHierarchyItem.from = from;
})(TypeHierarchyItem || (TypeHierarchyItem = {})));
var ViewBadge;
( (function(ViewBadge) {
    function from(badge) {
        if (!badge) {
            return undefined;
        }
        return {
            value: badge.value,
            tooltip: badge.tooltip
        };
    }
    ViewBadge.from = from;
})(ViewBadge || (ViewBadge = {})));
var DataTransferItem;
( (function(DataTransferItem) {
    function to(mime, item, resolveFileData) {
        const file = item.fileData;
        if (file) {
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InternalFileDataTransferItem(new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DataTransferFile(file.name, _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(file.uri), file.id, (0,_base_common_functional_js__WEBPACK_IMPORTED_MODULE_3__.createSingleCallFunction)(() => resolveFileData(file.id))));
        }
        if (mime === _base_common_mime_js__WEBPACK_IMPORTED_MODULE_8__.Mimes.uriList && item.uriListData) {
            return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InternalDataTransferItem(reviveUriList(item.uriListData));
        }
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.InternalDataTransferItem(item.asString);
    }
    DataTransferItem.to = to;
    async function from(mime, item) {
        const stringValue = await item.asString();
        if (mime === _base_common_mime_js__WEBPACK_IMPORTED_MODULE_8__.Mimes.uriList) {
            return {
                asString: stringValue,
                fileData: undefined,
                uriListData: serializeUriList(stringValue),
            };
        }
        const fileValue = item.asFile();
        return {
            asString: stringValue,
            fileData: fileValue ? {
                name: fileValue.name,
                uri: fileValue.uri,
                id: fileValue._itemId ?? fileValue.id,
            } : undefined,
        };
    }
    DataTransferItem.from = from;
    function serializeUriList(stringValue) {
        return ( _base_common_dataTransfer_js__WEBPACK_IMPORTED_MODULE_2__.UriList.split(stringValue).map(part => {
            if (part.startsWith('#')) {
                return part;
            }
            try {
                return ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.parse(part));
            }
            catch {
            }
            return part;
        }));
    }
    function reviveUriList(parts) {
        return _base_common_dataTransfer_js__WEBPACK_IMPORTED_MODULE_2__.UriList.create(( parts.map(part => {
            return typeof part === 'string' ? part : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(part);
        })));
    }
})(DataTransferItem || (DataTransferItem = {})));
var DataTransfer;
( (function(DataTransfer) {
    function toDataTransfer(value, resolveFileData) {
        const init = ( value.items.map(([type, item]) => {
            return [type, DataTransferItem.to(type, item, resolveFileData)];
        }));
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.DataTransfer(init);
    }
    DataTransfer.toDataTransfer = toDataTransfer;
    async function from(dataTransfer) {
        const newDTO = { items: [] };
        const promises = [];
        for (const [mime, value] of dataTransfer) {
            promises.push((async () => {
                newDTO.items.push([mime, await DataTransferItem.from(mime, value)]);
            })());
        }
        await Promise.all(promises);
        return newDTO;
    }
    DataTransfer.from = from;
})(DataTransfer || (DataTransfer = {})));
var ChatFollowup;
( (function(ChatFollowup) {
    function from(followup, request) {
        return {
            kind: 'reply',
            agentId: followup.participant ?? request?.agentId ?? '',
            subCommand: followup.command ?? request?.command,
            message: followup.prompt,
            title: followup.label
        };
    }
    ChatFollowup.from = from;
    function to(followup) {
        return {
            prompt: followup.message,
            label: followup.title,
            participant: followup.agentId,
            command: followup.subCommand,
        };
    }
    ChatFollowup.to = to;
})(ChatFollowup || (ChatFollowup = {})));
var LanguageModelChatMessageRole;
( (function(LanguageModelChatMessageRole) {
    function to(role) {
        switch (role) {
            case _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__.ChatMessageRole.System: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelChatMessageRole.System;
            case _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__.ChatMessageRole.User: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelChatMessageRole.User;
            case _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__.ChatMessageRole.Assistant: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelChatMessageRole.Assistant;
        }
    }
    LanguageModelChatMessageRole.to = to;
    function from(role) {
        switch (role) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelChatMessageRole.System: return _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__.ChatMessageRole.System;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelChatMessageRole.User: return _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__.ChatMessageRole.User;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelChatMessageRole.Assistant: return _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__.ChatMessageRole.Assistant;
        }
        return _contrib_chat_common_languageModels_js__WEBPACK_IMPORTED_MODULE_25__.ChatMessageRole.User;
    }
    LanguageModelChatMessageRole.from = from;
})(LanguageModelChatMessageRole || (LanguageModelChatMessageRole = {})));
var LanguageModelChatMessage;
( (function(LanguageModelChatMessage) {
    function to(message) {
        let content = '';
        let content2;
        if (message.content.type === 'text') {
            content = message.content.value;
        }
        else {
            content2 = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelFunctionResultPart(message.content.name, message.content.value, message.content.isError);
        }
        const role = LanguageModelChatMessageRole.to(message.role);
        const result = new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelChatMessage(role, content, message.name);
        if (content2 !== undefined) {
            result.content2 = content2;
        }
        return result;
    }
    LanguageModelChatMessage.to = to;
    function from(message) {
        const role = LanguageModelChatMessageRole.from(message.role);
        const name = message.name;
        let content;
        if (message.content2 instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.LanguageModelFunctionResultPart) {
            content = {
                type: 'function_result',
                name: message.content2.name,
                value: message.content2.content,
                isError: message.content2.isError
            };
        }
        else {
            content = {
                type: 'text',
                value: message.content
            };
        }
        return {
            role,
            name,
            content
        };
    }
    LanguageModelChatMessage.from = from;
})(LanguageModelChatMessage || (LanguageModelChatMessage = {})));
var ChatResponseMarkdownPart;
( (function(ChatResponseMarkdownPart) {
    function from(part) {
        return {
            kind: 'markdownContent',
            content: MarkdownString.from(part.value)
        };
    }
    ChatResponseMarkdownPart.from = from;
    function to(part) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseMarkdownPart(MarkdownString.to(part.content));
    }
    ChatResponseMarkdownPart.to = to;
})(ChatResponseMarkdownPart || (ChatResponseMarkdownPart = {})));
var ChatResponseMarkdownWithVulnerabilitiesPart;
( (function(ChatResponseMarkdownWithVulnerabilitiesPart) {
    function from(part) {
        return {
            kind: 'markdownVuln',
            content: MarkdownString.from(part.value),
            vulnerabilities: part.vulnerabilities,
        };
    }
    ChatResponseMarkdownWithVulnerabilitiesPart.from = from;
    function to(part) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseMarkdownWithVulnerabilitiesPart(MarkdownString.to(part.content), part.vulnerabilities);
    }
    ChatResponseMarkdownWithVulnerabilitiesPart.to = to;
})(
    ChatResponseMarkdownWithVulnerabilitiesPart || (ChatResponseMarkdownWithVulnerabilitiesPart = {})
));
var ChatResponseDetectedParticipantPart;
( (function(ChatResponseDetectedParticipantPart) {
    function from(part) {
        return {
            kind: 'agentDetection',
            agentId: part.participant,
            command: part.command,
        };
    }
    ChatResponseDetectedParticipantPart.from = from;
    function to(part) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseDetectedParticipantPart(part.agentId, part.command);
    }
    ChatResponseDetectedParticipantPart.to = to;
})(
    ChatResponseDetectedParticipantPart || (ChatResponseDetectedParticipantPart = {})
));
var ChatResponseConfirmationPart;
( (function(ChatResponseConfirmationPart) {
    function from(part) {
        return {
            kind: 'confirmation',
            title: part.title,
            message: part.message,
            data: part.data
        };
    }
    ChatResponseConfirmationPart.from = from;
})(ChatResponseConfirmationPart || (ChatResponseConfirmationPart = {})));
var ChatResponseFilesPart;
( (function(ChatResponseFilesPart) {
    function from(part) {
        const { value, baseUri } = part;
        function convert(items, baseUri) {
            return ( items.map(item => {
                const myUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.joinPath(baseUri, item.name);
                return {
                    label: item.name,
                    uri: myUri,
                    children: item.children && convert(item.children, myUri)
                };
            }));
        }
        return {
            kind: 'treeData',
            treeData: {
                label: (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_11__.basename)(baseUri),
                uri: baseUri,
                children: convert(value, baseUri)
            }
        };
    }
    ChatResponseFilesPart.from = from;
    function to(part) {
        const treeData = (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__.revive)(part.treeData);
        function convert(items) {
            return ( items.map(item => {
                return {
                    name: item.label,
                    children: item.children && convert(item.children)
                };
            }));
        }
        const baseUri = treeData.uri;
        const items = treeData.children ? convert(treeData.children) : [];
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseFileTreePart(items, baseUri);
    }
    ChatResponseFilesPart.to = to;
})(ChatResponseFilesPart || (ChatResponseFilesPart = {})));
var ChatResponseAnchorPart;
( (function(ChatResponseAnchorPart) {
    function from(part) {
        const isUri = (thing) => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(thing);
        return {
            kind: 'inlineReference',
            name: part.title,
            inlineReference: isUri(part.value) ? part.value : Location.from(part.value)
        };
    }
    ChatResponseAnchorPart.from = from;
    function to(part) {
        const value = (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__.revive)(part);
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseAnchorPart(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(value.inlineReference) ? value.inlineReference : Location.to(value.inlineReference), part.name);
    }
    ChatResponseAnchorPart.to = to;
})(ChatResponseAnchorPart || (ChatResponseAnchorPart = {})));
var ChatResponseProgressPart;
( (function(ChatResponseProgressPart) {
    function from(part) {
        return {
            kind: 'progressMessage',
            content: MarkdownString.from(part.value)
        };
    }
    ChatResponseProgressPart.from = from;
    function to(part) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseProgressPart(part.content.value);
    }
    ChatResponseProgressPart.to = to;
})(ChatResponseProgressPart || (ChatResponseProgressPart = {})));
var ChatResponseWarningPart;
( (function(ChatResponseWarningPart) {
    function from(part) {
        return {
            kind: 'warning',
            content: MarkdownString.from(part.value)
        };
    }
    ChatResponseWarningPart.from = from;
    function to(part) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseWarningPart(part.content.value);
    }
    ChatResponseWarningPart.to = to;
})(ChatResponseWarningPart || (ChatResponseWarningPart = {})));
var ChatTask;
( (function(ChatTask) {
    function from(part) {
        return {
            kind: 'progressTask',
            content: MarkdownString.from(part.value),
        };
    }
    ChatTask.from = from;
})(ChatTask || (ChatTask = {})));
var ChatTaskResult;
( (function(ChatTaskResult) {
    function from(part) {
        return {
            kind: 'progressTaskResult',
            content: typeof part === 'string' ? MarkdownString.from(part) : undefined
        };
    }
    ChatTaskResult.from = from;
})(ChatTaskResult || (ChatTaskResult = {})));
var ChatResponseCommandButtonPart;
( (function(ChatResponseCommandButtonPart) {
    function from(part, commandsConverter, commandDisposables) {
        const command = commandsConverter.toInternal(part.value, commandDisposables) ?? { command: part.value.command, title: part.value.title };
        return {
            kind: 'command',
            command
        };
    }
    ChatResponseCommandButtonPart.from = from;
    function to(part, commandsConverter) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseCommandButtonPart(commandsConverter.fromInternal(part.command) ?? { command: part.command.id, title: part.command.title });
    }
    ChatResponseCommandButtonPart.to = to;
})(ChatResponseCommandButtonPart || (ChatResponseCommandButtonPart = {})));
var ChatResponseTextEditPart;
( (function(ChatResponseTextEditPart) {
    function from(part) {
        return {
            kind: 'textEdit',
            uri: part.uri,
            edits: ( part.edits.map(e => TextEdit.from(e)))
        };
    }
    ChatResponseTextEditPart.from = from;
    function to(part) {
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseTextEditPart(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(part.uri), ( part.edits.map(e => TextEdit.to(e))));
    }
    ChatResponseTextEditPart.to = to;
})(ChatResponseTextEditPart || (ChatResponseTextEditPart = {})));
var ChatResponseReferencePart;
( (function(ChatResponseReferencePart) {
    function from(part) {
        const iconPath = _base_common_themables_js__WEBPACK_IMPORTED_MODULE_12__.ThemeIcon.isThemeIcon(part.iconPath) ? part.iconPath
            : _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(part.iconPath) ? { light: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(part.iconPath) }
                : (part.iconPath && 'light' in part.iconPath && 'dark' in part.iconPath && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(part.iconPath.light) && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(part.iconPath.dark) ? { light: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(part.iconPath.light), dark: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(part.iconPath.dark) }
                    : undefined);
        if ('variableName' in part.value) {
            return {
                kind: 'reference',
                reference: {
                    variableName: part.value.variableName,
                    value: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(part.value.value) || !part.value.value ?
                        part.value.value :
                        Location.from(part.value.value)
                },
                iconPath
            };
        }
        return {
            kind: 'reference',
            reference: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(part.value) ?
                part.value :
                Location.from(part.value),
            iconPath
        };
    }
    ChatResponseReferencePart.from = from;
    function to(part) {
        const value = (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__.revive)(part);
        const mapValue = (value) => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.isUri(value) ?
            value :
            Location.to(value);
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseReferencePart('variableName' in value.reference ? {
            variableName: value.reference.variableName,
            value: value.reference.value && mapValue(value.reference.value)
        } :
            mapValue(value.reference));
    }
    ChatResponseReferencePart.to = to;
})(ChatResponseReferencePart || (ChatResponseReferencePart = {})));
var ChatResponsePart;
( (function(ChatResponsePart) {
    function from(part, commandsConverter, commandDisposables) {
        if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseMarkdownPart) {
            return ChatResponseMarkdownPart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseAnchorPart) {
            return ChatResponseAnchorPart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseReferencePart) {
            return ChatResponseReferencePart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseProgressPart) {
            return ChatResponseProgressPart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseFileTreePart) {
            return ChatResponseFilesPart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseCommandButtonPart) {
            return ChatResponseCommandButtonPart.from(part, commandsConverter, commandDisposables);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseTextEditPart) {
            return ChatResponseTextEditPart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseMarkdownWithVulnerabilitiesPart) {
            return ChatResponseMarkdownWithVulnerabilitiesPart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseDetectedParticipantPart) {
            return ChatResponseDetectedParticipantPart.from(part);
        }
        else if (part instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatResponseWarningPart) {
            return ChatResponseWarningPart.from(part);
        }
        return {
            kind: 'markdownContent',
            content: MarkdownString.from('')
        };
    }
    ChatResponsePart.from = from;
    function to(part, commandsConverter) {
        switch (part.kind) {
            case 'reference': return ChatResponseReferencePart.to(part);
            case 'markdownContent':
            case 'inlineReference':
            case 'progressMessage':
            case 'treeData':
            case 'command':
                return toContent(part, commandsConverter);
        }
        return undefined;
    }
    ChatResponsePart.to = to;
    function toContent(part, commandsConverter) {
        switch (part.kind) {
            case 'markdownContent': return ChatResponseMarkdownPart.to(part);
            case 'inlineReference': return ChatResponseAnchorPart.to(part);
            case 'progressMessage': return undefined;
            case 'treeData': return ChatResponseFilesPart.to(part);
            case 'command': return ChatResponseCommandButtonPart.to(part, commandsConverter);
        }
        return undefined;
    }
    ChatResponsePart.toContent = toContent;
})(ChatResponsePart || (ChatResponsePart = {})));
var ChatAgentRequest;
( (function(ChatAgentRequest) {
    function to(request) {
        return {
            prompt: request.message,
            command: request.command,
            attempt: request.attempt ?? 0,
            enableCommandDetection: request.enableCommandDetection ?? true,
            references: ( request.variables.variables.map(ChatAgentValueReference.to)),
            location: ChatLocation.to(request.location),
            acceptedConfirmationData: request.acceptedConfirmationData,
            rejectedConfirmationData: request.rejectedConfirmationData
        };
    }
    ChatAgentRequest.to = to;
})(ChatAgentRequest || (ChatAgentRequest = {})));
var ChatLocation;
( (function(ChatLocation) {
    function to(loc) {
        switch (loc) {
            case _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Notebook: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Notebook;
            case _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Terminal: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Terminal;
            case _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Panel: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Panel;
            case _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Editor: return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Editor;
        }
    }
    ChatLocation.to = to;
    function from(loc) {
        switch (loc) {
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Notebook: return _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Notebook;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Terminal: return _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Terminal;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Panel: return _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Panel;
            case _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.ChatLocation.Editor: return _contrib_chat_common_chatAgents_js__WEBPACK_IMPORTED_MODULE_24__.ChatAgentLocation.Editor;
        }
    }
    ChatLocation.from = from;
})(ChatLocation || (ChatLocation = {})));
var ChatAgentValueReference;
( (function(ChatAgentValueReference) {
    function to(variable) {
        const value = variable.value;
        if (!value) {
            throw ( new Error('Invalid value reference'));
        }
        return {
            id: variable.id,
            name: variable.name,
            range: variable.range && [variable.range.start, variable.range.endExclusive],
            value: (0,_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.isUriComponents)(value) ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.URI.revive(value) :
                value && typeof value === 'object' && 'uri' in value && 'range' in value && (0,_base_common_uri_js__WEBPACK_IMPORTED_MODULE_14__.isUriComponents)(value.uri) ?
                    Location.to((0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__.revive)(value)) : value,
            modelDescription: variable.modelDescription
        };
    }
    ChatAgentValueReference.to = to;
})(ChatAgentValueReference || (ChatAgentValueReference = {})));
var ChatAgentCompletionItem;
( (function(ChatAgentCompletionItem) {
    function from(item, commandsConverter, disposables) {
        return {
            id: item.id,
            label: item.label,
            fullName: item.fullName,
            icon: item.icon?.id,
            value: item.values[0].value,
            insertText: item.insertText,
            detail: item.detail,
            documentation: item.documentation,
            command: commandsConverter.toInternal(item.command, disposables),
        };
    }
    ChatAgentCompletionItem.from = from;
})(ChatAgentCompletionItem || (ChatAgentCompletionItem = {})));
var ChatAgentResult;
( (function(ChatAgentResult) {
    function to(result) {
        return {
            errorDetails: result.errorDetails,
            metadata: result.metadata,
        };
    }
    ChatAgentResult.to = to;
})(ChatAgentResult || (ChatAgentResult = {})));
var ChatAgentUserActionEvent;
( (function(ChatAgentUserActionEvent) {
    function to(result, event, commandsConverter) {
        if (event.action.kind === 'vote') {
            return;
        }
        const ehResult = ChatAgentResult.to(result);
        if (event.action.kind === 'command') {
            const command = event.action.commandButton.command;
            const commandButton = {
                command: commandsConverter.fromInternal(command) ?? { command: command.id, title: command.title },
            };
            const commandAction = { kind: 'command', commandButton };
            return { action: commandAction, result: ehResult };
        }
        else if (event.action.kind === 'followUp') {
            const followupAction = { kind: 'followUp', followup: ChatFollowup.to(event.action.followup) };
            return { action: followupAction, result: ehResult };
        }
        else if (event.action.kind === 'inlineChat') {
            return { action: { kind: 'editor', accepted: event.action.action === 'accepted' }, result: ehResult };
        }
        else {
            return { action: event.action, result: ehResult };
        }
    }
    ChatAgentUserActionEvent.to = to;
})(ChatAgentUserActionEvent || (ChatAgentUserActionEvent = {})));
var TerminalQuickFix;
( (function(TerminalQuickFix) {
    function from(quickFix, converter, disposables) {
        if ('terminalCommand' in quickFix) {
            return { terminalCommand: quickFix.terminalCommand, shouldExecute: quickFix.shouldExecute };
        }
        if ('uri' in quickFix) {
            return { uri: quickFix.uri };
        }
        return converter.toInternal(quickFix, disposables);
    }
    TerminalQuickFix.from = from;
})(TerminalQuickFix || (TerminalQuickFix = {})));
var PartialAcceptInfo;
( (function(PartialAcceptInfo) {
    function to(info) {
        return {
            kind: PartialAcceptTriggerKind.to(info.kind),
        };
    }
    PartialAcceptInfo.to = to;
})(PartialAcceptInfo || (PartialAcceptInfo = {})));
var PartialAcceptTriggerKind;
( (function(PartialAcceptTriggerKind) {
    function to(kind) {
        switch (kind) {
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.PartialAcceptTriggerKind.Word:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.PartialAcceptTriggerKind.Word;
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.PartialAcceptTriggerKind.Line:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.PartialAcceptTriggerKind.Line;
            case _editor_common_languages_js__WEBPACK_IMPORTED_MODULE_18__.PartialAcceptTriggerKind.Suggest:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.PartialAcceptTriggerKind.Suggest;
            default:
                return _extHostTypes_js__WEBPACK_IMPORTED_MODULE_31__.PartialAcceptTriggerKind.Unknown;
        }
    }
    PartialAcceptTriggerKind.to = to;
})(PartialAcceptTriggerKind || (PartialAcceptTriggerKind = {})));
var DebugTreeItem;
( (function(DebugTreeItem) {
    function from(item, id) {
        return {
            id,
            label: item.label,
            description: item.description,
            canEdit: item.canEdit,
            collapsibleState: (item.collapsibleState || _contrib_debug_common_debug_js__WEBPACK_IMPORTED_MODULE_26__.DebugTreeItemCollapsibleState.None),
            contextValue: item.contextValue,
        };
    }
    DebugTreeItem.from = from;
})(DebugTreeItem || (DebugTreeItem = {})));
var LanguageModelToolDescription;
( (function(LanguageModelToolDescription) {
    function to(item) {
        return {
            name: item.name,
            description: item.description,
            parametersSchema: item.parametersSchema,
        };
    }
    LanguageModelToolDescription.to = to;
})(LanguageModelToolDescription || (LanguageModelToolDescription = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BranchCoverage: () => (/* binding */ BranchCoverage),
/* harmony export */   Breakpoint: () => (/* binding */ Breakpoint),
/* harmony export */   CallHierarchyIncomingCall: () => (/* binding */ CallHierarchyIncomingCall),
/* harmony export */   CallHierarchyItem: () => (/* binding */ CallHierarchyItem),
/* harmony export */   CallHierarchyOutgoingCall: () => (/* binding */ CallHierarchyOutgoingCall),
/* harmony export */   ChatCompletionItem: () => (/* binding */ ChatCompletionItem),
/* harmony export */   ChatCopyKind: () => (/* binding */ ChatCopyKind),
/* harmony export */   ChatEditorTabInput: () => (/* binding */ ChatEditorTabInput),
/* harmony export */   ChatLocation: () => (/* binding */ ChatLocation),
/* harmony export */   ChatRequestTurn: () => (/* binding */ ChatRequestTurn),
/* harmony export */   ChatResponseAnchorPart: () => (/* binding */ ChatResponseAnchorPart),
/* harmony export */   ChatResponseCommandButtonPart: () => (/* binding */ ChatResponseCommandButtonPart),
/* harmony export */   ChatResponseConfirmationPart: () => (/* binding */ ChatResponseConfirmationPart),
/* harmony export */   ChatResponseDetectedParticipantPart: () => (/* binding */ ChatResponseDetectedParticipantPart),
/* harmony export */   ChatResponseFileTreePart: () => (/* binding */ ChatResponseFileTreePart),
/* harmony export */   ChatResponseMarkdownPart: () => (/* binding */ ChatResponseMarkdownPart),
/* harmony export */   ChatResponseMarkdownWithVulnerabilitiesPart: () => (/* binding */ ChatResponseMarkdownWithVulnerabilitiesPart),
/* harmony export */   ChatResponseProgressPart: () => (/* binding */ ChatResponseProgressPart),
/* harmony export */   ChatResponseProgressPart2: () => (/* binding */ ChatResponseProgressPart2),
/* harmony export */   ChatResponseReferencePart: () => (/* binding */ ChatResponseReferencePart),
/* harmony export */   ChatResponseTextEditPart: () => (/* binding */ ChatResponseTextEditPart),
/* harmony export */   ChatResponseTurn: () => (/* binding */ ChatResponseTurn),
/* harmony export */   ChatResponseWarningPart: () => (/* binding */ ChatResponseWarningPart),
/* harmony export */   ChatResultFeedbackKind: () => (/* binding */ ChatResultFeedbackKind),
/* harmony export */   ChatVariableLevel: () => (/* binding */ ChatVariableLevel),
/* harmony export */   CodeAction: () => (/* binding */ CodeAction),
/* harmony export */   CodeActionKind: () => (/* binding */ CodeActionKind),
/* harmony export */   CodeActionTriggerKind: () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   CodeLens: () => (/* binding */ CodeLens),
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   ColorInformation: () => (/* binding */ ColorInformation),
/* harmony export */   ColorPresentation: () => (/* binding */ ColorPresentation),
/* harmony export */   ColorTheme: () => (/* binding */ ColorTheme),
/* harmony export */   ColorThemeKind: () => (/* binding */ ColorThemeKind),
/* harmony export */   CommentMode: () => (/* binding */ CommentMode),
/* harmony export */   CommentState: () => (/* binding */ CommentState),
/* harmony export */   CommentThreadApplicability: () => (/* binding */ CommentThreadApplicability),
/* harmony export */   CommentThreadCollapsibleState: () => (/* binding */ CommentThreadCollapsibleState),
/* harmony export */   CommentThreadState: () => (/* binding */ CommentThreadState),
/* harmony export */   CompletionItem: () => (/* binding */ CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionList: () => (/* binding */ CompletionList),
/* harmony export */   CompletionTriggerKind: () => (/* binding */ CompletionTriggerKind),
/* harmony export */   ConfigurationTarget: () => (/* binding */ ConfigurationTarget),
/* harmony export */   CustomEditorTabInput: () => (/* binding */ CustomEditorTabInput),
/* harmony export */   CustomExecution: () => (/* binding */ CustomExecution),
/* harmony export */   DataBreakpoint: () => (/* binding */ DataBreakpoint),
/* harmony export */   DataTransfer: () => (/* binding */ DataTransfer),
/* harmony export */   DataTransferFile: () => (/* binding */ DataTransferFile),
/* harmony export */   DataTransferItem: () => (/* binding */ DataTransferItem),
/* harmony export */   DebugAdapterExecutable: () => (/* binding */ DebugAdapterExecutable),
/* harmony export */   DebugAdapterInlineImplementation: () => (/* binding */ DebugAdapterInlineImplementation),
/* harmony export */   DebugAdapterNamedPipeServer: () => (/* binding */ DebugAdapterNamedPipeServer),
/* harmony export */   DebugAdapterServer: () => (/* binding */ DebugAdapterServer),
/* harmony export */   DebugConsoleMode: () => (/* binding */ DebugConsoleMode),
/* harmony export */   DebugStackFrame: () => (/* binding */ DebugStackFrame),
/* harmony export */   DebugThread: () => (/* binding */ DebugThread),
/* harmony export */   DebugVisualization: () => (/* binding */ DebugVisualization),
/* harmony export */   DeclarationCoverage: () => (/* binding */ DeclarationCoverage),
/* harmony export */   DecorationRangeBehavior: () => (/* binding */ DecorationRangeBehavior),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   DiagnosticRelatedInformation: () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   DiagnosticSeverity: () => (/* binding */ DiagnosticSeverity),
/* harmony export */   DiagnosticTag: () => (/* binding */ DiagnosticTag),
/* harmony export */   Disposable: () => (/* binding */ Disposable),
/* harmony export */   DocumentDropEdit: () => (/* binding */ DocumentDropEdit),
/* harmony export */   DocumentDropOrPasteEditKind: () => (/* binding */ DocumentDropOrPasteEditKind),
/* harmony export */   DocumentHighlight: () => (/* binding */ DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* binding */ DocumentLink),
/* harmony export */   DocumentPasteEdit: () => (/* binding */ DocumentPasteEdit),
/* harmony export */   DocumentPasteTriggerKind: () => (/* binding */ DocumentPasteTriggerKind),
/* harmony export */   DocumentSymbol: () => (/* binding */ DocumentSymbol),
/* harmony export */   EndOfLine: () => (/* binding */ EndOfLine),
/* harmony export */   EnvironmentVariableMutatorType: () => (/* binding */ EnvironmentVariableMutatorType),
/* harmony export */   EvaluatableExpression: () => (/* binding */ EvaluatableExpression),
/* harmony export */   ExtensionKind: () => (/* binding */ ExtensionKind),
/* harmony export */   ExtensionMode: () => (/* binding */ ExtensionMode),
/* harmony export */   ExtensionRuntime: () => (/* binding */ ExtensionRuntime),
/* harmony export */   ExternalUriOpenerPriority: () => (/* binding */ ExternalUriOpenerPriority),
/* harmony export */   FileChangeType: () => (/* binding */ FileChangeType),
/* harmony export */   FileCoverage: () => (/* binding */ FileCoverage),
/* harmony export */   FileDecoration: () => (/* binding */ FileDecoration),
/* harmony export */   FileEditType: () => (/* binding */ FileEditType),
/* harmony export */   FileSystemError: () => (/* binding */ FileSystemError),
/* harmony export */   FoldingRange: () => (/* binding */ FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   FunctionBreakpoint: () => (/* binding */ FunctionBreakpoint),
/* harmony export */   Hover: () => (/* binding */ Hover),
/* harmony export */   HoverVerbosityAction: () => (/* binding */ HoverVerbosityAction),
/* harmony export */   InlayHint: () => (/* binding */ InlayHint),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlayHintLabelPart: () => (/* binding */ InlayHintLabelPart),
/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),
/* harmony export */   InlineEdit: () => (/* binding */ InlineEdit),
/* harmony export */   InlineEditTriggerKind: () => (/* binding */ InlineEditTriggerKind),
/* harmony export */   InlineSuggestion: () => (/* binding */ InlineSuggestion),
/* harmony export */   InlineSuggestionList: () => (/* binding */ InlineSuggestionList),
/* harmony export */   InlineValueContext: () => (/* binding */ InlineValueContext),
/* harmony export */   InlineValueEvaluatableExpression: () => (/* binding */ InlineValueEvaluatableExpression),
/* harmony export */   InlineValueText: () => (/* binding */ InlineValueText),
/* harmony export */   InlineValueVariableLookup: () => (/* binding */ InlineValueVariableLookup),
/* harmony export */   InputBoxValidationSeverity: () => (/* binding */ InputBoxValidationSeverity),
/* harmony export */   InteractiveEditorResponseFeedbackKind: () => (/* binding */ InteractiveEditorResponseFeedbackKind),
/* harmony export */   InteractiveSessionVoteDirection: () => (/* binding */ InteractiveSessionVoteDirection),
/* harmony export */   InteractiveWindowInput: () => (/* binding */ InteractiveWindowInput),
/* harmony export */   InternalDataTransferItem: () => (/* binding */ InternalDataTransferItem),
/* harmony export */   InternalFileDataTransferItem: () => (/* binding */ InternalFileDataTransferItem),
/* harmony export */   KeywordRecognitionStatus: () => (/* binding */ KeywordRecognitionStatus),
/* harmony export */   LanguageModelChatAssistantMessage: () => (/* binding */ LanguageModelChatAssistantMessage),
/* harmony export */   LanguageModelChatMessage: () => (/* binding */ LanguageModelChatMessage),
/* harmony export */   LanguageModelChatMessageRole: () => (/* binding */ LanguageModelChatMessageRole),
/* harmony export */   LanguageModelChatSystemMessage: () => (/* binding */ LanguageModelChatSystemMessage),
/* harmony export */   LanguageModelChatUserMessage: () => (/* binding */ LanguageModelChatUserMessage),
/* harmony export */   LanguageModelError: () => (/* binding */ LanguageModelError),
/* harmony export */   LanguageModelFunctionResultPart: () => (/* binding */ LanguageModelFunctionResultPart),
/* harmony export */   LanguageModelFunctionUsePart: () => (/* binding */ LanguageModelFunctionUsePart),
/* harmony export */   LanguageModelTextPart: () => (/* binding */ LanguageModelTextPart),
/* harmony export */   LanguageStatusSeverity: () => (/* binding */ LanguageStatusSeverity),
/* harmony export */   LinkedEditingRanges: () => (/* binding */ LinkedEditingRanges),
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   ManagedResolvedAuthority: () => (/* binding */ ManagedResolvedAuthority),
/* harmony export */   MarkdownString: () => (/* binding */ MarkdownString),
/* harmony export */   MultiDocumentHighlight: () => (/* binding */ MultiDocumentHighlight),
/* harmony export */   NewSymbolName: () => (/* binding */ NewSymbolName),
/* harmony export */   NewSymbolNameTag: () => (/* binding */ NewSymbolNameTag),
/* harmony export */   NewSymbolNameTriggerKind: () => (/* binding */ NewSymbolNameTriggerKind),
/* harmony export */   NotebookCellData: () => (/* binding */ NotebookCellData),
/* harmony export */   NotebookCellExecutionState: () => (/* binding */ NotebookCellExecutionState),
/* harmony export */   NotebookCellKind: () => (/* binding */ NotebookCellKind),
/* harmony export */   NotebookCellOutput: () => (/* binding */ NotebookCellOutput),
/* harmony export */   NotebookCellOutputItem: () => (/* binding */ NotebookCellOutputItem),
/* harmony export */   NotebookCellStatusBarAlignment: () => (/* binding */ NotebookCellStatusBarAlignment),
/* harmony export */   NotebookCellStatusBarItem: () => (/* binding */ NotebookCellStatusBarItem),
/* harmony export */   NotebookControllerAffinity: () => (/* binding */ NotebookControllerAffinity),
/* harmony export */   NotebookControllerAffinity2: () => (/* binding */ NotebookControllerAffinity2),
/* harmony export */   NotebookData: () => (/* binding */ NotebookData),
/* harmony export */   NotebookDiffEditorTabInput: () => (/* binding */ NotebookDiffEditorTabInput),
/* harmony export */   NotebookEdit: () => (/* binding */ NotebookEdit),
/* harmony export */   NotebookEditorRevealType: () => (/* binding */ NotebookEditorRevealType),
/* harmony export */   NotebookEditorTabInput: () => (/* binding */ NotebookEditorTabInput),
/* harmony export */   NotebookKernelSourceAction: () => (/* binding */ NotebookKernelSourceAction),
/* harmony export */   NotebookRange: () => (/* binding */ NotebookRange),
/* harmony export */   NotebookRendererScript: () => (/* binding */ NotebookRendererScript),
/* harmony export */   NotebookVariablesRequestKind: () => (/* binding */ NotebookVariablesRequestKind),
/* harmony export */   ParameterInformation: () => (/* binding */ ParameterInformation),
/* harmony export */   PartialAcceptTriggerKind: () => (/* binding */ PartialAcceptTriggerKind),
/* harmony export */   PortAttributes: () => (/* binding */ PortAttributes),
/* harmony export */   PortAutoForwardAction: () => (/* binding */ PortAutoForwardAction),
/* harmony export */   Position: () => (/* binding */ Position),
/* harmony export */   ProcessExecution: () => (/* binding */ ProcessExecution),
/* harmony export */   ProgressLocation: () => (/* binding */ ProgressLocation),
/* harmony export */   QuickInputButtons: () => (/* binding */ QuickInputButtons),
/* harmony export */   QuickPickItemKind: () => (/* binding */ QuickPickItemKind),
/* harmony export */   Range: () => (/* binding */ Range),
/* harmony export */   RelatedInformationType: () => (/* binding */ RelatedInformationType),
/* harmony export */   RelativePattern: () => (/* binding */ RelativePattern),
/* harmony export */   RemoteAuthorityResolverError: () => (/* binding */ RemoteAuthorityResolverError),
/* harmony export */   ResolvedAuthority: () => (/* binding */ ResolvedAuthority),
/* harmony export */   Selection: () => (/* binding */ Selection),
/* harmony export */   SelectionRange: () => (/* binding */ SelectionRange),
/* harmony export */   SemanticTokens: () => (/* binding */ SemanticTokens),
/* harmony export */   SemanticTokensBuilder: () => (/* binding */ SemanticTokensBuilder),
/* harmony export */   SemanticTokensEdit: () => (/* binding */ SemanticTokensEdit),
/* harmony export */   SemanticTokensEdits: () => (/* binding */ SemanticTokensEdits),
/* harmony export */   SemanticTokensLegend: () => (/* binding */ SemanticTokensLegend),
/* harmony export */   ShellExecution: () => (/* binding */ ShellExecution),
/* harmony export */   ShellQuoting: () => (/* binding */ ShellQuoting),
/* harmony export */   SignatureHelp: () => (/* binding */ SignatureHelp),
/* harmony export */   SignatureHelpTriggerKind: () => (/* binding */ SignatureHelpTriggerKind),
/* harmony export */   SignatureInformation: () => (/* binding */ SignatureInformation),
/* harmony export */   SnippetString: () => (/* binding */ SnippetString),
/* harmony export */   SnippetTextEdit: () => (/* binding */ SnippetTextEdit),
/* harmony export */   SourceBreakpoint: () => (/* binding */ SourceBreakpoint),
/* harmony export */   SourceControlInputBoxValidationType: () => (/* binding */ SourceControlInputBoxValidationType),
/* harmony export */   SpeechToTextStatus: () => (/* binding */ SpeechToTextStatus),
/* harmony export */   StandardTokenType: () => (/* binding */ StandardTokenType),
/* harmony export */   StatementCoverage: () => (/* binding */ StatementCoverage),
/* harmony export */   StatusBarAlignment: () => (/* binding */ StatusBarAlignment),
/* harmony export */   SymbolInformation: () => (/* binding */ SymbolInformation),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   SyntaxTokenType: () => (/* binding */ SyntaxTokenType),
/* harmony export */   Task: () => (/* binding */ Task),
/* harmony export */   TaskGroup: () => (/* binding */ TaskGroup),
/* harmony export */   TaskPanelKind: () => (/* binding */ TaskPanelKind),
/* harmony export */   TaskRevealKind: () => (/* binding */ TaskRevealKind),
/* harmony export */   TaskScope: () => (/* binding */ TaskScope),
/* harmony export */   TerminalEditorTabInput: () => (/* binding */ TerminalEditorTabInput),
/* harmony export */   TerminalExitReason: () => (/* binding */ TerminalExitReason),
/* harmony export */   TerminalLink: () => (/* binding */ TerminalLink),
/* harmony export */   TerminalLocation: () => (/* binding */ TerminalLocation),
/* harmony export */   TerminalOutputAnchor: () => (/* binding */ TerminalOutputAnchor),
/* harmony export */   TerminalProfile: () => (/* binding */ TerminalProfile),
/* harmony export */   TerminalQuickFixCommand: () => (/* binding */ TerminalQuickFixCommand),
/* harmony export */   TerminalQuickFixOpener: () => (/* binding */ TerminalQuickFixOpener),
/* harmony export */   TerminalShellExecutionCommandLineConfidence: () => (/* binding */ TerminalShellExecutionCommandLineConfidence),
/* harmony export */   TestCoverageCount: () => (/* binding */ TestCoverageCount),
/* harmony export */   TestMessage: () => (/* binding */ TestMessage),
/* harmony export */   TestResultState: () => (/* binding */ TestResultState),
/* harmony export */   TestRunProfileKind: () => (/* binding */ TestRunProfileKind),
/* harmony export */   TestRunRequest: () => (/* binding */ TestRunRequest),
/* harmony export */   TestTag: () => (/* binding */ TestTag),
/* harmony export */   TextDiffTabInput: () => (/* binding */ TextDiffTabInput),
/* harmony export */   TextDocumentChangeReason: () => (/* binding */ TextDocumentChangeReason),
/* harmony export */   TextDocumentSaveReason: () => (/* binding */ TextDocumentSaveReason),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   TextEditorLineNumbersStyle: () => (/* binding */ TextEditorLineNumbersStyle),
/* harmony export */   TextEditorRevealType: () => (/* binding */ TextEditorRevealType),
/* harmony export */   TextEditorSelectionChangeKind: () => (/* binding */ TextEditorSelectionChangeKind),
/* harmony export */   TextMergeTabInput: () => (/* binding */ TextMergeTabInput),
/* harmony export */   TextMultiDiffTabInput: () => (/* binding */ TextMultiDiffTabInput),
/* harmony export */   TextTabInput: () => (/* binding */ TextTabInput),
/* harmony export */   TextToSpeechStatus: () => (/* binding */ TextToSpeechStatus),
/* harmony export */   ThemeColor: () => (/* binding */ ThemeColor),
/* harmony export */   ThemeIcon: () => (/* binding */ ThemeIcon),
/* harmony export */   TimelineItem: () => (/* binding */ TimelineItem),
/* harmony export */   TreeItem: () => (/* binding */ TreeItem),
/* harmony export */   TreeItemCheckboxState: () => (/* binding */ TreeItemCheckboxState),
/* harmony export */   TreeItemCollapsibleState: () => (/* binding */ TreeItemCollapsibleState),
/* harmony export */   TypeHierarchyItem: () => (/* binding */ TypeHierarchyItem),
/* harmony export */   VerboseHover: () => (/* binding */ VerboseHover),
/* harmony export */   ViewBadge: () => (/* binding */ ViewBadge),
/* harmony export */   ViewColumn: () => (/* binding */ ViewColumn),
/* harmony export */   WebviewEditorTabInput: () => (/* binding */ WebviewEditorTabInput),
/* harmony export */   WorkspaceEdit: () => (/* binding */ WorkspaceEdit),
/* harmony export */   WorkspaceTrustState: () => (/* binding */ WorkspaceTrustState),
/* harmony export */   asStatusBarItemIdentifier: () => (/* binding */ asStatusBarItemIdentifier),
/* harmony export */   setBreakpointId: () => (/* binding */ setBreakpointId),
/* harmony export */   validateTestCoverageCount: () => (/* binding */ validateTestCoverageCount)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/htmlContent.js */ "./node_modules/vscode/vscode/src/vs/base/common/htmlContent.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_mime_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/mime.js */ "./node_modules/vscode/vscode/src/vs/base/common/mime.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_uuid_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/uuid.js */ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../platform/remote/common/remoteAuthorityResolver.js */ "./node_modules/vscode/vscode/src/vs/platform/remote/common/remoteAuthorityResolver.js");
/* harmony import */ var _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../contrib/notebook/common/notebookCommon.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookCommon.js");














var Disposable_1, Position_1, Range_1, Selection_1, TextEdit_1, NotebookEdit_1, SnippetString_1, Location_1, SymbolInformation_1, DocumentSymbol_1, CodeActionKind_1, MarkdownString_1, TaskGroup_1, Task_1, TreeItem_1, FileSystemError_1, TestMessage_1;
function es5ClassCompat(target) {
    const interceptFunctions = {
        apply: function (...args) {
            if (args.length === 0) {
                return Reflect.construct(target, []);
            }
            else {
                const argsList = args.length === 1 ? [] : args[1];
                return Reflect.construct(target, argsList, args[0].constructor);
            }
        },
        call: function (...args) {
            if (args.length === 0) {
                return Reflect.construct(target, []);
            }
            else {
                const [thisArg, ...restArgs] = args;
                return Reflect.construct(target, restArgs, thisArg.constructor);
            }
        }
    };
    return Object.assign(target, interceptFunctions);
}
var TerminalOutputAnchor;
( (function(TerminalOutputAnchor) {
    TerminalOutputAnchor[TerminalOutputAnchor["Top"] = 0] = "Top";
    TerminalOutputAnchor[TerminalOutputAnchor["Bottom"] = 1] = "Bottom";
})(TerminalOutputAnchor || (TerminalOutputAnchor = {})));
let Disposable = Disposable_1 = class Disposable {
    static from(...inDisposables) {
        let disposables = inDisposables;
        return ( new Disposable_1(function () {
            if (disposables) {
                for (const disposable of disposables) {
                    if (disposable && typeof disposable.dispose === 'function') {
                        disposable.dispose();
                    }
                }
                disposables = undefined;
            }
        }));
    }
    #callOnDispose;
    constructor(callOnDispose) {
        this.#callOnDispose = callOnDispose;
    }
    dispose() {
        if (typeof this.#callOnDispose === 'function') {
            this.#callOnDispose();
            this.#callOnDispose = undefined;
        }
    }
};
Disposable = Disposable_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Disposable));
let Position = Position_1 = class Position {
    static Min(...positions) {
        if (positions.length === 0) {
            throw ( new TypeError());
        }
        let result = positions[0];
        for (let i = 1; i < positions.length; i++) {
            const p = positions[i];
            if (p.isBefore(result)) {
                result = p;
            }
        }
        return result;
    }
    static Max(...positions) {
        if (positions.length === 0) {
            throw ( new TypeError());
        }
        let result = positions[0];
        for (let i = 1; i < positions.length; i++) {
            const p = positions[i];
            if (p.isAfter(result)) {
                result = p;
            }
        }
        return result;
    }
    static isPosition(other) {
        if (!other) {
            return false;
        }
        if (other instanceof Position_1) {
            return true;
        }
        const { line, character } = other;
        if (typeof line === 'number' && typeof character === 'number') {
            return true;
        }
        return false;
    }
    static of(obj) {
        if (obj instanceof Position_1) {
            return obj;
        }
        else if (this.isPosition(obj)) {
            return ( new Position_1(obj.line, obj.character));
        }
        throw ( new Error('Invalid argument, is NOT a position-like object'));
    }
    get line() {
        return this._line;
    }
    get character() {
        return this._character;
    }
    constructor(line, character) {
        if (line < 0) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('line must be non-negative');
        }
        if (character < 0) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('character must be non-negative');
        }
        this._line = line;
        this._character = character;
    }
    isBefore(other) {
        if (this._line < other._line) {
            return true;
        }
        if (other._line < this._line) {
            return false;
        }
        return this._character < other._character;
    }
    isBeforeOrEqual(other) {
        if (this._line < other._line) {
            return true;
        }
        if (other._line < this._line) {
            return false;
        }
        return this._character <= other._character;
    }
    isAfter(other) {
        return !this.isBeforeOrEqual(other);
    }
    isAfterOrEqual(other) {
        return !this.isBefore(other);
    }
    isEqual(other) {
        return this._line === other._line && this._character === other._character;
    }
    compareTo(other) {
        if (this._line < other._line) {
            return -1;
        }
        else if (this._line > other.line) {
            return 1;
        }
        else {
            if (this._character < other._character) {
                return -1;
            }
            else if (this._character > other._character) {
                return 1;
            }
            else {
                return 0;
            }
        }
    }
    translate(lineDeltaOrChange, characterDelta = 0) {
        if (lineDeltaOrChange === null || characterDelta === null) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)();
        }
        let lineDelta;
        if (typeof lineDeltaOrChange === 'undefined') {
            lineDelta = 0;
        }
        else if (typeof lineDeltaOrChange === 'number') {
            lineDelta = lineDeltaOrChange;
        }
        else {
            lineDelta = typeof lineDeltaOrChange.lineDelta === 'number' ? lineDeltaOrChange.lineDelta : 0;
            characterDelta = typeof lineDeltaOrChange.characterDelta === 'number' ? lineDeltaOrChange.characterDelta : 0;
        }
        if (lineDelta === 0 && characterDelta === 0) {
            return this;
        }
        return ( new Position_1(this.line + lineDelta, this.character + characterDelta));
    }
    with(lineOrChange, character = this.character) {
        if (lineOrChange === null || character === null) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)();
        }
        let line;
        if (typeof lineOrChange === 'undefined') {
            line = this.line;
        }
        else if (typeof lineOrChange === 'number') {
            line = lineOrChange;
        }
        else {
            line = typeof lineOrChange.line === 'number' ? lineOrChange.line : this.line;
            character = typeof lineOrChange.character === 'number' ? lineOrChange.character : this.character;
        }
        if (line === this.line && character === this.character) {
            return this;
        }
        return ( new Position_1(line, character));
    }
    toJSON() {
        return { line: this.line, character: this.character };
    }
};
Position = Position_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Position));
let Range = Range_1 = class Range {
    static isRange(thing) {
        if (thing instanceof Range_1) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return Position.isPosition(thing.start)
            && Position.isPosition(thing.end);
    }
    static of(obj) {
        if (obj instanceof Range_1) {
            return obj;
        }
        if (this.isRange(obj)) {
            return ( new Range_1(obj.start, obj.end));
        }
        throw ( new Error('Invalid argument, is NOT a range-like object'));
    }
    get start() {
        return this._start;
    }
    get end() {
        return this._end;
    }
    constructor(startLineOrStart, startColumnOrEnd, endLine, endColumn) {
        let start;
        let end;
        if (typeof startLineOrStart === 'number' && typeof startColumnOrEnd === 'number' && typeof endLine === 'number' && typeof endColumn === 'number') {
            start = ( new Position(startLineOrStart, startColumnOrEnd));
            end = ( new Position(endLine, endColumn));
        }
        else if (Position.isPosition(startLineOrStart) && Position.isPosition(startColumnOrEnd)) {
            start = Position.of(startLineOrStart);
            end = Position.of(startColumnOrEnd);
        }
        if (!start || !end) {
            throw ( new Error('Invalid arguments'));
        }
        if (start.isBefore(end)) {
            this._start = start;
            this._end = end;
        }
        else {
            this._start = end;
            this._end = start;
        }
    }
    contains(positionOrRange) {
        if (Range_1.isRange(positionOrRange)) {
            return this.contains(positionOrRange.start)
                && this.contains(positionOrRange.end);
        }
        else if (Position.isPosition(positionOrRange)) {
            if (Position.of(positionOrRange).isBefore(this._start)) {
                return false;
            }
            if (this._end.isBefore(positionOrRange)) {
                return false;
            }
            return true;
        }
        return false;
    }
    isEqual(other) {
        return this._start.isEqual(other._start) && this._end.isEqual(other._end);
    }
    intersection(other) {
        const start = Position.Max(other.start, this._start);
        const end = Position.Min(other.end, this._end);
        if (start.isAfter(end)) {
            return undefined;
        }
        return ( new Range_1(start, end));
    }
    union(other) {
        if (this.contains(other)) {
            return this;
        }
        else if (other.contains(this)) {
            return other;
        }
        const start = Position.Min(other.start, this._start);
        const end = Position.Max(other.end, this.end);
        return ( new Range_1(start, end));
    }
    get isEmpty() {
        return this._start.isEqual(this._end);
    }
    get isSingleLine() {
        return this._start.line === this._end.line;
    }
    with(startOrChange, end = this.end) {
        if (startOrChange === null || end === null) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)();
        }
        let start;
        if (!startOrChange) {
            start = this.start;
        }
        else if (Position.isPosition(startOrChange)) {
            start = startOrChange;
        }
        else {
            start = startOrChange.start || this.start;
            end = startOrChange.end || this.end;
        }
        if (start.isEqual(this._start) && end.isEqual(this.end)) {
            return this;
        }
        return ( new Range_1(start, end));
    }
    toJSON() {
        return [this.start, this.end];
    }
};
Range = Range_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Range));
let Selection = Selection_1 = class Selection extends Range {
    static isSelection(thing) {
        if (thing instanceof Selection_1) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return Range.isRange(thing)
            && Position.isPosition(thing.anchor)
            && Position.isPosition(thing.active)
            && typeof thing.isReversed === 'boolean';
    }
    get anchor() {
        return this._anchor;
    }
    get active() {
        return this._active;
    }
    constructor(anchorLineOrAnchor, anchorColumnOrActive, activeLine, activeColumn) {
        let anchor;
        let active;
        if (typeof anchorLineOrAnchor === 'number' && typeof anchorColumnOrActive === 'number' && typeof activeLine === 'number' && typeof activeColumn === 'number') {
            anchor = ( new Position(anchorLineOrAnchor, anchorColumnOrActive));
            active = ( new Position(activeLine, activeColumn));
        }
        else if (Position.isPosition(anchorLineOrAnchor) && Position.isPosition(anchorColumnOrActive)) {
            anchor = Position.of(anchorLineOrAnchor);
            active = Position.of(anchorColumnOrActive);
        }
        if (!anchor || !active) {
            throw ( new Error('Invalid arguments'));
        }
        super(anchor, active);
        this._anchor = anchor;
        this._active = active;
    }
    get isReversed() {
        return this._anchor === this._end;
    }
    toJSON() {
        return {
            start: this.start,
            end: this.end,
            active: this.active,
            anchor: this.anchor
        };
    }
};
Selection = Selection_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Selection));
const validateConnectionToken = (connectionToken) => {
    if (typeof connectionToken !== 'string' || connectionToken.length === 0 || !/^[0-9A-Za-z_\-]+$/.test(connectionToken)) {
        throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('connectionToken');
    }
};
class ResolvedAuthority {
    static isResolvedAuthority(resolvedAuthority) {
        return resolvedAuthority
            && typeof resolvedAuthority === 'object'
            && typeof resolvedAuthority.host === 'string'
            && typeof resolvedAuthority.port === 'number'
            && (resolvedAuthority.connectionToken === undefined || typeof resolvedAuthority.connectionToken === 'string');
    }
    constructor(host, port, connectionToken) {
        if (typeof host !== 'string' || host.length === 0) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('host');
        }
        if (typeof port !== 'number' || port === 0 || Math.round(port) !== port) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('port');
        }
        if (typeof connectionToken !== 'undefined') {
            validateConnectionToken(connectionToken);
        }
        this.host = host;
        this.port = Math.round(port);
        this.connectionToken = connectionToken;
    }
}
class ManagedResolvedAuthority {
    static isManagedResolvedAuthority(resolvedAuthority) {
        return resolvedAuthority
            && typeof resolvedAuthority === 'object'
            && typeof resolvedAuthority.makeConnection === 'function'
            && (resolvedAuthority.connectionToken === undefined || typeof resolvedAuthority.connectionToken === 'string');
    }
    constructor(makeConnection, connectionToken) {
        this.makeConnection = makeConnection;
        this.connectionToken = connectionToken;
        if (typeof connectionToken !== 'undefined') {
            validateConnectionToken(connectionToken);
        }
    }
}
class RemoteAuthorityResolverError extends Error {
    static NotAvailable(message, handled) {
        return ( new RemoteAuthorityResolverError(message, _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_12__.RemoteAuthorityResolverErrorCode.NotAvailable, handled));
    }
    static TemporarilyNotAvailable(message) {
        return ( new RemoteAuthorityResolverError(message, _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_12__.RemoteAuthorityResolverErrorCode.TemporarilyNotAvailable));
    }
    constructor(message, code = _platform_remote_common_remoteAuthorityResolver_js__WEBPACK_IMPORTED_MODULE_12__.RemoteAuthorityResolverErrorCode.Unknown, detail) {
        super(message);
        this._message = message;
        this._code = code;
        this._detail = detail;
        Object.setPrototypeOf(this, RemoteAuthorityResolverError.prototype);
    }
}
var EndOfLine;
( (function(EndOfLine) {
    EndOfLine[EndOfLine["LF"] = 1] = "LF";
    EndOfLine[EndOfLine["CRLF"] = 2] = "CRLF";
})(EndOfLine || (EndOfLine = {})));
var EnvironmentVariableMutatorType;
( (function(EnvironmentVariableMutatorType) {
    EnvironmentVariableMutatorType[EnvironmentVariableMutatorType["Replace"] = 1] = "Replace";
    EnvironmentVariableMutatorType[EnvironmentVariableMutatorType["Append"] = 2] = "Append";
    EnvironmentVariableMutatorType[EnvironmentVariableMutatorType["Prepend"] = 3] = "Prepend";
})(EnvironmentVariableMutatorType || (EnvironmentVariableMutatorType = {})));
let TextEdit = TextEdit_1 = class TextEdit {
    static isTextEdit(thing) {
        if (thing instanceof TextEdit_1) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return Range.isRange(thing)
            && typeof thing.newText === 'string';
    }
    static replace(range, newText) {
        return ( new TextEdit_1(range, newText));
    }
    static insert(position, newText) {
        return TextEdit_1.replace(( new Range(position, position)), newText);
    }
    static delete(range) {
        return TextEdit_1.replace(range, '');
    }
    static setEndOfLine(eol) {
        const ret = ( new TextEdit_1(( new Range(( new Position(0, 0)), ( new Position(0, 0)))), ''));
        ret.newEol = eol;
        return ret;
    }
    get range() {
        return this._range;
    }
    set range(value) {
        if (value && !Range.isRange(value)) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('range');
        }
        this._range = value;
    }
    get newText() {
        return this._newText || '';
    }
    set newText(value) {
        if (value && typeof value !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('newText');
        }
        this._newText = value;
    }
    get newEol() {
        return this._newEol;
    }
    set newEol(value) {
        if (value && typeof value !== 'number') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('newEol');
        }
        this._newEol = value;
    }
    constructor(range, newText) {
        this._range = range;
        this._newText = newText;
    }
    toJSON() {
        return {
            range: this.range,
            newText: this.newText,
            newEol: this._newEol
        };
    }
};
TextEdit = TextEdit_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], TextEdit));
let NotebookEdit = NotebookEdit_1 = class NotebookEdit {
    static isNotebookCellEdit(thing) {
        if (thing instanceof NotebookEdit_1) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return NotebookRange.isNotebookRange(thing)
            && Array.isArray(thing.newCells);
    }
    static replaceCells(range, newCells) {
        return ( new NotebookEdit_1(range, newCells));
    }
    static insertCells(index, newCells) {
        return ( new NotebookEdit_1(( new NotebookRange(index, index)), newCells));
    }
    static deleteCells(range) {
        return ( new NotebookEdit_1(range, []));
    }
    static updateCellMetadata(index, newMetadata) {
        const edit = ( new NotebookEdit_1(( new NotebookRange(index, index)), []));
        edit.newCellMetadata = newMetadata;
        return edit;
    }
    static updateNotebookMetadata(newMetadata) {
        const edit = ( new NotebookEdit_1(( new NotebookRange(0, 0)), []));
        edit.newNotebookMetadata = newMetadata;
        return edit;
    }
    constructor(range, newCells) {
        this.range = range;
        this.newCells = newCells;
    }
};
NotebookEdit = NotebookEdit_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], NotebookEdit));
class SnippetTextEdit {
    static isSnippetTextEdit(thing) {
        if (thing instanceof SnippetTextEdit) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return Range.isRange(thing.range)
            && SnippetString.isSnippetString(thing.snippet);
    }
    static replace(range, snippet) {
        return ( new SnippetTextEdit(range, snippet));
    }
    static insert(position, snippet) {
        return SnippetTextEdit.replace(( new Range(position, position)), snippet);
    }
    constructor(range, snippet) {
        this.range = range;
        this.snippet = snippet;
    }
}
var FileEditType;
( (function(FileEditType) {
    FileEditType[FileEditType["File"] = 1] = "File";
    FileEditType[FileEditType["Text"] = 2] = "Text";
    FileEditType[FileEditType["Cell"] = 3] = "Cell";
    FileEditType[FileEditType["CellReplace"] = 5] = "CellReplace";
    FileEditType[FileEditType["Snippet"] = 6] = "Snippet";
})(FileEditType || (FileEditType = {})));
let WorkspaceEdit = class WorkspaceEdit {
    constructor() {
        this._edits = [];
    }
    _allEntries() {
        return this._edits;
    }
    renameFile(from, to, options, metadata) {
        this._edits.push({ _type: FileEditType.File, from, to, options, metadata });
    }
    createFile(uri, options, metadata) {
        this._edits.push({ _type: FileEditType.File, from: undefined, to: uri, options, metadata });
    }
    deleteFile(uri, options, metadata) {
        this._edits.push({ _type: FileEditType.File, from: uri, to: undefined, options, metadata });
    }
    replaceNotebookMetadata(uri, value, metadata) {
        this._edits.push({ _type: FileEditType.Cell, metadata, uri, edit: { editType: _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_13__.CellEditType.DocumentMetadata, metadata: value }, notebookMetadata: value });
    }
    replaceNotebookCells(uri, startOrRange, cellData, metadata) {
        const start = startOrRange.start;
        const end = startOrRange.end;
        if (start !== end || cellData.length > 0) {
            this._edits.push({ _type: FileEditType.CellReplace, uri, index: start, count: end - start, cells: cellData, metadata });
        }
    }
    replaceNotebookCellMetadata(uri, index, cellMetadata, metadata) {
        this._edits.push({ _type: FileEditType.Cell, metadata, uri, edit: { editType: _contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_13__.CellEditType.Metadata, index, metadata: cellMetadata } });
    }
    replace(uri, range, newText, metadata) {
        this._edits.push({ _type: FileEditType.Text, uri, edit: ( new TextEdit(range, newText)), metadata });
    }
    insert(resource, position, newText, metadata) {
        this.replace(resource, ( new Range(position, position)), newText, metadata);
    }
    delete(resource, range, metadata) {
        this.replace(resource, range, '', metadata);
    }
    has(uri) {
        return ( this._edits.some(edit => edit._type === FileEditType.Text && ( edit.uri.toString()) === ( uri.toString())));
    }
    set(uri, edits) {
        if (!edits) {
            for (let i = 0; i < this._edits.length; i++) {
                const element = this._edits[i];
                switch (element._type) {
                    case FileEditType.Text:
                    case FileEditType.Snippet:
                    case FileEditType.Cell:
                    case FileEditType.CellReplace:
                        if (( element.uri.toString()) === ( uri.toString())) {
                            this._edits[i] = undefined;
                        }
                        break;
                }
            }
            (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.coalesceInPlace)(this._edits);
        }
        else {
            for (const editOrTuple of edits) {
                if (!editOrTuple) {
                    continue;
                }
                let edit;
                let metadata;
                if (Array.isArray(editOrTuple)) {
                    edit = editOrTuple[0];
                    metadata = editOrTuple[1];
                }
                else {
                    edit = editOrTuple;
                }
                if (NotebookEdit.isNotebookCellEdit(edit)) {
                    if (edit.newCellMetadata) {
                        this.replaceNotebookCellMetadata(uri, edit.range.start, edit.newCellMetadata, metadata);
                    }
                    else if (edit.newNotebookMetadata) {
                        this.replaceNotebookMetadata(uri, edit.newNotebookMetadata, metadata);
                    }
                    else {
                        this.replaceNotebookCells(uri, edit.range, edit.newCells, metadata);
                    }
                }
                else if (SnippetTextEdit.isSnippetTextEdit(edit)) {
                    this._edits.push({ _type: FileEditType.Snippet, uri, range: edit.range, edit: edit.snippet, metadata });
                }
                else {
                    this._edits.push({ _type: FileEditType.Text, uri, edit, metadata });
                }
            }
        }
    }
    get(uri) {
        const res = [];
        for (const candidate of this._edits) {
            if (candidate._type === FileEditType.Text && ( candidate.uri.toString()) === ( uri.toString())) {
                res.push(candidate.edit);
            }
        }
        return res;
    }
    entries() {
        const textEdits = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_4__.ResourceMap());
        for (const candidate of this._edits) {
            if (candidate._type === FileEditType.Text) {
                let textEdit = textEdits.get(candidate.uri);
                if (!textEdit) {
                    textEdit = [candidate.uri, []];
                    textEdits.set(candidate.uri, textEdit);
                }
                textEdit[1].push(candidate.edit);
            }
        }
        return [...( textEdits.values())];
    }
    get size() {
        return this.entries().length;
    }
    toJSON() {
        return this.entries();
    }
};
WorkspaceEdit = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], WorkspaceEdit));
let SnippetString = SnippetString_1 = class SnippetString {
    static isSnippetString(thing) {
        if (thing instanceof SnippetString_1) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return typeof thing.value === 'string';
    }
    static _escape(value) {
        return value.replace(/\$|}|\\/g, '\\$&');
    }
    constructor(value) {
        this._tabstop = 1;
        this.value = value || '';
    }
    appendText(string) {
        this.value += SnippetString_1._escape(string);
        return this;
    }
    appendTabstop(number = this._tabstop++) {
        this.value += '$';
        this.value += number;
        return this;
    }
    appendPlaceholder(value, number = this._tabstop++) {
        if (typeof value === 'function') {
            const nested = ( new SnippetString_1());
            nested._tabstop = this._tabstop;
            value(nested);
            this._tabstop = nested._tabstop;
            value = nested.value;
        }
        else {
            value = SnippetString_1._escape(value);
        }
        this.value += '${';
        this.value += number;
        this.value += ':';
        this.value += value;
        this.value += '}';
        return this;
    }
    appendChoice(values, number = this._tabstop++) {
        const value = ( values.map(s => s.replaceAll(/[|\\,]/g, '\\$&'))).join(',');
        this.value += '${';
        this.value += number;
        this.value += '|';
        this.value += value;
        this.value += '|}';
        return this;
    }
    appendVariable(name, defaultValue) {
        if (typeof defaultValue === 'function') {
            const nested = ( new SnippetString_1());
            nested._tabstop = this._tabstop;
            defaultValue(nested);
            this._tabstop = nested._tabstop;
            defaultValue = nested.value;
        }
        else if (typeof defaultValue === 'string') {
            defaultValue = defaultValue.replace(/\$|}/g, '\\$&');
        }
        this.value += '${';
        this.value += name;
        if (defaultValue) {
            this.value += ':';
            this.value += defaultValue;
        }
        this.value += '}';
        return this;
    }
};
SnippetString = SnippetString_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], SnippetString));
var DiagnosticTag;
( (function(DiagnosticTag) {
    DiagnosticTag[DiagnosticTag["Unnecessary"] = 1] = "Unnecessary";
    DiagnosticTag[DiagnosticTag["Deprecated"] = 2] = "Deprecated";
})(DiagnosticTag || (DiagnosticTag = {})));
var DiagnosticSeverity;
( (function(DiagnosticSeverity) {
    DiagnosticSeverity[DiagnosticSeverity["Hint"] = 3] = "Hint";
    DiagnosticSeverity[DiagnosticSeverity["Information"] = 2] = "Information";
    DiagnosticSeverity[DiagnosticSeverity["Warning"] = 1] = "Warning";
    DiagnosticSeverity[DiagnosticSeverity["Error"] = 0] = "Error";
})(DiagnosticSeverity || (DiagnosticSeverity = {})));
let Location = Location_1 = class Location {
    static isLocation(thing) {
        if (thing instanceof Location_1) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return Range.isRange(thing.range)
            && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(thing.uri);
    }
    constructor(uri, rangeOrPosition) {
        this.uri = uri;
        if (!rangeOrPosition) ;
        else if (Range.isRange(rangeOrPosition)) {
            this.range = Range.of(rangeOrPosition);
        }
        else if (Position.isPosition(rangeOrPosition)) {
            this.range = ( new Range(rangeOrPosition, rangeOrPosition));
        }
        else {
            throw ( new Error('Illegal argument'));
        }
    }
    toJSON() {
        return {
            uri: this.uri,
            range: this.range
        };
    }
};
Location = Location_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Location));
let DiagnosticRelatedInformation = class DiagnosticRelatedInformation {
    static is(thing) {
        if (!thing) {
            return false;
        }
        return typeof thing.message === 'string'
            && thing.location
            && Range.isRange(thing.location.range)
            && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(thing.location.uri);
    }
    constructor(location, message) {
        this.location = location;
        this.message = message;
    }
    static isEqual(a, b) {
        if (a === b) {
            return true;
        }
        if (!a || !b) {
            return false;
        }
        return a.message === b.message
            && a.location.range.isEqual(b.location.range)
            && ( a.location.uri.toString()) === ( b.location.uri.toString());
    }
};
DiagnosticRelatedInformation = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DiagnosticRelatedInformation));
let Diagnostic = class Diagnostic {
    constructor(range, message, severity = DiagnosticSeverity.Error) {
        if (!Range.isRange(range)) {
            throw ( new TypeError('range must be set'));
        }
        if (!message) {
            throw ( new TypeError('message must be set'));
        }
        this.range = range;
        this.message = message;
        this.severity = severity;
    }
    toJSON() {
        return {
            severity: DiagnosticSeverity[this.severity],
            message: this.message,
            range: this.range,
            source: this.source,
            code: this.code,
        };
    }
    static isEqual(a, b) {
        if (a === b) {
            return true;
        }
        if (!a || !b) {
            return false;
        }
        return a.message === b.message
            && a.severity === b.severity
            && a.code === b.code
            && a.severity === b.severity
            && a.source === b.source
            && a.range.isEqual(b.range)
            && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.equals)(a.tags, b.tags)
            && (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.equals)(a.relatedInformation, b.relatedInformation, DiagnosticRelatedInformation.isEqual);
    }
};
Diagnostic = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Diagnostic));
let Hover = class Hover {
    constructor(contents, range) {
        if (!contents) {
            throw ( new Error('Illegal argument, contents must be defined'));
        }
        if (Array.isArray(contents)) {
            this.contents = contents;
        }
        else {
            this.contents = [contents];
        }
        this.range = range;
    }
};
Hover = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Hover));
let VerboseHover = class VerboseHover extends Hover {
    constructor(contents, range, canIncreaseHover, canDecreaseHover) {
        super(contents, range);
        this.canIncreaseHover = canIncreaseHover;
        this.canDecreaseHover = canDecreaseHover;
    }
};
VerboseHover = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], VerboseHover));
var HoverVerbosityAction;
( (function(HoverVerbosityAction) {
    HoverVerbosityAction[HoverVerbosityAction["Increase"] = 0] = "Increase";
    HoverVerbosityAction[HoverVerbosityAction["Decrease"] = 1] = "Decrease";
})(HoverVerbosityAction || (HoverVerbosityAction = {})));
var DocumentHighlightKind;
( (function(DocumentHighlightKind) {
    DocumentHighlightKind[DocumentHighlightKind["Text"] = 0] = "Text";
    DocumentHighlightKind[DocumentHighlightKind["Read"] = 1] = "Read";
    DocumentHighlightKind[DocumentHighlightKind["Write"] = 2] = "Write";
})(DocumentHighlightKind || (DocumentHighlightKind = {})));
let DocumentHighlight = class DocumentHighlight {
    constructor(range, kind = DocumentHighlightKind.Text) {
        this.range = range;
        this.kind = kind;
    }
    toJSON() {
        return {
            range: this.range,
            kind: DocumentHighlightKind[this.kind]
        };
    }
};
DocumentHighlight = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DocumentHighlight));
let MultiDocumentHighlight = class MultiDocumentHighlight {
    constructor(uri, highlights) {
        this.uri = uri;
        this.highlights = highlights;
    }
    toJSON() {
        return {
            uri: this.uri,
            highlights: ( this.highlights.map(h => h.toJSON()))
        };
    }
};
MultiDocumentHighlight = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], MultiDocumentHighlight));
var SymbolKind;
( (function(SymbolKind) {
    SymbolKind[SymbolKind["File"] = 0] = "File";
    SymbolKind[SymbolKind["Module"] = 1] = "Module";
    SymbolKind[SymbolKind["Namespace"] = 2] = "Namespace";
    SymbolKind[SymbolKind["Package"] = 3] = "Package";
    SymbolKind[SymbolKind["Class"] = 4] = "Class";
    SymbolKind[SymbolKind["Method"] = 5] = "Method";
    SymbolKind[SymbolKind["Property"] = 6] = "Property";
    SymbolKind[SymbolKind["Field"] = 7] = "Field";
    SymbolKind[SymbolKind["Constructor"] = 8] = "Constructor";
    SymbolKind[SymbolKind["Enum"] = 9] = "Enum";
    SymbolKind[SymbolKind["Interface"] = 10] = "Interface";
    SymbolKind[SymbolKind["Function"] = 11] = "Function";
    SymbolKind[SymbolKind["Variable"] = 12] = "Variable";
    SymbolKind[SymbolKind["Constant"] = 13] = "Constant";
    SymbolKind[SymbolKind["String"] = 14] = "String";
    SymbolKind[SymbolKind["Number"] = 15] = "Number";
    SymbolKind[SymbolKind["Boolean"] = 16] = "Boolean";
    SymbolKind[SymbolKind["Array"] = 17] = "Array";
    SymbolKind[SymbolKind["Object"] = 18] = "Object";
    SymbolKind[SymbolKind["Key"] = 19] = "Key";
    SymbolKind[SymbolKind["Null"] = 20] = "Null";
    SymbolKind[SymbolKind["EnumMember"] = 21] = "EnumMember";
    SymbolKind[SymbolKind["Struct"] = 22] = "Struct";
    SymbolKind[SymbolKind["Event"] = 23] = "Event";
    SymbolKind[SymbolKind["Operator"] = 24] = "Operator";
    SymbolKind[SymbolKind["TypeParameter"] = 25] = "TypeParameter";
})(SymbolKind || (SymbolKind = {})));
var SymbolTag;
( (function(SymbolTag) {
    SymbolTag[SymbolTag["Deprecated"] = 1] = "Deprecated";
})(SymbolTag || (SymbolTag = {})));
let SymbolInformation = SymbolInformation_1 = class SymbolInformation {
    static validate(candidate) {
        if (!candidate.name) {
            throw ( new Error('name must not be falsy'));
        }
    }
    constructor(name, kind, rangeOrContainer, locationOrUri, containerName) {
        this.name = name;
        this.kind = kind;
        this.containerName = containerName;
        if (typeof rangeOrContainer === 'string') {
            this.containerName = rangeOrContainer;
        }
        if (locationOrUri instanceof Location) {
            this.location = locationOrUri;
        }
        else if (rangeOrContainer instanceof Range) {
            this.location = ( new Location(locationOrUri, rangeOrContainer));
        }
        SymbolInformation_1.validate(this);
    }
    toJSON() {
        return {
            name: this.name,
            kind: SymbolKind[this.kind],
            location: this.location,
            containerName: this.containerName
        };
    }
};
SymbolInformation = SymbolInformation_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], SymbolInformation));
let DocumentSymbol = DocumentSymbol_1 = class DocumentSymbol {
    static validate(candidate) {
        if (!candidate.name) {
            throw ( new Error('name must not be falsy'));
        }
        if (!candidate.range.contains(candidate.selectionRange)) {
            throw ( new Error('selectionRange must be contained in fullRange'));
        }
        candidate.children?.forEach(DocumentSymbol_1.validate);
    }
    constructor(name, detail, kind, range, selectionRange) {
        this.name = name;
        this.detail = detail;
        this.kind = kind;
        this.range = range;
        this.selectionRange = selectionRange;
        this.children = [];
        DocumentSymbol_1.validate(this);
    }
};
DocumentSymbol = DocumentSymbol_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DocumentSymbol));
var CodeActionTriggerKind;
( (function(CodeActionTriggerKind) {
    CodeActionTriggerKind[CodeActionTriggerKind["Invoke"] = 1] = "Invoke";
    CodeActionTriggerKind[CodeActionTriggerKind["Automatic"] = 2] = "Automatic";
})(CodeActionTriggerKind || (CodeActionTriggerKind = {})));
let CodeAction = class CodeAction {
    constructor(title, kind) {
        this.title = title;
        this.kind = kind;
    }
};
CodeAction = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], CodeAction));
let CodeActionKind = class CodeActionKind {
    static { CodeActionKind_1 = this; }
    static { this.sep = '.'; }
    constructor(value) {
        this.value = value;
    }
    append(parts) {
        return ( new CodeActionKind_1(this.value ? this.value + CodeActionKind_1.sep + parts : parts));
    }
    intersects(other) {
        return this.contains(other) || other.contains(this);
    }
    contains(other) {
        return this.value === other.value || other.value.startsWith(this.value + CodeActionKind_1.sep);
    }
};
CodeActionKind = CodeActionKind_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], CodeActionKind));
CodeActionKind.Empty = ( new CodeActionKind(''));
CodeActionKind.QuickFix = CodeActionKind.Empty.append('quickfix');
CodeActionKind.Refactor = CodeActionKind.Empty.append('refactor');
CodeActionKind.RefactorExtract = CodeActionKind.Refactor.append('extract');
CodeActionKind.RefactorInline = CodeActionKind.Refactor.append('inline');
CodeActionKind.RefactorMove = CodeActionKind.Refactor.append('move');
CodeActionKind.RefactorRewrite = CodeActionKind.Refactor.append('rewrite');
CodeActionKind.Source = CodeActionKind.Empty.append('source');
CodeActionKind.SourceOrganizeImports = CodeActionKind.Source.append('organizeImports');
CodeActionKind.SourceFixAll = CodeActionKind.Source.append('fixAll');
CodeActionKind.Notebook = CodeActionKind.Empty.append('notebook');
let SelectionRange = class SelectionRange {
    constructor(range, parent) {
        this.range = range;
        this.parent = parent;
        if (parent && !parent.range.contains(this.range)) {
            throw ( new Error('Invalid argument: parent must contain this range'));
        }
    }
};
SelectionRange = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], SelectionRange));
class CallHierarchyItem {
    constructor(kind, name, detail, uri, range, selectionRange) {
        this.kind = kind;
        this.name = name;
        this.detail = detail;
        this.uri = uri;
        this.range = range;
        this.selectionRange = selectionRange;
    }
}
class CallHierarchyIncomingCall {
    constructor(item, fromRanges) {
        this.fromRanges = fromRanges;
        this.from = item;
    }
}
class CallHierarchyOutgoingCall {
    constructor(item, fromRanges) {
        this.fromRanges = fromRanges;
        this.to = item;
    }
}
var LanguageStatusSeverity;
( (function(LanguageStatusSeverity) {
    LanguageStatusSeverity[LanguageStatusSeverity["Information"] = 0] = "Information";
    LanguageStatusSeverity[LanguageStatusSeverity["Warning"] = 1] = "Warning";
    LanguageStatusSeverity[LanguageStatusSeverity["Error"] = 2] = "Error";
})(LanguageStatusSeverity || (LanguageStatusSeverity = {})));
let CodeLens = class CodeLens {
    constructor(range, command) {
        this.range = range;
        this.command = command;
    }
    get isResolved() {
        return !!this.command;
    }
};
CodeLens = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], CodeLens));
let MarkdownString = MarkdownString_1 = class MarkdownString {
    #delegate;
    static isMarkdownString(thing) {
        if (thing instanceof MarkdownString_1) {
            return true;
        }
        return thing && thing.appendCodeblock && thing.appendMarkdown && thing.appendText && (thing.value !== undefined);
    }
    constructor(value, supportThemeIcons = false) {
        this.#delegate = ( new _base_common_htmlContent_js__WEBPACK_IMPORTED_MODULE_3__.MarkdownString(value, { supportThemeIcons }));
    }
    get value() {
        return this.#delegate.value;
    }
    set value(value) {
        this.#delegate.value = value;
    }
    get isTrusted() {
        return this.#delegate.isTrusted;
    }
    set isTrusted(value) {
        this.#delegate.isTrusted = value;
    }
    get supportThemeIcons() {
        return this.#delegate.supportThemeIcons;
    }
    set supportThemeIcons(value) {
        this.#delegate.supportThemeIcons = value;
    }
    get supportHtml() {
        return this.#delegate.supportHtml;
    }
    set supportHtml(value) {
        this.#delegate.supportHtml = value;
    }
    get baseUri() {
        return this.#delegate.baseUri;
    }
    set baseUri(value) {
        this.#delegate.baseUri = value;
    }
    appendText(value) {
        this.#delegate.appendText(value);
        return this;
    }
    appendMarkdown(value) {
        this.#delegate.appendMarkdown(value);
        return this;
    }
    appendCodeblock(value, language) {
        this.#delegate.appendCodeblock(language ?? '', value);
        return this;
    }
};
MarkdownString = MarkdownString_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], MarkdownString));
let ParameterInformation = class ParameterInformation {
    constructor(label, documentation) {
        this.label = label;
        this.documentation = documentation;
    }
};
ParameterInformation = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ParameterInformation));
let SignatureInformation = class SignatureInformation {
    constructor(label, documentation) {
        this.label = label;
        this.documentation = documentation;
        this.parameters = [];
    }
};
SignatureInformation = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], SignatureInformation));
let SignatureHelp = class SignatureHelp {
    constructor() {
        this.activeSignature = 0;
        this.activeParameter = 0;
        this.signatures = [];
    }
};
SignatureHelp = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], SignatureHelp));
var SignatureHelpTriggerKind;
( (function(SignatureHelpTriggerKind) {
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["Invoke"] = 1] = "Invoke";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["TriggerCharacter"] = 2] = "TriggerCharacter";
    SignatureHelpTriggerKind[SignatureHelpTriggerKind["ContentChange"] = 3] = "ContentChange";
})(SignatureHelpTriggerKind || (SignatureHelpTriggerKind = {})));
var InlayHintKind;
( (function(InlayHintKind) {
    InlayHintKind[InlayHintKind["Type"] = 1] = "Type";
    InlayHintKind[InlayHintKind["Parameter"] = 2] = "Parameter";
})(InlayHintKind || (InlayHintKind = {})));
let InlayHintLabelPart = class InlayHintLabelPart {
    constructor(value) {
        this.value = value;
    }
};
InlayHintLabelPart = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlayHintLabelPart));
let InlayHint = class InlayHint {
    constructor(position, label, kind) {
        this.position = position;
        this.label = label;
        this.kind = kind;
    }
};
InlayHint = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlayHint));
var CompletionTriggerKind;
( (function(CompletionTriggerKind) {
    CompletionTriggerKind[CompletionTriggerKind["Invoke"] = 0] = "Invoke";
    CompletionTriggerKind[CompletionTriggerKind["TriggerCharacter"] = 1] = "TriggerCharacter";
    CompletionTriggerKind[CompletionTriggerKind["TriggerForIncompleteCompletions"] = 2] = "TriggerForIncompleteCompletions";
})(CompletionTriggerKind || (CompletionTriggerKind = {})));
var CompletionItemKind;
( (function(CompletionItemKind) {
    CompletionItemKind[CompletionItemKind["Text"] = 0] = "Text";
    CompletionItemKind[CompletionItemKind["Method"] = 1] = "Method";
    CompletionItemKind[CompletionItemKind["Function"] = 2] = "Function";
    CompletionItemKind[CompletionItemKind["Constructor"] = 3] = "Constructor";
    CompletionItemKind[CompletionItemKind["Field"] = 4] = "Field";
    CompletionItemKind[CompletionItemKind["Variable"] = 5] = "Variable";
    CompletionItemKind[CompletionItemKind["Class"] = 6] = "Class";
    CompletionItemKind[CompletionItemKind["Interface"] = 7] = "Interface";
    CompletionItemKind[CompletionItemKind["Module"] = 8] = "Module";
    CompletionItemKind[CompletionItemKind["Property"] = 9] = "Property";
    CompletionItemKind[CompletionItemKind["Unit"] = 10] = "Unit";
    CompletionItemKind[CompletionItemKind["Value"] = 11] = "Value";
    CompletionItemKind[CompletionItemKind["Enum"] = 12] = "Enum";
    CompletionItemKind[CompletionItemKind["Keyword"] = 13] = "Keyword";
    CompletionItemKind[CompletionItemKind["Snippet"] = 14] = "Snippet";
    CompletionItemKind[CompletionItemKind["Color"] = 15] = "Color";
    CompletionItemKind[CompletionItemKind["File"] = 16] = "File";
    CompletionItemKind[CompletionItemKind["Reference"] = 17] = "Reference";
    CompletionItemKind[CompletionItemKind["Folder"] = 18] = "Folder";
    CompletionItemKind[CompletionItemKind["EnumMember"] = 19] = "EnumMember";
    CompletionItemKind[CompletionItemKind["Constant"] = 20] = "Constant";
    CompletionItemKind[CompletionItemKind["Struct"] = 21] = "Struct";
    CompletionItemKind[CompletionItemKind["Event"] = 22] = "Event";
    CompletionItemKind[CompletionItemKind["Operator"] = 23] = "Operator";
    CompletionItemKind[CompletionItemKind["TypeParameter"] = 24] = "TypeParameter";
    CompletionItemKind[CompletionItemKind["User"] = 25] = "User";
    CompletionItemKind[CompletionItemKind["Issue"] = 26] = "Issue";
})(CompletionItemKind || (CompletionItemKind = {})));
var CompletionItemTag;
( (function(CompletionItemTag) {
    CompletionItemTag[CompletionItemTag["Deprecated"] = 1] = "Deprecated";
})(CompletionItemTag || (CompletionItemTag = {})));
let CompletionItem = class CompletionItem {
    constructor(label, kind) {
        this.label = label;
        this.kind = kind;
    }
    toJSON() {
        return {
            label: this.label,
            kind: this.kind && CompletionItemKind[this.kind],
            detail: this.detail,
            documentation: this.documentation,
            sortText: this.sortText,
            filterText: this.filterText,
            preselect: this.preselect,
            insertText: this.insertText,
            textEdit: this.textEdit
        };
    }
};
CompletionItem = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], CompletionItem));
let CompletionList = class CompletionList {
    constructor(items = [], isIncomplete = false) {
        this.items = items;
        this.isIncomplete = isIncomplete;
    }
};
CompletionList = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], CompletionList));
let InlineSuggestion = class InlineSuggestion {
    constructor(insertText, range, command) {
        this.insertText = insertText;
        this.range = range;
        this.command = command;
    }
};
InlineSuggestion = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlineSuggestion));
let InlineSuggestionList = class InlineSuggestionList {
    constructor(items) {
        this.commands = undefined;
        this.suppressSuggestions = undefined;
        this.items = items;
    }
};
InlineSuggestionList = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlineSuggestionList));
var PartialAcceptTriggerKind;
( (function(PartialAcceptTriggerKind) {
    PartialAcceptTriggerKind[PartialAcceptTriggerKind["Unknown"] = 0] = "Unknown";
    PartialAcceptTriggerKind[PartialAcceptTriggerKind["Word"] = 1] = "Word";
    PartialAcceptTriggerKind[PartialAcceptTriggerKind["Line"] = 2] = "Line";
    PartialAcceptTriggerKind[PartialAcceptTriggerKind["Suggest"] = 3] = "Suggest";
})(PartialAcceptTriggerKind || (PartialAcceptTriggerKind = {})));
var ViewColumn;
( (function(ViewColumn) {
    ViewColumn[ViewColumn["Active"] = -1] = "Active";
    ViewColumn[ViewColumn["Beside"] = -2] = "Beside";
    ViewColumn[ViewColumn["One"] = 1] = "One";
    ViewColumn[ViewColumn["Two"] = 2] = "Two";
    ViewColumn[ViewColumn["Three"] = 3] = "Three";
    ViewColumn[ViewColumn["Four"] = 4] = "Four";
    ViewColumn[ViewColumn["Five"] = 5] = "Five";
    ViewColumn[ViewColumn["Six"] = 6] = "Six";
    ViewColumn[ViewColumn["Seven"] = 7] = "Seven";
    ViewColumn[ViewColumn["Eight"] = 8] = "Eight";
    ViewColumn[ViewColumn["Nine"] = 9] = "Nine";
})(ViewColumn || (ViewColumn = {})));
var StatusBarAlignment;
( (function(StatusBarAlignment) {
    StatusBarAlignment[StatusBarAlignment["Left"] = 1] = "Left";
    StatusBarAlignment[StatusBarAlignment["Right"] = 2] = "Right";
})(StatusBarAlignment || (StatusBarAlignment = {})));
function asStatusBarItemIdentifier(extension, id) {
    return `${_platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_10__.ExtensionIdentifier.toKey(extension)}.${id}`;
}
var TextEditorLineNumbersStyle;
( (function(TextEditorLineNumbersStyle) {
    TextEditorLineNumbersStyle[TextEditorLineNumbersStyle["Off"] = 0] = "Off";
    TextEditorLineNumbersStyle[TextEditorLineNumbersStyle["On"] = 1] = "On";
    TextEditorLineNumbersStyle[TextEditorLineNumbersStyle["Relative"] = 2] = "Relative";
    TextEditorLineNumbersStyle[TextEditorLineNumbersStyle["Interval"] = 3] = "Interval";
})(TextEditorLineNumbersStyle || (TextEditorLineNumbersStyle = {})));
var TextDocumentSaveReason;
( (function(TextDocumentSaveReason) {
    TextDocumentSaveReason[TextDocumentSaveReason["Manual"] = 1] = "Manual";
    TextDocumentSaveReason[TextDocumentSaveReason["AfterDelay"] = 2] = "AfterDelay";
    TextDocumentSaveReason[TextDocumentSaveReason["FocusOut"] = 3] = "FocusOut";
})(TextDocumentSaveReason || (TextDocumentSaveReason = {})));
var TextEditorRevealType;
( (function(TextEditorRevealType) {
    TextEditorRevealType[TextEditorRevealType["Default"] = 0] = "Default";
    TextEditorRevealType[TextEditorRevealType["InCenter"] = 1] = "InCenter";
    TextEditorRevealType[TextEditorRevealType["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
    TextEditorRevealType[TextEditorRevealType["AtTop"] = 3] = "AtTop";
})(TextEditorRevealType || (TextEditorRevealType = {})));
var TextEditorSelectionChangeKind;
( (function(TextEditorSelectionChangeKind) {
    TextEditorSelectionChangeKind[TextEditorSelectionChangeKind["Keyboard"] = 1] = "Keyboard";
    TextEditorSelectionChangeKind[TextEditorSelectionChangeKind["Mouse"] = 2] = "Mouse";
    TextEditorSelectionChangeKind[TextEditorSelectionChangeKind["Command"] = 3] = "Command";
})(TextEditorSelectionChangeKind || (TextEditorSelectionChangeKind = {})));
var TextDocumentChangeReason;
( (function(TextDocumentChangeReason) {
    TextDocumentChangeReason[TextDocumentChangeReason["Undo"] = 1] = "Undo";
    TextDocumentChangeReason[TextDocumentChangeReason["Redo"] = 2] = "Redo";
})(TextDocumentChangeReason || (TextDocumentChangeReason = {})));
var DecorationRangeBehavior;
( (function(DecorationRangeBehavior) {
    DecorationRangeBehavior[DecorationRangeBehavior["OpenOpen"] = 0] = "OpenOpen";
    DecorationRangeBehavior[DecorationRangeBehavior["ClosedClosed"] = 1] = "ClosedClosed";
    DecorationRangeBehavior[DecorationRangeBehavior["OpenClosed"] = 2] = "OpenClosed";
    DecorationRangeBehavior[DecorationRangeBehavior["ClosedOpen"] = 3] = "ClosedOpen";
})(DecorationRangeBehavior || (DecorationRangeBehavior = {})));
( (function(TextEditorSelectionChangeKind) {
    function fromValue(s) {
        switch (s) {
            case 'keyboard': return TextEditorSelectionChangeKind.Keyboard;
            case 'mouse': return TextEditorSelectionChangeKind.Mouse;
            case 'api': return TextEditorSelectionChangeKind.Command;
        }
        return undefined;
    }
    TextEditorSelectionChangeKind.fromValue = fromValue;
})(TextEditorSelectionChangeKind || (TextEditorSelectionChangeKind = {})));
var SyntaxTokenType;
( (function(SyntaxTokenType) {
    SyntaxTokenType[SyntaxTokenType["Other"] = 0] = "Other";
    SyntaxTokenType[SyntaxTokenType["Comment"] = 1] = "Comment";
    SyntaxTokenType[SyntaxTokenType["String"] = 2] = "String";
    SyntaxTokenType[SyntaxTokenType["RegEx"] = 3] = "RegEx";
})(SyntaxTokenType || (SyntaxTokenType = {})));
( (function(SyntaxTokenType) {
    function toString(v) {
        switch (v) {
            case SyntaxTokenType.Other: return 'other';
            case SyntaxTokenType.Comment: return 'comment';
            case SyntaxTokenType.String: return 'string';
            case SyntaxTokenType.RegEx: return 'regex';
        }
        return 'other';
    }
    SyntaxTokenType.toString = toString;
})(SyntaxTokenType || (SyntaxTokenType = {})));
let DocumentLink = class DocumentLink {
    constructor(range, target) {
        if (target && !(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(target))) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('target');
        }
        if (!Range.isRange(range) || range.isEmpty) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('range');
        }
        this.range = range;
        this.target = target;
    }
};
DocumentLink = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DocumentLink));
let Color = class Color {
    constructor(red, green, blue, alpha) {
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.alpha = alpha;
    }
};
Color = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Color));
let ColorInformation = class ColorInformation {
    constructor(range, color) {
        if (color && !(color instanceof Color)) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('color');
        }
        if (!Range.isRange(range) || range.isEmpty) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('range');
        }
        this.range = range;
        this.color = color;
    }
};
ColorInformation = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ColorInformation));
let ColorPresentation = class ColorPresentation {
    constructor(label) {
        if (!label || typeof label !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('label');
        }
        this.label = label;
    }
};
ColorPresentation = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ColorPresentation));
var SourceControlInputBoxValidationType;
( (function(SourceControlInputBoxValidationType) {
    SourceControlInputBoxValidationType[SourceControlInputBoxValidationType["Error"] = 0] = "Error";
    SourceControlInputBoxValidationType[SourceControlInputBoxValidationType["Warning"] = 1] = "Warning";
    SourceControlInputBoxValidationType[SourceControlInputBoxValidationType["Information"] = 2] = "Information";
})(
    SourceControlInputBoxValidationType || (SourceControlInputBoxValidationType = {})
));
var TerminalExitReason;
( (function(TerminalExitReason) {
    TerminalExitReason[TerminalExitReason["Unknown"] = 0] = "Unknown";
    TerminalExitReason[TerminalExitReason["Shutdown"] = 1] = "Shutdown";
    TerminalExitReason[TerminalExitReason["Process"] = 2] = "Process";
    TerminalExitReason[TerminalExitReason["User"] = 3] = "User";
    TerminalExitReason[TerminalExitReason["Extension"] = 4] = "Extension";
})(TerminalExitReason || (TerminalExitReason = {})));
var TerminalShellExecutionCommandLineConfidence;
( (function(TerminalShellExecutionCommandLineConfidence) {
    TerminalShellExecutionCommandLineConfidence[TerminalShellExecutionCommandLineConfidence["Low"] = 0] = "Low";
    TerminalShellExecutionCommandLineConfidence[TerminalShellExecutionCommandLineConfidence["Medium"] = 1] = "Medium";
    TerminalShellExecutionCommandLineConfidence[TerminalShellExecutionCommandLineConfidence["High"] = 2] = "High";
})(
    TerminalShellExecutionCommandLineConfidence || (TerminalShellExecutionCommandLineConfidence = {})
));
class TerminalLink {
    constructor(startIndex, length, tooltip) {
        this.startIndex = startIndex;
        this.length = length;
        this.tooltip = tooltip;
        if (typeof startIndex !== 'number' || startIndex < 0) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('startIndex');
        }
        if (typeof length !== 'number' || length < 1) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('length');
        }
        if (tooltip !== undefined && typeof tooltip !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('tooltip');
        }
    }
}
class TerminalQuickFixOpener {
    constructor(uri) {
        this.uri = uri;
    }
}
class TerminalQuickFixCommand {
    constructor(terminalCommand) {
        this.terminalCommand = terminalCommand;
    }
}
var TerminalLocation;
( (function(TerminalLocation) {
    TerminalLocation[TerminalLocation["Panel"] = 1] = "Panel";
    TerminalLocation[TerminalLocation["Editor"] = 2] = "Editor";
})(TerminalLocation || (TerminalLocation = {})));
class TerminalProfile {
    constructor(options) {
        this.options = options;
        if (typeof options !== 'object') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('options');
        }
    }
}
var TaskRevealKind;
( (function(TaskRevealKind) {
    TaskRevealKind[TaskRevealKind["Always"] = 1] = "Always";
    TaskRevealKind[TaskRevealKind["Silent"] = 2] = "Silent";
    TaskRevealKind[TaskRevealKind["Never"] = 3] = "Never";
})(TaskRevealKind || (TaskRevealKind = {})));
var TaskPanelKind;
( (function(TaskPanelKind) {
    TaskPanelKind[TaskPanelKind["Shared"] = 1] = "Shared";
    TaskPanelKind[TaskPanelKind["Dedicated"] = 2] = "Dedicated";
    TaskPanelKind[TaskPanelKind["New"] = 3] = "New";
})(TaskPanelKind || (TaskPanelKind = {})));
let TaskGroup = class TaskGroup {
    static { TaskGroup_1 = this; }
    static { this.Clean = ( new TaskGroup_1('clean', 'Clean')); }
    static { this.Build = ( new TaskGroup_1('build', 'Build')); }
    static { this.Rebuild = ( new TaskGroup_1('rebuild', 'Rebuild')); }
    static { this.Test = ( new TaskGroup_1('test', 'Test')); }
    static from(value) {
        switch (value) {
            case 'clean':
                return TaskGroup_1.Clean;
            case 'build':
                return TaskGroup_1.Build;
            case 'rebuild':
                return TaskGroup_1.Rebuild;
            case 'test':
                return TaskGroup_1.Test;
            default:
                return undefined;
        }
    }
    constructor(id, label) {
        this.label = label;
        if (typeof id !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('name');
        }
        if (typeof label !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('name');
        }
        this._id = id;
    }
    get id() {
        return this._id;
    }
};
TaskGroup = TaskGroup_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], TaskGroup));
function computeTaskExecutionId(values) {
    let id = '';
    for (let i = 0; i < values.length; i++) {
        id += values[i].replace(/,/g, ',,') + ',';
    }
    return id;
}
let ProcessExecution = class ProcessExecution {
    constructor(process, varg1, varg2) {
        if (typeof process !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('process');
        }
        this._args = [];
        this._process = process;
        if (varg1 !== undefined) {
            if (Array.isArray(varg1)) {
                this._args = varg1;
                this._options = varg2;
            }
            else {
                this._options = varg1;
            }
        }
    }
    get process() {
        return this._process;
    }
    set process(value) {
        if (typeof value !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('process');
        }
        this._process = value;
    }
    get args() {
        return this._args;
    }
    set args(value) {
        if (!Array.isArray(value)) {
            value = [];
        }
        this._args = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    computeId() {
        const props = [];
        props.push('process');
        if (this._process !== undefined) {
            props.push(this._process);
        }
        if (this._args && this._args.length > 0) {
            for (const arg of this._args) {
                props.push(arg);
            }
        }
        return computeTaskExecutionId(props);
    }
};
ProcessExecution = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ProcessExecution));
let ShellExecution = class ShellExecution {
    constructor(arg0, arg1, arg2) {
        this._args = [];
        if (Array.isArray(arg1)) {
            if (!arg0) {
                throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('command can\'t be undefined or null');
            }
            if (typeof arg0 !== 'string' && typeof arg0.value !== 'string') {
                throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('command');
            }
            this._command = arg0;
            this._args = arg1;
            this._options = arg2;
        }
        else {
            if (typeof arg0 !== 'string') {
                throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('commandLine');
            }
            this._commandLine = arg0;
            this._options = arg1;
        }
    }
    get commandLine() {
        return this._commandLine;
    }
    set commandLine(value) {
        if (typeof value !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('commandLine');
        }
        this._commandLine = value;
    }
    get command() {
        return this._command ? this._command : '';
    }
    set command(value) {
        if (typeof value !== 'string' && typeof value.value !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('command');
        }
        this._command = value;
    }
    get args() {
        return this._args;
    }
    set args(value) {
        this._args = value || [];
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    computeId() {
        const props = [];
        props.push('shell');
        if (this._commandLine !== undefined) {
            props.push(this._commandLine);
        }
        if (this._command !== undefined) {
            props.push(typeof this._command === 'string' ? this._command : this._command.value);
        }
        if (this._args && this._args.length > 0) {
            for (const arg of this._args) {
                props.push(typeof arg === 'string' ? arg : arg.value);
            }
        }
        return computeTaskExecutionId(props);
    }
};
ShellExecution = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ShellExecution));
var ShellQuoting;
( (function(ShellQuoting) {
    ShellQuoting[ShellQuoting["Escape"] = 1] = "Escape";
    ShellQuoting[ShellQuoting["Strong"] = 2] = "Strong";
    ShellQuoting[ShellQuoting["Weak"] = 3] = "Weak";
})(ShellQuoting || (ShellQuoting = {})));
var TaskScope;
( (function(TaskScope) {
    TaskScope[TaskScope["Global"] = 1] = "Global";
    TaskScope[TaskScope["Workspace"] = 2] = "Workspace";
})(TaskScope || (TaskScope = {})));
class CustomExecution {
    constructor(callback) {
        this._callback = callback;
    }
    computeId() {
        return 'customExecution' + (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_9__.generateUuid)();
    }
    set callback(value) {
        this._callback = value;
    }
    get callback() {
        return this._callback;
    }
}
let Task = class Task {
    static { Task_1 = this; }
    static { this.ExtensionCallbackType = 'customExecution'; }
    static { this.ProcessType = 'process'; }
    static { this.ShellType = 'shell'; }
    static { this.EmptyType = '$empty'; }
    constructor(definition, arg2, arg3, arg4, arg5, arg6) {
        this.__deprecated = false;
        this._definition = this.definition = definition;
        let problemMatchers;
        if (typeof arg2 === 'string') {
            this._name = this.name = arg2;
            this._source = this.source = arg3;
            this.execution = arg4;
            problemMatchers = arg5;
            this.__deprecated = true;
        }
        else if (arg2 === TaskScope.Global || arg2 === TaskScope.Workspace) {
            this.target = arg2;
            this._name = this.name = arg3;
            this._source = this.source = arg4;
            this.execution = arg5;
            problemMatchers = arg6;
        }
        else {
            this.target = arg2;
            this._name = this.name = arg3;
            this._source = this.source = arg4;
            this.execution = arg5;
            problemMatchers = arg6;
        }
        if (typeof problemMatchers === 'string') {
            this._problemMatchers = [problemMatchers];
            this._hasDefinedMatchers = true;
        }
        else if (Array.isArray(problemMatchers)) {
            this._problemMatchers = problemMatchers;
            this._hasDefinedMatchers = true;
        }
        else {
            this._problemMatchers = [];
            this._hasDefinedMatchers = false;
        }
        this._isBackground = false;
        this._presentationOptions = Object.create(null);
        this._runOptions = Object.create(null);
    }
    get _id() {
        return this.__id;
    }
    set _id(value) {
        this.__id = value;
    }
    get _deprecated() {
        return this.__deprecated;
    }
    clear() {
        if (this.__id === undefined) {
            return;
        }
        this.__id = undefined;
        this._scope = undefined;
        this.computeDefinitionBasedOnExecution();
    }
    computeDefinitionBasedOnExecution() {
        if (this._execution instanceof ProcessExecution) {
            this._definition = {
                type: Task_1.ProcessType,
                id: this._execution.computeId()
            };
        }
        else if (this._execution instanceof ShellExecution) {
            this._definition = {
                type: Task_1.ShellType,
                id: this._execution.computeId()
            };
        }
        else if (this._execution instanceof CustomExecution) {
            this._definition = {
                type: Task_1.ExtensionCallbackType,
                id: this._execution.computeId()
            };
        }
        else {
            this._definition = {
                type: Task_1.EmptyType,
                id: (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_9__.generateUuid)()
            };
        }
    }
    get definition() {
        return this._definition;
    }
    set definition(value) {
        if (value === undefined || value === null) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('Kind can\'t be undefined or null');
        }
        this.clear();
        this._definition = value;
    }
    get scope() {
        return this._scope;
    }
    set target(value) {
        this.clear();
        this._scope = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        if (typeof value !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('name');
        }
        this.clear();
        this._name = value;
    }
    get execution() {
        return this._execution;
    }
    set execution(value) {
        if (value === null) {
            value = undefined;
        }
        this.clear();
        this._execution = value;
        const type = this._definition.type;
        if (Task_1.EmptyType === type || Task_1.ProcessType === type || Task_1.ShellType === type || Task_1.ExtensionCallbackType === type) {
            this.computeDefinitionBasedOnExecution();
        }
    }
    get problemMatchers() {
        return this._problemMatchers;
    }
    set problemMatchers(value) {
        if (!Array.isArray(value)) {
            this.clear();
            this._problemMatchers = [];
            this._hasDefinedMatchers = false;
            return;
        }
        else {
            this.clear();
            this._problemMatchers = value;
            this._hasDefinedMatchers = true;
        }
    }
    get hasDefinedMatchers() {
        return this._hasDefinedMatchers;
    }
    get isBackground() {
        return this._isBackground;
    }
    set isBackground(value) {
        if (value !== true && value !== false) {
            value = false;
        }
        this.clear();
        this._isBackground = value;
    }
    get source() {
        return this._source;
    }
    set source(value) {
        if (typeof value !== 'string' || value.length === 0) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('source must be a string of length > 0');
        }
        this.clear();
        this._source = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        if (value === null) {
            value = undefined;
        }
        this.clear();
        this._group = value;
    }
    get detail() {
        return this._detail;
    }
    set detail(value) {
        if (value === null) {
            value = undefined;
        }
        this._detail = value;
    }
    get presentationOptions() {
        return this._presentationOptions;
    }
    set presentationOptions(value) {
        if (value === null || value === undefined) {
            value = Object.create(null);
        }
        this.clear();
        this._presentationOptions = value;
    }
    get runOptions() {
        return this._runOptions;
    }
    set runOptions(value) {
        if (value === null || value === undefined) {
            value = Object.create(null);
        }
        this.clear();
        this._runOptions = value;
    }
};
Task = Task_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Task));
var ProgressLocation;
( (function(ProgressLocation) {
    ProgressLocation[ProgressLocation["SourceControl"] = 1] = "SourceControl";
    ProgressLocation[ProgressLocation["Window"] = 10] = "Window";
    ProgressLocation[ProgressLocation["Notification"] = 15] = "Notification";
})(ProgressLocation || (ProgressLocation = {})));
var ViewBadge;
( (function(ViewBadge) {
    function isViewBadge(thing) {
        const viewBadgeThing = thing;
        if (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isNumber)(viewBadgeThing.value)) {
            console.log('INVALID view badge, invalid value', viewBadgeThing.value);
            return false;
        }
        if (viewBadgeThing.tooltip && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(viewBadgeThing.tooltip)) {
            console.log('INVALID view badge, invalid tooltip', viewBadgeThing.tooltip);
            return false;
        }
        return true;
    }
    ViewBadge.isViewBadge = isViewBadge;
})(ViewBadge || (ViewBadge = {})));
let TreeItem = TreeItem_1 = class TreeItem {
    static isTreeItem(thing, extension) {
        const treeItemThing = thing;
        if (treeItemThing.checkboxState !== undefined) {
            const checkbox = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isNumber)(treeItemThing.checkboxState) ? treeItemThing.checkboxState :
                (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isObject)(treeItemThing.checkboxState) && (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isNumber)(treeItemThing.checkboxState.state) ? treeItemThing.checkboxState.state : undefined;
            const tooltip = !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isNumber)(treeItemThing.checkboxState) && (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isObject)(treeItemThing.checkboxState) ? treeItemThing.checkboxState.tooltip : undefined;
            if (checkbox === undefined || (checkbox !== TreeItemCheckboxState.Checked && checkbox !== TreeItemCheckboxState.Unchecked) || (tooltip !== undefined && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(tooltip))) {
                console.log('INVALID tree item, invalid checkboxState', treeItemThing.checkboxState);
                return false;
            }
        }
        if (thing instanceof TreeItem_1) {
            return true;
        }
        if (treeItemThing.label !== undefined && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(treeItemThing.label) && !(treeItemThing.label?.label)) {
            console.log('INVALID tree item, invalid label', treeItemThing.label);
            return false;
        }
        if ((treeItemThing.id !== undefined) && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(treeItemThing.id)) {
            console.log('INVALID tree item, invalid id', treeItemThing.id);
            return false;
        }
        if ((treeItemThing.iconPath !== undefined) && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(treeItemThing.iconPath) && !_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(treeItemThing.iconPath) && (!treeItemThing.iconPath || !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(treeItemThing.iconPath.id))) {
            const asLightAndDarkThing = treeItemThing.iconPath;
            if (!asLightAndDarkThing || (!(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(asLightAndDarkThing.light) && !_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(asLightAndDarkThing.light) && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(asLightAndDarkThing.dark) && !_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(asLightAndDarkThing.dark))) {
                console.log('INVALID tree item, invalid iconPath', treeItemThing.iconPath);
                return false;
            }
        }
        if ((treeItemThing.description !== undefined) && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(treeItemThing.description) && (typeof treeItemThing.description !== 'boolean')) {
            console.log('INVALID tree item, invalid description', treeItemThing.description);
            return false;
        }
        if ((treeItemThing.resourceUri !== undefined) && !_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(treeItemThing.resourceUri)) {
            console.log('INVALID tree item, invalid resourceUri', treeItemThing.resourceUri);
            return false;
        }
        if ((treeItemThing.tooltip !== undefined) && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(treeItemThing.tooltip) && !(treeItemThing.tooltip instanceof MarkdownString)) {
            console.log('INVALID tree item, invalid tooltip', treeItemThing.tooltip);
            return false;
        }
        if ((treeItemThing.command !== undefined) && !treeItemThing.command.command) {
            console.log('INVALID tree item, invalid command', treeItemThing.command);
            return false;
        }
        if ((treeItemThing.collapsibleState !== undefined) && (treeItemThing.collapsibleState < TreeItemCollapsibleState.None) && (treeItemThing.collapsibleState > TreeItemCollapsibleState.Expanded)) {
            console.log('INVALID tree item, invalid collapsibleState', treeItemThing.collapsibleState);
            return false;
        }
        if ((treeItemThing.contextValue !== undefined) && !(0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isString)(treeItemThing.contextValue)) {
            console.log('INVALID tree item, invalid contextValue', treeItemThing.contextValue);
            return false;
        }
        if ((treeItemThing.accessibilityInformation !== undefined) && !treeItemThing.accessibilityInformation?.label) {
            console.log('INVALID tree item, invalid accessibilityInformation', treeItemThing.accessibilityInformation);
            return false;
        }
        return true;
    }
    constructor(arg1, collapsibleState = TreeItemCollapsibleState.None) {
        this.collapsibleState = collapsibleState;
        if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(arg1)) {
            this.resourceUri = arg1;
        }
        else {
            this.label = arg1;
        }
    }
};
TreeItem = TreeItem_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], TreeItem));
var TreeItemCollapsibleState;
( (function(TreeItemCollapsibleState) {
    TreeItemCollapsibleState[TreeItemCollapsibleState["None"] = 0] = "None";
    TreeItemCollapsibleState[TreeItemCollapsibleState["Collapsed"] = 1] = "Collapsed";
    TreeItemCollapsibleState[TreeItemCollapsibleState["Expanded"] = 2] = "Expanded";
})(TreeItemCollapsibleState || (TreeItemCollapsibleState = {})));
var TreeItemCheckboxState;
( (function(TreeItemCheckboxState) {
    TreeItemCheckboxState[TreeItemCheckboxState["Unchecked"] = 0] = "Unchecked";
    TreeItemCheckboxState[TreeItemCheckboxState["Checked"] = 1] = "Checked";
})(TreeItemCheckboxState || (TreeItemCheckboxState = {})));
let DataTransferItem = class DataTransferItem {
    async asString() {
        return typeof this.value === 'string' ? this.value : JSON.stringify(this.value);
    }
    asFile() {
        return undefined;
    }
    constructor(value) {
        this.value = value;
    }
};
DataTransferItem = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DataTransferItem));
class InternalDataTransferItem extends DataTransferItem {
}
class InternalFileDataTransferItem extends InternalDataTransferItem {
    #file;
    constructor(file) {
        super('');
        this.#file = file;
    }
    asFile() {
        return this.#file;
    }
}
class DataTransferFile {
    constructor(name, uri, itemId, getData) {
        this.name = name;
        this.uri = uri;
        this._itemId = itemId;
        this._getData = getData;
    }
    data() {
        return this._getData();
    }
}
let DataTransfer = class DataTransfer {
    #items = ( new Map());
    constructor(init) {
        for (const [mime, item] of init ?? []) {
            const existing = this.#items.get(this.#normalizeMime(mime));
            if (existing) {
                existing.push(item);
            }
            else {
                this.#items.set(this.#normalizeMime(mime), [item]);
            }
        }
    }
    get(mimeType) {
        return this.#items.get(this.#normalizeMime(mimeType))?.[0];
    }
    set(mimeType, value) {
        this.#items.set(this.#normalizeMime(mimeType), [value]);
    }
    forEach(callbackfn, thisArg) {
        for (const [mime, items] of this.#items) {
            for (const item of items) {
                callbackfn.call(thisArg, item, mime, this);
            }
        }
    }
    *[Symbol.iterator]() {
        for (const [mime, items] of this.#items) {
            for (const item of items) {
                yield [mime, item];
            }
        }
    }
    #normalizeMime(mimeType) {
        return mimeType.toLowerCase();
    }
};
DataTransfer = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DataTransfer));
let DocumentDropEdit = class DocumentDropEdit {
    constructor(insertText, title, kind) {
        this.insertText = insertText;
        this.title = title;
        this.kind = kind;
    }
};
DocumentDropEdit = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DocumentDropEdit));
var DocumentPasteTriggerKind;
( (function(DocumentPasteTriggerKind) {
    DocumentPasteTriggerKind[DocumentPasteTriggerKind["Automatic"] = 0] = "Automatic";
    DocumentPasteTriggerKind[DocumentPasteTriggerKind["PasteAs"] = 1] = "PasteAs";
})(DocumentPasteTriggerKind || (DocumentPasteTriggerKind = {})));
class DocumentDropOrPasteEditKind {
    static { this.sep = '.'; }
    constructor(value) {
        this.value = value;
    }
    append(...parts) {
        return ( new DocumentDropOrPasteEditKind(
            (this.value ? [this.value, ...parts] : parts).join(DocumentDropOrPasteEditKind.sep)
        ));
    }
    intersects(other) {
        return this.contains(other) || other.contains(this);
    }
    contains(other) {
        return this.value === other.value || other.value.startsWith(this.value + DocumentDropOrPasteEditKind.sep);
    }
}
DocumentDropOrPasteEditKind.Empty = ( new DocumentDropOrPasteEditKind(''));
class DocumentPasteEdit {
    constructor(insertText, title, kind) {
        this.title = title;
        this.insertText = insertText;
        this.kind = kind;
    }
}
let ThemeIcon = class ThemeIcon {
    constructor(id, color) {
        this.id = id;
        this.color = color;
    }
    static isThemeIcon(thing) {
        if (typeof thing.id !== 'string') {
            console.log('INVALID ThemeIcon, invalid id', thing.id);
            return false;
        }
        return true;
    }
};
ThemeIcon = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ThemeIcon));
ThemeIcon.File = ( new ThemeIcon('file'));
ThemeIcon.Folder = ( new ThemeIcon('folder'));
let ThemeColor = class ThemeColor {
    constructor(id) {
        this.id = id;
    }
};
ThemeColor = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ThemeColor));
var ConfigurationTarget;
( (function(ConfigurationTarget) {
    ConfigurationTarget[ConfigurationTarget["Global"] = 1] = "Global";
    ConfigurationTarget[ConfigurationTarget["Workspace"] = 2] = "Workspace";
    ConfigurationTarget[ConfigurationTarget["WorkspaceFolder"] = 3] = "WorkspaceFolder";
})(ConfigurationTarget || (ConfigurationTarget = {})));
let RelativePattern = class RelativePattern {
    get base() {
        return this._base;
    }
    set base(base) {
        this._base = base;
        this._baseUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.file(base);
    }
    get baseUri() {
        return this._baseUri;
    }
    set baseUri(baseUri) {
        this._baseUri = baseUri;
        this._base = baseUri.fsPath;
    }
    constructor(base, pattern) {
        if (typeof base !== 'string') {
            if (!base || !_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(base) && !_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(base.uri)) {
                throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('base');
            }
        }
        if (typeof pattern !== 'string') {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('pattern');
        }
        if (typeof base === 'string') {
            this.baseUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.file(base);
        }
        else if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(base)) {
            this.baseUri = base;
        }
        else {
            this.baseUri = base.uri;
        }
        this.pattern = pattern;
    }
    toJSON() {
        return {
            pattern: this.pattern,
            base: this.base,
            baseUri: this.baseUri.toJSON()
        };
    }
};
RelativePattern = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], RelativePattern));
const breakpointIds = ( new WeakMap());
function setBreakpointId(bp, id) {
    breakpointIds.set(bp, id);
}
let Breakpoint = class Breakpoint {
    constructor(enabled, condition, hitCondition, logMessage, mode) {
        this.enabled = typeof enabled === 'boolean' ? enabled : true;
        if (typeof condition === 'string') {
            this.condition = condition;
        }
        if (typeof hitCondition === 'string') {
            this.hitCondition = hitCondition;
        }
        if (typeof logMessage === 'string') {
            this.logMessage = logMessage;
        }
        if (typeof mode === 'string') {
            this.mode = mode;
        }
    }
    get id() {
        if (!this._id) {
            this._id = breakpointIds.get(this) ?? (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_9__.generateUuid)();
        }
        return this._id;
    }
};
Breakpoint = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], Breakpoint));
let SourceBreakpoint = class SourceBreakpoint extends Breakpoint {
    constructor(location, enabled, condition, hitCondition, logMessage, mode) {
        super(enabled, condition, hitCondition, logMessage, mode);
        if (location === null) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('location');
        }
        this.location = location;
    }
};
SourceBreakpoint = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], SourceBreakpoint));
let FunctionBreakpoint = class FunctionBreakpoint extends Breakpoint {
    constructor(functionName, enabled, condition, hitCondition, logMessage, mode) {
        super(enabled, condition, hitCondition, logMessage, mode);
        this.functionName = functionName;
    }
};
FunctionBreakpoint = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], FunctionBreakpoint));
let DataBreakpoint = class DataBreakpoint extends Breakpoint {
    constructor(label, dataId, canPersist, enabled, condition, hitCondition, logMessage, mode) {
        super(enabled, condition, hitCondition, logMessage, mode);
        if (!dataId) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('dataId');
        }
        this.label = label;
        this.dataId = dataId;
        this.canPersist = canPersist;
    }
};
DataBreakpoint = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DataBreakpoint));
let DebugAdapterExecutable = class DebugAdapterExecutable {
    constructor(command, args, options) {
        this.command = command;
        this.args = args || [];
        this.options = options;
    }
};
DebugAdapterExecutable = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DebugAdapterExecutable));
let DebugAdapterServer = class DebugAdapterServer {
    constructor(port, host) {
        this.port = port;
        this.host = host;
    }
};
DebugAdapterServer = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DebugAdapterServer));
let DebugAdapterNamedPipeServer = class DebugAdapterNamedPipeServer {
    constructor(path) {
        this.path = path;
    }
};
DebugAdapterNamedPipeServer = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DebugAdapterNamedPipeServer));
let DebugAdapterInlineImplementation = class DebugAdapterInlineImplementation {
    constructor(impl) {
        this.implementation = impl;
    }
};
DebugAdapterInlineImplementation = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], DebugAdapterInlineImplementation));
class DebugStackFrame {
    constructor(session, threadId, frameId) {
        this.session = session;
        this.threadId = threadId;
        this.frameId = frameId;
    }
}
class DebugThread {
    constructor(session, threadId) {
        this.session = session;
        this.threadId = threadId;
    }
}
let EvaluatableExpression = class EvaluatableExpression {
    constructor(range, expression) {
        this.range = range;
        this.expression = expression;
    }
};
EvaluatableExpression = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], EvaluatableExpression));
var InlineCompletionTriggerKind;
( (function(InlineCompletionTriggerKind) {
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Invoke"] = 0] = "Invoke";
    InlineCompletionTriggerKind[InlineCompletionTriggerKind["Automatic"] = 1] = "Automatic";
})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {})));
let InlineValueText = class InlineValueText {
    constructor(range, text) {
        this.range = range;
        this.text = text;
    }
};
InlineValueText = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlineValueText));
let InlineValueVariableLookup = class InlineValueVariableLookup {
    constructor(range, variableName, caseSensitiveLookup = true) {
        this.range = range;
        this.variableName = variableName;
        this.caseSensitiveLookup = caseSensitiveLookup;
    }
};
InlineValueVariableLookup = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlineValueVariableLookup));
let InlineValueEvaluatableExpression = class InlineValueEvaluatableExpression {
    constructor(range, expression) {
        this.range = range;
        this.expression = expression;
    }
};
InlineValueEvaluatableExpression = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlineValueEvaluatableExpression));
let InlineValueContext = class InlineValueContext {
    constructor(frameId, range) {
        this.frameId = frameId;
        this.stoppedLocation = range;
    }
};
InlineValueContext = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], InlineValueContext));
var NewSymbolNameTag;
( (function(NewSymbolNameTag) {
    NewSymbolNameTag[NewSymbolNameTag["AIGenerated"] = 1] = "AIGenerated";
})(NewSymbolNameTag || (NewSymbolNameTag = {})));
var NewSymbolNameTriggerKind;
( (function(NewSymbolNameTriggerKind) {
    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind["Invoke"] = 0] = "Invoke";
    NewSymbolNameTriggerKind[NewSymbolNameTriggerKind["Automatic"] = 1] = "Automatic";
})(NewSymbolNameTriggerKind || (NewSymbolNameTriggerKind = {})));
class NewSymbolName {
    constructor(newSymbolName, tags) {
        this.newSymbolName = newSymbolName;
        this.tags = tags;
    }
}
var FileChangeType;
( (function(FileChangeType) {
    FileChangeType[FileChangeType["Changed"] = 1] = "Changed";
    FileChangeType[FileChangeType["Created"] = 2] = "Created";
    FileChangeType[FileChangeType["Deleted"] = 3] = "Deleted";
})(FileChangeType || (FileChangeType = {})));
let FileSystemError = FileSystemError_1 = class FileSystemError extends Error {
    static FileExists(messageOrUri) {
        return ( new FileSystemError_1(
            messageOrUri,
            _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.FileSystemProviderErrorCode.FileExists,
            FileSystemError_1.FileExists
        ));
    }
    static FileNotFound(messageOrUri) {
        return ( new FileSystemError_1(
            messageOrUri,
            _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.FileSystemProviderErrorCode.FileNotFound,
            FileSystemError_1.FileNotFound
        ));
    }
    static FileNotADirectory(messageOrUri) {
        return ( new FileSystemError_1(
            messageOrUri,
            _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.FileSystemProviderErrorCode.FileNotADirectory,
            FileSystemError_1.FileNotADirectory
        ));
    }
    static FileIsADirectory(messageOrUri) {
        return ( new FileSystemError_1(
            messageOrUri,
            _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.FileSystemProviderErrorCode.FileIsADirectory,
            FileSystemError_1.FileIsADirectory
        ));
    }
    static NoPermissions(messageOrUri) {
        return ( new FileSystemError_1(
            messageOrUri,
            _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.FileSystemProviderErrorCode.NoPermissions,
            FileSystemError_1.NoPermissions
        ));
    }
    static Unavailable(messageOrUri) {
        return ( new FileSystemError_1(
            messageOrUri,
            _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.FileSystemProviderErrorCode.Unavailable,
            FileSystemError_1.Unavailable
        ));
    }
    constructor(uriOrMessage, code = _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.FileSystemProviderErrorCode.Unknown, terminator) {
        super(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_8__.URI.isUri(uriOrMessage) ? ( uriOrMessage.toString(true)) : uriOrMessage);
        this.code = terminator?.name ?? 'Unknown';
        (0,_platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_11__.markAsFileSystemProviderError)(this, code);
        Object.setPrototypeOf(this, FileSystemError_1.prototype);
        if (typeof Error.captureStackTrace === 'function' && typeof terminator === 'function') {
            Error.captureStackTrace(this, terminator);
        }
    }
};
FileSystemError = FileSystemError_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], FileSystemError));
let FoldingRange = class FoldingRange {
    constructor(start, end, kind) {
        this.start = start;
        this.end = end;
        this.kind = kind;
    }
};
FoldingRange = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], FoldingRange));
var FoldingRangeKind;
( (function(FoldingRangeKind) {
    FoldingRangeKind[FoldingRangeKind["Comment"] = 1] = "Comment";
    FoldingRangeKind[FoldingRangeKind["Imports"] = 2] = "Imports";
    FoldingRangeKind[FoldingRangeKind["Region"] = 3] = "Region";
})(FoldingRangeKind || (FoldingRangeKind = {})));
var CommentThreadCollapsibleState;
( (function(CommentThreadCollapsibleState) {
    CommentThreadCollapsibleState[CommentThreadCollapsibleState["Collapsed"] = 0] = "Collapsed";
    CommentThreadCollapsibleState[CommentThreadCollapsibleState["Expanded"] = 1] = "Expanded";
})(CommentThreadCollapsibleState || (CommentThreadCollapsibleState = {})));
var CommentMode;
( (function(CommentMode) {
    CommentMode[CommentMode["Editing"] = 0] = "Editing";
    CommentMode[CommentMode["Preview"] = 1] = "Preview";
})(CommentMode || (CommentMode = {})));
var CommentState;
( (function(CommentState) {
    CommentState[CommentState["Published"] = 0] = "Published";
    CommentState[CommentState["Draft"] = 1] = "Draft";
})(CommentState || (CommentState = {})));
var CommentThreadState;
( (function(CommentThreadState) {
    CommentThreadState[CommentThreadState["Unresolved"] = 0] = "Unresolved";
    CommentThreadState[CommentThreadState["Resolved"] = 1] = "Resolved";
})(CommentThreadState || (CommentThreadState = {})));
var CommentThreadApplicability;
( (function(CommentThreadApplicability) {
    CommentThreadApplicability[CommentThreadApplicability["Current"] = 0] = "Current";
    CommentThreadApplicability[CommentThreadApplicability["Outdated"] = 1] = "Outdated";
})(CommentThreadApplicability || (CommentThreadApplicability = {})));
class SemanticTokensLegend {
    constructor(tokenTypes, tokenModifiers = []) {
        this.tokenTypes = tokenTypes;
        this.tokenModifiers = tokenModifiers;
    }
}
function isStrArrayOrUndefined(arg) {
    return ((typeof arg === 'undefined') || (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_7__.isStringArray)(arg));
}
class SemanticTokensBuilder {
    constructor(legend) {
        this._prevLine = 0;
        this._prevChar = 0;
        this._dataIsSortedAndDeltaEncoded = true;
        this._data = [];
        this._dataLen = 0;
        this._tokenTypeStrToInt = ( new Map());
        this._tokenModifierStrToInt = ( new Map());
        this._hasLegend = false;
        if (legend) {
            this._hasLegend = true;
            for (let i = 0, len = legend.tokenTypes.length; i < len; i++) {
                this._tokenTypeStrToInt.set(legend.tokenTypes[i], i);
            }
            for (let i = 0, len = legend.tokenModifiers.length; i < len; i++) {
                this._tokenModifierStrToInt.set(legend.tokenModifiers[i], i);
            }
        }
    }
    push(arg0, arg1, arg2, arg3, arg4) {
        if (typeof arg0 === 'number' && typeof arg1 === 'number' && typeof arg2 === 'number' && typeof arg3 === 'number' && (typeof arg4 === 'number' || typeof arg4 === 'undefined')) {
            if (typeof arg4 === 'undefined') {
                arg4 = 0;
            }
            return this._pushEncoded(arg0, arg1, arg2, arg3, arg4);
        }
        if (Range.isRange(arg0) && typeof arg1 === 'string' && isStrArrayOrUndefined(arg2)) {
            return this._push(arg0, arg1, arg2);
        }
        throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)();
    }
    _push(range, tokenType, tokenModifiers) {
        if (!this._hasLegend) {
            throw ( new Error('Legend must be provided in constructor'));
        }
        if (range.start.line !== range.end.line) {
            throw ( new Error('`range` cannot span multiple lines'));
        }
        if (!( this._tokenTypeStrToInt.has(tokenType))) {
            throw ( new Error('`tokenType` is not in the provided legend'));
        }
        const line = range.start.line;
        const char = range.start.character;
        const length = range.end.character - range.start.character;
        const nTokenType = this._tokenTypeStrToInt.get(tokenType);
        let nTokenModifiers = 0;
        if (tokenModifiers) {
            for (const tokenModifier of tokenModifiers) {
                if (!( this._tokenModifierStrToInt.has(tokenModifier))) {
                    throw ( new Error('`tokenModifier` is not in the provided legend'));
                }
                const nTokenModifier = this._tokenModifierStrToInt.get(tokenModifier);
                nTokenModifiers |= (1 << nTokenModifier) >>> 0;
            }
        }
        this._pushEncoded(line, char, length, nTokenType, nTokenModifiers);
    }
    _pushEncoded(line, char, length, tokenType, tokenModifiers) {
        if (this._dataIsSortedAndDeltaEncoded && (line < this._prevLine || (line === this._prevLine && char < this._prevChar))) {
            this._dataIsSortedAndDeltaEncoded = false;
            const tokenCount = (this._data.length / 5) | 0;
            let prevLine = 0;
            let prevChar = 0;
            for (let i = 0; i < tokenCount; i++) {
                let line = this._data[5 * i];
                let char = this._data[5 * i + 1];
                if (line === 0) {
                    line = prevLine;
                    char += prevChar;
                }
                else {
                    line += prevLine;
                }
                this._data[5 * i] = line;
                this._data[5 * i + 1] = char;
                prevLine = line;
                prevChar = char;
            }
        }
        let pushLine = line;
        let pushChar = char;
        if (this._dataIsSortedAndDeltaEncoded && this._dataLen > 0) {
            pushLine -= this._prevLine;
            if (pushLine === 0) {
                pushChar -= this._prevChar;
            }
        }
        this._data[this._dataLen++] = pushLine;
        this._data[this._dataLen++] = pushChar;
        this._data[this._dataLen++] = length;
        this._data[this._dataLen++] = tokenType;
        this._data[this._dataLen++] = tokenModifiers;
        this._prevLine = line;
        this._prevChar = char;
    }
    static _sortAndDeltaEncode(data) {
        const pos = [];
        const tokenCount = (data.length / 5) | 0;
        for (let i = 0; i < tokenCount; i++) {
            pos[i] = i;
        }
        pos.sort((a, b) => {
            const aLine = data[5 * a];
            const bLine = data[5 * b];
            if (aLine === bLine) {
                const aChar = data[5 * a + 1];
                const bChar = data[5 * b + 1];
                return aChar - bChar;
            }
            return aLine - bLine;
        });
        const result = ( new Uint32Array(data.length));
        let prevLine = 0;
        let prevChar = 0;
        for (let i = 0; i < tokenCount; i++) {
            const srcOffset = 5 * pos[i];
            const line = data[srcOffset + 0];
            const char = data[srcOffset + 1];
            const length = data[srcOffset + 2];
            const tokenType = data[srcOffset + 3];
            const tokenModifiers = data[srcOffset + 4];
            const pushLine = line - prevLine;
            const pushChar = (pushLine === 0 ? char - prevChar : char);
            const dstOffset = 5 * i;
            result[dstOffset + 0] = pushLine;
            result[dstOffset + 1] = pushChar;
            result[dstOffset + 2] = length;
            result[dstOffset + 3] = tokenType;
            result[dstOffset + 4] = tokenModifiers;
            prevLine = line;
            prevChar = char;
        }
        return result;
    }
    build(resultId) {
        if (!this._dataIsSortedAndDeltaEncoded) {
            return ( new SemanticTokens(SemanticTokensBuilder._sortAndDeltaEncode(this._data), resultId));
        }
        return ( new SemanticTokens(( new Uint32Array(this._data)), resultId));
    }
}
class SemanticTokens {
    constructor(data, resultId) {
        this.resultId = resultId;
        this.data = data;
    }
}
class SemanticTokensEdit {
    constructor(start, deleteCount, data) {
        this.start = start;
        this.deleteCount = deleteCount;
        this.data = data;
    }
}
class SemanticTokensEdits {
    constructor(edits, resultId) {
        this.resultId = resultId;
        this.edits = edits;
    }
}
var DebugConsoleMode;
( (function(DebugConsoleMode) {
    DebugConsoleMode[DebugConsoleMode["Separate"] = 0] = "Separate";
    DebugConsoleMode[DebugConsoleMode["MergeWithParent"] = 1] = "MergeWithParent";
})(DebugConsoleMode || (DebugConsoleMode = {})));
class DebugVisualization {
    constructor(name) {
        this.name = name;
    }
}
let QuickInputButtons = class QuickInputButtons {
    static { this.Back = { iconPath: ( new ThemeIcon('arrow-left')) }; }
    constructor() { }
};
QuickInputButtons = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], QuickInputButtons));
var QuickPickItemKind;
( (function(QuickPickItemKind) {
    QuickPickItemKind[QuickPickItemKind["Separator"] = -1] = "Separator";
    QuickPickItemKind[QuickPickItemKind["Default"] = 0] = "Default";
})(QuickPickItemKind || (QuickPickItemKind = {})));
var InputBoxValidationSeverity;
( (function(InputBoxValidationSeverity) {
    InputBoxValidationSeverity[InputBoxValidationSeverity["Info"] = 1] = "Info";
    InputBoxValidationSeverity[InputBoxValidationSeverity["Warning"] = 2] = "Warning";
    InputBoxValidationSeverity[InputBoxValidationSeverity["Error"] = 3] = "Error";
})(InputBoxValidationSeverity || (InputBoxValidationSeverity = {})));
var ExtensionKind;
( (function(ExtensionKind) {
    ExtensionKind[ExtensionKind["UI"] = 1] = "UI";
    ExtensionKind[ExtensionKind["Workspace"] = 2] = "Workspace";
})(ExtensionKind || (ExtensionKind = {})));
class FileDecoration {
    static validate(d) {
        if (typeof d.badge === 'string') {
            let len = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_6__.nextCharLength)(d.badge, 0);
            if (len < d.badge.length) {
                len += (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_6__.nextCharLength)(d.badge, len);
            }
            if (d.badge.length > len) {
                throw ( new Error(`The 'badge'-property must be undefined or a short character`));
            }
        }
        else if (d.badge) {
            if (!ThemeIcon.isThemeIcon(d.badge)) {
                throw ( new Error(`The 'badge'-property is not a valid ThemeIcon`));
            }
        }
        if (!d.color && !d.badge && !d.tooltip) {
            throw ( new Error(`The decoration is empty`));
        }
        return true;
    }
    constructor(badge, tooltip, color) {
        this.badge = badge;
        this.tooltip = tooltip;
        this.color = color;
    }
}
let ColorTheme = class ColorTheme {
    constructor(kind) {
        this.kind = kind;
    }
};
ColorTheme = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], ColorTheme));
var ColorThemeKind;
( (function(ColorThemeKind) {
    ColorThemeKind[ColorThemeKind["Light"] = 1] = "Light";
    ColorThemeKind[ColorThemeKind["Dark"] = 2] = "Dark";
    ColorThemeKind[ColorThemeKind["HighContrast"] = 3] = "HighContrast";
    ColorThemeKind[ColorThemeKind["HighContrastLight"] = 4] = "HighContrastLight";
})(ColorThemeKind || (ColorThemeKind = {})));
class NotebookRange {
    static isNotebookRange(thing) {
        if (thing instanceof NotebookRange) {
            return true;
        }
        if (!thing) {
            return false;
        }
        return typeof thing.start === 'number'
            && typeof thing.end === 'number';
    }
    get start() {
        return this._start;
    }
    get end() {
        return this._end;
    }
    get isEmpty() {
        return this._start === this._end;
    }
    constructor(start, end) {
        if (start < 0) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('start must be positive');
        }
        if (end < 0) {
            throw (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_2__.illegalArgument)('end must be positive');
        }
        if (start <= end) {
            this._start = start;
            this._end = end;
        }
        else {
            this._start = end;
            this._end = start;
        }
    }
    with(change) {
        let start = this._start;
        let end = this._end;
        if (change.start !== undefined) {
            start = change.start;
        }
        if (change.end !== undefined) {
            end = change.end;
        }
        if (start === this._start && end === this._end) {
            return this;
        }
        return ( new NotebookRange(start, end));
    }
}
class NotebookCellData {
    static validate(data) {
        if (typeof data.kind !== 'number') {
            throw ( new Error('NotebookCellData MUST have \'kind\' property'));
        }
        if (typeof data.value !== 'string') {
            throw ( new Error('NotebookCellData MUST have \'value\' property'));
        }
        if (typeof data.languageId !== 'string') {
            throw ( new Error('NotebookCellData MUST have \'languageId\' property'));
        }
    }
    static isNotebookCellDataArray(value) {
        return Array.isArray(value) && value.every(elem => NotebookCellData.isNotebookCellData(elem));
    }
    static isNotebookCellData(value) {
        return true;
    }
    constructor(kind, value, languageId, mime, outputs, metadata, executionSummary) {
        this.kind = kind;
        this.value = value;
        this.languageId = languageId;
        this.mime = mime;
        this.outputs = outputs ?? [];
        this.metadata = metadata;
        this.executionSummary = executionSummary;
        NotebookCellData.validate(this);
    }
}
class NotebookData {
    constructor(cells) {
        this.cells = cells;
    }
}
class NotebookCellOutputItem {
    static isNotebookCellOutputItem(obj) {
        if (obj instanceof NotebookCellOutputItem) {
            return true;
        }
        if (!obj) {
            return false;
        }
        return typeof obj.mime === 'string'
            && obj.data instanceof Uint8Array;
    }
    static error(err) {
        const obj = {
            name: err.name,
            message: err.message,
            stack: err.stack
        };
        return NotebookCellOutputItem.json(obj, 'application/vnd.code.notebook.error');
    }
    static stdout(value) {
        return NotebookCellOutputItem.text(value, 'application/vnd.code.notebook.stdout');
    }
    static stderr(value) {
        return NotebookCellOutputItem.text(value, 'application/vnd.code.notebook.stderr');
    }
    static bytes(value, mime = 'application/octet-stream') {
        return ( new NotebookCellOutputItem(value, mime));
    }
    static #encoder = ( new TextEncoder());
    static text(value, mime = _base_common_mime_js__WEBPACK_IMPORTED_MODULE_5__.Mimes.text) {
        const bytes = NotebookCellOutputItem.#encoder.encode(String(value));
        return ( new NotebookCellOutputItem(bytes, mime));
    }
    static json(value, mime = 'text/x-json') {
        const rawStr = JSON.stringify(value, undefined, '\t');
        return NotebookCellOutputItem.text(rawStr, mime);
    }
    constructor(data, mime) {
        this.data = data;
        this.mime = mime;
        const mimeNormalized = (0,_base_common_mime_js__WEBPACK_IMPORTED_MODULE_5__.normalizeMimeType)(mime, true);
        if (!mimeNormalized) {
            throw ( new Error(
                `INVALID mime type: ${mime}. Must be in the format "type/subtype[;optionalparameter]"`
            ));
        }
        this.mime = mimeNormalized;
    }
}
class NotebookCellOutput {
    static isNotebookCellOutput(candidate) {
        if (candidate instanceof NotebookCellOutput) {
            return true;
        }
        if (!candidate || typeof candidate !== 'object') {
            return false;
        }
        return typeof candidate.id === 'string' && Array.isArray(candidate.items);
    }
    static ensureUniqueMimeTypes(items, warn = false) {
        const seen = ( new Set());
        const removeIdx = ( new Set());
        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const normalMime = (0,_base_common_mime_js__WEBPACK_IMPORTED_MODULE_5__.normalizeMimeType)(item.mime);
            if (!( seen.has(normalMime)) || (0,_contrib_notebook_common_notebookCommon_js__WEBPACK_IMPORTED_MODULE_13__.isTextStreamMime)(normalMime)) {
                seen.add(normalMime);
                continue;
            }
            removeIdx.add(i);
            if (warn) {
                console.warn(`DUPLICATED mime type '${item.mime}' will be dropped`);
            }
        }
        if (removeIdx.size === 0) {
            return items;
        }
        return items.filter((_item, index) => !( removeIdx.has(index)));
    }
    constructor(items, idOrMetadata, metadata) {
        this.items = NotebookCellOutput.ensureUniqueMimeTypes(items, true);
        if (typeof idOrMetadata === 'string') {
            this.id = idOrMetadata;
            this.metadata = metadata;
        }
        else {
            this.id = (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_9__.generateUuid)();
            this.metadata = idOrMetadata ?? metadata;
        }
    }
}
var NotebookCellKind;
( (function(NotebookCellKind) {
    NotebookCellKind[NotebookCellKind["Markup"] = 1] = "Markup";
    NotebookCellKind[NotebookCellKind["Code"] = 2] = "Code";
})(NotebookCellKind || (NotebookCellKind = {})));
var NotebookCellExecutionState;
( (function(NotebookCellExecutionState) {
    NotebookCellExecutionState[NotebookCellExecutionState["Idle"] = 1] = "Idle";
    NotebookCellExecutionState[NotebookCellExecutionState["Pending"] = 2] = "Pending";
    NotebookCellExecutionState[NotebookCellExecutionState["Executing"] = 3] = "Executing";
})(NotebookCellExecutionState || (NotebookCellExecutionState = {})));
var NotebookCellStatusBarAlignment;
( (function(NotebookCellStatusBarAlignment) {
    NotebookCellStatusBarAlignment[NotebookCellStatusBarAlignment["Left"] = 1] = "Left";
    NotebookCellStatusBarAlignment[NotebookCellStatusBarAlignment["Right"] = 2] = "Right";
})(NotebookCellStatusBarAlignment || (NotebookCellStatusBarAlignment = {})));
var NotebookEditorRevealType;
( (function(NotebookEditorRevealType) {
    NotebookEditorRevealType[NotebookEditorRevealType["Default"] = 0] = "Default";
    NotebookEditorRevealType[NotebookEditorRevealType["InCenter"] = 1] = "InCenter";
    NotebookEditorRevealType[NotebookEditorRevealType["InCenterIfOutsideViewport"] = 2] = "InCenterIfOutsideViewport";
    NotebookEditorRevealType[NotebookEditorRevealType["AtTop"] = 3] = "AtTop";
})(NotebookEditorRevealType || (NotebookEditorRevealType = {})));
class NotebookCellStatusBarItem {
    constructor(text, alignment) {
        this.text = text;
        this.alignment = alignment;
    }
}
var NotebookControllerAffinity;
( (function(NotebookControllerAffinity) {
    NotebookControllerAffinity[NotebookControllerAffinity["Default"] = 1] = "Default";
    NotebookControllerAffinity[NotebookControllerAffinity["Preferred"] = 2] = "Preferred";
})(NotebookControllerAffinity || (NotebookControllerAffinity = {})));
var NotebookControllerAffinity2;
( (function(NotebookControllerAffinity2) {
    NotebookControllerAffinity2[NotebookControllerAffinity2["Default"] = 1] = "Default";
    NotebookControllerAffinity2[NotebookControllerAffinity2["Preferred"] = 2] = "Preferred";
    NotebookControllerAffinity2[NotebookControllerAffinity2["Hidden"] = -1] = "Hidden";
})(NotebookControllerAffinity2 || (NotebookControllerAffinity2 = {})));
class NotebookRendererScript {
    constructor(uri, provides = []) {
        this.uri = uri;
        this.provides = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.asArray)(provides);
    }
}
class NotebookKernelSourceAction {
    constructor(label) {
        this.label = label;
    }
}
var NotebookVariablesRequestKind;
( (function(NotebookVariablesRequestKind) {
    NotebookVariablesRequestKind[NotebookVariablesRequestKind["Named"] = 1] = "Named";
    NotebookVariablesRequestKind[NotebookVariablesRequestKind["Indexed"] = 2] = "Indexed";
})(NotebookVariablesRequestKind || (NotebookVariablesRequestKind = {})));
let TimelineItem = class TimelineItem {
    constructor(label, timestamp) {
        this.label = label;
        this.timestamp = timestamp;
    }
};
TimelineItem = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], TimelineItem));
var ExtensionMode;
( (function(ExtensionMode) {
    ExtensionMode[ExtensionMode["Production"] = 1] = "Production";
    ExtensionMode[ExtensionMode["Development"] = 2] = "Development";
    ExtensionMode[ExtensionMode["Test"] = 3] = "Test";
})(ExtensionMode || (ExtensionMode = {})));
var ExtensionRuntime;
( (function(ExtensionRuntime) {
    ExtensionRuntime[ExtensionRuntime["Node"] = 1] = "Node";
    ExtensionRuntime[ExtensionRuntime["Webworker"] = 2] = "Webworker";
})(ExtensionRuntime || (ExtensionRuntime = {})));
var StandardTokenType;
( (function(StandardTokenType) {
    StandardTokenType[StandardTokenType["Other"] = 0] = "Other";
    StandardTokenType[StandardTokenType["Comment"] = 1] = "Comment";
    StandardTokenType[StandardTokenType["String"] = 2] = "String";
    StandardTokenType[StandardTokenType["RegEx"] = 3] = "RegEx";
})(StandardTokenType || (StandardTokenType = {})));
class LinkedEditingRanges {
    constructor(ranges, wordPattern) {
        this.ranges = ranges;
        this.wordPattern = wordPattern;
    }
}
class PortAttributes {
    constructor(autoForwardAction) {
        this._autoForwardAction = autoForwardAction;
    }
    get autoForwardAction() {
        return this._autoForwardAction;
    }
}
var TestResultState;
( (function(TestResultState) {
    TestResultState[TestResultState["Queued"] = 1] = "Queued";
    TestResultState[TestResultState["Running"] = 2] = "Running";
    TestResultState[TestResultState["Passed"] = 3] = "Passed";
    TestResultState[TestResultState["Failed"] = 4] = "Failed";
    TestResultState[TestResultState["Skipped"] = 5] = "Skipped";
    TestResultState[TestResultState["Errored"] = 6] = "Errored";
})(TestResultState || (TestResultState = {})));
var TestRunProfileKind;
( (function(TestRunProfileKind) {
    TestRunProfileKind[TestRunProfileKind["Run"] = 1] = "Run";
    TestRunProfileKind[TestRunProfileKind["Debug"] = 2] = "Debug";
    TestRunProfileKind[TestRunProfileKind["Coverage"] = 3] = "Coverage";
})(TestRunProfileKind || (TestRunProfileKind = {})));
let TestRunRequest = class TestRunRequest {
    constructor(include = undefined, exclude = undefined, profile = undefined, continuous = false, preserveFocus = true) {
        this.include = include;
        this.exclude = exclude;
        this.profile = profile;
        this.continuous = continuous;
        this.preserveFocus = preserveFocus;
    }
};
TestRunRequest = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], TestRunRequest));
let TestMessage = TestMessage_1 = class TestMessage {
    static diff(message, expected, actual) {
        const msg = ( new TestMessage_1(message));
        msg.expectedOutput = expected;
        msg.actualOutput = actual;
        return msg;
    }
    constructor(message) {
        this.message = message;
    }
};
TestMessage = TestMessage_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], TestMessage));
let TestTag = class TestTag {
    constructor(id) {
        this.id = id;
    }
};
TestTag = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    es5ClassCompat
], TestTag));
class TestCoverageCount {
    constructor(covered, total) {
        this.covered = covered;
        this.total = total;
        validateTestCoverageCount(this);
    }
}
function validateTestCoverageCount(cc) {
    if (!cc) {
        return;
    }
    if (cc.covered > cc.total) {
        throw ( new Error(
            `The total number of covered items (${cc.covered}) cannot be greater than the total (${cc.total})`
        ));
    }
    if (cc.total < 0) {
        throw ( new Error(`The number of covered items (${cc.total}) cannot be negative`));
    }
}
class FileCoverage {
    static fromDetails(uri, details) {
        const statements = ( new TestCoverageCount(0, 0));
        const branches = ( new TestCoverageCount(0, 0));
        const decl = ( new TestCoverageCount(0, 0));
        for (const detail of details) {
            if ('branches' in detail) {
                statements.total += 1;
                statements.covered += detail.executed ? 1 : 0;
                for (const branch of detail.branches) {
                    branches.total += 1;
                    branches.covered += branch.executed ? 1 : 0;
                }
            }
            else {
                decl.total += 1;
                decl.covered += detail.executed ? 1 : 0;
            }
        }
        const coverage = ( new FileCoverage(
            uri,
            statements,
            branches.total > 0 ? branches : undefined,
            decl.total > 0 ? decl : undefined
        ));
        coverage.detailedCoverage = details;
        return coverage;
    }
    constructor(uri, statementCoverage, branchCoverage, declarationCoverage, fromTests = []) {
        this.uri = uri;
        this.statementCoverage = statementCoverage;
        this.branchCoverage = branchCoverage;
        this.declarationCoverage = declarationCoverage;
        this.fromTests = fromTests;
    }
}
class StatementCoverage {
    get executionCount() { return +this.executed; }
    set executionCount(n) { this.executed = n; }
    constructor(executed, location, branches = []) {
        this.executed = executed;
        this.location = location;
        this.branches = branches;
    }
}
class BranchCoverage {
    get executionCount() { return +this.executed; }
    set executionCount(n) { this.executed = n; }
    constructor(executed, location, label) {
        this.executed = executed;
        this.location = location;
        this.label = label;
    }
}
class DeclarationCoverage {
    get executionCount() { return +this.executed; }
    set executionCount(n) { this.executed = n; }
    constructor(name, executed, location) {
        this.name = name;
        this.executed = executed;
        this.location = location;
    }
}
var ExternalUriOpenerPriority;
( (function(ExternalUriOpenerPriority) {
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["None"] = 0] = "None";
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["Option"] = 1] = "Option";
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["Default"] = 2] = "Default";
    ExternalUriOpenerPriority[ExternalUriOpenerPriority["Preferred"] = 3] = "Preferred";
})(ExternalUriOpenerPriority || (ExternalUriOpenerPriority = {})));
var WorkspaceTrustState;
( (function(WorkspaceTrustState) {
    WorkspaceTrustState[WorkspaceTrustState["Untrusted"] = 0] = "Untrusted";
    WorkspaceTrustState[WorkspaceTrustState["Trusted"] = 1] = "Trusted";
    WorkspaceTrustState[WorkspaceTrustState["Unspecified"] = 2] = "Unspecified";
})(WorkspaceTrustState || (WorkspaceTrustState = {})));
var PortAutoForwardAction;
( (function(PortAutoForwardAction) {
    PortAutoForwardAction[PortAutoForwardAction["Notify"] = 1] = "Notify";
    PortAutoForwardAction[PortAutoForwardAction["OpenBrowser"] = 2] = "OpenBrowser";
    PortAutoForwardAction[PortAutoForwardAction["OpenPreview"] = 3] = "OpenPreview";
    PortAutoForwardAction[PortAutoForwardAction["Silent"] = 4] = "Silent";
    PortAutoForwardAction[PortAutoForwardAction["Ignore"] = 5] = "Ignore";
    PortAutoForwardAction[PortAutoForwardAction["OpenBrowserOnce"] = 6] = "OpenBrowserOnce";
})(PortAutoForwardAction || (PortAutoForwardAction = {})));
class TypeHierarchyItem {
    constructor(kind, name, detail, uri, range, selectionRange) {
        this.kind = kind;
        this.name = name;
        this.detail = detail;
        this.uri = uri;
        this.range = range;
        this.selectionRange = selectionRange;
    }
}
class TextTabInput {
    constructor(uri) {
        this.uri = uri;
    }
}
class TextDiffTabInput {
    constructor(original, modified) {
        this.original = original;
        this.modified = modified;
    }
}
class TextMergeTabInput {
    constructor(base, input1, input2, result) {
        this.base = base;
        this.input1 = input1;
        this.input2 = input2;
        this.result = result;
    }
}
class CustomEditorTabInput {
    constructor(uri, viewType) {
        this.uri = uri;
        this.viewType = viewType;
    }
}
class WebviewEditorTabInput {
    constructor(viewType) {
        this.viewType = viewType;
    }
}
class NotebookEditorTabInput {
    constructor(uri, notebookType) {
        this.uri = uri;
        this.notebookType = notebookType;
    }
}
class NotebookDiffEditorTabInput {
    constructor(original, modified, notebookType) {
        this.original = original;
        this.modified = modified;
        this.notebookType = notebookType;
    }
}
class TerminalEditorTabInput {
    constructor() { }
}
class InteractiveWindowInput {
    constructor(uri, inputBoxUri) {
        this.uri = uri;
        this.inputBoxUri = inputBoxUri;
    }
}
class ChatEditorTabInput {
    constructor() { }
}
class TextMultiDiffTabInput {
    constructor(textDiffs) {
        this.textDiffs = textDiffs;
    }
}
var InteractiveSessionVoteDirection;
( (function(InteractiveSessionVoteDirection) {
    InteractiveSessionVoteDirection[InteractiveSessionVoteDirection["Down"] = 0] = "Down";
    InteractiveSessionVoteDirection[InteractiveSessionVoteDirection["Up"] = 1] = "Up";
})(InteractiveSessionVoteDirection || (InteractiveSessionVoteDirection = {})));
var ChatCopyKind;
( (function(ChatCopyKind) {
    ChatCopyKind[ChatCopyKind["Action"] = 1] = "Action";
    ChatCopyKind[ChatCopyKind["Toolbar"] = 2] = "Toolbar";
})(ChatCopyKind || (ChatCopyKind = {})));
var ChatVariableLevel;
( (function(ChatVariableLevel) {
    ChatVariableLevel[ChatVariableLevel["Short"] = 1] = "Short";
    ChatVariableLevel[ChatVariableLevel["Medium"] = 2] = "Medium";
    ChatVariableLevel[ChatVariableLevel["Full"] = 3] = "Full";
})(ChatVariableLevel || (ChatVariableLevel = {})));
class ChatCompletionItem {
    constructor(id, label, values) {
        this.id = id;
        this.label = label;
        this.values = values;
    }
}
var InteractiveEditorResponseFeedbackKind;
( (function(InteractiveEditorResponseFeedbackKind) {
    InteractiveEditorResponseFeedbackKind[InteractiveEditorResponseFeedbackKind["Unhelpful"] = 0] = "Unhelpful";
    InteractiveEditorResponseFeedbackKind[InteractiveEditorResponseFeedbackKind["Helpful"] = 1] = "Helpful";
    InteractiveEditorResponseFeedbackKind[InteractiveEditorResponseFeedbackKind["Undone"] = 2] = "Undone";
    InteractiveEditorResponseFeedbackKind[InteractiveEditorResponseFeedbackKind["Accepted"] = 3] = "Accepted";
    InteractiveEditorResponseFeedbackKind[InteractiveEditorResponseFeedbackKind["Bug"] = 4] = "Bug";
})(
    InteractiveEditorResponseFeedbackKind || (InteractiveEditorResponseFeedbackKind = {})
));
var ChatResultFeedbackKind;
( (function(ChatResultFeedbackKind) {
    ChatResultFeedbackKind[ChatResultFeedbackKind["Unhelpful"] = 0] = "Unhelpful";
    ChatResultFeedbackKind[ChatResultFeedbackKind["Helpful"] = 1] = "Helpful";
})(ChatResultFeedbackKind || (ChatResultFeedbackKind = {})));
class ChatResponseMarkdownPart {
    constructor(value) {
        if (typeof value !== 'string' && value.isTrusted === true) {
            throw ( new Error(
                'The boolean form of MarkdownString.isTrusted is NOT supported for chat participants.'
            ));
        }
        this.value = typeof value === 'string' ? ( new MarkdownString(value)) : value;
    }
}
class ChatResponseMarkdownWithVulnerabilitiesPart {
    constructor(value, vulnerabilities) {
        if (typeof value !== 'string' && value.isTrusted === true) {
            throw ( new Error(
                'The boolean form of MarkdownString.isTrusted is NOT supported for chat participants.'
            ));
        }
        this.value = typeof value === 'string' ? ( new MarkdownString(value)) : value;
        this.vulnerabilities = vulnerabilities;
    }
}
class ChatResponseDetectedParticipantPart {
    constructor(participant, command) {
        this.participant = participant;
        this.command = command;
    }
}
class ChatResponseConfirmationPart {
    constructor(title, message, data) {
        this.title = title;
        this.message = message;
        this.data = data;
    }
}
class ChatResponseFileTreePart {
    constructor(value, baseUri) {
        this.value = value;
        this.baseUri = baseUri;
    }
}
class ChatResponseAnchorPart {
    constructor(value, title) {
        this.value = value;
        this.title = title;
    }
}
class ChatResponseProgressPart {
    constructor(value) {
        this.value = value;
    }
}
class ChatResponseProgressPart2 {
    constructor(value, task) {
        this.value = value;
        this.task = task;
    }
}
class ChatResponseWarningPart {
    constructor(value) {
        if (typeof value !== 'string' && value.isTrusted === true) {
            throw ( new Error(
                'The boolean form of MarkdownString.isTrusted is NOT supported for chat participants.'
            ));
        }
        this.value = typeof value === 'string' ? ( new MarkdownString(value)) : value;
    }
}
class ChatResponseCommandButtonPart {
    constructor(value) {
        this.value = value;
    }
}
class ChatResponseReferencePart {
    constructor(value, iconPath) {
        this.value = value;
        this.iconPath = iconPath;
    }
}
class ChatResponseTextEditPart {
    constructor(uri, edits) {
        this.uri = uri;
        this.edits = Array.isArray(edits) ? edits : [edits];
    }
}
class ChatRequestTurn {
    constructor(prompt, command, references, participant) {
        this.prompt = prompt;
        this.command = command;
        this.references = references;
        this.participant = participant;
    }
}
class ChatResponseTurn {
    constructor(response, result, participant, command) {
        this.response = response;
        this.result = result;
        this.participant = participant;
        this.command = command;
    }
}
var ChatLocation;
( (function(ChatLocation) {
    ChatLocation[ChatLocation["Panel"] = 1] = "Panel";
    ChatLocation[ChatLocation["Terminal"] = 2] = "Terminal";
    ChatLocation[ChatLocation["Notebook"] = 3] = "Notebook";
    ChatLocation[ChatLocation["Editor"] = 4] = "Editor";
})(ChatLocation || (ChatLocation = {})));
var LanguageModelChatMessageRole;
( (function(LanguageModelChatMessageRole) {
    LanguageModelChatMessageRole[LanguageModelChatMessageRole["User"] = 1] = "User";
    LanguageModelChatMessageRole[LanguageModelChatMessageRole["Assistant"] = 2] = "Assistant";
    LanguageModelChatMessageRole[LanguageModelChatMessageRole["System"] = 3] = "System";
})(LanguageModelChatMessageRole || (LanguageModelChatMessageRole = {})));
class LanguageModelFunctionResultPart {
    constructor(name, content, isError) {
        this.name = name;
        this.content = content;
        this.isError = isError ?? false;
    }
}
class LanguageModelChatMessage {
    static User(content, name) {
        const value = ( new LanguageModelChatMessage(
            LanguageModelChatMessageRole.User,
            typeof content === 'string' ? content : '',
            name
        ));
        value.content2 = content;
        return value;
    }
    static Assistant(content, name) {
        return ( new LanguageModelChatMessage(LanguageModelChatMessageRole.Assistant, content, name));
    }
    constructor(role, content, name) {
        this.role = role;
        this.content = content;
        this.content2 = content;
        this.name = name;
    }
}
class LanguageModelFunctionUsePart {
    constructor(name, parameters) {
        this.name = name;
        this.parameters = parameters;
    }
}
class LanguageModelTextPart {
    constructor(value) {
        this.value = value;
    }
}
class LanguageModelChatSystemMessage {
    constructor(content) {
        this.content = content;
    }
}
class LanguageModelChatUserMessage {
    constructor(content, name) {
        this.content = content;
        this.name = name;
    }
}
class LanguageModelChatAssistantMessage {
    constructor(content, name) {
        this.content = content;
        this.name = name;
    }
}
class LanguageModelError extends Error {
    static NotFound(message) {
        return ( new LanguageModelError(message, LanguageModelError.NotFound.name));
    }
    static NoPermissions(message) {
        return ( new LanguageModelError(message, LanguageModelError.NoPermissions.name));
    }
    static Blocked(message) {
        return ( new LanguageModelError(message, LanguageModelError.Blocked.name));
    }
    constructor(message, code, cause) {
        super(message, { cause });
        this.name = 'LanguageModelError';
        this.code = code ?? '';
    }
}
var RelatedInformationType;
( (function(RelatedInformationType) {
    RelatedInformationType[RelatedInformationType["SymbolInformation"] = 1] = "SymbolInformation";
    RelatedInformationType[RelatedInformationType["CommandInformation"] = 2] = "CommandInformation";
    RelatedInformationType[RelatedInformationType["SearchInformation"] = 3] = "SearchInformation";
    RelatedInformationType[RelatedInformationType["SettingInformation"] = 4] = "SettingInformation";
})(RelatedInformationType || (RelatedInformationType = {})));
var SpeechToTextStatus;
( (function(SpeechToTextStatus) {
    SpeechToTextStatus[SpeechToTextStatus["Started"] = 1] = "Started";
    SpeechToTextStatus[SpeechToTextStatus["Recognizing"] = 2] = "Recognizing";
    SpeechToTextStatus[SpeechToTextStatus["Recognized"] = 3] = "Recognized";
    SpeechToTextStatus[SpeechToTextStatus["Stopped"] = 4] = "Stopped";
    SpeechToTextStatus[SpeechToTextStatus["Error"] = 5] = "Error";
})(SpeechToTextStatus || (SpeechToTextStatus = {})));
var TextToSpeechStatus;
( (function(TextToSpeechStatus) {
    TextToSpeechStatus[TextToSpeechStatus["Started"] = 1] = "Started";
    TextToSpeechStatus[TextToSpeechStatus["Stopped"] = 2] = "Stopped";
    TextToSpeechStatus[TextToSpeechStatus["Error"] = 3] = "Error";
})(TextToSpeechStatus || (TextToSpeechStatus = {})));
var KeywordRecognitionStatus;
( (function(KeywordRecognitionStatus) {
    KeywordRecognitionStatus[KeywordRecognitionStatus["Recognized"] = 1] = "Recognized";
    KeywordRecognitionStatus[KeywordRecognitionStatus["Stopped"] = 2] = "Stopped";
})(KeywordRecognitionStatus || (KeywordRecognitionStatus = {})));
class InlineEdit {
    constructor(text, range) {
        this.text = text;
        this.range = range;
    }
}
var InlineEditTriggerKind;
( (function(InlineEditTriggerKind) {
    InlineEditTriggerKind[InlineEditTriggerKind["Invoke"] = 0] = "Invoke";
    InlineEditTriggerKind[InlineEditTriggerKind["Automatic"] = 1] = "Automatic";
})(InlineEditTriggerKind || (InlineEditTriggerKind = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriOpener.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriOpener.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostUriOpeners: () => (/* binding */ ExtHostUriOpeners)
/* harmony export */ });
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");




class ExtHostUriOpeners {
    static { this.supportedSchemes = ( new Set([_base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.http, _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.https])); }
    constructor(mainContext) {
        this._openers = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadUriOpeners));
    }
    registerExternalUriOpener(extensionId, id, opener, metadata) {
        if (( this._openers.has(id))) {
            throw ( new Error(`Opener with id '${id}' already registered`));
        }
        const invalidScheme = metadata.schemes.find(scheme => !( ExtHostUriOpeners.supportedSchemes.has(scheme)));
        if (invalidScheme) {
            throw ( new Error(
                `Scheme '${invalidScheme}' is not supported. Only http and https are currently supported.`
            ));
        }
        this._openers.set(id, opener);
        this._proxy.$registerUriOpener(id, metadata.schemes, extensionId, metadata.label);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__.toDisposable)(() => {
            this._openers.delete(id);
            this._proxy.$unregisterUriOpener(id);
        });
    }
    async $canOpenUri(id, uriComponents, token) {
        const opener = this._openers.get(id);
        if (!opener) {
            throw ( new Error(`Unknown opener with id: ${id}`));
        }
        const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(uriComponents);
        return opener.canOpenExternalUri(uri, token);
    }
    async $openUri(id, context, token) {
        const opener = this._openers.get(id);
        if (!opener) {
            throw ( new Error(`Unknown opener id: '${id}'`));
        }
        return opener.openExternalUri(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(context.resolvedUri), {
            sourceUri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(context.sourceUri)
        }, token);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriTransformerService.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriTransformerService.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IURITransformerService: () => (/* binding */ IURITransformerService),
/* harmony export */   URITransformerService: () => (/* binding */ URITransformerService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IURITransformerService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('IURITransformerService'));
class URITransformerService {
    constructor(delegate) {
        if (!delegate) {
            this.transformIncoming = arg => arg;
            this.transformOutgoing = arg => arg;
            this.transformOutgoingURI = arg => arg;
            this.transformOutgoingScheme = arg => arg;
        }
        else {
            this.transformIncoming = delegate.transformIncoming.bind(delegate);
            this.transformOutgoing = delegate.transformOutgoing.bind(delegate);
            this.transformOutgoingURI = delegate.transformOutgoingURI.bind(delegate);
            this.transformOutgoingScheme = delegate.transformOutgoingScheme.bind(delegate);
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUrls.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUrls.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostUrls: () => (/* binding */ ExtHostUrls)
/* harmony export */ });
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");





class ExtHostUrls {
    static { this.HandlePool = 0; }
    constructor(mainContext) {
        this.handles = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifierSet());
        this.handlers = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_0__.MainContext.MainThreadUrls));
    }
    registerUriHandler(extension, handler) {
        const extensionId = extension.identifier;
        if (( this.handles.has(extensionId))) {
            throw ( new Error(`Protocol handler already registered for extension ${extensionId}`));
        }
        const handle = ExtHostUrls.HandlePool++;
        this.handles.add(extensionId);
        this.handlers.set(handle, handler);
        this._proxy.$registerUriHandler(handle, extensionId, extension.displayName || extension.name);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {
            this.handles.delete(extensionId);
            this.handlers.delete(handle);
            this._proxy.$unregisterUriHandler(handle);
        });
    }
    $handleExternalUri(handle, uri) {
        const handler = this.handlers.get(handle);
        if (!handler) {
            return Promise.resolve(undefined);
        }
        try {
            handler.handleUri(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uri));
        }
        catch (err) {
            (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__.onUnexpectedError)(err);
        }
        return Promise.resolve(undefined);
    }
    async createAppUri(uri) {
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(await this._proxy.$createAppUri(uri));
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostVariableResolverService.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostVariableResolverService.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostVariableResolverProviderService: () => (/* binding */ ExtHostVariableResolverProviderService),
/* harmony export */   IExtHostVariableResolverProvider: () => (/* binding */ IExtHostVariableResolverProvider)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lazy.js */ "./node_modules/vscode/vscode/src/vs/base/common/lazy.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_process_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/process.js */ "./node_modules/vscode/vscode/src/vs/base/common/process.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostDocumentsAndEditors.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostDocumentsAndEditors.js");
/* harmony import */ var _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostEditorTabs.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostEditorTabs.js");
/* harmony import */ var _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostWorkspace.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js");
/* harmony import */ var _services_configurationResolver_common_variableResolver_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../services/configurationResolver/common/variableResolver.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/configurationResolver/common/variableResolver.js");
/* harmony import */ var _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostConfiguration.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConfiguration.js");













const IExtHostVariableResolverProvider = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__.createDecorator)('IExtHostVariableResolverProvider'));
class ExtHostVariableResolverService extends _services_configurationResolver_common_variableResolver_js__WEBPACK_IMPORTED_MODULE_11__.AbstractVariableResolverService {
    constructor(extensionService, workspaceService, editorService, editorTabs, configProvider, context, homeDir) {
        function getActiveUri() {
            if (editorService) {
                const activeEditor = editorService.activeEditor();
                if (activeEditor) {
                    return activeEditor.document.uri;
                }
                const activeTab = editorTabs.tabGroups.all.find(group => group.isActive)?.activeTab;
                if (activeTab !== undefined) {
                    if (activeTab.input instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TextDiffTabInput || activeTab.input instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.NotebookDiffEditorTabInput) {
                        return activeTab.input.modified;
                    }
                    else if (activeTab.input instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.TextTabInput || activeTab.input instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.NotebookEditorTabInput || activeTab.input instanceof _extHostTypes_js__WEBPACK_IMPORTED_MODULE_9__.CustomEditorTabInput) {
                        return activeTab.input.uri;
                    }
                }
            }
            return undefined;
        }
        super({
            getFolderUri: (folderName) => {
                const found = context.folders.filter(f => f.name === folderName);
                if (found && found.length > 0) {
                    return found[0].uri;
                }
                return undefined;
            },
            getWorkspaceFolderCount: () => {
                return context.folders.length;
            },
            getConfigurationValue: (folderUri, section) => {
                return configProvider.getConfiguration(undefined, folderUri).get(section);
            },
            getAppRoot: () => {
                return (0,_base_common_process_js__WEBPACK_IMPORTED_MODULE_4__.cwd)();
            },
            getExecPath: () => {
                return _base_common_process_js__WEBPACK_IMPORTED_MODULE_4__.env['VSCODE_EXEC_PATH'];
            },
            getFilePath: () => {
                const activeUri = getActiveUri();
                if (activeUri) {
                    return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(activeUri.fsPath);
                }
                return undefined;
            },
            getWorkspaceFolderPathForFile: () => {
                if (workspaceService) {
                    const activeUri = getActiveUri();
                    if (activeUri) {
                        const ws = workspaceService.getWorkspaceFolder(activeUri);
                        if (ws) {
                            return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_3__.normalize)(ws.uri.fsPath);
                        }
                    }
                }
                return undefined;
            },
            getSelectedText: () => {
                if (editorService) {
                    const activeEditor = editorService.activeEditor();
                    if (activeEditor && !activeEditor.selection.isEmpty) {
                        return activeEditor.document.getText(activeEditor.selection);
                    }
                }
                return undefined;
            },
            getLineNumber: () => {
                if (editorService) {
                    const activeEditor = editorService.activeEditor();
                    if (activeEditor) {
                        return String(activeEditor.selection.end.line + 1);
                    }
                }
                return undefined;
            },
            getExtension: (id) => {
                return extensionService.getExtension(id);
            },
        }, undefined, homeDir ? Promise.resolve(homeDir) : undefined, Promise.resolve(_base_common_process_js__WEBPACK_IMPORTED_MODULE_4__.env));
    }
}
let ExtHostVariableResolverProviderService = class ExtHostVariableResolverProviderService extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor(extensionService, workspaceService, editorService, configurationService, editorTabs) {
        super();
        this.extensionService = extensionService;
        this.workspaceService = workspaceService;
        this.editorService = editorService;
        this.configurationService = configurationService;
        this.editorTabs = editorTabs;
        this._resolver = ( new _base_common_lazy_js__WEBPACK_IMPORTED_MODULE_1__.Lazy(async () => {
            const configProvider = await this.configurationService.getConfigProvider();
            const folders = (await this.workspaceService.getWorkspaceFolders2()) || [];
            const dynamic = { folders };
            this._register(this.workspaceService.onDidChangeWorkspace(async (e) => {
                dynamic.folders = (await this.workspaceService.getWorkspaceFolders2()) || [];
            }));
            return ( new ExtHostVariableResolverService(
                this.extensionService,
                this.workspaceService,
                this.editorService,
                this.editorTabs,
                configProvider,
                dynamic,
                this.homeDir()
            ));
        }));
    }
    getResolver() {
        return this._resolver.value;
    }
    homeDir() {
        return undefined;
    }
};
ExtHostVariableResolverProviderService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostExtensionService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostWorkspace_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostWorkspace)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostDocumentsAndEditors_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostDocumentsAndEditors)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _extHostConfiguration_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostConfiguration)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostEditorTabs_js__WEBPACK_IMPORTED_MODULE_7__.IExtHostEditorTabs))
], ExtHostVariableResolverProviderService));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebview.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebview.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostWebview: () => (/* binding */ ExtHostWebview),
/* harmony export */   ExtHostWebviews: () => (/* binding */ ExtHostWebviews),
/* harmony export */   serializeWebviewOptions: () => (/* binding */ serializeWebviewOptions),
/* harmony export */   shouldSerializeBuffersForPostMessage: () => (/* binding */ shouldSerializeBuffersForPostMessage),
/* harmony export */   toExtensionData: () => (/* binding */ toExtensionData)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_extensions_common_extensionValidator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/extensions/common/extensionValidator.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensionValidator.js");
/* harmony import */ var _extHostWebviewMessaging_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostWebviewMessaging.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewMessaging.js");
/* harmony import */ var _contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../contrib/webview/common/webview.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/webview/common/webview.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");









class ExtHostWebview {
    #handle;
    #proxy;
    #deprecationService;
    #remoteInfo;
    #workspace;
    #extension;
    #html;
    #options;
    #isDisposed;
    #hasCalledAsWebviewUri;
    #serializeBuffersForPostMessage;
    #shouldRewriteOldResourceUris;
    constructor(handle, proxy, options, remoteInfo, workspace, extension, deprecationService) {
        this.#html = '';
        this.#isDisposed = false;
        this.#hasCalledAsWebviewUri = false;
         this._onMessageEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidReceiveMessage = this._onMessageEmitter.event;
        this.#onDidDisposeEmitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
         this._onDidDispose = this.#onDidDisposeEmitter.event;
        this.#handle = handle;
        this.#proxy = proxy;
        this.#options = options;
        this.#remoteInfo = remoteInfo;
        this.#workspace = workspace;
        this.#extension = extension;
        this.#serializeBuffersForPostMessage = shouldSerializeBuffersForPostMessage(extension);
        this.#shouldRewriteOldResourceUris = shouldTryRewritingOldResourceUris(extension);
        this.#deprecationService = deprecationService;
    }
    #onDidDisposeEmitter;
    dispose() {
        this.#isDisposed = true;
        this.#onDidDisposeEmitter.fire();
        this.#onDidDisposeEmitter.dispose();
        this._onMessageEmitter.dispose();
    }
    asWebviewUri(resource) {
        this.#hasCalledAsWebviewUri = true;
        return (0,_contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_7__.asWebviewUri)(resource, this.#remoteInfo);
    }
    get cspSource() {
        const extensionLocation = this.#extension.extensionLocation;
        if (extensionLocation.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.https || extensionLocation.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.http) {
            let extensionCspRule = ( extensionLocation.toString());
            if (!extensionCspRule.endsWith('/')) {
                extensionCspRule += '/';
            }
            return extensionCspRule + ' ' + _contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_7__.webviewGenericCspSource;
        }
        return _contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_7__.webviewGenericCspSource;
    }
    get html() {
        this.assertNotDisposed();
        return this.#html;
    }
    set html(value) {
        this.assertNotDisposed();
        if (this.#html !== value) {
            this.#html = value;
            if (this.#shouldRewriteOldResourceUris && !this.#hasCalledAsWebviewUri && /(["'])vscode-resource:([^\s'"]+?)(["'])/i.test(value)) {
                this.#hasCalledAsWebviewUri = true;
                this.#deprecationService.report('Webview vscode-resource: uris', this.#extension, `Please migrate to use the 'webview.asWebviewUri' api instead: https://aka.ms/vscode-webview-use-aswebviewuri`);
            }
            this.#proxy.$setHtml(this.#handle, this.rewriteOldResourceUrlsIfNeeded(value));
        }
    }
    get options() {
        this.assertNotDisposed();
        return this.#options;
    }
    set options(newOptions) {
        this.assertNotDisposed();
        if (!(0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__.equals)(this.#options, newOptions)) {
            this.#proxy.$setOptions(this.#handle, serializeWebviewOptions(this.#extension, this.#workspace, newOptions));
        }
        this.#options = newOptions;
    }
    async postMessage(message) {
        if (this.#isDisposed) {
            return false;
        }
        const serialized = (0,_extHostWebviewMessaging_js__WEBPACK_IMPORTED_MODULE_6__.serializeWebviewMessage)(message, { serializeBuffersForPostMessage: this.#serializeBuffersForPostMessage });
        return this.#proxy.$postMessage(this.#handle, serialized.message, ...serialized.buffers);
    }
    assertNotDisposed() {
        if (this.#isDisposed) {
            throw ( new Error('Webview is disposed'));
        }
    }
    rewriteOldResourceUrlsIfNeeded(value) {
        if (!this.#shouldRewriteOldResourceUris) {
            return value;
        }
        const isRemote = this.#extension.extensionLocation?.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.vscodeRemote;
        const remoteAuthority = this.#extension.extensionLocation.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.vscodeRemote ? this.#extension.extensionLocation.authority : undefined;
        return value
            .replace(/(["'])(?:vscode-resource):(\/\/([^\s\/'"]+?)(?=\/))?([^\s'"]+?)(["'])/gi, (_match, startQuote, _1, scheme, path, endQuote) => {
            const uri = ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.from({
                scheme: scheme || 'file',
                path: decodeURIComponent(path),
            }));
            const webviewUri = ( (0,_contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_7__.asWebviewUri)(uri, { isRemote, authority: remoteAuthority }).toString());
            return `${startQuote}${webviewUri}${endQuote}`;
        })
            .replace(/(["'])(?:vscode-webview-resource):(\/\/[^\s\/'"]+\/([^\s\/'"]+?)(?=\/))?([^\s'"]+?)(["'])/gi, (_match, startQuote, _1, scheme, path, endQuote) => {
            const uri = ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.from({
                scheme: scheme || 'file',
                path: decodeURIComponent(path),
            }));
            const webviewUri = ( (0,_contrib_webview_common_webview_js__WEBPACK_IMPORTED_MODULE_7__.asWebviewUri)(uri, { isRemote, authority: remoteAuthority }).toString());
            return `${startQuote}${webviewUri}${endQuote}`;
        });
    }
}
function shouldSerializeBuffersForPostMessage(extension) {
    try {
        const version = (0,_platform_extensions_common_extensionValidator_js__WEBPACK_IMPORTED_MODULE_5__.normalizeVersion)((0,_platform_extensions_common_extensionValidator_js__WEBPACK_IMPORTED_MODULE_5__.parseVersion)(extension.engines.vscode));
        return !!version && version.majorBase >= 1 && version.minorBase >= 57;
    }
    catch {
        return false;
    }
}
function shouldTryRewritingOldResourceUris(extension) {
    try {
        const version = (0,_platform_extensions_common_extensionValidator_js__WEBPACK_IMPORTED_MODULE_5__.normalizeVersion)((0,_platform_extensions_common_extensionValidator_js__WEBPACK_IMPORTED_MODULE_5__.parseVersion)(extension.engines.vscode));
        if (!version) {
            return false;
        }
        return version.majorBase < 1 || (version.majorBase === 1 && version.minorBase < 60);
    }
    catch {
        return false;
    }
}
class ExtHostWebviews extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    constructor(mainContext, remoteInfo, workspace, _logService, _deprecationService) {
        super();
        this.remoteInfo = remoteInfo;
        this.workspace = workspace;
        this._logService = _logService;
        this._deprecationService = _deprecationService;
        this._webviews = ( new Map());
        this._webviewProxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_8__.MainContext.MainThreadWebviews));
    }
    dispose() {
        super.dispose();
        for (const webview of ( this._webviews.values())) {
            webview.dispose();
        }
        this._webviews.clear();
    }
    $onMessage(handle, jsonMessage, buffers) {
        const webview = this.getWebview(handle);
        if (webview) {
            const { message } = (0,_extHostWebviewMessaging_js__WEBPACK_IMPORTED_MODULE_6__.deserializeWebviewMessage)(jsonMessage, buffers.value);
            webview._onMessageEmitter.fire(message);
        }
    }
    $onMissingCsp(_handle, extensionId) {
        this._logService.warn(`${extensionId} created a webview without a content security policy: https://aka.ms/vscode-webview-missing-csp`);
    }
    createNewWebview(handle, options, extension) {
        const webview = ( new ExtHostWebview(
            handle,
            this._webviewProxy,
            reviveOptions(options),
            this.remoteInfo,
            this.workspace,
            extension,
            this._deprecationService
        ));
        this._webviews.set(handle, webview);
        const sub = webview._onDidDispose(() => {
            sub.dispose();
            this.deleteWebview(handle);
        });
        return webview;
    }
    deleteWebview(handle) {
        this._webviews.delete(handle);
    }
    getWebview(handle) {
        return this._webviews.get(handle);
    }
}
function toExtensionData(extension) {
    return { id: extension.identifier, location: extension.extensionLocation };
}
function serializeWebviewOptions(extension, workspace, options) {
    return {
        enableCommandUris: options.enableCommandUris,
        enableScripts: options.enableScripts,
        enableForms: options.enableForms,
        portMapping: options.portMapping,
        localResourceRoots: options.localResourceRoots || getDefaultLocalResourceRoots(extension, workspace)
    };
}
function reviveOptions(options) {
    return {
        enableCommandUris: options.enableCommandUris,
        enableScripts: options.enableScripts,
        enableForms: options.enableForms,
        portMapping: options.portMapping,
        localResourceRoots: options.localResourceRoots?.map(components => ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.from(components))),
    };
}
function getDefaultLocalResourceRoots(extension, workspace) {
    return [
        ...( (workspace?.getWorkspaceFolders() || []).map(x => x.uri)),
        extension.extensionLocation,
    ];
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewMessaging.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewMessaging.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deserializeWebviewMessage: () => (/* binding */ deserializeWebviewMessage),
/* harmony export */   serializeWebviewMessage: () => (/* binding */ serializeWebviewMessage)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");


class ArrayBufferSet {
    constructor() {
        this.buffers = [];
    }
    add(buffer) {
        let index = this.buffers.indexOf(buffer);
        if (index < 0) {
            index = this.buffers.length;
            this.buffers.push(buffer);
        }
        return index;
    }
}
function serializeWebviewMessage(message, options) {
    if (options.serializeBuffersForPostMessage) {
        const arrayBuffers = ( new ArrayBufferSet());
        const replacer = (_key, value) => {
            if (value instanceof ArrayBuffer) {
                const index = arrayBuffers.add(value);
                return {
                    $$vscode_array_buffer_reference$$: true,
                    index,
                };
            }
            else if (ArrayBuffer.isView(value)) {
                const type = getTypedArrayType(value);
                if (type) {
                    const index = arrayBuffers.add(value.buffer);
                    return {
                        $$vscode_array_buffer_reference$$: true,
                        index,
                        view: {
                            type: type,
                            byteLength: value.byteLength,
                            byteOffset: value.byteOffset,
                        }
                    };
                }
            }
            return value;
        };
        const serializedMessage = JSON.stringify(message, replacer);
        const buffers = ( arrayBuffers.buffers.map(arrayBuffer => {
            const bytes = ( new Uint8Array(arrayBuffer));
            return _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.wrap(bytes);
        }));
        return { message: serializedMessage, buffers };
    }
    else {
        return { message: JSON.stringify(message), buffers: [] };
    }
}
function getTypedArrayType(value) {
    switch (value.constructor.name) {
        case 'Int8Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Int8Array;
        case 'Uint8Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint8Array;
        case 'Uint8ClampedArray': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint8ClampedArray;
        case 'Int16Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Int16Array;
        case 'Uint16Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint16Array;
        case 'Int32Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Int32Array;
        case 'Uint32Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint32Array;
        case 'Float32Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Float32Array;
        case 'Float64Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Float64Array;
        case 'BigInt64Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.BigInt64Array;
        case 'BigUint64Array': return _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.BigUint64Array;
    }
    return undefined;
}
function deserializeWebviewMessage(jsonMessage, buffers) {
    const arrayBuffers = ( buffers.map(buffer => {
        const arrayBuffer = ( new ArrayBuffer(buffer.byteLength));
        const uint8Array = ( new Uint8Array(arrayBuffer));
        uint8Array.set(buffer.buffer);
        return arrayBuffer;
    }));
    const reviver = !buffers.length ? undefined : (_key, value) => {
        if (value && typeof value === 'object' && value.$$vscode_array_buffer_reference$$) {
            const ref = value;
            const { index } = ref;
            const arrayBuffer = arrayBuffers[index];
            if (ref.view) {
                switch (ref.view.type) {
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Int8Array: return ( new Int8Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Int8Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint8Array: return ( new Uint8Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Uint8Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint8ClampedArray: return ( new Uint8ClampedArray(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Uint8ClampedArray.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Int16Array: return ( new Int16Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Int16Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint16Array: return ( new Uint16Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Uint16Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Int32Array: return ( new Int32Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Int32Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Uint32Array: return ( new Uint32Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Uint32Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Float32Array: return ( new Float32Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Float32Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.Float64Array: return ( new Float64Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / Float64Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.BigInt64Array: return ( new BigInt64Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / BigInt64Array.BYTES_PER_ELEMENT
                    ));
                    case _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_1__.WebviewMessageArrayBufferViewType.BigUint64Array: return ( new BigUint64Array(
                        arrayBuffer,
                        ref.view.byteOffset,
                        ref.view.byteLength / BigUint64Array.BYTES_PER_ELEMENT
                    ));
                    default: throw ( new Error('Unknown array buffer view type'));
                }
            }
            return arrayBuffer;
        }
        return value;
    };
    const message = JSON.parse(jsonMessage, reviver);
    return { message, arrayBuffers };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewPanels.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewPanels.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostWebviewPanels: () => (/* binding */ ExtHostWebviewPanels)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_uuid_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/uuid.js */ "./node_modules/vscode/vscode/src/vs/base/common/uuid.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostWebview_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostWebview.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebview.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");








class ExtHostWebviewPanel extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    #handle;
    #proxy;
    #viewType;
    #webview;
    #options;
    #title;
    #iconPath;
    #viewColumn;
    #visible;
    #active;
    #isDisposed;
    #onDidDispose;
    #onDidChangeViewState;
    constructor(handle, proxy, webview, params) {
        super();
        this.#viewColumn = undefined;
        this.#visible = true;
        this.#isDisposed = false;
        this.#onDidDispose = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this.onDidDispose = this.#onDidDispose.event;
        this.#onDidChangeViewState = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this.onDidChangeViewState = this.#onDidChangeViewState.event;
        this.#handle = handle;
        this.#proxy = proxy;
        this.#webview = webview;
        this.#viewType = params.viewType;
        this.#options = params.panelOptions;
        this.#viewColumn = params.viewColumn;
        this.#title = params.title;
        this.#active = params.active;
    }
    dispose() {
        if (this.#isDisposed) {
            return;
        }
        this.#isDisposed = true;
        this.#onDidDispose.fire();
        this.#proxy.$disposeWebview(this.#handle);
        this.#webview.dispose();
        super.dispose();
    }
    get webview() {
        this.assertNotDisposed();
        return this.#webview;
    }
    get viewType() {
        this.assertNotDisposed();
        return this.#viewType;
    }
    get title() {
        this.assertNotDisposed();
        return this.#title;
    }
    set title(value) {
        this.assertNotDisposed();
        if (this.#title !== value) {
            this.#title = value;
            this.#proxy.$setTitle(this.#handle, value);
        }
    }
    get iconPath() {
        this.assertNotDisposed();
        return this.#iconPath;
    }
    set iconPath(value) {
        this.assertNotDisposed();
        if (this.#iconPath !== value) {
            this.#iconPath = value;
            this.#proxy.$setIconPath(this.#handle, _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(value) ? { light: value, dark: value } : value);
        }
    }
    get options() {
        return this.#options;
    }
    get viewColumn() {
        this.assertNotDisposed();
        if (typeof this.#viewColumn === 'number' && this.#viewColumn < 0) {
            return undefined;
        }
        return this.#viewColumn;
    }
    get active() {
        this.assertNotDisposed();
        return this.#active;
    }
    get visible() {
        this.assertNotDisposed();
        return this.#visible;
    }
    _updateViewState(newState) {
        if (this.#isDisposed) {
            return;
        }
        if (this.active !== newState.active || this.visible !== newState.visible || this.viewColumn !== newState.viewColumn) {
            this.#active = newState.active;
            this.#visible = newState.visible;
            this.#viewColumn = newState.viewColumn;
            this.#onDidChangeViewState.fire({ webviewPanel: this });
        }
    }
    reveal(viewColumn, preserveFocus) {
        this.assertNotDisposed();
        this.#proxy.$reveal(this.#handle, {
            viewColumn: typeof viewColumn === 'undefined' ? undefined : _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.ViewColumn.from(viewColumn),
            preserveFocus: !!preserveFocus
        });
    }
    assertNotDisposed() {
        if (this.#isDisposed) {
            throw ( new Error('Webview is disposed'));
        }
    }
}
class ExtHostWebviewPanels extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    static newHandle() {
        return (0,_base_common_uuid_js__WEBPACK_IMPORTED_MODULE_3__.generateUuid)();
    }
    constructor(mainContext, webviews, workspace) {
        super();
        this.webviews = webviews;
        this.workspace = workspace;
        this._webviewPanels = ( new Map());
        this._serializers = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_6__.MainContext.MainThreadWebviewPanels));
    }
    dispose() {
        super.dispose();
        this._webviewPanels.forEach(value => value.dispose());
        this._webviewPanels.clear();
    }
    createWebviewPanel(extension, viewType, title, showOptions, options = {}) {
        const viewColumn = typeof showOptions === 'object' ? showOptions.viewColumn : showOptions;
        const webviewShowOptions = {
            viewColumn: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.ViewColumn.from(viewColumn),
            preserveFocus: typeof showOptions === 'object' && !!showOptions.preserveFocus
        };
        const serializeBuffersForPostMessage = (0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_5__.shouldSerializeBuffersForPostMessage)(extension);
        const handle = ExtHostWebviewPanels.newHandle();
        this._proxy.$createWebviewPanel((0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_5__.toExtensionData)(extension), handle, viewType, {
            title,
            panelOptions: serializeWebviewPanelOptions(options),
            webviewOptions: (0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_5__.serializeWebviewOptions)(extension, this.workspace, options),
            serializeBuffersForPostMessage,
        }, webviewShowOptions);
        const webview = this.webviews.createNewWebview(handle, options, extension);
        const panel = this.createNewWebviewPanel(handle, viewType, title, viewColumn, options, webview, true);
        return panel;
    }
    $onDidChangeWebviewPanelViewStates(newStates) {
        const handles = ( Object.keys(newStates));
        handles.sort((a, b) => {
            const stateA = newStates[a];
            const stateB = newStates[b];
            if (stateA.active) {
                return 1;
            }
            if (stateB.active) {
                return -1;
            }
            return (+stateA.visible) - (+stateB.visible);
        });
        for (const handle of handles) {
            const panel = this.getWebviewPanel(handle);
            if (!panel) {
                continue;
            }
            const newState = newStates[handle];
            panel._updateViewState({
                active: newState.active,
                visible: newState.visible,
                viewColumn: _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_4__.ViewColumn.to(newState.position),
            });
        }
    }
    async $onDidDisposeWebviewPanel(handle) {
        const panel = this.getWebviewPanel(handle);
        panel?.dispose();
        this._webviewPanels.delete(handle);
        this.webviews.deleteWebview(handle);
    }
    registerWebviewPanelSerializer(extension, viewType, serializer) {
        if (( this._serializers.has(viewType))) {
            throw ( new Error(`Serializer for '${viewType}' already registered`));
        }
        this._serializers.set(viewType, { serializer, extension });
        this._proxy.$registerSerializer(viewType, {
            serializeBuffersForPostMessage: (0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_5__.shouldSerializeBuffersForPostMessage)(extension)
        });
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_7__.Disposable(() => {
            this._serializers.delete(viewType);
            this._proxy.$unregisterSerializer(viewType);
        });
    }
    async $deserializeWebviewPanel(webviewHandle, viewType, initData, position) {
        const entry = this._serializers.get(viewType);
        if (!entry) {
            throw ( new Error(`No serializer found for '${viewType}'`));
        }
        const { serializer, extension } = entry;
        const webview = this.webviews.createNewWebview(webviewHandle, initData.webviewOptions, extension);
        const revivedPanel = this.createNewWebviewPanel(webviewHandle, viewType, initData.title, position, initData.panelOptions, webview, initData.active);
        await serializer.deserializeWebviewPanel(revivedPanel, initData.state);
    }
    createNewWebviewPanel(webviewHandle, viewType, title, position, options, webview, active) {
        const panel = ( new ExtHostWebviewPanel(
            webviewHandle,
            this._proxy,
            webview,
            { viewType, title, viewColumn: position, panelOptions: options, active }
        ));
        this._webviewPanels.set(webviewHandle, panel);
        return panel;
    }
    getWebviewPanel(handle) {
        return this._webviewPanels.get(handle);
    }
}
function serializeWebviewPanelOptions(options) {
    return {
        enableFindWidget: options.enableFindWidget,
        retainContextWhenHidden: options.retainContextWhenHidden,
    };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewView.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebviewView.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostWebviewViews: () => (/* binding */ ExtHostWebviewViews)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _extHostWebview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extHostWebview.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWebview.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");






class ExtHostWebviewView extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_1__.Disposable {
    #handle;
    #proxy;
    #viewType;
    #webview;
    #isDisposed;
    #isVisible;
    #title;
    #description;
    #badge;
    constructor(handle, proxy, viewType, title, webview, isVisible) {
        super();
        this.#isDisposed = false;
        this.#onDidChangeVisibility = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this.onDidChangeVisibility = this.#onDidChangeVisibility.event;
        this.#onDidDispose = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this.onDidDispose = this.#onDidDispose.event;
        this.#viewType = viewType;
        this.#title = title;
        this.#handle = handle;
        this.#proxy = proxy;
        this.#webview = webview;
        this.#isVisible = isVisible;
    }
    dispose() {
        if (this.#isDisposed) {
            return;
        }
        this.#isDisposed = true;
        this.#onDidDispose.fire();
        this.#webview.dispose();
        super.dispose();
    }
    #onDidChangeVisibility;
    #onDidDispose;
    get title() {
        this.assertNotDisposed();
        return this.#title;
    }
    set title(value) {
        this.assertNotDisposed();
        if (this.#title !== value) {
            this.#title = value;
            this.#proxy.$setWebviewViewTitle(this.#handle, value);
        }
    }
    get description() {
        this.assertNotDisposed();
        return this.#description;
    }
    set description(value) {
        this.assertNotDisposed();
        if (this.#description !== value) {
            this.#description = value;
            this.#proxy.$setWebviewViewDescription(this.#handle, value);
        }
    }
    get visible() { return this.#isVisible; }
    get webview() { return this.#webview; }
    get viewType() { return this.#viewType; }
     _setVisible(visible) {
        if (visible === this.#isVisible || this.#isDisposed) {
            return;
        }
        this.#isVisible = visible;
        this.#onDidChangeVisibility.fire();
    }
    get badge() {
        this.assertNotDisposed();
        return this.#badge;
    }
    set badge(badge) {
        this.assertNotDisposed();
        if (badge?.value === this.#badge?.value &&
            badge?.tooltip === this.#badge?.tooltip) {
            return;
        }
        this.#badge = _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_3__.ViewBadge.from(badge);
        this.#proxy.$setWebviewViewBadge(this.#handle, badge);
    }
    show(preserveFocus) {
        this.assertNotDisposed();
        this.#proxy.$show(this.#handle, !!preserveFocus);
    }
    assertNotDisposed() {
        if (this.#isDisposed) {
            throw ( new Error('Webview is disposed'));
        }
    }
}
class ExtHostWebviewViews {
    constructor(mainContext, _extHostWebview) {
        this._extHostWebview = _extHostWebview;
        this._viewProviders = ( new Map());
        this._webviewViews = ( new Map());
        this._proxy = ( mainContext.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_4__.MainContext.MainThreadWebviewViews));
    }
    registerWebviewViewProvider(extension, viewType, provider, webviewOptions) {
        if (( this._viewProviders.has(viewType))) {
            throw ( new Error(`View provider for '${viewType}' already registered`));
        }
        this._viewProviders.set(viewType, { provider, extension });
        this._proxy.$registerWebviewViewProvider((0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_2__.toExtensionData)(extension), viewType, {
            retainContextWhenHidden: webviewOptions?.retainContextWhenHidden,
            serializeBuffersForPostMessage: (0,_extHostWebview_js__WEBPACK_IMPORTED_MODULE_2__.shouldSerializeBuffersForPostMessage)(extension),
        });
        return new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_5__.Disposable(() => {
            this._viewProviders.delete(viewType);
            this._proxy.$unregisterWebviewViewProvider(viewType);
        });
    }
    async $resolveWebviewView(webviewHandle, viewType, title, state, cancellation) {
        const entry = this._viewProviders.get(viewType);
        if (!entry) {
            throw ( new Error(`No view provider found for '${viewType}'`));
        }
        const { provider, extension } = entry;
        const webview = this._extHostWebview.createNewWebview(webviewHandle, { }, extension);
        const revivedView = ( new ExtHostWebviewView(webviewHandle, this._proxy, viewType, title, webview, true));
        this._webviewViews.set(webviewHandle, revivedView);
        await provider.resolveWebviewView(revivedView, { state }, cancellation);
    }
    async $onDidChangeWebviewViewVisibility(webviewHandle, visible) {
        const webviewView = this.getWebviewView(webviewHandle);
        webviewView._setVisible(visible);
    }
    async $disposeWebviewView(webviewHandle) {
        const webviewView = this.getWebviewView(webviewHandle);
        this._webviewViews.delete(webviewHandle);
        webviewView.dispose();
        this._extHostWebview.deleteWebview(webviewHandle);
    }
    getWebviewView(handle) {
        const entry = this._webviewViews.get(handle);
        if (!entry) {
            throw ( new Error('No webview found'));
        }
        return entry;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWindow.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWindow.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostWindow: () => (/* binding */ ExtHostWindow),
/* harmony export */   IExtHostWindow: () => (/* binding */ IExtHostWindow)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");








var ExtHostWindow_1;
let ExtHostWindow = class ExtHostWindow {
    static { ExtHostWindow_1 = this; }
    static { this.InitialState = {
        focused: true,
        active: true,
    }; }
    getState() {
        const state = this._state;
        return {
            get focused() {
                return state.focused;
            },
            get active() {
                return state.active;
            },
        };
    }
    constructor(extHostRpc) {
        this._onDidChangeWindowState = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChangeWindowState = this._onDidChangeWindowState.event;
        this._state = ExtHostWindow_1.InitialState;
        this._proxy = ( extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_7__.MainContext.MainThreadWindow));
        this._proxy.$getInitialState().then(({ isFocused, isActive }) => {
            this.onDidChangeWindowProperty('focused', isFocused);
            this.onDidChangeWindowProperty('active', isActive);
        });
    }
    $onDidChangeWindowFocus(value) {
        this.onDidChangeWindowProperty('focused', value);
    }
    $onDidChangeWindowActive(value) {
        this.onDidChangeWindowProperty('active', value);
    }
    onDidChangeWindowProperty(property, value) {
        if (value === this._state[property]) {
            return;
        }
        this._state = { ...this._state, [property]: value };
        this._onDidChangeWindowState.fire(this._state);
    }
    openUri(stringOrUri, options) {
        let uriAsString;
        if (typeof stringOrUri === 'string') {
            uriAsString = stringOrUri;
            try {
                stringOrUri = ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.parse(stringOrUri));
            }
            catch (e) {
                return Promise.reject(`Invalid uri - '${stringOrUri}'`);
            }
        }
        if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.isFalsyOrWhitespace)(stringOrUri.scheme)) {
            return Promise.reject('Invalid scheme - cannot be empty');
        }
        else if (stringOrUri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.command) {
            return Promise.reject(`Invalid scheme '${stringOrUri.scheme}'`);
        }
        return this._proxy.$openUri(stringOrUri, uriAsString, options);
    }
    async asExternalUri(uri, options) {
        if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_3__.isFalsyOrWhitespace)(uri.scheme)) {
            return Promise.reject('Invalid scheme - cannot be empty');
        }
        const result = await this._proxy.$asExternalUri(uri, options);
        return ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_4__.URI.from(result));
    }
};
ExtHostWindow = ExtHostWindow_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_6__.IExtHostRpcService))
], ExtHostWindow));
const IExtHostWindow = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_5__.createDecorator)('IExtHostWindow'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js":
/*!************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostWorkspace.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostWorkspace: () => (/* binding */ ExtHostWorkspace),
/* harmony export */   IExtHostWorkspace: () => (/* binding */ IExtHostWorkspace)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/ternarySearchTree.js */ "./node_modules/vscode/vscode/src/vs/base/common/ternarySearchTree.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_numbers_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../base/common/numbers.js */ "./node_modules/vscode/vscode/src/vs/base/common/numbers.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_notification_common_notification_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../platform/notification/common/notification.js */ "./node_modules/vscode/vscode/src/vs/platform/notification/common/notification.js");
/* harmony import */ var _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../platform/workspace/common/workspace.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.js");
/* harmony import */ var _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./extHostFileSystemInfo.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostFileSystemInfo.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./extHostTypeConverters.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypeConverters.js");
/* harmony import */ var _extHostTypes_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./extHostUriTransformerService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriTransformerService.js");
/* harmony import */ var _services_search_common_search_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../../services/search/common/search.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../../../base/common/marshalling.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshalling.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");




























const _moduleId = "vs/workbench/api/common/extHostWorkspace";
function isFolderEqual(folderA, folderB, extHostFileSystemInfo) {
    return ( (new _base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__.ExtUri(uri => ignorePathCasing(uri, extHostFileSystemInfo)))).isEqual(folderA, folderB);
}
function compareWorkspaceFolderByUri(a, b, extHostFileSystemInfo) {
    return isFolderEqual(a.uri, b.uri, extHostFileSystemInfo) ? 0 : (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_10__.compare)(( (a.uri.toString())), ( (b.uri.toString())));
}
function compareWorkspaceFolderByUriAndNameAndIndex(a, b, extHostFileSystemInfo) {
    if (a.index !== b.index) {
        return a.index < b.index ? -1 : 1;
    }
    return isFolderEqual(a.uri, b.uri, extHostFileSystemInfo) ? (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_10__.compare)(a.name, b.name) : (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_10__.compare)(( (a.uri.toString())), ( (b.uri.toString())));
}
function delta(oldFolders, newFolders, compare, extHostFileSystemInfo) {
    const oldSortedFolders = oldFolders.slice(0).sort((a, b) => compare(a, b, extHostFileSystemInfo));
    const newSortedFolders = newFolders.slice(0).sort((a, b) => compare(a, b, extHostFileSystemInfo));
    return (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.delta)(oldSortedFolders, newSortedFolders, (a, b) => compare(a, b, extHostFileSystemInfo));
}
function ignorePathCasing(uri, extHostFileSystemInfo) {
    const capabilities = extHostFileSystemInfo.getCapabilities(uri.scheme);
    return !(capabilities && (capabilities & _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_13__.FileSystemProviderCapabilities.PathCaseSensitive));
}
class ExtHostWorkspaceImpl extends _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_17__.Workspace {
    static toExtHostWorkspace(data, previousConfirmedWorkspace, previousUnconfirmedWorkspace, extHostFileSystemInfo) {
        if (!data) {
            return { workspace: null, added: [], removed: [] };
        }
        const { id, name, folders, configuration, transient, isUntitled } = data;
        const newWorkspaceFolders = [];
        const oldWorkspace = previousConfirmedWorkspace;
        if (previousConfirmedWorkspace) {
            folders.forEach((folderData, index) => {
                const folderUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(folderData.uri);
                const existingFolder = ExtHostWorkspaceImpl._findFolder(previousUnconfirmedWorkspace || previousConfirmedWorkspace, folderUri, extHostFileSystemInfo);
                if (existingFolder) {
                    existingFolder.name = folderData.name;
                    existingFolder.index = folderData.index;
                    newWorkspaceFolders.push(existingFolder);
                }
                else {
                    newWorkspaceFolders.push({ uri: folderUri, name: folderData.name, index });
                }
            });
        }
        else {
            newWorkspaceFolders.push(...( (folders.map(({ uri, name, index }) => ({ uri: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(uri), name, index })))));
        }
        newWorkspaceFolders.sort((f1, f2) => f1.index < f2.index ? -1 : 1);
        const workspace = ( (new ExtHostWorkspaceImpl(
            id,
            name,
            newWorkspaceFolders,
            !!transient,
            configuration ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(configuration) : null,
            !!isUntitled,
            uri => ignorePathCasing(uri, extHostFileSystemInfo)
        )));
        const { added, removed } = delta(oldWorkspace ? oldWorkspace.workspaceFolders : [], workspace.workspaceFolders, compareWorkspaceFolderByUri, extHostFileSystemInfo);
        return { workspace, added, removed };
    }
    static _findFolder(workspace, folderUriToFind, extHostFileSystemInfo) {
        for (let i = 0; i < workspace.folders.length; i++) {
            const folder = workspace.workspaceFolders[i];
            if (isFolderEqual(folder.uri, folderUriToFind, extHostFileSystemInfo)) {
                return folder;
            }
        }
        return undefined;
    }
    constructor(id, _name, folders, transient, configuration, _isUntitled, ignorePathCasing) {
        super(id, ( (folders.map(f => ( (new _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_17__.WorkspaceFolder(f)))))), transient, configuration, ignorePathCasing);
        this._name = _name;
        this._isUntitled = _isUntitled;
        this._workspaceFolders = [];
        this._structure = _base_common_ternarySearchTree_js__WEBPACK_IMPORTED_MODULE_6__.TernarySearchTree.forUris(ignorePathCasing, () => true);
        folders.forEach(folder => {
            this._workspaceFolders.push(folder);
            this._structure.set(folder.uri, folder);
        });
    }
    get name() {
        return this._name;
    }
    get isUntitled() {
        return this._isUntitled;
    }
    get workspaceFolders() {
        return this._workspaceFolders.slice(0);
    }
    getWorkspaceFolder(uri, resolveParent) {
        if (resolveParent && this._structure.get(uri)) {
            uri = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__.dirname)(uri);
        }
        return this._structure.findSubstr(uri);
    }
    resolveWorkspaceFolder(uri) {
        return this._structure.get(uri);
    }
}
let ExtHostWorkspace = class ExtHostWorkspace {
    constructor(extHostRpc, initData, extHostFileSystemInfo, logService, uriTransformerService) {
        this._onDidChangeWorkspace = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter()));
        this.onDidChangeWorkspace = this._onDidChangeWorkspace.event;
        this._onDidGrantWorkspaceTrust = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter()));
        this.onDidGrantWorkspaceTrust = this._onDidGrantWorkspaceTrust.event;
        this._activeSearchCallbacks = [];
        this._trusted = false;
        this._editSessionIdentityProviders = ( (new Map()));
        this._providerHandlePool = 0;
        this._onWillCreateEditSessionIdentityEvent = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.AsyncEmitter()));
        this._canonicalUriProviders = ( (new Map()));
        this._logService = logService;
        this._extHostFileSystemInfo = extHostFileSystemInfo;
        this._uriTransformerService = uriTransformerService;
        this._requestIdProvider = ( (new _base_common_numbers_js__WEBPACK_IMPORTED_MODULE_8__.Counter()));
        this._barrier = ( (new _base_common_async_js__WEBPACK_IMPORTED_MODULE_2__.Barrier()));
        this._proxy = ( (extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_25__.MainContext.MainThreadWorkspace)));
        this._messageService = ( (extHostRpc.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_25__.MainContext.MainThreadMessageService)));
        const data = initData.workspace;
        this._confirmedWorkspace = data ? ( (new ExtHostWorkspaceImpl(
            data.id,
            data.name,
            [],
            !!data.transient,
            data.configuration ? _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(data.configuration) : null,
            !!data.isUntitled,
            uri => ignorePathCasing(uri, extHostFileSystemInfo)
        ))) : undefined;
    }
    $initializeWorkspace(data, trusted) {
        this._trusted = trusted;
        this.$acceptWorkspaceData(data);
        this._barrier.open();
    }
    waitForInitializeCall() {
        return this._barrier.wait();
    }
    get workspace() {
        return this._actualWorkspace;
    }
    get name() {
        return this._actualWorkspace ? this._actualWorkspace.name : undefined;
    }
    get workspaceFile() {
        if (this._actualWorkspace) {
            if (this._actualWorkspace.configuration) {
                if (this._actualWorkspace.isUntitled) {
                    return (
                         (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.from(
                            { scheme: _base_common_network_js__WEBPACK_IMPORTED_MODULE_7__.Schemas.untitled, path: (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__.basename)((0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__.dirname)(this._actualWorkspace.configuration)) }
                        ))
                    );
                }
                return this._actualWorkspace.configuration;
            }
        }
        return undefined;
    }
    get _actualWorkspace() {
        return this._unconfirmedWorkspace || this._confirmedWorkspace;
    }
    getWorkspaceFolders() {
        if (!this._actualWorkspace) {
            return undefined;
        }
        return this._actualWorkspace.workspaceFolders.slice(0);
    }
    async getWorkspaceFolders2() {
        await this._barrier.wait();
        if (!this._actualWorkspace) {
            return undefined;
        }
        return this._actualWorkspace.workspaceFolders.slice(0);
    }
    updateWorkspaceFolders(extension, index, deleteCount, ...workspaceFoldersToAdd) {
        const validatedDistinctWorkspaceFoldersToAdd = [];
        if (Array.isArray(workspaceFoldersToAdd)) {
            workspaceFoldersToAdd.forEach(folderToAdd => {
                if (_base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.isUri(folderToAdd.uri) && !( (validatedDistinctWorkspaceFoldersToAdd.some(f => isFolderEqual(f.uri, folderToAdd.uri, this._extHostFileSystemInfo))))) {
                    validatedDistinctWorkspaceFoldersToAdd.push({ uri: folderToAdd.uri, name: folderToAdd.name || (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__.basenameOrAuthority)(folderToAdd.uri) });
                }
            });
        }
        if (!!this._unconfirmedWorkspace) {
            return false;
        }
        if (( ([index, deleteCount].some(i => typeof i !== 'number' || i < 0)))) {
            return false;
        }
        if (deleteCount === 0 && validatedDistinctWorkspaceFoldersToAdd.length === 0) {
            return false;
        }
        const currentWorkspaceFolders = this._actualWorkspace ? this._actualWorkspace.workspaceFolders : [];
        if (index + deleteCount > currentWorkspaceFolders.length) {
            return false;
        }
        const newWorkspaceFolders = currentWorkspaceFolders.slice(0);
        newWorkspaceFolders.splice(index, deleteCount, ...( (validatedDistinctWorkspaceFoldersToAdd.map(
            f => ({ uri: f.uri, name: f.name || (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__.basenameOrAuthority)(f.uri), index: undefined  })
        ))));
        for (let i = 0; i < newWorkspaceFolders.length; i++) {
            const folder = newWorkspaceFolders[i];
            if (( (newWorkspaceFolders.some(
                (otherFolder, index) => index !== i && isFolderEqual(folder.uri, otherFolder.uri, this._extHostFileSystemInfo)
            )))) {
                return false;
            }
        }
        newWorkspaceFolders.forEach((f, index) => f.index = index);
        const { added, removed } = delta(currentWorkspaceFolders, newWorkspaceFolders, compareWorkspaceFolderByUriAndNameAndIndex, this._extHostFileSystemInfo);
        if (added.length === 0 && removed.length === 0) {
            return false;
        }
        if (this._proxy) {
            const extName = extension.displayName || extension.name;
            this._proxy.$updateWorkspaceFolders(extName, index, deleteCount, validatedDistinctWorkspaceFoldersToAdd).then(undefined, error => {
                this._unconfirmedWorkspace = undefined;
                const options = { source: { identifier: extension.identifier, label: extension.displayName || extension.name } };
                this._messageService.$showMessage(_base_common_severity_js__WEBPACK_IMPORTED_MODULE_27__["default"].Error, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_12__.localizeWithPath)(
                    _moduleId,
                    0,
                    "Extension '{0}' failed to update workspace folders: {1}",
                    extName,
                     (error.toString())
                )), options, []);
            });
        }
        this.trySetWorkspaceFolders(newWorkspaceFolders);
        return true;
    }
    getWorkspaceFolder(uri, resolveParent) {
        if (!this._actualWorkspace) {
            return undefined;
        }
        return this._actualWorkspace.getWorkspaceFolder(uri, resolveParent);
    }
    async getWorkspaceFolder2(uri, resolveParent) {
        await this._barrier.wait();
        if (!this._actualWorkspace) {
            return undefined;
        }
        return this._actualWorkspace.getWorkspaceFolder(uri, resolveParent);
    }
    async resolveWorkspaceFolder(uri) {
        await this._barrier.wait();
        if (!this._actualWorkspace) {
            return undefined;
        }
        return this._actualWorkspace.resolveWorkspaceFolder(uri);
    }
    getPath() {
        if (!this._actualWorkspace) {
            return undefined;
        }
        const { folders } = this._actualWorkspace;
        if (folders.length === 0) {
            return undefined;
        }
        return folders[0].uri.fsPath;
    }
    getRelativePath(pathOrUri, includeWorkspace) {
        let resource;
        let path = '';
        if (typeof pathOrUri === 'string') {
            resource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.file(pathOrUri);
            path = pathOrUri;
        }
        else if (typeof pathOrUri !== 'undefined') {
            resource = pathOrUri;
            path = pathOrUri.fsPath;
        }
        if (!resource) {
            return path;
        }
        const folder = this.getWorkspaceFolder(resource, true);
        if (!folder) {
            return path;
        }
        if (typeof includeWorkspace === 'undefined' && this._actualWorkspace) {
            includeWorkspace = this._actualWorkspace.folders.length > 1;
        }
        let result = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_9__.relativePath)(folder.uri, resource);
        if (includeWorkspace && folder.name) {
            result = `${folder.name}/${result}`;
        }
        return result;
    }
    trySetWorkspaceFolders(folders) {
        if (this._actualWorkspace) {
            this._unconfirmedWorkspace = ExtHostWorkspaceImpl.toExtHostWorkspace({
                id: this._actualWorkspace.id,
                name: this._actualWorkspace.name,
                configuration: this._actualWorkspace.configuration,
                folders,
                isUntitled: this._actualWorkspace.isUntitled
            }, this._actualWorkspace, undefined, this._extHostFileSystemInfo).workspace || undefined;
        }
    }
    $acceptWorkspaceData(data) {
        const { workspace, added, removed } = ExtHostWorkspaceImpl.toExtHostWorkspace(data, this._confirmedWorkspace, this._unconfirmedWorkspace, this._extHostFileSystemInfo);
        this._confirmedWorkspace = workspace || undefined;
        this._unconfirmedWorkspace = undefined;
        this._onDidChangeWorkspace.fire(( (Object.freeze({
            added,
            removed,
        }))));
    }
    findFiles(include, exclude, maxResults, extensionId, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationToken.None) {
        this._logService.trace(`extHostWorkspace#findFiles: fileSearch, extension: ${extensionId.value}, entryPoint: findFiles`);
        let excludeString = '';
        let useFileExcludes = true;
        if (exclude === null) {
            useFileExcludes = false;
        }
        else if (exclude !== undefined) {
            if (typeof exclude === 'string') {
                excludeString = exclude;
            }
            else {
                excludeString = exclude.pattern;
            }
        }
        return this._findFilesImpl(include, undefined, {
            exclude: excludeString,
            maxResults,
            useDefaultExcludes: useFileExcludes,
            useDefaultSearchExcludes: false,
            useIgnoreFiles: false
        }, token);
    }
    findFiles2(filePattern, options = {}, extensionId, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationToken.None) {
        this._logService.trace(`extHostWorkspace#findFiles2: fileSearch, extension: ${extensionId.value}, entryPoint: findFiles2`);
        return this._findFilesImpl(undefined, filePattern, options, token);
    }
    async _findFilesImpl(
    include, filePattern, options, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationToken.None) {
        if (token && token.isCancellationRequested) {
            return Promise.resolve([]);
        }
        const excludePattern = (typeof options.exclude === 'string') ? options.exclude :
            options.exclude ? options.exclude.pattern : undefined;
        const fileQueries = {
            ignoreSymlinks: typeof options.followSymlinks === 'boolean' ? !options.followSymlinks : undefined,
            disregardIgnoreFiles: typeof options.useIgnoreFiles === 'boolean' ? !options.useIgnoreFiles : undefined,
            disregardGlobalIgnoreFiles: typeof options.useGlobalIgnoreFiles === 'boolean' ? !options.useGlobalIgnoreFiles : undefined,
            disregardParentIgnoreFiles: typeof options.useParentIgnoreFiles === 'boolean' ? !options.useParentIgnoreFiles : undefined,
            disregardExcludeSettings: typeof options.useDefaultExcludes === 'boolean' ? !options.useDefaultExcludes : false,
            disregardSearchExcludeSettings: typeof options.useDefaultSearchExcludes === 'boolean' ? !options.useDefaultSearchExcludes : false,
            maxResults: options.maxResults,
            excludePattern: excludePattern,
            shouldGlobSearch: typeof options.fuzzy === 'boolean' ? !options.fuzzy : true,
            _reason: 'startFileSearch'
        };
        let folderToUse;
        if (include) {
            const { includePattern, folder } = parseSearchInclude(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_21__.GlobPattern.from(include));
            folderToUse = folder;
            fileQueries.includePattern = includePattern;
        }
        else {
            const { includePattern, folder } = parseSearchInclude(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_21__.GlobPattern.from(filePattern));
            folderToUse = folder;
            fileQueries.filePattern = includePattern;
        }
        return this._proxy.$startFileSearch(folderToUse ?? null, fileQueries, token)
            .then(data => Array.isArray(data) ? ( (data.map(d => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(d)))) : []);
    }
    async findTextInFiles(query, options, callback, extensionId, token = _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationToken.None) {
        this._logService.trace(`extHostWorkspace#findTextInFiles: textSearch, extension: ${extensionId.value}, entryPoint: findTextInFiles`);
        const requestId = this._requestIdProvider.getNext();
        const previewOptions = typeof options.previewOptions === 'undefined' ?
            {
                matchLines: 100,
                charsPerLine: 10000
            } :
            options.previewOptions;
        const { includePattern, folder } = parseSearchInclude(_extHostTypeConverters_js__WEBPACK_IMPORTED_MODULE_21__.GlobPattern.from(options.include));
        const excludePattern = (typeof options.exclude === 'string') ? options.exclude :
            options.exclude ? options.exclude.pattern : undefined;
        const queryOptions = {
            ignoreSymlinks: typeof options.followSymlinks === 'boolean' ? !options.followSymlinks : undefined,
            disregardIgnoreFiles: typeof options.useIgnoreFiles === 'boolean' ? !options.useIgnoreFiles : undefined,
            disregardGlobalIgnoreFiles: typeof options.useGlobalIgnoreFiles === 'boolean' ? !options.useGlobalIgnoreFiles : undefined,
            disregardParentIgnoreFiles: typeof options.useParentIgnoreFiles === 'boolean' ? !options.useParentIgnoreFiles : undefined,
            disregardExcludeSettings: typeof options.useDefaultExcludes === 'boolean' ? !options.useDefaultExcludes : true,
            fileEncoding: options.encoding,
            maxResults: options.maxResults,
            previewOptions,
            afterContext: options.afterContext,
            beforeContext: options.beforeContext,
            includePattern: includePattern,
            excludePattern: excludePattern
        };
        this._activeSearchCallbacks[requestId] = p => {
            const uri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(p.resource);
            p.results.forEach(rawResult => {
                const result = (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_26__.revive)(rawResult);
                if ((0,_services_search_common_search_js__WEBPACK_IMPORTED_MODULE_24__.resultIsMatch)(result)) {
                    callback({
                        uri,
                        preview: {
                            text: result.preview.text,
                            matches: (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.mapArrayOrNot)(result.preview.matches, m => ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_22__.Range(m.startLineNumber, m.startColumn, m.endLineNumber, m.endColumn))))
                        },
                        ranges: (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.mapArrayOrNot)(result.ranges, r => ( (new _extHostTypes_js__WEBPACK_IMPORTED_MODULE_22__.Range(r.startLineNumber, r.startColumn, r.endLineNumber, r.endColumn))))
                    });
                }
                else {
                    callback({
                        uri,
                        text: result.text,
                        lineNumber: result.lineNumber
                    });
                }
            });
        };
        if (token.isCancellationRequested) {
            return {};
        }
        try {
            const result = await this._proxy.$startTextSearch(query, folder ?? null, queryOptions, requestId, token);
            delete this._activeSearchCallbacks[requestId];
            return result || {};
        }
        catch (err) {
            delete this._activeSearchCallbacks[requestId];
            throw err;
        }
    }
    $handleTextSearchResult(result, requestId) {
        this._activeSearchCallbacks[requestId]?.(result);
    }
    async save(uri) {
        const result = await this._proxy.$save(uri, { saveAs: false });
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(result);
    }
    async saveAs(uri) {
        const result = await this._proxy.$save(uri, { saveAs: true });
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(result);
    }
    saveAll(includeUntitled) {
        return this._proxy.$saveAll(includeUntitled);
    }
    resolveProxy(url) {
        return this._proxy.$resolveProxy(url);
    }
    loadCertificates() {
        return this._proxy.$loadCertificates();
    }
    get trusted() {
        return this._trusted;
    }
    requestWorkspaceTrust(options) {
        return this._proxy.$requestWorkspaceTrust(options);
    }
    $onDidGrantWorkspaceTrust() {
        if (!this._trusted) {
            this._trusted = true;
            this._onDidGrantWorkspaceTrust.fire();
        }
    }
    registerEditSessionIdentityProvider(scheme, provider) {
        if (( (this._editSessionIdentityProviders.has(scheme)))) {
            throw ( (new Error(`A provider has already been registered for scheme ${scheme}`)));
        }
        this._editSessionIdentityProviders.set(scheme, provider);
        const outgoingScheme = this._uriTransformerService.transformOutgoingScheme(scheme);
        const handle = this._providerHandlePool++;
        this._proxy.$registerEditSessionIdentityProvider(handle, outgoingScheme);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.toDisposable)(() => {
            this._editSessionIdentityProviders.delete(scheme);
            this._proxy.$unregisterEditSessionIdentityProvider(handle);
        });
    }
    async $getEditSessionIdentifier(workspaceFolder, cancellationToken) {
        this._logService.info('Getting edit session identifier for workspaceFolder', workspaceFolder);
        const folder = await this.resolveWorkspaceFolder(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(workspaceFolder));
        if (!folder) {
            this._logService.warn('Unable to resolve workspace folder');
            return undefined;
        }
        this._logService.info('Invoking #provideEditSessionIdentity for workspaceFolder', folder);
        const provider = this._editSessionIdentityProviders.get(folder.uri.scheme);
        this._logService.info(`Provider for scheme ${folder.uri.scheme} is defined: `, !!provider);
        if (!provider) {
            return undefined;
        }
        const result = await provider.provideEditSessionIdentity(folder, cancellationToken);
        this._logService.info('Provider returned edit session identifier: ', result);
        if (!result) {
            return undefined;
        }
        return result;
    }
    async $provideEditSessionIdentityMatch(workspaceFolder, identity1, identity2, cancellationToken) {
        this._logService.info('Getting edit session identifier for workspaceFolder', workspaceFolder);
        const folder = await this.resolveWorkspaceFolder(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(workspaceFolder));
        if (!folder) {
            this._logService.warn('Unable to resolve workspace folder');
            return undefined;
        }
        this._logService.info('Invoking #provideEditSessionIdentity for workspaceFolder', folder);
        const provider = this._editSessionIdentityProviders.get(folder.uri.scheme);
        this._logService.info(`Provider for scheme ${folder.uri.scheme} is defined: `, !!provider);
        if (!provider) {
            return undefined;
        }
        const result = await provider.provideEditSessionIdentityMatch?.(identity1, identity2, cancellationToken);
        this._logService.info('Provider returned edit session identifier match result: ', result);
        if (!result) {
            return undefined;
        }
        return result;
    }
    getOnWillCreateEditSessionIdentityEvent(extension) {
        return (listener, thisArg, disposables) => {
            const wrappedListener = function wrapped(e) { listener.call(thisArg, e); };
            wrappedListener.extension = extension;
            return this._onWillCreateEditSessionIdentityEvent.event(wrappedListener, undefined, disposables);
        };
    }
    async $onWillCreateEditSessionIdentity(workspaceFolder, token, timeout) {
        const folder = await this.resolveWorkspaceFolder(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(workspaceFolder));
        if (folder === undefined) {
            throw ( (new Error('Unable to resolve workspace folder')));
        }
        await this._onWillCreateEditSessionIdentityEvent.fireAsync({ workspaceFolder: folder }, token, async (thenable, listener) => {
            const now = Date.now();
            await Promise.resolve(thenable);
            if (Date.now() - now > timeout) {
                this._logService.warn('SLOW edit session create-participant', listener.extension.identifier);
            }
        });
        if (token.isCancellationRequested) {
            return undefined;
        }
    }
    registerCanonicalUriProvider(scheme, provider) {
        if (( (this._canonicalUriProviders.has(scheme)))) {
            throw ( (new Error(`A provider has already been registered for scheme ${scheme}`)));
        }
        this._canonicalUriProviders.set(scheme, provider);
        const outgoingScheme = this._uriTransformerService.transformOutgoingScheme(scheme);
        const handle = this._providerHandlePool++;
        this._proxy.$registerCanonicalUriProvider(handle, outgoingScheme);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_5__.toDisposable)(() => {
            this._canonicalUriProviders.delete(scheme);
            this._proxy.$unregisterCanonicalUriProvider(handle);
        });
    }
    async provideCanonicalUri(uri, options, cancellationToken) {
        const provider = this._canonicalUriProviders.get(uri.scheme);
        if (!provider) {
            return undefined;
        }
        const result = await provider.provideCanonicalUri?.(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(uri), options, cancellationToken);
        if (!result) {
            return undefined;
        }
        return result;
    }
    async $provideCanonicalUri(uri, targetScheme, cancellationToken) {
        return this.provideCanonicalUri(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(uri), { targetScheme }, cancellationToken);
    }
};
ExtHostWorkspace = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_20__.IExtHostRpcService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_19__.IExtHostInitDataService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _extHostFileSystemInfo_js__WEBPACK_IMPORTED_MODULE_18__.IExtHostFileSystemInfo))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_15__.ILogService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_23__.IURITransformerService)))
], ExtHostWorkspace)));
const IExtHostWorkspace = ( ((0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_14__.createDecorator)('IExtHostWorkspace')));
function parseSearchInclude(include) {
    let includePattern;
    let includeFolder;
    if (include) {
        if (typeof include === 'string') {
            includePattern = include;
        }
        else {
            includePattern = include.pattern;
            includeFolder = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.revive(include.baseUri);
        }
    }
    return {
        includePattern,
        folder: includeFolder
    };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extensionHostMain.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/common/extensionHostMain.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ErrorHandler: () => (/* binding */ ErrorHandler),
/* harmony export */   ExtensionHostMain: () => (/* binding */ ExtensionHostMain)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_performance_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/performance.js */ "./node_modules/vscode/vscode/src/vs/base/common/performance.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHost.protocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.protocol.js");
/* harmony import */ var _services_extensions_common_rpcProtocol_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/extensions/common/rpcProtocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/rpcProtocol.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../platform/instantiation/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/extensions.js");
/* harmony import */ var _platform_instantiation_common_serviceCollection_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../platform/instantiation/common/serviceCollection.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/serviceCollection.js");
/* harmony import */ var _extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _platform_instantiation_common_instantiationService_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../platform/instantiation/common/instantiationService.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiationService.js");
/* harmony import */ var _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");
/* harmony import */ var _extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./extHostUriTransformerService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostUriTransformerService.js");
/* harmony import */ var _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js");
/* harmony import */ var _extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./extHostTelemetry.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTelemetry.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _extHostLogService_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./extHostLogService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLogService.js");
/* harmony import */ var _platform_instantiation_common_descriptors_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../platform/instantiation/common/descriptors.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/descriptors.js");
/* harmony import */ var _extHostLoggerService_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./extHostLoggerService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostLoggerService.js");


















class ErrorHandler {
    static async installEarlyHandler(accessor) {
        Error.stackTraceLimit = 100;
        const logService = accessor.get(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILogService);
        const rpcService = accessor.get(_extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostRpcService);
        const mainThreadErrors = ( rpcService.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadErrors));
        (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.setUnexpectedErrorHandler)(err => {
            logService.error(err);
            const data = (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(err);
            mainThreadErrors.$onUnexpectedError(data);
        });
    }
    static async installFullHandler(accessor) {
        const logService = accessor.get(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILogService);
        const rpcService = accessor.get(_extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostRpcService);
        const extensionService = accessor.get(_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostExtensionService);
        const extensionTelemetry = accessor.get(_extHostTelemetry_js__WEBPACK_IMPORTED_MODULE_13__.IExtHostTelemetry);
        const mainThreadExtensions = ( rpcService.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadExtensionService));
        const mainThreadErrors = ( rpcService.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadErrors));
        const map = await extensionService.getExtensionPathIndex();
        const extensionErrors = ( new WeakMap());
        function prepareStackTraceAndFindExtension(error, stackTrace) {
            if (( extensionErrors.has(error))) {
                return extensionErrors.get(error).stack;
            }
            let stackTraceMessage = '';
            let extension;
            let fileName;
            for (const call of stackTrace) {
                stackTraceMessage += `\n\tat ${( call.toString())}`;
                fileName = call.getFileName();
                if (!extension && fileName) {
                    extension = map.findSubstr(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.file(fileName));
                }
            }
            const result = `${error.name || 'Error'}: ${error.message || ''}${stackTraceMessage}`;
            extensionErrors.set(error, { extensionIdentifier: extension?.identifier, stack: result });
            return result;
        }
        const _wasWrapped = Symbol('prepareStackTrace wrapped');
        let _prepareStackTrace = prepareStackTraceAndFindExtension;
        Object.defineProperty(Error, 'prepareStackTrace', {
            configurable: false,
            get() {
                return _prepareStackTrace;
            },
            set(v) {
                if (v === prepareStackTraceAndFindExtension || !v || v[_wasWrapped]) {
                    _prepareStackTrace = v || prepareStackTraceAndFindExtension;
                    return;
                }
                _prepareStackTrace = function (error, stackTrace) {
                    prepareStackTraceAndFindExtension(error, stackTrace);
                    return v.call(Error, error, stackTrace);
                };
                Object.assign(_prepareStackTrace, { [_wasWrapped]: true });
            },
        });
        (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.setUnexpectedErrorHandler)(err => {
            logService.error(err);
            const errorData = (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.transformErrorForSerialization)(err);
            const stackData = extensionErrors.get(err);
            if (!stackData?.extensionIdentifier) {
                mainThreadErrors.$onUnexpectedError(errorData);
                return;
            }
            mainThreadExtensions.$onExtensionRuntimeError(stackData.extensionIdentifier, errorData);
            const reported = extensionTelemetry.onExtensionError(stackData.extensionIdentifier, err);
            logService.trace('forwarded error to extension?', reported, stackData);
        });
    }
}
class ExtensionHostMain {
    constructor(protocol, initData, hostUtils, uriTransformer, messagePorts) {
        this._hostUtils = hostUtils;
        this._rpcProtocol = ( new _services_extensions_common_rpcProtocol_js__WEBPACK_IMPORTED_MODULE_4__.RPCProtocol(protocol, null, uriTransformer));
        initData = ExtensionHostMain._transform(initData, this._rpcProtocol);
        const services = ( new _platform_instantiation_common_serviceCollection_js__WEBPACK_IMPORTED_MODULE_7__.ServiceCollection(...(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.getSingletonServiceDescriptors)()));
        services.set(_extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_8__.IExtHostInitDataService, { _serviceBrand: undefined, ...initData, messagePorts });
        services.set(_extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__.IExtHostRpcService, ( new _extHostRpcService_js__WEBPACK_IMPORTED_MODULE_10__.ExtHostRpcService(this._rpcProtocol)));
        services.set(_extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_11__.IURITransformerService, ( new _extHostUriTransformerService_js__WEBPACK_IMPORTED_MODULE_11__.URITransformerService(uriTransformer)));
        services.set(_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_12__.IHostUtils, hostUtils);
        services.set(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILogService, ( new _platform_instantiation_common_descriptors_js__WEBPACK_IMPORTED_MODULE_16__.SyncDescriptor(_extHostLogService_js__WEBPACK_IMPORTED_MODULE_15__.ExtHostLogService, [true], true)));
        services.set(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILoggerService, ( new _platform_instantiation_common_descriptors_js__WEBPACK_IMPORTED_MODULE_16__.SyncDescriptor(_extHostLoggerService_js__WEBPACK_IMPORTED_MODULE_17__.ExtHostLoggerService, [], true)));
        const instaService = ( new _platform_instantiation_common_instantiationService_js__WEBPACK_IMPORTED_MODULE_9__.InstantiationService(services, true));
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_14__.isWebWorker) {
            instaService.invokeFunction(ErrorHandler.installEarlyHandler);
        }
        this._logService = instaService.invokeFunction(accessor => accessor.get(_platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_5__.ILogService));
        (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_1__.mark)(`code/extHost/didCreateServices`);
        if (this._hostUtils.pid) {
            this._logService.info(`Extension host with pid ${this._hostUtils.pid} started`);
        }
        else {
            this._logService.info(`Extension host started`);
        }
        this._logService.trace('initData', initData);
        this._extensionService = instaService.invokeFunction(accessor => accessor.get(_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_12__.IExtHostExtensionService));
        this._extensionService.initialize();
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_14__.isWebWorker) {
            instaService.invokeFunction(ErrorHandler.installFullHandler);
        }
    }
    async asBrowserUri(uri) {
        const mainThreadExtensionsProxy = ( this._rpcProtocol.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadExtensionService));
        return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri));
    }
    async getAllStaticBrowserUris() {
        const mainThreadExtensionsProxy = ( this._rpcProtocol.getProxy(_extHost_protocol_js__WEBPACK_IMPORTED_MODULE_3__.MainContext.MainThreadExtensionService));
        return ( (await mainThreadExtensionsProxy.$getAllStaticBrowserUris()).map(([from, to]) => [_base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(from), _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(to)]));
    }
    terminate(reason) {
        this._extensionService.terminate(reason);
    }
    getExtHostExtensionService() {
        return this._extensionService;
    }
    static _transform(initData, rpcProtocol) {
        initData.extensions.allExtensions.forEach((ext) => {
            ext.extensionLocation = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation));
        });
        initData.environment.appRoot = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appRoot));
        const extDevLocs = initData.environment.extensionDevelopmentLocationURI;
        if (extDevLocs) {
            initData.environment.extensionDevelopmentLocationURI = ( extDevLocs.map(url => _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(url))));
        }
        initData.environment.extensionTestsLocationURI = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTestsLocationURI));
        initData.environment.globalStorageHome = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.globalStorageHome));
        initData.environment.workspaceStorageHome = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.workspaceStorageHome));
        initData.environment.extensionTelemetryLogResource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTelemetryLogResource));
        initData.nlsBaseUrl = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(initData.nlsBaseUrl));
        initData.logsLocation = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(rpcProtocol.transformIncomingURIs(initData.logsLocation));
        initData.workspace = rpcProtocol.transformIncomingURIs(initData.workspace);
        return initData;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHost.worker.services.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHost.worker.services.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../platform/instantiation/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/extensions.js");
/* harmony import */ var _common_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js");
/* harmony import */ var _common_extHostStoragePaths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/extHostStoragePaths.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostStoragePaths.js");
/* harmony import */ var _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHostExtensionService.js");




(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_common_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_1__.IExtHostExtensionService, _extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_3__.ExtHostExtensionService, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);
(0,_platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.registerSingleton)(_common_extHostStoragePaths_js__WEBPACK_IMPORTED_MODULE_2__.IExtensionStoragePaths, _common_extHostStoragePaths_js__WEBPACK_IMPORTED_MODULE_2__.ExtensionStoragePaths, _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.InstantiationType.Eager);


/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHostConsoleForwarder.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHostConsoleForwarder.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostConsoleForwarder: () => (/* binding */ ExtHostConsoleForwarder)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _common_extHostConsoleForwarder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/extHostConsoleForwarder.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostConsoleForwarder.js");
/* harmony import */ var _common_extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/extHostInitDataService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostInitDataService.js");
/* harmony import */ var _common_extHostRpcService_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/extHostRpcService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRpcService.js");




let ExtHostConsoleForwarder = class ExtHostConsoleForwarder extends _common_extHostConsoleForwarder_js__WEBPACK_IMPORTED_MODULE_1__.AbstractExtHostConsoleForwarder {
    constructor(extHostRpc, initData) {
        super(extHostRpc, initData);
    }
    _nativeConsoleLogMessage(_method, original, args) {
        original.apply(console, args);
    }
};
ExtHostConsoleForwarder = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _common_extHostRpcService_js__WEBPACK_IMPORTED_MODULE_3__.IExtHostRpcService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _common_extHostInitDataService_js__WEBPACK_IMPORTED_MODULE_2__.IExtHostInitDataService))
], ExtHostConsoleForwarder));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHostExtensionService.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHostExtensionService.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtHostExtensionService: () => (/* binding */ ExtHostExtensionService)
/* harmony export */ });
/* harmony import */ var _common_extHost_api_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/extHost.api.impl.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.api.impl.js");
/* harmony import */ var _common_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/extHostExtensionService.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostExtensionService.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _common_extHostRequireInterceptor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/extHostRequireInterceptor.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostRequireInterceptor.js");
/* harmony import */ var _common_extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/extHostTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHostTypes.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _extHostConsoleForwarder_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extHostConsoleForwarder.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHostConsoleForwarder.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");








class WorkerRequireInterceptor extends _common_extHostRequireInterceptor_js__WEBPACK_IMPORTED_MODULE_3__.RequireInterceptor {
    _installInterceptor() { }
    getModule(request, parent) {
        for (const alternativeModuleName of this._alternatives) {
            const alternative = alternativeModuleName(request);
            if (alternative) {
                request = alternative;
                break;
            }
        }
        if (( this._factories.has(request))) {
            return this._factories.get(request).load(request, parent, () => { throw ( new Error('CANNOT LOAD MODULE from here.')); });
        }
        return undefined;
    }
}
class ExtHostExtensionService extends _common_extHostExtensionService_js__WEBPACK_IMPORTED_MODULE_1__.AbstractExtHostExtensionService {
    constructor() {
        super(...arguments);
        this.extensionRuntime = _common_extHostTypes_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionRuntime.Webworker;
    }
    async _beforeAlmostReadyToRunExtensions() {
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_7__.isWebWorker) {
            this._instaService.createInstance(_extHostConsoleForwarder_js__WEBPACK_IMPORTED_MODULE_6__.ExtHostConsoleForwarder);
        }
        this._apiFactory = this._instaService.invokeFunction(_common_extHost_api_impl_js__WEBPACK_IMPORTED_MODULE_0__.createApiFactoryAndRegisterActors);
        this._fakeModules = this._instaService.createInstance(WorkerRequireInterceptor, this._apiFactory, { mine: this._myRegistry, all: this._globalRegistry });
        await this._fakeModules.install();
        performance.mark('code/extHost/didInitAPI');
        await this._waitForDebuggerAttachment();
    }
    _getEntryPoint(extensionDescription) {
        return extensionDescription.browser;
    }
    async _loadCommonJSModule(extension, module, activationTimesBuilder) {
        module = module.with({ path: ensureSuffix(module.path, '.js') });
        const extensionId = extension?.identifier.value;
        if (extensionId) {
            performance.mark(`code/extHost/willFetchExtensionCode/${extensionId}`);
        }
        const browserUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(await this._mainThreadExtensionsProxy.$asBrowserUri(module));
        const response = await fetch(( browserUri.toString(true)));
        if (extensionId) {
            performance.mark(`code/extHost/didFetchExtensionCode/${extensionId}`);
        }
        if (response.status !== 200) {
            throw ( new Error(response.statusText));
        }
        const source = await response.text();
        const sourceURL = `${( module.toString(true))}#vscode-extension`;
        const fullSource = `${source}\n//# sourceURL=${sourceURL}`;
        let initFn;
        try {
            initFn = ( new Function('module', 'exports', 'require', fullSource));
        }
        catch (err) {
            if (extensionId) {
                console.error(`Loading code for extension ${extensionId} failed: ${err.message}`);
            }
            else {
                console.error(`Loading code failed: ${err.message}`);
            }
            console.error(`${( module.toString(true))}${typeof err.line === 'number' ? ` line ${err.line}` : ''}${typeof err.column === 'number' ? ` column ${err.column}` : ''}`);
            console.error(err);
            throw err;
        }
        if (extension) {
            await this._extHostLocalizationService.initializeLocalizedMessages(extension);
        }
        const _exports = {};
        const _module = { exports: _exports };
        const _require = (request) => {
            const result = this._fakeModules.getModule(request, module);
            if (result === undefined) {
                throw ( new Error(`Cannot load module '${request}'`));
            }
            return result;
        };
        try {
            activationTimesBuilder.codeLoadingStart();
            if (extensionId) {
                performance.mark(`code/extHost/willLoadExtensionCode/${extensionId}`);
            }
            initFn(_module, _exports, _require);
            return (_module.exports !== _exports ? _module.exports : _exports);
        }
        finally {
            if (extensionId) {
                performance.mark(`code/extHost/didLoadExtensionCode/${extensionId}`);
            }
            activationTimesBuilder.codeLoadingStop();
        }
    }
    async $setRemoteEnvironment(_env) {
        return;
    }
    async _waitForDebuggerAttachment(waitTimeout = 5000) {
        if (!this._initData.environment.isExtensionDevelopmentDebug) {
            return;
        }
        const deadline = Date.now() + waitTimeout;
        while (Date.now() < deadline && !('__jsDebugIsReady' in globalThis)) {
            await (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_5__.timeout)(10);
        }
    }
}
function ensureSuffix(path, suffix) {
    return path.endsWith(suffix) ? path : path + suffix;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extensionHostWorker.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/api/worker/extensionHostWorker.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   create: () => (/* binding */ create)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/extensions/common/extensionHostProtocol.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionHostProtocol.js");
/* harmony import */ var _common_extensionHostMain_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/extensionHostMain.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extensionHostMain.js");
/* harmony import */ var _services_extensions_worker_polyfillNestedWorker_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/extensions/worker/polyfillNestedWorker.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/worker/polyfillNestedWorker.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_performance_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../base/common/performance.js */ "./node_modules/vscode/vscode/src/vs/base/common/performance.js");
/* harmony import */ var _common_extHost_common_services_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/extHost.common.services.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/common/extHost.common.services.js");
/* harmony import */ var _extHost_worker_services_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./extHost.worker.services.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extHost.worker.services.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");










const nativeClose = self.close.bind(self);
self.close = () => console.trace(`'close' has been blocked`);
const nativePostMessage = postMessage.bind(self);
self.postMessage = () => console.trace(`'postMessage' has been blocked`);
function shouldTransformUri(uri) {
    return /^(file|extension-file|vscode-remote):/i.test(uri);
}
const nativeFetch = fetch.bind(self);
function patchFetching(asBrowserUri) {
    self.fetch = async function (input, init) {
        if (input instanceof Request) {
            return nativeFetch(input, init);
        }
        if (shouldTransformUri(String(input))) {
            input = ( (await ( asBrowserUri(( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_9__.URI.parse(String(input)))))).toString(true));
        }
        return nativeFetch(input, init);
    };
    self.XMLHttpRequest = class extends XMLHttpRequest {
        open(method, url, async, username, password) {
            (async () => {
                if (shouldTransformUri(( url.toString()))) {
                    url = ( (await ( asBrowserUri(( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_9__.URI.parse(( url.toString())))))).toString(true));
                }
                super.open(method, url, async ?? true, username, password);
            })();
        }
    };
}
self.importScripts = () => { throw ( new Error(`'importScripts' has been blocked`)); };
self.addEventListener = () => console.trace(`'addEventListener' has been blocked`);
self['AMDLoader'] = undefined;
self['NLSLoaderPlugin'] = undefined;
self['define'] = undefined;
self['require'] = undefined;
self['webkitRequestFileSystem'] = undefined;
self['webkitRequestFileSystemSync'] = undefined;
self['webkitResolveLocalFileSystemSyncURL'] = undefined;
self['webkitResolveLocalFileSystemURL'] = undefined;
function patchWorker(asBrowserUri, getAllStaticBrowserUris) {
    if (self.Worker) {
        const _Worker = self.Worker;
        Worker = function (stringUrl, options) {
            if (/^vscode-remote:/i.test(( stringUrl.toString()))) {
                throw ( new Error(`Creating workers from remote extensions is currently not supported.`));
            }
            async function getWorkerUri(workerUri) {
                const [browserUrl, staticBrowserUrls] = await Promise.all([
                    ( asBrowserUri(workerUri)).then(uri => ( uri.toString(true))),
                    getAllStaticBrowserUris().then(bindings => Object.fromEntries(( bindings.map(([from, to]) => [( from.toString(true)), ( to.toString(true))]))))
                ]);
                const bootstrapFnSource = ( (function bootstrapFn(workerUrl, staticBrowserUrls) {
                    function asWorkerBrowserUrl(url) {
                        if (typeof url === 'string' || url instanceof URL) {
                            url = String(url).replace(/^file:\/\//i, 'vscode-file://vscode-app');
                            return staticBrowserUrls[url] ?? url;
                        }
                        return url;
                    }
                    const nativeFetch = fetch.bind(self);
                    self.fetch = function (input, init) {
                        if (input instanceof Request) {
                            return nativeFetch(input, init);
                        }
                        return nativeFetch(asWorkerBrowserUrl(input), init);
                    };
                    self.XMLHttpRequest = class extends XMLHttpRequest {
                        constructor() {
                            super(...arguments);
                            this.notFound = false;
                        }
                        open(method, url, async, username, password) {
                            const transformedUrl = asWorkerBrowserUrl(url);
                            this.notFound = transformedUrl.startsWith('extension-file:');
                            return super.open(method, transformedUrl, async ?? true, username, password);
                        }
                        send(body) {
                            if (this.notFound) {
                                return;
                            }
                            super.send(body);
                        }
                        get status() {
                            return this.notFound ? 404 : super.status;
                        }
                    };
                    const nativeImportScripts = importScripts.bind(self);
                    self.importScripts = (...urls) => {
                        nativeImportScripts(...( urls.map(asWorkerBrowserUrl)));
                    };
                    self.importExt = (url) => {
                        return ( new Function('url', 'return import(url)'))(asWorkerBrowserUrl(url));
                    };
                    nativeImportScripts(workerUrl);
                }).toString());
                const js = `(${bootstrapFnSource}('${browserUrl}', ${JSON.stringify(staticBrowserUrls)}))`;
                const blob = ( new Blob([js], { type: 'application/javascript' }));
                return URL.createObjectURL(blob);
            }
            options = options || {};
            options.name = `${name} -> ${options.name || (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_5__.basename)(( stringUrl.toString()))}`;
            class ExtensionWorker {
                constructor(scriptURL, options) {
                    this._onmessage = null;
                    this._onmessageerror = null;
                    this._onerror = null;
                    this.workerPromise = getWorkerUri(( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_9__.URI.parse(scriptURL instanceof URL ? ( scriptURL.toString()) : scriptURL))).then(url => {
                        return ( new _Worker(url, options));
                    });
                }
                set onmessage(cb) {
                    this._onmessage = cb;
                    this.workerPromise.then(worker => {
                        worker.onmessage = cb;
                    }, console.error);
                }
                get onmessage() {
                    return this._onmessage;
                }
                set onmessageerror(cb) {
                    this._onmessageerror = cb;
                    this.workerPromise.then(worker => {
                        worker.onmessageerror = cb;
                    }, console.error);
                }
                get onmessageerror() {
                    return this._onmessageerror;
                }
                set onerror(cb) {
                    this._onerror = cb;
                    this.workerPromise.then(worker => {
                        worker.onerror = cb;
                    }, console.error);
                }
                get onerror() {
                    return this._onerror;
                }
                postMessage(message, options) {
                    this.workerPromise.then(worker => {
                        worker.postMessage(message, options);
                    }, console.error);
                }
                terminate() {
                    this.workerPromise.then(worker => {
                        worker.terminate();
                    }, console.error);
                }
                addEventListener(type, listener, options) {
                    this.workerPromise.then(worker => {
                        worker.addEventListener(type, listener, options);
                    }, console.error);
                }
                removeEventListener(type, listener, options) {
                    this.workerPromise.then(worker => {
                        worker.removeEventListener(type, listener, options);
                    }, console.error);
                }
                dispatchEvent(event) {
                    this.workerPromise.then(worker => {
                        worker.dispatchEvent(event);
                    }, console.error);
                    return false;
                }
            }
            return ( new ExtensionWorker(stringUrl, options));
        };
    }
    else {
        self.Worker = class extends _services_extensions_worker_polyfillNestedWorker_js__WEBPACK_IMPORTED_MODULE_4__.NestedWorker {
            constructor(stringOrUrl, options) {
                super(nativePostMessage, stringOrUrl, { name: (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_5__.basename)(( stringOrUrl.toString())), ...options });
            }
        };
    }
}
const hostUtil = new (class {
    constructor() {
        this.pid = undefined;
    }
    exit(_code) {
        nativeClose();
    }
});
class ExtensionWorker {
    constructor() {
        const channel = ( new MessageChannel());
        const emitter = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        let terminating = false;
        nativePostMessage(channel.port2, [channel.port2]);
        channel.port1.onmessage = event => {
            const { data } = event;
            if (!(data instanceof ArrayBuffer)) {
                console.warn('UNKNOWN data received', data);
                return;
            }
            const msg = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.wrap(( new Uint8Array(data, 0, data.byteLength)));
            if ((0,_services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_2__.isMessageOfType)(msg, _services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.Terminate)) {
                terminating = true;
                onTerminate('received terminate message from renderer');
                return;
            }
            emitter.fire(msg);
        };
        this.protocol = {
            onMessage: emitter.event,
            send: vsbuf => {
                if (!terminating) {
                    const data = vsbuf.buffer.buffer.slice(vsbuf.buffer.byteOffset, vsbuf.buffer.byteOffset + vsbuf.buffer.byteLength);
                    channel.port1.postMessage(data, [data]);
                }
            }
        };
    }
}
function connectToRenderer(protocol) {
    return ( new Promise(resolve => {
        const once = protocol.onMessage(raw => {
            once.dispose();
            const initData = JSON.parse(( raw.toString()));
            protocol.send((0,_services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_2__.createMessageOfType)(_services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.Initialized));
            resolve({ protocol, initData });
        });
        protocol.send((0,_services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_2__.createMessageOfType)(_services_extensions_common_extensionHostProtocol_js__WEBPACK_IMPORTED_MODULE_2__.MessageType.Ready));
    }));
}
let onTerminate = (reason) => nativeClose();
function isInitMessage(a) {
    return !!a && typeof a === 'object' && a.type === 'vscode.init' && a.data instanceof Map;
}
function create() {
    (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_6__.mark)(`code/extHost/willConnectToRenderer`);
    const res = ( new ExtensionWorker());
    return {
        onmessage(message) {
            if (!isInitMessage(message)) {
                return;
            }
            connectToRenderer(res.protocol).then(data => {
                (0,_base_common_performance_js__WEBPACK_IMPORTED_MODULE_6__.mark)(`code/extHost/didWaitForInitData`);
                const extHostMain = ( new _common_extensionHostMain_js__WEBPACK_IMPORTED_MODULE_3__.ExtensionHostMain(data.protocol, data.initData, hostUtil, null, message.data));
                patchFetching(uri => ( extHostMain.asBrowserUri(uri)));
                patchWorker(uri => ( extHostMain.asBrowserUri(uri)), () => extHostMain.getAllStaticBrowserUris());
                onTerminate = (reason) => extHostMain.terminate(reason);
            });
        }
    };
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/common/configuration.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/common/configuration.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CONFIG_NEW_WINDOW_PROFILE: () => (/* binding */ CONFIG_NEW_WINDOW_PROFILE),
/* harmony export */   ConfigurationMigrationWorkbenchContribution: () => (/* binding */ ConfigurationMigrationWorkbenchContribution),
/* harmony export */   DynamicWindowConfiguration: () => (/* binding */ DynamicWindowConfiguration),
/* harmony export */   DynamicWorkbenchSecurityConfiguration: () => (/* binding */ DynamicWorkbenchSecurityConfiguration),
/* harmony export */   Extensions: () => (/* binding */ Extensions),
/* harmony export */   applicationConfigurationNodeBase: () => (/* binding */ applicationConfigurationNodeBase),
/* harmony export */   problemsConfigurationNodeBase: () => (/* binding */ problemsConfigurationNodeBase),
/* harmony export */   securityConfigurationNodeBase: () => (/* binding */ securityConfigurationNodeBase),
/* harmony export */   windowConfigurationNodeBase: () => (/* binding */ windowConfigurationNodeBase),
/* harmony export */   workbenchConfigurationNodeBase: () => (/* binding */ workbenchConfigurationNodeBase)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../platform/configuration/common/configurationRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js");
/* harmony import */ var _platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../platform/registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");
/* harmony import */ var _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../platform/workspace/common/workspace.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.js");
/* harmony import */ var _platform_workspace_common_workspace_service_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../platform/workspace/common/workspace.service.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.service.js");
/* harmony import */ var _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../platform/configuration/common/configuration.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.js");
/* harmony import */ var _platform_configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../platform/configuration/common/configuration.service.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _services_remote_common_remoteAgentService_service_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../services/remote/common/remoteAgentService.service.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/remote/common/remoteAgentService.service.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _platform_userDataProfile_common_userDataProfile_service_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../platform/userDataProfile/common/userDataProfile.service.js */ "./node_modules/vscode/vscode/src/vs/platform/userDataProfile/common/userDataProfile.service.js");















const _moduleId = "vs/workbench/common/configuration";
const applicationConfigurationNodeBase = ( (Object.freeze({
    'id': 'application',
    'order': 100,
    'title': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 0, "Application")),
    'type': 'object'
})));
const workbenchConfigurationNodeBase = ( (Object.freeze({
    'id': 'workbench',
    'order': 7,
    'title': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 1, "Workbench")),
    'type': 'object',
})));
const securityConfigurationNodeBase = ( (Object.freeze({
    'id': 'security',
    'scope': _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__.ConfigurationScope.APPLICATION,
    'title': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 2, "Security")),
    'type': 'object',
    'order': 7
})));
const problemsConfigurationNodeBase = ( (Object.freeze({
    'id': 'problems',
    'title': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 3, "Problems")),
    'type': 'object',
    'order': 101
})));
const windowConfigurationNodeBase = ( (Object.freeze({
    'id': 'window',
    'order': 8,
    'title': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 4, "Window")),
    'type': 'object',
})));
const Extensions = {
    ConfigurationMigration: 'base.contributions.configuration.migration'
};
class ConfigurationMigrationRegistry {
    constructor() {
        this.migrations = [];
        this._onDidRegisterConfigurationMigrations = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_9__.Emitter()));
        this.onDidRegisterConfigurationMigration = this._onDidRegisterConfigurationMigrations.event;
    }
    registerConfigurationMigrations(configurationMigrations) {
        this.migrations.push(...configurationMigrations);
    }
}
const configurationMigrationRegistry = ( (new ConfigurationMigrationRegistry()));
_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_3__.Registry.add(Extensions.ConfigurationMigration, configurationMigrationRegistry);
let ConfigurationMigrationWorkbenchContribution = class ConfigurationMigrationWorkbenchContribution extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_8__.Disposable {
    static { this.ID = 'workbench.contrib.configurationMigration'; }
    constructor(configurationService, workspaceService) {
        super();
        this.configurationService = configurationService;
        this.workspaceService = workspaceService;
        this._register(this.workspaceService.onDidChangeWorkspaceFolders(async (e) => {
            for (const folder of e.added) {
                await this.migrateConfigurationsForFolder(folder, configurationMigrationRegistry.migrations);
            }
        }));
        this.migrateConfigurations(configurationMigrationRegistry.migrations);
        this._register(configurationMigrationRegistry.onDidRegisterConfigurationMigration(migration => this.migrateConfigurations(migration)));
    }
    async migrateConfigurations(migrations) {
        await this.migrateConfigurationsForFolder(undefined, migrations);
        for (const folder of this.workspaceService.getWorkspace().folders) {
            await this.migrateConfigurationsForFolder(folder, migrations);
        }
    }
    async migrateConfigurationsForFolder(folder, migrations) {
        await Promise.all([( (migrations.map(
            migration => this.migrateConfigurationsForFolderAndOverride(migration, folder?.uri)
        )))]);
    }
    async migrateConfigurationsForFolderAndOverride(migration, resource) {
        const inspectData = this.configurationService.inspect(migration.key, { resource });
        const targetPairs = this.workspaceService.getWorkbenchState() === _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_4__.WorkbenchState.WORKSPACE ? [
            ['user', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER],
            ['userLocal', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER_LOCAL],
            ['userRemote', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER_REMOTE],
            ['workspace', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE],
            ['workspaceFolder', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE_FOLDER],
        ] : [
            ['user', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER],
            ['userLocal', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER_LOCAL],
            ['userRemote', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER_REMOTE],
            ['workspace', _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE],
        ];
        for (const [dataKey, target] of targetPairs) {
            const inspectValue = inspectData[dataKey];
            if (!inspectValue) {
                continue;
            }
            const migrationValues = [];
            if (inspectValue.value !== undefined) {
                const keyValuePairs = await this.runMigration(migration, dataKey, inspectValue.value, resource, undefined);
                for (const keyValuePair of keyValuePairs ?? []) {
                    migrationValues.push([keyValuePair, []]);
                }
            }
            for (const { identifiers, value } of inspectValue.overrides ?? []) {
                if (value !== undefined) {
                    const keyValuePairs = await this.runMigration(migration, dataKey, value, resource, identifiers);
                    for (const keyValuePair of keyValuePairs ?? []) {
                        migrationValues.push([keyValuePair, identifiers]);
                    }
                }
            }
            if (migrationValues.length) {
                await Promise.allSettled(( (migrationValues.map(
                    async ([[key, value], overrideIdentifiers]) => this.configurationService.updateValue(key, value.value, { resource, overrideIdentifiers }, target)
                ))));
            }
        }
    }
    async runMigration(migration, dataKey, value, resource, overrideIdentifiers) {
        const valueAccessor = (key) => {
            const inspectData = this.configurationService.inspect(key, { resource });
            const inspectValue = inspectData[dataKey];
            if (!inspectValue) {
                return undefined;
            }
            if (!overrideIdentifiers) {
                return inspectValue.value;
            }
            return inspectValue.overrides?.find(({ identifiers }) => (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_12__.equals)(identifiers, overrideIdentifiers))?.value;
        };
        const result = await migration.migrateFn(value, valueAccessor);
        return Array.isArray(result) ? result : [[migration.key, result]];
    }
};
ConfigurationMigrationWorkbenchContribution = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _platform_configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_7__.IConfigurationService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_workspace_common_workspace_service_js__WEBPACK_IMPORTED_MODULE_5__.IWorkspaceContextService)))
], ConfigurationMigrationWorkbenchContribution)));
let DynamicWorkbenchSecurityConfiguration = class DynamicWorkbenchSecurityConfiguration extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_8__.Disposable {
    static { this.ID = 'workbench.contrib.dynamicWorkbenchSecurityConfiguration'; }
    constructor(remoteAgentService) {
        super();
        this.remoteAgentService = remoteAgentService;
        this._ready = ( (new _base_common_async_js__WEBPACK_IMPORTED_MODULE_13__.DeferredPromise()));
        this.ready = this._ready.p;
        this.create();
    }
    async create() {
        try {
            await this.doCreate();
        }
        finally {
            this._ready.complete();
        }
    }
    async doCreate() {
        if (!_base_common_platform_js__WEBPACK_IMPORTED_MODULE_11__.isWindows) {
            const remoteEnvironment = await this.remoteAgentService.getEnvironment();
            if (remoteEnvironment?.os !== _base_common_platform_js__WEBPACK_IMPORTED_MODULE_11__.OperatingSystem.Windows) {
                return;
            }
        }
        const registry = ( (_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_3__.Registry.as(_platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__.Extensions.Configuration)));
        registry.registerConfiguration({
            ...securityConfigurationNodeBase,
            'properties': {
                'security.allowedUNCHosts': {
                    'type': 'array',
                    'items': {
                        'type': 'string',
                        'pattern': '^[^\\\\]+$',
                        'patternErrorMessage': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 5, 'UNC host names must not contain backslashes.'))
                    },
                    'default': [],
                    'markdownDescription': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
                        _moduleId,
                        6,
                        'A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc.'
                    )),
                    'scope': _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__.ConfigurationScope.MACHINE
                },
                'security.restrictUNCAccess': {
                    'type': 'boolean',
                    'default': true,
                    'markdownDescription': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
                        _moduleId,
                        7,
                        'If enabled, only allows access to UNC host names that are allowed by the `#security.allowedUNCHosts#` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc.'
                    )),
                    'scope': _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__.ConfigurationScope.MACHINE
                }
            }
        });
    }
};
DynamicWorkbenchSecurityConfiguration = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _services_remote_common_remoteAgentService_service_js__WEBPACK_IMPORTED_MODULE_10__.IRemoteAgentService)))
], DynamicWorkbenchSecurityConfiguration)));
const CONFIG_NEW_WINDOW_PROFILE = 'window.newWindowProfile';
let DynamicWindowConfiguration = class DynamicWindowConfiguration extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_8__.Disposable {
    static { this.ID = 'workbench.contrib.dynamicWindowConfiguration'; }
    constructor(userDataProfilesService, configurationService) {
        super();
        this.userDataProfilesService = userDataProfilesService;
        this.configurationService = configurationService;
        this.registerNewWindowProfileConfiguration();
        this._register(this.userDataProfilesService.onDidChangeProfiles((e) => this.registerNewWindowProfileConfiguration()));
        this.setNewWindowProfile();
        this.checkAndResetNewWindowProfileConfig();
        this._register(configurationService.onDidChangeConfiguration(e => {
            if (e.source !== _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.DEFAULT && e.affectsConfiguration(CONFIG_NEW_WINDOW_PROFILE)) {
                this.setNewWindowProfile();
            }
        }));
        this._register(this.userDataProfilesService.onDidChangeProfiles(() => this.checkAndResetNewWindowProfileConfig()));
    }
    registerNewWindowProfileConfiguration() {
        const registry = ( (_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_3__.Registry.as(_platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__.Extensions.Configuration)));
        const configurationNode = {
            ...windowConfigurationNodeBase,
            'properties': {
                [CONFIG_NEW_WINDOW_PROFILE]: {
                    'type': ['string', 'null'],
                    'default': null,
                    'enum': [...( (this.userDataProfilesService.profiles.map(profile => profile.name))), null],
                    'enumItemLabels': [...( (this.userDataProfilesService.profiles.map(p => ''))), ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 8, "Active Window"))],
                    'description': ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
                        _moduleId,
                        9,
                        "Specifies the profile to use when opening a new window. If a profile name is provided, the new window will use that profile. If no profile name is provided, the new window will use the profile of the active window or the default profile if no active window exists."
                    )),
                    'scope': _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_2__.ConfigurationScope.APPLICATION,
                }
            }
        };
        if (this.configurationNode) {
            registry.updateConfigurations({ add: [configurationNode], remove: [this.configurationNode] });
        }
        else {
            registry.registerConfiguration(configurationNode);
        }
        this.configurationNode = configurationNode;
    }
    setNewWindowProfile() {
        const newWindowProfileName = this.configurationService.getValue(CONFIG_NEW_WINDOW_PROFILE);
        this.newWindowProfile = newWindowProfileName ? this.userDataProfilesService.profiles.find(profile => profile.name === newWindowProfileName) : undefined;
    }
    checkAndResetNewWindowProfileConfig() {
        const newWindowProfileName = this.configurationService.getValue(CONFIG_NEW_WINDOW_PROFILE);
        if (!newWindowProfileName) {
            return;
        }
        const profile = this.newWindowProfile ? this.userDataProfilesService.profiles.find(profile => profile.id === this.newWindowProfile.id) : undefined;
        if (newWindowProfileName === profile?.name) {
            return;
        }
        this.configurationService.updateValue(CONFIG_NEW_WINDOW_PROFILE, profile?.name);
    }
};
DynamicWindowConfiguration = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _platform_userDataProfile_common_userDataProfile_service_js__WEBPACK_IMPORTED_MODULE_14__.IUserDataProfilesService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_7__.IConfigurationService)))
], DynamicWindowConfiguration)));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/common/editor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/common/editor.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractEditorInput: () => (/* binding */ AbstractEditorInput),
/* harmony export */   BINARY_DIFF_EDITOR_ID: () => (/* binding */ BINARY_DIFF_EDITOR_ID),
/* harmony export */   CloseDirection: () => (/* binding */ CloseDirection),
/* harmony export */   DEFAULT_EDITOR_ASSOCIATION: () => (/* binding */ DEFAULT_EDITOR_ASSOCIATION),
/* harmony export */   EditorCloseContext: () => (/* binding */ EditorCloseContext),
/* harmony export */   EditorCloseMethod: () => (/* binding */ EditorCloseMethod),
/* harmony export */   EditorExtensions: () => (/* binding */ EditorExtensions),
/* harmony export */   EditorInputCapabilities: () => (/* binding */ EditorInputCapabilities),
/* harmony export */   EditorPaneSelectionChangeReason: () => (/* binding */ EditorPaneSelectionChangeReason),
/* harmony export */   EditorPaneSelectionCompareResult: () => (/* binding */ EditorPaneSelectionCompareResult),
/* harmony export */   EditorResourceAccessor: () => (/* binding */ EditorResourceAccessor),
/* harmony export */   EditorsOrder: () => (/* binding */ EditorsOrder),
/* harmony export */   GroupModelChangeKind: () => (/* binding */ GroupModelChangeKind),
/* harmony export */   SIDE_BY_SIDE_EDITOR_ID: () => (/* binding */ SIDE_BY_SIDE_EDITOR_ID),
/* harmony export */   SaveReason: () => (/* binding */ SaveReason),
/* harmony export */   SaveSourceRegistry: () => (/* binding */ SaveSourceRegistry),
/* harmony export */   SideBySideEditor: () => (/* binding */ SideBySideEditor),
/* harmony export */   TEXT_DIFF_EDITOR_ID: () => (/* binding */ TEXT_DIFF_EDITOR_ID),
/* harmony export */   Verbosity: () => (/* binding */ Verbosity),
/* harmony export */   createEditorOpenError: () => (/* binding */ createEditorOpenError),
/* harmony export */   createTooLargeFileError: () => (/* binding */ createTooLargeFileError),
/* harmony export */   findViewStateForEditor: () => (/* binding */ findViewStateForEditor),
/* harmony export */   isDiffEditorInput: () => (/* binding */ isDiffEditorInput),
/* harmony export */   isEditorCommandsContext: () => (/* binding */ isEditorCommandsContext),
/* harmony export */   isEditorIdentifier: () => (/* binding */ isEditorIdentifier),
/* harmony export */   isEditorInput: () => (/* binding */ isEditorInput),
/* harmony export */   isEditorInputWithOptions: () => (/* binding */ isEditorInputWithOptions),
/* harmony export */   isEditorInputWithOptionsAndGroup: () => (/* binding */ isEditorInputWithOptionsAndGroup),
/* harmony export */   isEditorOpenError: () => (/* binding */ isEditorOpenError),
/* harmony export */   isEditorPaneWithSelection: () => (/* binding */ isEditorPaneWithSelection),
/* harmony export */   isResourceDiffEditorInput: () => (/* binding */ isResourceDiffEditorInput),
/* harmony export */   isResourceEditorInput: () => (/* binding */ isResourceEditorInput),
/* harmony export */   isResourceMergeEditorInput: () => (/* binding */ isResourceMergeEditorInput),
/* harmony export */   isResourceMultiDiffEditorInput: () => (/* binding */ isResourceMultiDiffEditorInput),
/* harmony export */   isResourceSideBySideEditorInput: () => (/* binding */ isResourceSideBySideEditorInput),
/* harmony export */   isSideBySideEditorInput: () => (/* binding */ isSideBySideEditorInput),
/* harmony export */   isTextEditorViewState: () => (/* binding */ isTextEditorViewState),
/* harmony export */   isUntitledResourceEditorInput: () => (/* binding */ isUntitledResourceEditorInput),
/* harmony export */   pathsToEditors: () => (/* binding */ pathsToEditors),
/* harmony export */   preventEditorClose: () => (/* binding */ preventEditorClose)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../platform/registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");
/* harmony import */ var _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../platform/files/common/files.js */ "./node_modules/vscode/vscode/src/vs/platform/files/common/files.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../base/common/errorMessage.js */ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js");
/* harmony import */ var _base_common_actions_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../base/common/actions.js */ "./node_modules/vscode/vscode/src/vs/base/common/actions.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");











const _moduleId = "vs/workbench/common/editor";
const EditorExtensions = {
    EditorPane: 'workbench.contributions.editors',
    EditorFactory: 'workbench.contributions.editor.inputFactories'
};
const DEFAULT_EDITOR_ASSOCIATION = {
    id: 'default',
    displayName: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 0, "Text Editor")),
    providerDisplayName: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 1, "Built-in"))
};
const SIDE_BY_SIDE_EDITOR_ID = 'workbench.editor.sidebysideEditor';
const TEXT_DIFF_EDITOR_ID = 'workbench.editors.textDiffEditor';
const BINARY_DIFF_EDITOR_ID = 'workbench.editors.binaryResourceDiffEditor';
var EditorPaneSelectionChangeReason;
( ((function(EditorPaneSelectionChangeReason) {
    EditorPaneSelectionChangeReason[EditorPaneSelectionChangeReason["PROGRAMMATIC"] = 1] = "PROGRAMMATIC";
    EditorPaneSelectionChangeReason[EditorPaneSelectionChangeReason["USER"] = 2] = "USER";
    EditorPaneSelectionChangeReason[EditorPaneSelectionChangeReason["EDIT"] = 3] = "EDIT";
    EditorPaneSelectionChangeReason[EditorPaneSelectionChangeReason["NAVIGATION"] = 4] = "NAVIGATION";
    EditorPaneSelectionChangeReason[EditorPaneSelectionChangeReason["JUMP"] = 5] = "JUMP";
})(EditorPaneSelectionChangeReason || (EditorPaneSelectionChangeReason = {}))));
var EditorPaneSelectionCompareResult;
( ((function(EditorPaneSelectionCompareResult) {
    EditorPaneSelectionCompareResult[EditorPaneSelectionCompareResult["IDENTICAL"] = 1] = "IDENTICAL";
    EditorPaneSelectionCompareResult[EditorPaneSelectionCompareResult["SIMILAR"] = 2] = "SIMILAR";
    EditorPaneSelectionCompareResult[EditorPaneSelectionCompareResult["DIFFERENT"] = 3] = "DIFFERENT";
})(
    EditorPaneSelectionCompareResult || (EditorPaneSelectionCompareResult = {})
)));
function isEditorPaneWithSelection(editorPane) {
    const candidate = editorPane;
    return !!candidate && typeof candidate.getSelection === 'function' && !!candidate.onDidChangeSelection;
}
function findViewStateForEditor(input, group, editorService) {
    for (const editorPane of editorService.visibleEditorPanes) {
        if (editorPane.group.id === group && input.matches(editorPane.input)) {
            return editorPane.getViewState();
        }
    }
    return undefined;
}
function isResourceEditorInput(editor) {
    if (isEditorInput(editor)) {
        return false;
    }
    const candidate = editor;
    return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(candidate?.resource);
}
function isResourceDiffEditorInput(editor) {
    if (isEditorInput(editor)) {
        return false;
    }
    const candidate = editor;
    return candidate?.original !== undefined && candidate.modified !== undefined;
}
function isResourceMultiDiffEditorInput(editor) {
    if (isEditorInput(editor)) {
        return false;
    }
    const candidate = editor;
    if (!candidate) {
        return false;
    }
    if (candidate.resources && !Array.isArray(candidate.resources)) {
        return false;
    }
    return !!candidate.resources || !!candidate.multiDiffSource;
}
function isResourceSideBySideEditorInput(editor) {
    if (isEditorInput(editor)) {
        return false;
    }
    if (isResourceDiffEditorInput(editor)) {
        return false;
    }
    const candidate = editor;
    return candidate?.primary !== undefined && candidate.secondary !== undefined;
}
function isUntitledResourceEditorInput(editor) {
    if (isEditorInput(editor)) {
        return false;
    }
    const candidate = editor;
    if (!candidate) {
        return false;
    }
    return candidate.resource === undefined || candidate.resource.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_7__.Schemas.untitled || candidate.forceUntitled === true;
}
function isResourceMergeEditorInput(editor) {
    if (isEditorInput(editor)) {
        return false;
    }
    const candidate = editor;
    return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(candidate?.base?.resource) && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(candidate?.input1?.resource) && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(candidate?.input2?.resource) && _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(candidate?.result?.resource);
}
var Verbosity;
( ((function(Verbosity) {
    Verbosity[Verbosity["SHORT"] = 0] = "SHORT";
    Verbosity[Verbosity["MEDIUM"] = 1] = "MEDIUM";
    Verbosity[Verbosity["LONG"] = 2] = "LONG";
})(Verbosity || (Verbosity = {}))));
var SaveReason;
( ((function(SaveReason) {
    SaveReason[SaveReason["EXPLICIT"] = 1] = "EXPLICIT";
    SaveReason[SaveReason["AUTO"] = 2] = "AUTO";
    SaveReason[SaveReason["FOCUS_CHANGE"] = 3] = "FOCUS_CHANGE";
    SaveReason[SaveReason["WINDOW_CHANGE"] = 4] = "WINDOW_CHANGE";
})(SaveReason || (SaveReason = {}))));
class SaveSourceFactory {
    constructor() {
        this.mapIdToSaveSource = ( (new Map()));
    }
    registerSource(id, label) {
        let sourceDescriptor = this.mapIdToSaveSource.get(id);
        if (!sourceDescriptor) {
            sourceDescriptor = { source: id, label };
            this.mapIdToSaveSource.set(id, sourceDescriptor);
        }
        return sourceDescriptor.source;
    }
    getSourceLabel(source) {
        return this.mapIdToSaveSource.get(source)?.label ?? source;
    }
}
const SaveSourceRegistry = ( (new SaveSourceFactory()));
var EditorInputCapabilities;
( ((function(EditorInputCapabilities) {
    EditorInputCapabilities[EditorInputCapabilities["None"] = 0] = "None";
    EditorInputCapabilities[EditorInputCapabilities["Readonly"] = 2] = "Readonly";
    EditorInputCapabilities[EditorInputCapabilities["Untitled"] = 4] = "Untitled";
    EditorInputCapabilities[EditorInputCapabilities["Singleton"] = 8] = "Singleton";
    EditorInputCapabilities[EditorInputCapabilities["RequiresTrust"] = 16] = "RequiresTrust";
    EditorInputCapabilities[EditorInputCapabilities["CanSplitInGroup"] = 32] = "CanSplitInGroup";
    EditorInputCapabilities[EditorInputCapabilities["ForceDescription"] = 64] = "ForceDescription";
    EditorInputCapabilities[EditorInputCapabilities["CanDropIntoEditor"] = 128] = "CanDropIntoEditor";
    EditorInputCapabilities[EditorInputCapabilities["MultipleEditors"] = 256] = "MultipleEditors";
    EditorInputCapabilities[EditorInputCapabilities["Scratchpad"] = 512] = "Scratchpad";
})(EditorInputCapabilities || (EditorInputCapabilities = {}))));
class AbstractEditorInput extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
}
function isEditorInput(editor) {
    return editor instanceof AbstractEditorInput;
}
function isEditorInputWithPreferredResource(editor) {
    const candidate = editor;
    return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.isUri(candidate?.preferredResource);
}
function isSideBySideEditorInput(editor) {
    const candidate = editor;
    return isEditorInput(candidate?.primary) && isEditorInput(candidate?.secondary);
}
function isDiffEditorInput(editor) {
    const candidate = editor;
    return isEditorInput(candidate?.modified) && isEditorInput(candidate?.original);
}
function createTooLargeFileError(group, input, options, message, preferencesService) {
    return createEditorOpenError(message, [
        (0,_base_common_actions_js__WEBPACK_IMPORTED_MODULE_9__.toAction)({
            id: 'workbench.action.openLargeFile', label: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 2, "Open Anyway")), run: () => {
                const fileEditorOptions = {
                    ...options,
                    limits: {
                        size: Number.MAX_VALUE
                    }
                };
                group.openEditor(input, fileEditorOptions);
            }
        }),
        (0,_base_common_actions_js__WEBPACK_IMPORTED_MODULE_9__.toAction)({
            id: 'workbench.action.configureEditorLargeFileConfirmation', label: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 3, "Configure Limit")), run: () => {
                return preferencesService.openUserSettings({ query: 'workbench.editorLargeFileConfirmation' });
            }
        }),
    ], {
        forceMessage: true,
        forceSeverity: _base_common_severity_js__WEBPACK_IMPORTED_MODULE_10__["default"].Warning
    });
}
function isEditorInputWithOptions(editor) {
    const candidate = editor;
    return isEditorInput(candidate?.editor);
}
function isEditorInputWithOptionsAndGroup(editor) {
    const candidate = editor;
    return isEditorInputWithOptions(editor) && candidate?.group !== undefined;
}
function isEditorIdentifier(identifier) {
    const candidate = identifier;
    return typeof candidate?.groupId === 'number' && isEditorInput(candidate.editor);
}
function isEditorCommandsContext(context) {
    const candidate = context;
    return typeof candidate?.groupId === 'number';
}
var EditorCloseContext;
( ((function(EditorCloseContext) {
    EditorCloseContext[EditorCloseContext["UNKNOWN"] = 0] = "UNKNOWN";
    EditorCloseContext[EditorCloseContext["REPLACE"] = 1] = "REPLACE";
    EditorCloseContext[EditorCloseContext["MOVE"] = 2] = "MOVE";
    EditorCloseContext[EditorCloseContext["UNPIN"] = 3] = "UNPIN";
})(EditorCloseContext || (EditorCloseContext = {}))));
var GroupModelChangeKind;
( ((function(GroupModelChangeKind) {
    GroupModelChangeKind[GroupModelChangeKind["GROUP_ACTIVE"] = 0] = "GROUP_ACTIVE";
    GroupModelChangeKind[GroupModelChangeKind["GROUP_INDEX"] = 1] = "GROUP_INDEX";
    GroupModelChangeKind[GroupModelChangeKind["GROUP_LABEL"] = 2] = "GROUP_LABEL";
    GroupModelChangeKind[GroupModelChangeKind["GROUP_LOCKED"] = 3] = "GROUP_LOCKED";
    GroupModelChangeKind[GroupModelChangeKind["EDITORS_SELECTION"] = 4] = "EDITORS_SELECTION";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_OPEN"] = 5] = "EDITOR_OPEN";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_CLOSE"] = 6] = "EDITOR_CLOSE";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_MOVE"] = 7] = "EDITOR_MOVE";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_ACTIVE"] = 8] = "EDITOR_ACTIVE";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_LABEL"] = 9] = "EDITOR_LABEL";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_CAPABILITIES"] = 10] = "EDITOR_CAPABILITIES";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_PIN"] = 11] = "EDITOR_PIN";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_TRANSIENT"] = 12] = "EDITOR_TRANSIENT";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_STICKY"] = 13] = "EDITOR_STICKY";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_DIRTY"] = 14] = "EDITOR_DIRTY";
    GroupModelChangeKind[GroupModelChangeKind["EDITOR_WILL_DISPOSE"] = 15] = "EDITOR_WILL_DISPOSE";
})(GroupModelChangeKind || (GroupModelChangeKind = {}))));
var SideBySideEditor;
( ((function(SideBySideEditor) {
    SideBySideEditor[SideBySideEditor["PRIMARY"] = 1] = "PRIMARY";
    SideBySideEditor[SideBySideEditor["SECONDARY"] = 2] = "SECONDARY";
    SideBySideEditor[SideBySideEditor["BOTH"] = 3] = "BOTH";
    SideBySideEditor[SideBySideEditor["ANY"] = 4] = "ANY";
})(SideBySideEditor || (SideBySideEditor = {}))));
class EditorResourceAccessorImpl {
    getOriginalUri(editor, options) {
        if (!editor) {
            return undefined;
        }
        if (isResourceMergeEditorInput(editor)) {
            return EditorResourceAccessor.getOriginalUri(editor.result, options);
        }
        if (options?.supportSideBySide) {
            const { primary, secondary } = this.getSideEditors(editor);
            if (primary && secondary) {
                if (options?.supportSideBySide === SideBySideEditor.BOTH) {
                    return {
                        primary: this.getOriginalUri(primary, { filterByScheme: options.filterByScheme }),
                        secondary: this.getOriginalUri(secondary, { filterByScheme: options.filterByScheme })
                    };
                }
                else if (options?.supportSideBySide === SideBySideEditor.ANY) {
                    return this.getOriginalUri(primary, { filterByScheme: options.filterByScheme }) ?? this.getOriginalUri(secondary, { filterByScheme: options.filterByScheme });
                }
                editor = options.supportSideBySide === SideBySideEditor.PRIMARY ? primary : secondary;
            }
        }
        if (isResourceDiffEditorInput(editor) || isResourceMultiDiffEditorInput(editor) || isResourceSideBySideEditorInput(editor) || isResourceMergeEditorInput(editor)) {
            return undefined;
        }
        const originalResource = isEditorInputWithPreferredResource(editor) ? editor.preferredResource : editor.resource;
        if (!originalResource || !options || !options.filterByScheme) {
            return originalResource;
        }
        return this.filterUri(originalResource, options.filterByScheme);
    }
    getSideEditors(editor) {
        if (isSideBySideEditorInput(editor) || isResourceSideBySideEditorInput(editor)) {
            return { primary: editor.primary, secondary: editor.secondary };
        }
        if (isDiffEditorInput(editor) || isResourceDiffEditorInput(editor)) {
            return { primary: editor.modified, secondary: editor.original };
        }
        return { primary: undefined, secondary: undefined };
    }
    getCanonicalUri(editor, options) {
        if (!editor) {
            return undefined;
        }
        if (isResourceMergeEditorInput(editor)) {
            return EditorResourceAccessor.getCanonicalUri(editor.result, options);
        }
        if (options?.supportSideBySide) {
            const { primary, secondary } = this.getSideEditors(editor);
            if (primary && secondary) {
                if (options?.supportSideBySide === SideBySideEditor.BOTH) {
                    return {
                        primary: this.getCanonicalUri(primary, { filterByScheme: options.filterByScheme }),
                        secondary: this.getCanonicalUri(secondary, { filterByScheme: options.filterByScheme })
                    };
                }
                else if (options?.supportSideBySide === SideBySideEditor.ANY) {
                    return this.getCanonicalUri(primary, { filterByScheme: options.filterByScheme }) ?? this.getCanonicalUri(secondary, { filterByScheme: options.filterByScheme });
                }
                editor = options.supportSideBySide === SideBySideEditor.PRIMARY ? primary : secondary;
            }
        }
        if (isResourceDiffEditorInput(editor) || isResourceMultiDiffEditorInput(editor) || isResourceSideBySideEditorInput(editor) || isResourceMergeEditorInput(editor)) {
            return undefined;
        }
        const canonicalResource = editor.resource;
        if (!canonicalResource || !options || !options.filterByScheme) {
            return canonicalResource;
        }
        return this.filterUri(canonicalResource, options.filterByScheme);
    }
    filterUri(resource, filter) {
        if (Array.isArray(filter)) {
            if (( (filter.some(scheme => resource.scheme === scheme)))) {
                return resource;
            }
        }
        else {
            if (filter === resource.scheme) {
                return resource;
            }
        }
        return undefined;
    }
}
var EditorCloseMethod;
( ((function(EditorCloseMethod) {
    EditorCloseMethod[EditorCloseMethod["UNKNOWN"] = 0] = "UNKNOWN";
    EditorCloseMethod[EditorCloseMethod["KEYBOARD"] = 1] = "KEYBOARD";
    EditorCloseMethod[EditorCloseMethod["MOUSE"] = 2] = "MOUSE";
})(EditorCloseMethod || (EditorCloseMethod = {}))));
function preventEditorClose(group, editor, method, configuration) {
    if (!group.isSticky(editor)) {
        return false;
    }
    switch (configuration.preventPinnedEditorClose) {
        case 'keyboardAndMouse': return method === EditorCloseMethod.MOUSE || method === EditorCloseMethod.KEYBOARD;
        case 'mouse': return method === EditorCloseMethod.MOUSE;
        case 'keyboard': return method === EditorCloseMethod.KEYBOARD;
    }
    return false;
}
const EditorResourceAccessor = ( (new EditorResourceAccessorImpl()));
var CloseDirection;
( ((function(CloseDirection) {
    CloseDirection[CloseDirection["LEFT"] = 0] = "LEFT";
    CloseDirection[CloseDirection["RIGHT"] = 1] = "RIGHT";
})(CloseDirection || (CloseDirection = {}))));
class EditorFactoryRegistry {
    constructor() {
        this.editorSerializerConstructors = ( (new Map()));
        this.editorSerializerInstances = ( (new Map()));
    }
    start(accessor) {
        const instantiationService = this.instantiationService = accessor.get(_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__.IInstantiationService);
        for (const [key, ctor] of this.editorSerializerConstructors) {
            this.createEditorSerializer(key, ctor, instantiationService);
        }
        this.editorSerializerConstructors.clear();
    }
    createEditorSerializer(editorTypeId, ctor, instantiationService) {
        const instance = instantiationService.createInstance(ctor);
        this.editorSerializerInstances.set(editorTypeId, instance);
    }
    registerFileEditorFactory(factory) {
        if (this.fileEditorFactory) {
            throw ( (new Error('Can only register one file editor factory.')));
        }
        this.fileEditorFactory = factory;
    }
    getFileEditorFactory() {
        return (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.assertIsDefined)(this.fileEditorFactory);
    }
    registerEditorSerializer(editorTypeId, ctor) {
        if (( (this.editorSerializerConstructors.has(editorTypeId))) || ( (this.editorSerializerInstances.has(editorTypeId)))) {
            throw ( (new Error(
                `A editor serializer with type ID '${editorTypeId}' was already registered.`
            )));
        }
        if (!this.instantiationService) {
            this.editorSerializerConstructors.set(editorTypeId, ctor);
        }
        else {
            this.createEditorSerializer(editorTypeId, ctor, this.instantiationService);
        }
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            this.editorSerializerConstructors.delete(editorTypeId);
            this.editorSerializerInstances.delete(editorTypeId);
        });
    }
    getEditorSerializer(arg1) {
        return this.editorSerializerInstances.get(typeof arg1 === 'string' ? arg1 : arg1.typeId);
    }
}
_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_5__.Registry.add(EditorExtensions.EditorFactory, ( (new EditorFactoryRegistry())));
async function pathsToEditors(paths, fileService, logService) {
    if (!paths || !paths.length) {
        return [];
    }
    return await Promise.all(( (paths.map(async (path) => {
        const resource = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.revive(path.fileUri);
        if (!resource) {
            logService.info('Cannot resolve the path because it is not valid.', path);
            return undefined;
        }
        const canHandleResource = await fileService.canHandleResource(resource);
        if (!canHandleResource) {
            logService.info('Cannot resolve the path because it cannot be handled', path);
            return undefined;
        }
        let exists = path.exists;
        let type = path.type;
        if (typeof exists !== 'boolean' || typeof type !== 'number') {
            try {
                type = (await fileService.stat(resource)).isDirectory ? _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileType.Directory : _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileType.Unknown;
                exists = true;
            }
            catch (error) {
                logService.error(error);
                exists = false;
            }
        }
        if (!exists && path.openOnlyIfExists) {
            logService.info('Cannot resolve the path because it does not exist', path);
            return undefined;
        }
        if (type === _platform_files_common_files_js__WEBPACK_IMPORTED_MODULE_6__.FileType.Directory) {
            logService.info('Cannot resolve the path because it is a directory', path);
            return undefined;
        }
        const options = {
            ...path.options,
            pinned: true
        };
        if (!exists) {
            return { resource, options, forceUntitled: true };
        }
        return { resource, options };
    }))));
}
var EditorsOrder;
( ((function(EditorsOrder) {
    EditorsOrder[EditorsOrder["MOST_RECENTLY_ACTIVE"] = 0] = "MOST_RECENTLY_ACTIVE";
    EditorsOrder[EditorsOrder["SEQUENTIAL"] = 1] = "SEQUENTIAL";
})(EditorsOrder || (EditorsOrder = {}))));
function isTextEditorViewState(candidate) {
    const viewState = candidate;
    if (!viewState) {
        return false;
    }
    const diffEditorViewState = viewState;
    if (diffEditorViewState.modified) {
        return isTextEditorViewState(diffEditorViewState.modified);
    }
    const codeEditorViewState = viewState;
    return !!(codeEditorViewState.contributionsState && codeEditorViewState.viewState && Array.isArray(codeEditorViewState.cursorState));
}
function isEditorOpenError(obj) {
    return (0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_8__.isErrorWithActions)(obj);
}
function createEditorOpenError(messageOrError, actions, options) {
    const error = (0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_8__.createErrorWithActions)(messageOrError, actions);
    error.forceMessage = options?.forceMessage;
    error.forceSeverity = options?.forceSeverity;
    error.allowDialog = options?.allowDialog;
    return error;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/common/views.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/common/views.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Extensions: () => (/* binding */ Extensions),
/* harmony export */   NoTreeViewError: () => (/* binding */ NoTreeViewError),
/* harmony export */   ResolvableTreeItem: () => (/* binding */ ResolvableTreeItem),
/* harmony export */   TreeItemCollapsibleState: () => (/* binding */ TreeItemCollapsibleState),
/* harmony export */   VIEWS_LOG_ID: () => (/* binding */ VIEWS_LOG_ID),
/* harmony export */   VIEWS_LOG_NAME: () => (/* binding */ VIEWS_LOG_NAME),
/* harmony export */   ViewContainerLocation: () => (/* binding */ ViewContainerLocation),
/* harmony export */   ViewContainerLocationToString: () => (/* binding */ ViewContainerLocationToString),
/* harmony export */   ViewContainerLocations: () => (/* binding */ ViewContainerLocations),
/* harmony export */   ViewContentGroups: () => (/* binding */ ViewContentGroups),
/* harmony export */   ViewVisibilityState: () => (/* binding */ ViewVisibilityState),
/* harmony export */   defaultViewIcon: () => (/* binding */ defaultViewIcon)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../platform/registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../base/common/codicons.js */ "./node_modules/vscode/vscode/src/vs/base/common/codicons.js");
/* harmony import */ var _platform_theme_common_iconRegistry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../platform/theme/common/iconRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/theme/common/iconRegistry.js");








const _moduleId = "vs/workbench/common/views";
const VIEWS_LOG_ID = 'views';
const VIEWS_LOG_NAME = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 0, "Views"));
const defaultViewIcon = (0,_platform_theme_common_iconRegistry_js__WEBPACK_IMPORTED_MODULE_7__.registerIcon)('default-view-icon', _base_common_codicons_js__WEBPACK_IMPORTED_MODULE_6__.Codicon.window, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 1, 'Default view icon.')));
var Extensions;
( ((function(Extensions) {
    Extensions.ViewContainersRegistry = 'workbench.registry.view.containers';
    Extensions.ViewsRegistry = 'workbench.registry.view';
})(Extensions || (Extensions = {}))));
var ViewContainerLocation;
( ((function(ViewContainerLocation) {
    ViewContainerLocation[ViewContainerLocation["Sidebar"] = 0] = "Sidebar";
    ViewContainerLocation[ViewContainerLocation["Panel"] = 1] = "Panel";
    ViewContainerLocation[ViewContainerLocation["AuxiliaryBar"] = 2] = "AuxiliaryBar";
})(ViewContainerLocation || (ViewContainerLocation = {}))));
const ViewContainerLocations = [ViewContainerLocation.Sidebar, ViewContainerLocation.Panel, ViewContainerLocation.AuxiliaryBar];
function ViewContainerLocationToString(viewContainerLocation) {
    switch (viewContainerLocation) {
        case ViewContainerLocation.Sidebar: return 'sidebar';
        case ViewContainerLocation.Panel: return 'panel';
        case ViewContainerLocation.AuxiliaryBar: return 'auxiliarybar';
    }
}
class ViewContainersRegistryImpl extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor() {
        super(...arguments);
        this._onDidRegister = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onDidRegister = this._onDidRegister.event;
        this._onDidDeregister = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onDidDeregister = this._onDidDeregister.event;
        this.viewContainers = ( (new Map()));
        this.defaultViewContainers = [];
    }
    get all() {
        return [...( (this.viewContainers.values()))].flat();
    }
    registerViewContainer(viewContainerDescriptor, viewContainerLocation, options) {
        const existing = this.get(viewContainerDescriptor.id);
        if (existing) {
            return existing;
        }
        const viewContainer = viewContainerDescriptor;
        viewContainer.openCommandActionDescriptor = options?.doNotRegisterOpenCommand ? undefined : (viewContainer.openCommandActionDescriptor ?? { id: viewContainer.id });
        const viewContainers = (0,_base_common_map_js__WEBPACK_IMPORTED_MODULE_3__.getOrSet)(this.viewContainers, viewContainerLocation, []);
        viewContainers.push(viewContainer);
        if (options?.isDefault) {
            this.defaultViewContainers.push(viewContainer);
        }
        this._onDidRegister.fire({ viewContainer, viewContainerLocation });
        return viewContainer;
    }
    deregisterViewContainer(viewContainer) {
        for (const viewContainerLocation of ( (this.viewContainers.keys()))) {
            const viewContainers = this.viewContainers.get(viewContainerLocation);
            const index = viewContainers?.indexOf(viewContainer);
            if (index !== -1) {
                viewContainers?.splice(index, 1);
                if (viewContainers.length === 0) {
                    this.viewContainers.delete(viewContainerLocation);
                }
                this._onDidDeregister.fire({ viewContainer, viewContainerLocation });
                return;
            }
        }
    }
    get(id) {
        return this.all.filter(viewContainer => viewContainer.id === id)[0];
    }
    getViewContainers(location) {
        return [...(this.viewContainers.get(location) || [])];
    }
    getViewContainerLocation(container) {
        return [...( (this.viewContainers.keys()))].filter(location => this.getViewContainers(location).filter(viewContainer => viewContainer?.id === container.id).length > 0)[0];
    }
    getDefaultViewContainer(location) {
        return this.defaultViewContainers.find(viewContainer => this.getViewContainerLocation(viewContainer) === location);
    }
}
_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_4__.Registry.add(Extensions.ViewContainersRegistry, ( (new ViewContainersRegistryImpl())));
var ViewContentGroups;
( ((function(ViewContentGroups) {
    ViewContentGroups["Open"] = "2_open";
    ViewContentGroups["Debug"] = "4_debug";
    ViewContentGroups["SCM"] = "5_scm";
    ViewContentGroups["More"] = "9_more";
})(ViewContentGroups || (ViewContentGroups = {}))));
function compareViewContentDescriptors(a, b) {
    const aGroup = a.group ?? ViewContentGroups.More;
    const bGroup = b.group ?? ViewContentGroups.More;
    if (aGroup !== bGroup) {
        return aGroup.localeCompare(bGroup);
    }
    return (a.order ?? 5) - (b.order ?? 5);
}
class ViewsRegistry extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    constructor() {
        super(...arguments);
        this._onViewsRegistered = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onViewsRegistered = this._onViewsRegistered.event;
        this._onViewsDeregistered = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onViewsDeregistered = this._onViewsDeregistered.event;
        this._onDidChangeContainer = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onDidChangeContainer = this._onDidChangeContainer.event;
        this._onDidChangeViewWelcomeContent = this._register(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter())));
        this.onDidChangeViewWelcomeContent = this._onDidChangeViewWelcomeContent.event;
        this._viewContainers = [];
        this._views = ( (new Map()));
        this._viewWelcomeContents = ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_3__.SetMap()));
    }
    registerViews(views, viewContainer) {
        this.registerViews2([{ views, viewContainer }]);
    }
    registerViews2(views) {
        views.forEach(({ views, viewContainer }) => this.addViews(views, viewContainer));
        this._onViewsRegistered.fire(views);
    }
    deregisterViews(viewDescriptors, viewContainer) {
        const views = this.removeViews(viewDescriptors, viewContainer);
        if (views.length) {
            this._onViewsDeregistered.fire({ views, viewContainer });
        }
    }
    moveViews(viewsToMove, viewContainer) {
        for (const container of ( (this._views.keys()))) {
            if (container !== viewContainer) {
                const views = this.removeViews(viewsToMove, container);
                if (views.length) {
                    this.addViews(views, viewContainer);
                    this._onDidChangeContainer.fire({ views, from: container, to: viewContainer });
                }
            }
        }
    }
    getViews(loc) {
        return this._views.get(loc) || [];
    }
    getView(id) {
        for (const viewContainer of this._viewContainers) {
            const viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === id)[0];
            if (viewDescriptor) {
                return viewDescriptor;
            }
        }
        return null;
    }
    getViewContainer(viewId) {
        for (const viewContainer of this._viewContainers) {
            const viewDescriptor = (this._views.get(viewContainer) || []).filter(v => v.id === viewId)[0];
            if (viewDescriptor) {
                return viewContainer;
            }
        }
        return null;
    }
    registerViewWelcomeContent(id, viewContent) {
        this._viewWelcomeContents.add(id, viewContent);
        this._onDidChangeViewWelcomeContent.fire(id);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {
            this._viewWelcomeContents.delete(id, viewContent);
            this._onDidChangeViewWelcomeContent.fire(id);
        });
    }
    registerViewWelcomeContent2(id, viewContentMap) {
        const disposables = ( (new Map()));
        for (const [key, content] of viewContentMap) {
            this._viewWelcomeContents.add(id, content);
            disposables.set(key, (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.toDisposable)(() => {
                this._viewWelcomeContents.delete(id, content);
                this._onDidChangeViewWelcomeContent.fire(id);
            }));
        }
        this._onDidChangeViewWelcomeContent.fire(id);
        return disposables;
    }
    getViewWelcomeContent(id) {
        const result = [];
        this._viewWelcomeContents.forEach(id, descriptor => result.push(descriptor));
        return result.sort(compareViewContentDescriptors);
    }
    addViews(viewDescriptors, viewContainer) {
        let views = this._views.get(viewContainer);
        if (!views) {
            views = [];
            this._views.set(viewContainer, views);
            this._viewContainers.push(viewContainer);
        }
        for (const viewDescriptor of viewDescriptors) {
            if (this.getView(viewDescriptor.id) !== null) {
                throw ( (new Error((0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
                    _moduleId,
                    2,
                    "A view with id '{0}' is already registered",
                    viewDescriptor.id
                ))));
            }
            views.push(viewDescriptor);
        }
    }
    removeViews(viewDescriptors, viewContainer) {
        const views = this._views.get(viewContainer);
        if (!views) {
            return [];
        }
        const viewsToDeregister = [];
        const remaningViews = [];
        for (const view of views) {
            if (!viewDescriptors.includes(view)) {
                remaningViews.push(view);
            }
            else {
                viewsToDeregister.push(view);
            }
        }
        if (viewsToDeregister.length) {
            if (remaningViews.length) {
                this._views.set(viewContainer, remaningViews);
            }
            else {
                this._views.delete(viewContainer);
                this._viewContainers.splice(this._viewContainers.indexOf(viewContainer), 1);
            }
        }
        return viewsToDeregister;
    }
}
_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_4__.Registry.add(Extensions.ViewsRegistry, ( (new ViewsRegistry())));
var ViewVisibilityState;
( ((function(ViewVisibilityState) {
    ViewVisibilityState[ViewVisibilityState["Default"] = 0] = "Default";
    ViewVisibilityState[ViewVisibilityState["Expand"] = 1] = "Expand";
})(ViewVisibilityState || (ViewVisibilityState = {}))));
var TreeItemCollapsibleState;
( ((function(TreeItemCollapsibleState) {
    TreeItemCollapsibleState[TreeItemCollapsibleState["None"] = 0] = "None";
    TreeItemCollapsibleState[TreeItemCollapsibleState["Collapsed"] = 1] = "Collapsed";
    TreeItemCollapsibleState[TreeItemCollapsibleState["Expanded"] = 2] = "Expanded";
})(TreeItemCollapsibleState || (TreeItemCollapsibleState = {}))));
class ResolvableTreeItem {
    constructor(treeItem, resolve) {
        this.resolved = false;
        this._hasResolve = false;
        (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_5__.mixin)(this, treeItem);
        this._hasResolve = !!resolve;
        this.resolve = async (token) => {
            if (resolve && !this.resolved) {
                const resolvedItem = await resolve(token);
                if (resolvedItem) {
                    this.tooltip = this.tooltip ?? resolvedItem.tooltip;
                    this.command = this.command ?? resolvedItem.command;
                }
            }
            if (!token.isCancellationRequested) {
                this.resolved = true;
            }
        };
    }
    get hasResolve() {
        return this._hasResolve;
    }
    resetResolve() {
        this.resolved = false;
    }
    asTreeItem() {
        return {
            handle: this.handle,
            parentHandle: this.parentHandle,
            collapsibleState: this.collapsibleState,
            label: this.label,
            description: this.description,
            icon: this.icon,
            iconDark: this.iconDark,
            themeIcon: this.themeIcon,
            resourceUri: this.resourceUri,
            tooltip: this.tooltip,
            contextValue: this.contextValue,
            command: this.command,
            children: this.children,
            accessibilityInformation: this.accessibilityInformation
        };
    }
}
class NoTreeViewError extends Error {
    constructor(treeViewId) {
        super(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 3, 'No tree view with id \'{0}\' registered.', treeViewId)));
        this.name = 'NoTreeViewError';
    }
    static is(err) {
        return err.name === 'NoTreeViewError';
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatAgents.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatAgents.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChatAgentLocation: () => (/* binding */ ChatAgentLocation),
/* harmony export */   ChatAgentNameService: () => (/* binding */ ChatAgentNameService),
/* harmony export */   ChatAgentService: () => (/* binding */ ChatAgentService),
/* harmony export */   MergedChatAgent: () => (/* binding */ MergedChatAgent),
/* harmony export */   getFullyQualifiedId: () => (/* binding */ getFullyQualifiedId),
/* harmony export */   reviveSerializedAgent: () => (/* binding */ reviveSerializedAgent)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/arraysFind.js */ "./node_modules/vscode/vscode/src/vs/base/common/arraysFind.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../base/common/marshalling.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshalling.js");
/* harmony import */ var _base_common_observableInternal_base_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../base/common/observableInternal/base.js */ "./node_modules/vscode/vscode/src/vs/base/common/observableInternal/base.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");
/* harmony import */ var _platform_contextkey_common_contextkey_service_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.service.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.service.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_product_common_productService_service_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../platform/product/common/productService.service.js */ "./node_modules/vscode/vscode/src/vs/platform/product/common/productService.service.js");
/* harmony import */ var _platform_request_common_request_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../platform/request/common/request.js */ "./node_modules/vscode/vscode/src/vs/platform/request/common/request.js");
/* harmony import */ var _platform_request_common_request_service_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../platform/request/common/request.service.js */ "./node_modules/vscode/vscode/src/vs/platform/request/common/request.service.js");
/* harmony import */ var _platform_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../platform/storage/common/storage.js */ "./node_modules/vscode/vscode/src/vs/platform/storage/common/storage.js");
/* harmony import */ var _platform_storage_common_storage_service_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../../../platform/storage/common/storage.service.js */ "./node_modules/vscode/vscode/src/vs/platform/storage/common/storage.service.js");
/* harmony import */ var _chatContextKeys_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./chatContextKeys.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatContextKeys.js");




















var ChatAgentNameService_1;
var ChatAgentLocation;
( (function(ChatAgentLocation) {
    ChatAgentLocation["Panel"] = "panel";
    ChatAgentLocation["Terminal"] = "terminal";
    ChatAgentLocation["Notebook"] = "notebook";
    ChatAgentLocation["Editor"] = "editor";
})(ChatAgentLocation || (ChatAgentLocation = {})));
( (function(ChatAgentLocation) {
    function fromRaw(value) {
        switch (value) {
            case 'panel': return ChatAgentLocation.Panel;
            case 'terminal': return ChatAgentLocation.Terminal;
            case 'notebook': return ChatAgentLocation.Notebook;
            case 'editor': return ChatAgentLocation.Editor;
        }
        return ChatAgentLocation.Panel;
    }
    ChatAgentLocation.fromRaw = fromRaw;
})(ChatAgentLocation || (ChatAgentLocation = {})));
let ChatAgentService = class ChatAgentService {
    static { this.AGENT_LEADER = '@'; }
    constructor(contextKeyService) {
        this.contextKeyService = contextKeyService;
        this._agents = ( new Map());
        this._onDidChangeAgents = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_4__.Emitter());
        this.onDidChangeAgents = this._onDidChangeAgents.event;
        this._agentCompletionProviders = ( new Map());
        this._hasDefaultAgent = _chatContextKeys_js__WEBPACK_IMPORTED_MODULE_19__.CONTEXT_CHAT_ENABLED.bindTo(this.contextKeyService);
    }
    registerAgent(id, data) {
        const existingAgent = this.getAgent(id);
        if (existingAgent) {
            throw ( new Error(`Agent already registered: ${JSON.stringify(id)}`));
        }
        const that = this;
        const commands = data.slashCommands;
        data = {
            ...data,
            get slashCommands() {
                return commands.filter(c => !c.when || that.contextKeyService.contextMatchesRules(_platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_10__.ContextKeyExpr.deserialize(c.when)));
            }
        };
        const entry = { data };
        this._agents.set(id, entry);
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.toDisposable)(() => {
            this._agents.delete(id);
            this._onDidChangeAgents.fire(undefined);
        });
    }
    registerAgentImplementation(id, agentImpl) {
        const entry = this._agents.get(id);
        if (!entry) {
            throw ( new Error(`Unknown agent: ${JSON.stringify(id)}`));
        }
        if (entry.impl) {
            throw ( new Error(`Agent already has implementation: ${JSON.stringify(id)}`));
        }
        if (entry.data.isDefault) {
            this._hasDefaultAgent.set(true);
        }
        entry.impl = agentImpl;
        this._onDidChangeAgents.fire(( new MergedChatAgent(entry.data, agentImpl)));
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.toDisposable)(() => {
            entry.impl = undefined;
            this._onDidChangeAgents.fire(undefined);
            if (entry.data.isDefault) {
                this._hasDefaultAgent.set(false);
            }
        });
    }
    registerDynamicAgent(data, agentImpl) {
        data.isDynamic = true;
        const agent = { data, impl: agentImpl };
        this._agents.set(data.id, agent);
        this._onDidChangeAgents.fire(( new MergedChatAgent(data, agentImpl)));
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.toDisposable)(() => {
            this._agents.delete(data.id);
            this._onDidChangeAgents.fire(undefined);
        });
    }
    registerAgentCompletionProvider(id, provider) {
        this._agentCompletionProviders.set(id, provider);
        return {
            dispose: () => { this._agentCompletionProviders.delete(id); }
        };
    }
    async getAgentCompletionItems(id, query, token) {
        return (await this._agentCompletionProviders.get(id)?.(query, token)) ?? [];
    }
    updateAgent(id, updateMetadata) {
        const agent = this._agents.get(id);
        if (!agent?.impl) {
            throw ( new Error(`No activated agent with id ${JSON.stringify(id)} registered`));
        }
        agent.data.metadata = { ...agent.data.metadata, ...updateMetadata };
        this._onDidChangeAgents.fire(( new MergedChatAgent(agent.data, agent.impl)));
    }
    getDefaultAgent(location) {
        return (0,_base_common_arraysFind_js__WEBPACK_IMPORTED_MODULE_1__.findLast)(this.getActivatedAgents(), a => !!a.isDefault && a.locations.includes(location));
    }
    getContributedDefaultAgent(location) {
        return this.getAgents().find(a => !!a.isDefault && a.locations.includes(location));
    }
    getSecondaryAgent() {
        return _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_5__.Iterable.find(( this._agents.values()), a => !!a.data.metadata.isSecondary)?.data;
    }
    getAgent(id) {
        if (!this._agentIsEnabled(id)) {
            return;
        }
        return this._agents.get(id)?.data;
    }
    _agentIsEnabled(id) {
        const entry = this._agents.get(id);
        return !entry?.data.when || this.contextKeyService.contextMatchesRules(_platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_10__.ContextKeyExpr.deserialize(entry.data.when));
    }
    getAgentByFullyQualifiedId(id) {
        const agent = _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_5__.Iterable.find(( this._agents.values()), a => getFullyQualifiedId(a.data) === id)?.data;
        if (agent && !this._agentIsEnabled(agent.id)) {
            return;
        }
        return agent;
    }
    getAgents() {
        return ( Array.from(( this._agents.values()))
            .map(entry => entry.data))
            .filter(a => this._agentIsEnabled(a.id));
    }
    getActivatedAgents() {
        return ( Array.from(( this._agents.values()))
            .filter(a => !!a.impl)
            .filter(a => this._agentIsEnabled(a.data.id))
            .map(a => ( new MergedChatAgent(a.data, a.impl))));
    }
    getAgentsByName(name) {
        return this.getAgents().filter(a => a.name === name);
    }
    agentHasDupeName(id) {
        const agent = this.getAgent(id);
        if (!agent) {
            return false;
        }
        return this.getAgentsByName(agent.name)
            .filter(a => a.extensionId.value !== agent.extensionId.value).length > 0;
    }
    async invokeAgent(id, request, progress, history, token) {
        const data = this._agents.get(id);
        if (!data?.impl) {
            throw ( new Error(`No activated agent with id "${id}"`));
        }
        return await data.impl.invoke(request, progress, history, token);
    }
    async getFollowups(id, request, result, history, token) {
        const data = this._agents.get(id);
        if (!data?.impl) {
            throw ( new Error(`No activated agent with id "${id}"`));
        }
        if (!data.impl?.provideFollowups) {
            return [];
        }
        return data.impl.provideFollowups(request, result, history, token);
    }
};
ChatAgentService = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _platform_contextkey_common_contextkey_service_js__WEBPACK_IMPORTED_MODULE_11__.IContextKeyService))
], ChatAgentService));
class MergedChatAgent {
    constructor(data, impl) {
        this.data = data;
        this.impl = impl;
    }
    get id() { return this.data.id; }
    get name() { return this.data.name ?? ''; }
    get fullName() { return this.data.fullName ?? ''; }
    get description() { return this.data.description ?? ''; }
    get extensionId() { return this.data.extensionId; }
    get extensionPublisherId() { return this.data.extensionPublisherId; }
    get extensionPublisherDisplayName() { return this.data.publisherDisplayName; }
    get extensionDisplayName() { return this.data.extensionDisplayName; }
    get isDefault() { return this.data.isDefault; }
    get metadata() { return this.data.metadata; }
    get slashCommands() { return this.data.slashCommands; }
    get defaultImplicitVariables() { return this.data.defaultImplicitVariables; }
    get locations() { return this.data.locations; }
    async invoke(request, progress, history, token) {
        return this.impl.invoke(request, progress, history, token);
    }
    async provideFollowups(request, result, history, token) {
        if (this.impl.provideFollowups) {
            return this.impl.provideFollowups(request, result, history, token);
        }
        return [];
    }
    provideWelcomeMessage(location, token) {
        if (this.impl.provideWelcomeMessage) {
            return this.impl.provideWelcomeMessage(location, token);
        }
        return undefined;
    }
    provideSampleQuestions(location, token) {
        if (this.impl.provideSampleQuestions) {
            return this.impl.provideSampleQuestions(location, token);
        }
        return undefined;
    }
}
let ChatAgentNameService = class ChatAgentNameService {
    static { ChatAgentNameService_1 = this; }
    static { this.StorageKey = 'chat.participantNameRegistry'; }
    constructor(productService, requestService, logService, storageService) {
        this.requestService = requestService;
        this.logService = logService;
        this.storageService = storageService;
        this.registry = (0,_base_common_observableInternal_base_js__WEBPACK_IMPORTED_MODULE_8__.observableValue)(this, Object.create(null));
        this.disposed = false;
        if (!productService.chatParticipantRegistry) {
            return;
        }
        this.url = productService.chatParticipantRegistry;
        const raw = storageService.get(ChatAgentNameService_1.StorageKey, _platform_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_17__.StorageScope.APPLICATION);
        try {
            this.registry.set(JSON.parse(raw ?? '{}'), undefined);
        }
        catch (err) {
            storageService.remove(ChatAgentNameService_1.StorageKey, _platform_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_17__.StorageScope.APPLICATION);
        }
        this.refresh();
    }
    refresh() {
        if (this.disposed) {
            return;
        }
        this.update()
            .catch(err => this.logService.warn('Failed to fetch chat participant registry', err))
            .then(() => (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_2__.timeout)(5 * 60 * 1000))
            .then(() => this.refresh());
    }
    async update() {
        const context = await this.requestService.request({ type: 'GET', url: this.url }, _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_3__.CancellationToken.None);
        if (context.res.statusCode !== 200) {
            throw ( new Error('Could not get extensions report.'));
        }
        const result = await (0,_platform_request_common_request_js__WEBPACK_IMPORTED_MODULE_15__.asJson)(context);
        if (!result || result.version !== 1) {
            throw ( new Error('Unexpected chat participant registry response.'));
        }
        const registry = result.restrictedChatParticipants;
        this.registry.set(registry, undefined);
        this.storageService.store(ChatAgentNameService_1.StorageKey, JSON.stringify(registry), _platform_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_17__.StorageScope.APPLICATION, _platform_storage_common_storage_js__WEBPACK_IMPORTED_MODULE_17__.StorageTarget.MACHINE);
    }
    getAgentNameRestriction(chatAgentData) {
        const nameAllowed = this.checkAgentNameRestriction(chatAgentData.name, chatAgentData).get();
        const fullNameAllowed = !chatAgentData.fullName || this.checkAgentNameRestriction(chatAgentData.fullName.replace(/\s/g, ''), chatAgentData).get();
        return nameAllowed && fullNameAllowed;
    }
    checkAgentNameRestriction(name, chatAgentData) {
        const allowList = ( this.registry.map(registry => registry[name.toLowerCase()]));
        return ( allowList.map(allowList => {
            if (!allowList) {
                return true;
            }
            return ( allowList.some(
                id => (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__.equalsIgnoreCase)(id, id.includes('.') ? chatAgentData.extensionId.value : chatAgentData.extensionPublisherId)
            ));
        }));
    }
    dispose() {
        this.disposed = true;
    }
};
ChatAgentNameService = ChatAgentNameService_1 = ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _platform_product_common_productService_service_js__WEBPACK_IMPORTED_MODULE_14__.IProductService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_request_common_request_service_js__WEBPACK_IMPORTED_MODULE_16__.IRequestService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_13__.ILogService)),
    ( (0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _platform_storage_common_storage_service_js__WEBPACK_IMPORTED_MODULE_18__.IStorageService))
], ChatAgentNameService));
function getFullyQualifiedId(chatAgentData) {
    return `${chatAgentData.extensionId.value}.${chatAgentData.id}`;
}
function reviveSerializedAgent(raw) {
    const agent = 'name' in raw ?
        raw :
        {
            ...raw,
            name: raw.id,
        };
    if (!('extensionPublisherId' in agent)) {
        agent.extensionPublisherId = agent.extensionPublisher ?? '';
    }
    if (!('extensionDisplayName' in agent)) {
        agent.extensionDisplayName = '';
    }
    if (!('extensionId' in agent)) {
        agent.extensionId = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_12__.ExtensionIdentifier(''));
    }
    return (0,_base_common_marshalling_js__WEBPACK_IMPORTED_MODULE_7__.revive)(agent);
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatContextKeys.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatContextKeys.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CONTEXT_CHAT_EDIT_APPLIED: () => (/* binding */ CONTEXT_CHAT_EDIT_APPLIED),
/* harmony export */   CONTEXT_CHAT_ENABLED: () => (/* binding */ CONTEXT_CHAT_ENABLED),
/* harmony export */   CONTEXT_CHAT_INPUT_CURSOR_AT_TOP: () => (/* binding */ CONTEXT_CHAT_INPUT_CURSOR_AT_TOP),
/* harmony export */   CONTEXT_CHAT_INPUT_HAS_AGENT: () => (/* binding */ CONTEXT_CHAT_INPUT_HAS_AGENT),
/* harmony export */   CONTEXT_CHAT_INPUT_HAS_FOCUS: () => (/* binding */ CONTEXT_CHAT_INPUT_HAS_FOCUS),
/* harmony export */   CONTEXT_CHAT_INPUT_HAS_TEXT: () => (/* binding */ CONTEXT_CHAT_INPUT_HAS_TEXT),
/* harmony export */   CONTEXT_CHAT_LOCATION: () => (/* binding */ CONTEXT_CHAT_LOCATION),
/* harmony export */   CONTEXT_CHAT_REQUEST_IN_PROGRESS: () => (/* binding */ CONTEXT_CHAT_REQUEST_IN_PROGRESS),
/* harmony export */   CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING: () => (/* binding */ CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING),
/* harmony export */   CONTEXT_IN_CHAT_INPUT: () => (/* binding */ CONTEXT_IN_CHAT_INPUT),
/* harmony export */   CONTEXT_IN_CHAT_SESSION: () => (/* binding */ CONTEXT_IN_CHAT_SESSION),
/* harmony export */   CONTEXT_IN_QUICK_CHAT: () => (/* binding */ CONTEXT_IN_QUICK_CHAT),
/* harmony export */   CONTEXT_REQUEST: () => (/* binding */ CONTEXT_REQUEST),
/* harmony export */   CONTEXT_RESPONSE: () => (/* binding */ CONTEXT_RESPONSE),
/* harmony export */   CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND: () => (/* binding */ CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND),
/* harmony export */   CONTEXT_RESPONSE_FILTERED: () => (/* binding */ CONTEXT_RESPONSE_FILTERED),
/* harmony export */   CONTEXT_RESPONSE_VOTE: () => (/* binding */ CONTEXT_RESPONSE_VOTE)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");


const _moduleId = "vs/workbench/contrib/chat/common/chatContextKeys";
const CONTEXT_RESPONSE_VOTE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey(
 'chatSessionResponseVote',
 '',
 { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
  _moduleId,
  0,
  "When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string."
 )) }
)));
const CONTEXT_RESPONSE_DETECTED_AGENT_COMMAND = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey(
 'chatSessionResponseDetectedAgentOrCommand',
 false,
 { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 1, "When the agent or command was automatically detected")) }
)));
const CONTEXT_CHAT_RESPONSE_SUPPORT_ISSUE_REPORTING = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey(
 'chatResponseSupportsIssueReporting',
 false,
 { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
  _moduleId,
  2,
  "True when the current chat response supports issue reporting."
 )) }
)));
const CONTEXT_RESPONSE_FILTERED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey(
 'chatSessionResponseFiltered',
 false,
 { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
  _moduleId,
  3,
  "True when the chat response was filtered out by the server."
 )) }
)));
const CONTEXT_CHAT_REQUEST_IN_PROGRESS = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey(
 'chatSessionRequestInProgress',
 false,
 { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 4, "True when the current request is still in progress.")) }
)));
const CONTEXT_RESPONSE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatResponse', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 5, "The chat item is a response.")) })));
const CONTEXT_REQUEST = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatRequest', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 6, "The chat item is a request")) })));
const CONTEXT_CHAT_EDIT_APPLIED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatEditApplied', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 7, "True when the chat text edits have been applied.")) })));
const CONTEXT_CHAT_INPUT_HAS_TEXT = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatInputHasText', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 8, "True when the chat input has text.")) })));
const CONTEXT_CHAT_INPUT_HAS_FOCUS = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatInputHasFocus', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 9, "True when the chat input has focus.")) })));
const CONTEXT_IN_CHAT_INPUT = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('inChatInput', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 10, "True when focus is in the chat input, false otherwise.")) })));
const CONTEXT_IN_CHAT_SESSION = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('inChat', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 11, "True when focus is in the chat widget, false otherwise.")) })));
const CONTEXT_CHAT_ENABLED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatIsEnabled', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
 _moduleId,
 12,
 "True when chat is enabled because a default chat participant is registered."
)) })));
const CONTEXT_CHAT_INPUT_CURSOR_AT_TOP = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatCursorAtTop', false)));
const CONTEXT_CHAT_INPUT_HAS_AGENT = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatInputHasAgent', false)));
const CONTEXT_CHAT_LOCATION = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('chatLocation', undefined)));
const CONTEXT_IN_QUICK_CHAT = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_1__.RawContextKey('quickChatHasFocus', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 13, "True when the quick chat UI has focus, false otherwise.")) })));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatService.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/chatService.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChatAgentVoteDirection: () => (/* binding */ ChatAgentVoteDirection),
/* harmony export */   ChatCopyKind: () => (/* binding */ ChatCopyKind),
/* harmony export */   isIDocumentContext: () => (/* binding */ isIDocumentContext),
/* harmony export */   isIUsedContext: () => (/* binding */ isIUsedContext)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");


function isIDocumentContext(obj) {
    return (!!obj &&
        typeof obj === 'object' &&
        'uri' in obj && obj.uri instanceof _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI &&
        'version' in obj && typeof obj.version === 'number' &&
        'ranges' in obj && Array.isArray(obj.ranges) && obj.ranges.every(_editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_1__.Range.isIRange));
}
function isIUsedContext(obj) {
    return (!!obj &&
        typeof obj === 'object' &&
        'documents' in obj &&
        Array.isArray(obj.documents) &&
        obj.documents.every(isIDocumentContext));
}
var ChatAgentVoteDirection;
( (function(ChatAgentVoteDirection) {
    ChatAgentVoteDirection[ChatAgentVoteDirection["Down"] = 0] = "Down";
    ChatAgentVoteDirection[ChatAgentVoteDirection["Up"] = 1] = "Up";
})(ChatAgentVoteDirection || (ChatAgentVoteDirection = {})));
var ChatCopyKind;
( (function(ChatCopyKind) {
    ChatCopyKind[ChatCopyKind["Action"] = 1] = "Action";
    ChatCopyKind[ChatCopyKind["Toolbar"] = 2] = "Toolbar";
})(ChatCopyKind || (ChatCopyKind = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/languageModels.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/chat/common/languageModels.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ChatMessageRole: () => (/* binding */ ChatMessageRole),
/* harmony export */   LanguageModelsService: () => (/* binding */ LanguageModelsService),
/* harmony export */   languageModelExtensionPoint: () => (/* binding */ languageModelExtensionPoint)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../services/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js");
/* harmony import */ var _services_extensions_common_extensions_service_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../services/extensions/common/extensions.service.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.service.js");
/* harmony import */ var _services_extensions_common_extensionsRegistry_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../services/extensions/common/extensionsRegistry.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.js");











const _moduleId = "vs/workbench/contrib/chat/common/languageModels";
var ChatMessageRole;
( ((function(ChatMessageRole) {
    ChatMessageRole[ChatMessageRole["System"] = 0] = "System";
    ChatMessageRole[ChatMessageRole["User"] = 1] = "User";
    ChatMessageRole[ChatMessageRole["Assistant"] = 2] = "Assistant";
})(ChatMessageRole || (ChatMessageRole = {}))));
const languageModelType = {
    type: 'object',
    properties: {
        vendor: {
            type: 'string',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 0, "A globally unique vendor of language models."))
        }
    }
};
const languageModelExtensionPoint = _services_extensions_common_extensionsRegistry_js__WEBPACK_IMPORTED_MODULE_10__.ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'languageModels',
    jsonSchema: {
        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 1, "Contribute language models of a specific vendor.")),
        oneOf: [
            languageModelType,
            {
                type: 'array',
                items: languageModelType
            }
        ]
    },
    activationEventsGenerator: (contribs, result) => {
        for (const contrib of contribs) {
            result.push(`onLanguageModelChat:${contrib.vendor}`);
        }
    }
});
let LanguageModelsService = class LanguageModelsService {
    constructor(_extensionService, _logService) {
        this._extensionService = _extensionService;
        this._logService = _logService;
        this._store = ( (new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.DisposableStore()));
        this._providers = ( (new Map()));
        this._vendors = ( (new Set()));
        this._onDidChangeProviders = this._store.add(( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter())));
        this.onDidChangeLanguageModels = this._onDidChangeProviders.event;
        this._store.add(languageModelExtensionPoint.setHandler((extensions) => {
            this._vendors.clear();
            for (const extension of extensions) {
                if (!(0,_services_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_8__.isProposedApiEnabled)(extension.description, 'chatProvider')) {
                    extension.collector.error(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(
                        _moduleId,
                        2,
                        "This contribution point requires the 'chatProvider' proposal."
                    )));
                    continue;
                }
                for (const item of _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_2__.Iterable.wrap(extension.value)) {
                    if (( (this._vendors.has(item.vendor)))) {
                        extension.collector.error(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(
                            _moduleId,
                            3,
                            "The vendor '{0}' is already registered and cannot be registered twice",
                            item.vendor
                        )));
                        continue;
                    }
                    if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_4__.isFalsyOrWhitespace)(item.vendor)) {
                        extension.collector.error(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 4, "The vendor field cannot be empty.")));
                        continue;
                    }
                    if (item.vendor.trim() !== item.vendor) {
                        extension.collector.error(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_5__.localizeWithPath)(_moduleId, 5, "The vendor field cannot start or end with whitespace.")));
                        continue;
                    }
                    this._vendors.add(item.vendor);
                }
            }
            const removed = [];
            for (const [identifier, value] of this._providers) {
                if (!( (this._vendors.has(value.metadata.vendor)))) {
                    this._providers.delete(identifier);
                    removed.push(identifier);
                }
            }
            if (removed.length > 0) {
                this._onDidChangeProviders.fire({ removed });
            }
        }));
    }
    dispose() {
        this._store.dispose();
        this._providers.clear();
    }
    getLanguageModelIds() {
        return Array.from(( (this._providers.keys())));
    }
    lookupLanguageModel(identifier) {
        return this._providers.get(identifier)?.metadata;
    }
    async selectLanguageModels(selector) {
        if (selector.vendor) {
            await this._extensionService.activateByEvent(`onLanguageModelChat:${selector.vendor}}`);
        }
        else {
            const all = ( (Array.from(this._vendors).map(
                vendor => this._extensionService.activateByEvent(`onLanguageModelChat:${vendor}`)
            )));
            await Promise.all(all);
        }
        const result = [];
        for (const [identifier, model] of this._providers) {
            if ((selector.vendor === undefined || model.metadata.vendor === selector.vendor)
                && (selector.family === undefined || model.metadata.family === selector.family)
                && (selector.version === undefined || model.metadata.version === selector.version)
                && (selector.identifier === undefined || model.metadata.id === selector.identifier)
                && (!model.metadata.targetExtensions || ( (model.metadata.targetExtensions.some(candidate => _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.ExtensionIdentifier.equals(candidate, selector.extension)))))) {
                result.push(identifier);
            }
        }
        this._logService.trace('[LM] selected language models', selector, result);
        return result;
    }
    registerLanguageModelChat(identifier, provider) {
        this._logService.trace('[LM] registering language model chat', identifier, provider.metadata);
        if (!( (this._vendors.has(provider.metadata.vendor)))) {
            throw ( (new Error(`Chat response provider uses UNKNOWN vendor ${provider.metadata.vendor}.`)));
        }
        if (( (this._providers.has(identifier)))) {
            throw ( (new Error(
                `Chat response provider with identifier ${identifier} is already registered.`
            )));
        }
        this._providers.set(identifier, provider);
        this._onDidChangeProviders.fire({ added: [{ identifier, metadata: provider.metadata }] });
        return (0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(() => {
            if (this._providers.delete(identifier)) {
                this._onDidChangeProviders.fire({ removed: [identifier] });
                this._logService.trace('[LM] UNregistered language model chat', identifier, provider.metadata);
            }
        });
    }
    async sendChatRequest(identifier, from, messages, options, token) {
        const provider = this._providers.get(identifier);
        if (!provider) {
            throw ( (new Error(`Chat response provider with identifier ${identifier} is not registered.`)));
        }
        return provider.sendChatRequest(messages, from, options, token);
    }
    computeTokenLength(identifier, message, token) {
        const provider = this._providers.get(identifier);
        if (!provider) {
            throw ( (new Error(`Chat response provider with identifier ${identifier} is not registered.`)));
        }
        return provider.provideTokenCount(message, token);
    }
};
LanguageModelsService = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _services_extensions_common_extensions_service_js__WEBPACK_IMPORTED_MODULE_9__.IExtensionService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_7__.ILogService)))
], LanguageModelsService)));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/abstractDebugAdapter.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/abstractDebugAdapter.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractDebugAdapter: () => (/* binding */ AbstractDebugAdapter)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");



const _moduleId = "vs/workbench/contrib/debug/common/abstractDebugAdapter";
class AbstractDebugAdapter {
    constructor() {
        this.pendingRequests = ( (new Map()));
        this.queue = [];
        this._onError = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this._onExit = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter()));
        this.sequence = 1;
    }
    get onError() {
        return this._onError.event;
    }
    get onExit() {
        return this._onExit.event;
    }
    onMessage(callback) {
        if (this.messageCallback) {
            this._onError.fire(( (new Error(`attempt to set more than one 'Message' callback`))));
        }
        this.messageCallback = callback;
    }
    onEvent(callback) {
        if (this.eventCallback) {
            this._onError.fire(( (new Error(`attempt to set more than one 'Event' callback`))));
        }
        this.eventCallback = callback;
    }
    onRequest(callback) {
        if (this.requestCallback) {
            this._onError.fire(( (new Error(`attempt to set more than one 'Request' callback`))));
        }
        this.requestCallback = callback;
    }
    sendResponse(response) {
        if (response.seq > 0) {
            this._onError.fire(( (new Error(`attempt to send more than one response for command ${response.command}`))));
        }
        else {
            this.internalSend('response', response);
        }
    }
    sendRequest(command, args, clb, timeout) {
        const request = {
            command: command
        };
        if (args && ( (Object.keys(args))).length > 0) {
            request.arguments = args;
        }
        this.internalSend('request', request);
        if (typeof timeout === 'number') {
            const timer = setTimeout(() => {
                clearTimeout(timer);
                const clb = this.pendingRequests.get(request.seq);
                if (clb) {
                    this.pendingRequests.delete(request.seq);
                    const err = {
                        type: 'response',
                        seq: 0,
                        request_seq: request.seq,
                        success: false,
                        command,
                        message: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_2__.localizeWithPath)(_moduleId, 0, "Timeout after {0} ms for '{1}'", timeout, command))
                    };
                    clb(err);
                }
            }, timeout);
        }
        if (clb) {
            this.pendingRequests.set(request.seq, clb);
        }
        return request.seq;
    }
    acceptMessage(message) {
        if (this.messageCallback) {
            this.messageCallback(message);
        }
        else {
            this.queue.push(message);
            if (this.queue.length === 1) {
                this.processQueue();
            }
        }
    }
    needsTaskBoundaryBetween(messageA, messageB) {
        return messageA.type !== 'event' || messageB.type !== 'event';
    }
    async processQueue() {
        let message;
        while (this.queue.length) {
            if (!message || this.needsTaskBoundaryBetween(this.queue[0], message)) {
                await (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.timeout)(0);
            }
            message = this.queue.shift();
            if (!message) {
                return;
            }
            switch (message.type) {
                case 'event':
                    this.eventCallback?.(message);
                    break;
                case 'request':
                    this.requestCallback?.(message);
                    break;
                case 'response': {
                    const response = message;
                    const clb = this.pendingRequests.get(response.request_seq);
                    if (clb) {
                        this.pendingRequests.delete(response.request_seq);
                        clb(response);
                    }
                    break;
                }
            }
        }
    }
    internalSend(typ, message) {
        message.type = typ;
        message.seq = this.sequence++;
        this.sendMessage(message);
    }
    async cancelPendingRequests() {
        if (this.pendingRequests.size === 0) {
            return Promise.resolve();
        }
        const pending = ( (new Map()));
        this.pendingRequests.forEach((value, key) => pending.set(key, value));
        await (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.timeout)(500);
        pending.forEach((callback, request_seq) => {
            const err = {
                type: 'response',
                seq: 0,
                request_seq,
                success: false,
                command: 'canceled',
                message: 'canceled'
            };
            callback(err);
            this.pendingRequests.delete(request_seq);
        });
    }
    getPendingRequestIds() {
        return Array.from(( (this.pendingRequests.keys())));
    }
    dispose() {
        this.queue = [];
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debug.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debug.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BREAKPOINTS_VIEW_ID: () => (/* binding */ BREAKPOINTS_VIEW_ID),
/* harmony export */   BREAKPOINT_EDITOR_CONTRIBUTION_ID: () => (/* binding */ BREAKPOINT_EDITOR_CONTRIBUTION_ID),
/* harmony export */   BreakpointWidgetContext: () => (/* binding */ BreakpointWidgetContext),
/* harmony export */   CALLSTACK_VIEW_ID: () => (/* binding */ CALLSTACK_VIEW_ID),
/* harmony export */   CONTEXT_BREAKPOINTS_EXIST: () => (/* binding */ CONTEXT_BREAKPOINTS_EXIST),
/* harmony export */   CONTEXT_BREAKPOINTS_FOCUSED: () => (/* binding */ CONTEXT_BREAKPOINTS_FOCUSED),
/* harmony export */   CONTEXT_BREAKPOINT_HAS_MODES: () => (/* binding */ CONTEXT_BREAKPOINT_HAS_MODES),
/* harmony export */   CONTEXT_BREAKPOINT_INPUT_FOCUSED: () => (/* binding */ CONTEXT_BREAKPOINT_INPUT_FOCUSED),
/* harmony export */   CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES: () => (/* binding */ CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES),
/* harmony export */   CONTEXT_BREAKPOINT_ITEM_TYPE: () => (/* binding */ CONTEXT_BREAKPOINT_ITEM_TYPE),
/* harmony export */   CONTEXT_BREAKPOINT_SUPPORTS_CONDITION: () => (/* binding */ CONTEXT_BREAKPOINT_SUPPORTS_CONDITION),
/* harmony export */   CONTEXT_BREAKPOINT_WIDGET_VISIBLE: () => (/* binding */ CONTEXT_BREAKPOINT_WIDGET_VISIBLE),
/* harmony export */   CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED: () => (/* binding */ CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED),
/* harmony export */   CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED: () => (/* binding */ CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED),
/* harmony export */   CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED: () => (/* binding */ CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED),
/* harmony export */   CONTEXT_CALLSTACK_ITEM_STOPPED: () => (/* binding */ CONTEXT_CALLSTACK_ITEM_STOPPED),
/* harmony export */   CONTEXT_CALLSTACK_ITEM_TYPE: () => (/* binding */ CONTEXT_CALLSTACK_ITEM_TYPE),
/* harmony export */   CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD: () => (/* binding */ CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD),
/* harmony export */   CONTEXT_CALLSTACK_SESSION_IS_ATTACH: () => (/* binding */ CONTEXT_CALLSTACK_SESSION_IS_ATTACH),
/* harmony export */   CONTEXT_CAN_VIEW_MEMORY: () => (/* binding */ CONTEXT_CAN_VIEW_MEMORY),
/* harmony export */   CONTEXT_DEBUGGERS_AVAILABLE: () => (/* binding */ CONTEXT_DEBUGGERS_AVAILABLE),
/* harmony export */   CONTEXT_DEBUG_CONFIGURATION_TYPE: () => (/* binding */ CONTEXT_DEBUG_CONFIGURATION_TYPE),
/* harmony export */   CONTEXT_DEBUG_EXTENSION_AVAILABLE: () => (/* binding */ CONTEXT_DEBUG_EXTENSION_AVAILABLE),
/* harmony export */   CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT: () => (/* binding */ CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT),
/* harmony export */   CONTEXT_DEBUG_STATE: () => (/* binding */ CONTEXT_DEBUG_STATE),
/* harmony export */   CONTEXT_DEBUG_TYPE: () => (/* binding */ CONTEXT_DEBUG_TYPE),
/* harmony export */   CONTEXT_DEBUG_UX: () => (/* binding */ CONTEXT_DEBUG_UX),
/* harmony export */   CONTEXT_DEBUG_UX_KEY: () => (/* binding */ CONTEXT_DEBUG_UX_KEY),
/* harmony export */   CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED: () => (/* binding */ CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED),
/* harmony export */   CONTEXT_DISASSEMBLY_VIEW_FOCUS: () => (/* binding */ CONTEXT_DISASSEMBLY_VIEW_FOCUS),
/* harmony export */   CONTEXT_EXCEPTION_WIDGET_VISIBLE: () => (/* binding */ CONTEXT_EXCEPTION_WIDGET_VISIBLE),
/* harmony export */   CONTEXT_EXPRESSION_SELECTED: () => (/* binding */ CONTEXT_EXPRESSION_SELECTED),
/* harmony export */   CONTEXT_FOCUSED_SESSION_IS_ATTACH: () => (/* binding */ CONTEXT_FOCUSED_SESSION_IS_ATTACH),
/* harmony export */   CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG: () => (/* binding */ CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG),
/* harmony export */   CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE: () => (/* binding */ CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE),
/* harmony export */   CONTEXT_HAS_DEBUGGED: () => (/* binding */ CONTEXT_HAS_DEBUGGED),
/* harmony export */   CONTEXT_IN_BREAKPOINT_WIDGET: () => (/* binding */ CONTEXT_IN_BREAKPOINT_WIDGET),
/* harmony export */   CONTEXT_IN_DEBUG_MODE: () => (/* binding */ CONTEXT_IN_DEBUG_MODE),
/* harmony export */   CONTEXT_IN_DEBUG_REPL: () => (/* binding */ CONTEXT_IN_DEBUG_REPL),
/* harmony export */   CONTEXT_JUMP_TO_CURSOR_SUPPORTED: () => (/* binding */ CONTEXT_JUMP_TO_CURSOR_SUPPORTED),
/* harmony export */   CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST: () => (/* binding */ CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST),
/* harmony export */   CONTEXT_LOADED_SCRIPTS_ITEM_TYPE: () => (/* binding */ CONTEXT_LOADED_SCRIPTS_ITEM_TYPE),
/* harmony export */   CONTEXT_LOADED_SCRIPTS_SUPPORTED: () => (/* binding */ CONTEXT_LOADED_SCRIPTS_SUPPORTED),
/* harmony export */   CONTEXT_MULTI_SESSION_DEBUG: () => (/* binding */ CONTEXT_MULTI_SESSION_DEBUG),
/* harmony export */   CONTEXT_MULTI_SESSION_REPL: () => (/* binding */ CONTEXT_MULTI_SESSION_REPL),
/* harmony export */   CONTEXT_RESTART_FRAME_SUPPORTED: () => (/* binding */ CONTEXT_RESTART_FRAME_SUPPORTED),
/* harmony export */   CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED: () => (/* binding */ CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED),
/* harmony export */   CONTEXT_SET_EXPRESSION_SUPPORTED: () => (/* binding */ CONTEXT_SET_EXPRESSION_SUPPORTED),
/* harmony export */   CONTEXT_SET_VARIABLE_SUPPORTED: () => (/* binding */ CONTEXT_SET_VARIABLE_SUPPORTED),
/* harmony export */   CONTEXT_STACK_FRAME_SUPPORTS_RESTART: () => (/* binding */ CONTEXT_STACK_FRAME_SUPPORTS_RESTART),
/* harmony export */   CONTEXT_STEP_BACK_SUPPORTED: () => (/* binding */ CONTEXT_STEP_BACK_SUPPORTED),
/* harmony export */   CONTEXT_STEP_INTO_TARGETS_SUPPORTED: () => (/* binding */ CONTEXT_STEP_INTO_TARGETS_SUPPORTED),
/* harmony export */   CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED: () => (/* binding */ CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED),
/* harmony export */   CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED: () => (/* binding */ CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED),
/* harmony export */   CONTEXT_VARIABLES_FOCUSED: () => (/* binding */ CONTEXT_VARIABLES_FOCUSED),
/* harmony export */   CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT: () => (/* binding */ CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT),
/* harmony export */   CONTEXT_VARIABLE_EXTENSIONID: () => (/* binding */ CONTEXT_VARIABLE_EXTENSIONID),
/* harmony export */   CONTEXT_VARIABLE_INTERFACES: () => (/* binding */ CONTEXT_VARIABLE_INTERFACES),
/* harmony export */   CONTEXT_VARIABLE_IS_READONLY: () => (/* binding */ CONTEXT_VARIABLE_IS_READONLY),
/* harmony export */   CONTEXT_VARIABLE_LANGUAGE: () => (/* binding */ CONTEXT_VARIABLE_LANGUAGE),
/* harmony export */   CONTEXT_VARIABLE_NAME: () => (/* binding */ CONTEXT_VARIABLE_NAME),
/* harmony export */   CONTEXT_VARIABLE_TYPE: () => (/* binding */ CONTEXT_VARIABLE_TYPE),
/* harmony export */   CONTEXT_VARIABLE_VALUE: () => (/* binding */ CONTEXT_VARIABLE_VALUE),
/* harmony export */   CONTEXT_WATCH_EXPRESSIONS_EXIST: () => (/* binding */ CONTEXT_WATCH_EXPRESSIONS_EXIST),
/* harmony export */   CONTEXT_WATCH_EXPRESSIONS_FOCUSED: () => (/* binding */ CONTEXT_WATCH_EXPRESSIONS_FOCUSED),
/* harmony export */   CONTEXT_WATCH_ITEM_TYPE: () => (/* binding */ CONTEXT_WATCH_ITEM_TYPE),
/* harmony export */   DEBUG_MEMORY_SCHEME: () => (/* binding */ DEBUG_MEMORY_SCHEME),
/* harmony export */   DEBUG_PANEL_ID: () => (/* binding */ DEBUG_PANEL_ID),
/* harmony export */   DEBUG_SCHEME: () => (/* binding */ DEBUG_SCHEME),
/* harmony export */   DISASSEMBLY_VIEW_ID: () => (/* binding */ DISASSEMBLY_VIEW_ID),
/* harmony export */   DataBreakpointSetType: () => (/* binding */ DataBreakpointSetType),
/* harmony export */   DebugConfigurationProviderTriggerKind: () => (/* binding */ DebugConfigurationProviderTriggerKind),
/* harmony export */   DebugTreeItemCollapsibleState: () => (/* binding */ DebugTreeItemCollapsibleState),
/* harmony export */   DebugVisualizationType: () => (/* binding */ DebugVisualizationType),
/* harmony export */   DebuggerString: () => (/* binding */ DebuggerString),
/* harmony export */   EDITOR_CONTRIBUTION_ID: () => (/* binding */ EDITOR_CONTRIBUTION_ID),
/* harmony export */   IDebugVisualization: () => (/* binding */ IDebugVisualization),
/* harmony export */   INTERNAL_CONSOLE_OPTIONS_SCHEMA: () => (/* binding */ INTERNAL_CONSOLE_OPTIONS_SCHEMA),
/* harmony export */   LOADED_SCRIPTS_VIEW_ID: () => (/* binding */ LOADED_SCRIPTS_VIEW_ID),
/* harmony export */   MemoryRangeType: () => (/* binding */ MemoryRangeType),
/* harmony export */   REPL_VIEW_ID: () => (/* binding */ REPL_VIEW_ID),
/* harmony export */   State: () => (/* binding */ State),
/* harmony export */   VARIABLES_VIEW_ID: () => (/* binding */ VARIABLES_VIEW_ID),
/* harmony export */   VIEWLET_ID: () => (/* binding */ VIEWLET_ID),
/* harmony export */   WATCH_VIEW_ID: () => (/* binding */ WATCH_VIEW_ID),
/* harmony export */   debuggerDisabledMessage: () => (/* binding */ debuggerDisabledMessage),
/* harmony export */   getStateLabel: () => (/* binding */ getStateLabel),
/* harmony export */   isFrameDeemphasized: () => (/* binding */ isFrameDeemphasized)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");



const _moduleId = "vs/workbench/contrib/debug/common/debug";
const VIEWLET_ID = 'workbench.view.debug';
const VARIABLES_VIEW_ID = 'workbench.debug.variablesView';
const WATCH_VIEW_ID = 'workbench.debug.watchExpressionsView';
const CALLSTACK_VIEW_ID = 'workbench.debug.callStackView';
const LOADED_SCRIPTS_VIEW_ID = 'workbench.debug.loadedScriptsView';
const BREAKPOINTS_VIEW_ID = 'workbench.debug.breakPointsView';
const DISASSEMBLY_VIEW_ID = 'workbench.debug.disassemblyView';
const DEBUG_PANEL_ID = 'workbench.panel.repl';
const REPL_VIEW_ID = 'workbench.panel.repl.view';
const CONTEXT_DEBUG_TYPE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('debugType', undefined, { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    0,
    "Debug type of the active debug session. For example 'python'."
)) })));
const CONTEXT_DEBUG_CONFIGURATION_TYPE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'debugConfigurationType',
    undefined,
    { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        1,
        "Debug type of the selected launch configuration. For example 'python'."
    )) }
)));
const CONTEXT_DEBUG_STATE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('debugState', 'inactive', { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    2,
    "State that the focused debug session is in. One of the following: 'inactive', 'initializing', 'stopped' or 'running'."
)) })));
const CONTEXT_DEBUG_UX_KEY = 'debugUx';
const CONTEXT_DEBUG_UX = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    CONTEXT_DEBUG_UX_KEY,
    'default',
    { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        3,
        "Debug UX state. When there are no debug configurations it is 'simple', otherwise 'default'. Used to decide when to show welcome views in the debug viewlet."
    )) }
)));
const CONTEXT_HAS_DEBUGGED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('hasDebugged', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    4,
    "True when a debug session has been started at least once, false otherwise."
)) })));
const CONTEXT_IN_DEBUG_MODE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('inDebugMode', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 5, "True when debugging, false otherwise.")) })));
const CONTEXT_IN_DEBUG_REPL = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('inDebugRepl', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 6, "True when focus is in the debug console, false otherwise.")) })));
const CONTEXT_BREAKPOINT_WIDGET_VISIBLE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakpointWidgetVisible',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        7,
        "True when breakpoint editor zone widget is visible, false otherwise."
    )) }
)));
const CONTEXT_IN_BREAKPOINT_WIDGET = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'inBreakpointWidget',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        8,
        "True when focus is in the breakpoint editor zone widget, false otherwise."
    )) }
)));
const CONTEXT_BREAKPOINTS_FOCUSED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('breakpointsFocused', true, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    9,
    "True when the BREAKPOINTS view is focused, false otherwise."
)) })));
const CONTEXT_WATCH_EXPRESSIONS_FOCUSED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'watchExpressionsFocused',
    true,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 10, "True when the WATCH view is focused, false otherwise.")) }
)));
const CONTEXT_WATCH_EXPRESSIONS_EXIST = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'watchExpressionsExist',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        11,
        "True when at least one watch expression exists, false otherwise."
    )) }
)));
const CONTEXT_VARIABLES_FOCUSED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('variablesFocused', true, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 12, "True when the VARIABLES views is focused, false otherwise")) })));
const CONTEXT_EXPRESSION_SELECTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'expressionSelected',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        13,
        "True when an expression input box is open in either the WATCH or the VARIABLES view, false otherwise."
    )) }
)));
const CONTEXT_BREAKPOINT_INPUT_FOCUSED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakpointInputFocused',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        14,
        "True when the input box has focus in the BREAKPOINTS view."
    )) }
)));
const CONTEXT_CALLSTACK_ITEM_TYPE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'callStackItemType',
    undefined,
    { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        15,
        "Represents the item type of the focused element in the CALL STACK view. For example: 'session', 'thread', 'stackFrame'"
    )) }
)));
const CONTEXT_CALLSTACK_SESSION_IS_ATTACH = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'callStackSessionIsAttach',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        16,
        "True when the session in the CALL STACK view is attach, false otherwise. Used internally for inline menus in the CALL STACK view."
    )) }
)));
const CONTEXT_CALLSTACK_ITEM_STOPPED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'callStackItemStopped',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        17,
        "True when the focused item in the CALL STACK is stopped. Used internaly for inline menus in the CALL STACK view."
    )) }
)));
const CONTEXT_CALLSTACK_SESSION_HAS_ONE_THREAD = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'callStackSessionHasOneThread',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        18,
        "True when the focused session in the CALL STACK view has exactly one thread. Used internally for inline menus in the CALL STACK view."
    )) }
)));
const CONTEXT_WATCH_ITEM_TYPE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('watchItemType', undefined, { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    19,
    "Represents the item type of the focused element in the WATCH view. For example: 'expression', 'variable'"
)) })));
const CONTEXT_CAN_VIEW_MEMORY = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('canViewMemory', undefined, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    20,
    "Indicates whether the item in the view has an associated memory refrence."
)) })));
const CONTEXT_BREAKPOINT_ITEM_TYPE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakpointItemType',
    undefined,
    { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        21,
        "Represents the item type of the focused element in the BREAKPOINTS view. For example: 'breakpoint', 'exceptionBreakppint', 'functionBreakpoint', 'dataBreakpoint'"
    )) }
)));
const CONTEXT_BREAKPOINT_ITEM_IS_DATA_BYTES = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakpointItemBytes',
    undefined,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        22,
        "Whether the breakpoint item is a data breakpoint on a byte range."
    )) }
)));
const CONTEXT_BREAKPOINT_HAS_MODES = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakpointHasModes',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        23,
        "Whether the breakpoint has multiple modes it can switch to."
    )) }
)));
const CONTEXT_BREAKPOINT_SUPPORTS_CONDITION = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakpointSupportsCondition',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 24, "True when the focused breakpoint supports conditions.")) }
)));
const CONTEXT_LOADED_SCRIPTS_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'loadedScriptsSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        25,
        "True when the focused sessions supports the LOADED SCRIPTS view"
    )) }
)));
const CONTEXT_LOADED_SCRIPTS_ITEM_TYPE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'loadedScriptsItemType',
    undefined,
    { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        26,
        "Represents the item type of the focused element in the LOADED SCRIPTS view."
    )) }
)));
const CONTEXT_FOCUSED_SESSION_IS_ATTACH = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'focusedSessionIsAttach',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 27, "True when the focused session is 'attach'.")) }
)));
const CONTEXT_FOCUSED_SESSION_IS_NO_DEBUG = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'focusedSessionIsNoDebug',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 28, "True when the focused session is run without debugging.")) }
)));
const CONTEXT_STEP_BACK_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('stepBackSupported', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    29,
    "True when the focused session supports 'stepBack' requests."
)) })));
const CONTEXT_RESTART_FRAME_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'restartFrameSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        30,
        "True when the focused session supports 'restartFrame' requests."
    )) }
)));
const CONTEXT_STACK_FRAME_SUPPORTS_RESTART = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'stackFrameSupportsRestart',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        31,
        "True when the focused stack frame supports 'restartFrame'."
    )) }
)));
const CONTEXT_JUMP_TO_CURSOR_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'jumpToCursorSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        32,
        "True when the focused session supports 'jumpToCursor' request."
    )) }
)));
const CONTEXT_STEP_INTO_TARGETS_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'stepIntoTargetsSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        33,
        "True when the focused session supports 'stepIntoTargets' request."
    )) }
)));
const CONTEXT_BREAKPOINTS_EXIST = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('breakpointsExist', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 34, "True when at least one breakpoint exists.")) })));
const CONTEXT_DEBUGGERS_AVAILABLE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'debuggersAvailable',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 35, "True when there is at least one debug extensions active.")) }
)));
const CONTEXT_DEBUG_EXTENSION_AVAILABLE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'debugExtensionAvailable',
    true,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        36,
        "True when there is at least one debug extension installed and enabled."
    )) }
)));
const CONTEXT_DEBUG_PROTOCOL_VARIABLE_MENU_CONTEXT = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'debugProtocolVariableMenuContext',
    undefined,
    { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        37,
        "Represents the context the debug adapter sets on the focused variable in the VARIABLES view."
    )) }
)));
const CONTEXT_SET_VARIABLE_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'debugSetVariableSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        38,
        "True when the focused session supports 'setVariable' request."
    )) }
)));
const CONTEXT_SET_DATA_BREAKPOINT_BYTES_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'debugSetDataBreakpointAddressSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        39,
        "True when the focused session supports 'getBreakpointInfo' request on an address."
    )) }
)));
const CONTEXT_SET_EXPRESSION_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'debugSetExpressionSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        40,
        "True when the focused session supports 'setExpression' request."
    )) }
)));
const CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakWhenValueChangesSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        41,
        "True when the focused session supports to break when value changes."
    )) }
)));
const CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakWhenValueIsAccessedSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        42,
        "True when the focused breakpoint supports to break when value is accessed."
    )) }
)));
const CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'breakWhenValueIsReadSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        43,
        "True when the focused breakpoint supports to break when value is read."
    )) }
)));
const CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'terminateDebuggeeSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        44,
        "True when the focused session supports the terminate debuggee capability."
    )) }
)));
const CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'suspendDebuggeeSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        45,
        "True when the focused session supports the suspend debuggee capability."
    )) }
)));
const CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'variableEvaluateNamePresent',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        46,
        "True when the focused variable has an 'evalauteName' field set."
    )) }
)));
const CONTEXT_VARIABLE_IS_READONLY = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'variableIsReadonly',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 47, "True when the focused variable is read-only.")) }
)));
const CONTEXT_VARIABLE_VALUE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('variableValue', false, { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    48,
    "Value of the variable, present for debug visualization clauses."
)) })));
const CONTEXT_VARIABLE_TYPE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('variableType', false, { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    49,
    "Type of the variable, present for debug visualization clauses."
)) })));
const CONTEXT_VARIABLE_INTERFACES = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('variableInterfaces', false, { type: 'array', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    50,
    "Any interfaces or contracts that the variable satisfies, present for debug visualization clauses."
)) })));
const CONTEXT_VARIABLE_NAME = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('variableName', false, { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    51,
    "Name of the variable, present for debug visualization clauses."
)) })));
const CONTEXT_VARIABLE_LANGUAGE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('variableLanguage', false, { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    52,
    "Language of the variable source, present for debug visualization clauses."
)) })));
const CONTEXT_VARIABLE_EXTENSIONID = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'variableExtensionId',
    false,
    { type: 'string', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        53,
        "Extension ID of the variable source, present for debug visualization clauses."
    )) }
)));
const CONTEXT_EXCEPTION_WIDGET_VISIBLE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'exceptionWidgetVisible',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 54, "True when the exception widget is visible.")) }
)));
const CONTEXT_MULTI_SESSION_REPL = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('multiSessionRepl', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 55, "True when there is more than 1 debug console.")) })));
const CONTEXT_MULTI_SESSION_DEBUG = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('multiSessionDebug', false, { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 56, "True when there is more than 1 active debug session.")) })));
const CONTEXT_DISASSEMBLE_REQUEST_SUPPORTED = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'disassembleRequestSupported',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        57,
        "True when the focused sessions supports disassemble request."
    )) }
)));
const CONTEXT_DISASSEMBLY_VIEW_FOCUS = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'disassemblyViewFocus',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 58, "True when the Disassembly View is focused.")) }
)));
const CONTEXT_LANGUAGE_SUPPORTS_DISASSEMBLE_REQUEST = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'languageSupportsDisassembleRequest',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        59,
        "True when the language in the current editor supports disassemble request."
    )) }
)));
const CONTEXT_FOCUSED_STACK_FRAME_HAS_INSTRUCTION_POINTER_REFERENCE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(
    'focusedStackFrameHasInstructionReference',
    false,
    { type: 'boolean', description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
        _moduleId,
        60,
        "True when the focused stack frame has instruction pointer reference."
    )) }
)));
const debuggerDisabledMessage = (debugType) => ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(
    _moduleId,
    61,
    "Configured debug type '{0}' is installed but not supported in this environment.",
    debugType
));
const EDITOR_CONTRIBUTION_ID = 'editor.contrib.debug';
const BREAKPOINT_EDITOR_CONTRIBUTION_ID = 'editor.contrib.breakpoint';
const DEBUG_SCHEME = 'debug';
const INTERNAL_CONSOLE_OPTIONS_SCHEMA = {
    enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart'],
    default: 'openOnFirstSessionStart',
    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 62, "Controls when the internal Debug Console should open."))
};
var State;
( ((function(State) {
    State[State["Inactive"] = 0] = "Inactive";
    State[State["Initializing"] = 1] = "Initializing";
    State[State["Stopped"] = 2] = "Stopped";
    State[State["Running"] = 3] = "Running";
})(State || (State = {}))));
function getStateLabel(state) {
    switch (state) {
        case State.Initializing: return 'initializing';
        case State.Stopped: return 'stopped';
        case State.Running: return 'running';
        default: return 'inactive';
    }
}
var MemoryRangeType;
( ((function(MemoryRangeType) {
    MemoryRangeType[MemoryRangeType["Valid"] = 0] = "Valid";
    MemoryRangeType[MemoryRangeType["Unreadable"] = 1] = "Unreadable";
    MemoryRangeType[MemoryRangeType["Error"] = 2] = "Error";
})(MemoryRangeType || (MemoryRangeType = {}))));
const DEBUG_MEMORY_SCHEME = 'vscode-debug-memory';
function isFrameDeemphasized(frame) {
    const hint = frame.presentationHint ?? frame.source.presentationHint;
    return hint === 'deemphasize' || hint === 'subtle';
}
var DataBreakpointSetType;
( ((function(DataBreakpointSetType) {
    DataBreakpointSetType[DataBreakpointSetType["Variable"] = 0] = "Variable";
    DataBreakpointSetType[DataBreakpointSetType["Address"] = 1] = "Address";
})(DataBreakpointSetType || (DataBreakpointSetType = {}))));
var DebugConfigurationProviderTriggerKind;
( ((function(DebugConfigurationProviderTriggerKind) {
    DebugConfigurationProviderTriggerKind[DebugConfigurationProviderTriggerKind["Initial"] = 1] = "Initial";
    DebugConfigurationProviderTriggerKind[DebugConfigurationProviderTriggerKind["Dynamic"] = 2] = "Dynamic";
})(
    DebugConfigurationProviderTriggerKind || (DebugConfigurationProviderTriggerKind = {})
)));
var DebuggerString;
( ((function(DebuggerString) {
    DebuggerString["UnverifiedBreakpoints"] = "unverifiedBreakpoints";
})(DebuggerString || (DebuggerString = {}))));
var BreakpointWidgetContext;
( ((function(BreakpointWidgetContext) {
    BreakpointWidgetContext[BreakpointWidgetContext["CONDITION"] = 0] = "CONDITION";
    BreakpointWidgetContext[BreakpointWidgetContext["HIT_COUNT"] = 1] = "HIT_COUNT";
    BreakpointWidgetContext[BreakpointWidgetContext["LOG_MESSAGE"] = 2] = "LOG_MESSAGE";
    BreakpointWidgetContext[BreakpointWidgetContext["TRIGGER_POINT"] = 3] = "TRIGGER_POINT";
})(BreakpointWidgetContext || (BreakpointWidgetContext = {}))));
var DebugVisualizationType;
( ((function(DebugVisualizationType) {
    DebugVisualizationType[DebugVisualizationType["Command"] = 0] = "Command";
    DebugVisualizationType[DebugVisualizationType["Tree"] = 1] = "Tree";
})(DebugVisualizationType || (DebugVisualizationType = {}))));
var DebugTreeItemCollapsibleState;
( ((function(DebugTreeItemCollapsibleState) {
    DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["None"] = 0] = "None";
    DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["Collapsed"] = 1] = "Collapsed";
    DebugTreeItemCollapsibleState[DebugTreeItemCollapsibleState["Expanded"] = 2] = "Expanded";
})(DebugTreeItemCollapsibleState || (DebugTreeItemCollapsibleState = {}))));
var IDebugVisualization;
( ((function(IDebugVisualization) {
    IDebugVisualization.deserialize = (v) => ({
        id: v.id,
        name: v.name,
        iconPath: v.iconPath && { light: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(v.iconPath.light), dark: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(v.iconPath.dark) },
        iconClass: v.iconClass,
        visualization: v.visualization,
    });
    IDebugVisualization.serialize = (visualizer) => visualizer;
})(IDebugVisualization || (IDebugVisualization = {}))));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debugUtils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/debug/common/debugUtils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   convertToDAPaths: () => (/* binding */ convertToDAPaths),
/* harmony export */   convertToVSCPaths: () => (/* binding */ convertToVSCPaths),
/* harmony export */   filterExceptionsFromTelemetry: () => (/* binding */ filterExceptionsFromTelemetry),
/* harmony export */   formatPII: () => (/* binding */ formatPII),
/* harmony export */   getEvaluatableExpressionAtPosition: () => (/* binding */ getEvaluatableExpressionAtPosition),
/* harmony export */   getExactExpressionStartAndEnd: () => (/* binding */ getExactExpressionStartAndEnd),
/* harmony export */   getExtensionHostDebugSession: () => (/* binding */ getExtensionHostDebugSession),
/* harmony export */   getVisibleAndSorted: () => (/* binding */ getVisibleAndSorted),
/* harmony export */   isDebuggerMainContribution: () => (/* binding */ isDebuggerMainContribution),
/* harmony export */   isSessionAttach: () => (/* binding */ isSessionAttach),
/* harmony export */   isUri: () => (/* binding */ isUri),
/* harmony export */   saveAllBeforeDebugStart: () => (/* binding */ saveAllBeforeDebugStart),
/* harmony export */   sourcesEqual: () => (/* binding */ sourcesEqual)
/* harmony export */ });
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");








const _formatPIIRegexp = /{([^}]+)}/g;
function formatPII(value, excludePII, args) {
    return value.replace(_formatPIIRegexp, function (match, group) {
        return args && args.hasOwnProperty(group) ?
            args[group] :
            match;
    });
}
function filterExceptionsFromTelemetry(data) {
    const output = {};
    for (const key of ( (Object.keys(data)))) {
        if (!key.startsWith('!')) {
            output[key] = data[key];
        }
    }
    return output;
}
function isSessionAttach(session) {
    return session.configuration.request === 'attach' && !getExtensionHostDebugSession(session) && (!session.parentSession || isSessionAttach(session.parentSession));
}
function getExtensionHostDebugSession(session) {
    let type = session.configuration.type;
    if (!type) {
        return;
    }
    if (type === 'vslsShare') {
        type = session.configuration.adapterProxy.configuration.type;
    }
    if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.equalsIgnoreCase)(type, 'extensionhost') || (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_0__.equalsIgnoreCase)(type, 'pwa-extensionhost')) {
        return session;
    }
    return session.parentSession ? getExtensionHostDebugSession(session.parentSession) : undefined;
}
function isDebuggerMainContribution(dbg) {
    return dbg.type && (dbg.label || dbg.program || dbg.runtime);
}
function getExactExpressionStartAndEnd(lineContent, looseStart, looseEnd) {
    let matchingExpression = undefined;
    let startOffset = 0;
    const expression = /([^()\[\]{}<>\s+\-/%~#^;=|,`!]|\->)+/g;
    let result = null;
    while (result = expression.exec(lineContent)) {
        const start = result.index + 1;
        const end = start + result[0].length;
        if (start <= looseStart && end >= looseEnd) {
            matchingExpression = result[0];
            startOffset = start;
            break;
        }
    }
    if (matchingExpression) {
        const subExpression = /\w+/g;
        let subExpressionResult = null;
        while (subExpressionResult = subExpression.exec(matchingExpression)) {
            const subEnd = subExpressionResult.index + 1 + startOffset + subExpressionResult[0].length;
            if (subEnd >= looseEnd) {
                break;
            }
        }
        if (subExpressionResult) {
            matchingExpression = matchingExpression.substring(0, subExpression.lastIndex);
        }
    }
    return matchingExpression ?
        { start: startOffset, end: startOffset + matchingExpression.length - 1 } :
        { start: 0, end: 0 };
}
async function getEvaluatableExpressionAtPosition(languageFeaturesService, model, position, token) {
    if (( (languageFeaturesService.evaluatableExpressionProvider.has(model)))) {
        const supports = languageFeaturesService.evaluatableExpressionProvider.ordered(model);
        const results = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_7__.coalesce)(await Promise.all(( (supports.map(async (support) => {
            try {
                return await support.provideEvaluatableExpression(model, position, token ?? _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_6__.CancellationToken.None);
            }
            catch (err) {
                return undefined;
            }
        })))));
        if (results.length > 0) {
            let matchingExpression = results[0].expression;
            const range = results[0].range;
            if (!matchingExpression) {
                const lineContent = model.getLineContent(position.lineNumber);
                matchingExpression = lineContent.substring(range.startColumn - 1, range.endColumn - 1);
            }
            return { range, matchingExpression };
        }
    }
    else {
        const lineContent = model.getLineContent(position.lineNumber);
        const { start, end } = getExactExpressionStartAndEnd(lineContent, position.column, position.column);
        const matchingExpression = lineContent.substring(start - 1, end);
        return {
            matchingExpression,
            range: ( (new _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_5__.Range(
                position.lineNumber,
                start,
                position.lineNumber,
                start + matchingExpression.length
            )))
        };
    }
    return null;
}
const _schemePattern = /^[a-zA-Z][a-zA-Z0-9\+\-\.]+:/;
function isUri(s) {
    return !!(s && s.match(_schemePattern));
}
function stringToUri(source) {
    if (typeof source.path === 'string') {
        if (typeof source.sourceReference === 'number' && source.sourceReference > 0) ;
        else {
            if (isUri(source.path)) {
                return ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.parse(source.path));
            }
            else {
                if ((0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_2__.isAbsolute)(source.path)) {
                    return _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.file(source.path);
                }
            }
        }
    }
    return source.path;
}
function uriToString(source) {
    if (typeof source.path === 'object') {
        const u = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(source.path);
        if (u) {
            if (u.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.file) {
                return u.fsPath;
            }
            else {
                return (
                     (u.toString())
                );
            }
        }
    }
    return source.path;
}
function convertToDAPaths(message, toUri) {
    const fixPath = toUri ? stringToUri : uriToString;
    const msg = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__.deepClone)(message);
    convertPaths(msg, (toDA, source) => {
        if (toDA && source) {
            source.path = fixPath(source);
        }
    });
    return msg;
}
function convertToVSCPaths(message, toUri) {
    const fixPath = toUri ? stringToUri : uriToString;
    const msg = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__.deepClone)(message);
    convertPaths(msg, (toDA, source) => {
        if (!toDA && source) {
            source.path = fixPath(source);
        }
    });
    return msg;
}
function convertPaths(msg, fixSourcePath) {
    switch (msg.type) {
        case 'event': {
            const event = msg;
            switch (event.event) {
                case 'output':
                    fixSourcePath(false, event.body.source);
                    break;
                case 'loadedSource':
                    fixSourcePath(false, event.body.source);
                    break;
                case 'breakpoint':
                    fixSourcePath(false, event.body.breakpoint.source);
                    break;
            }
            break;
        }
        case 'request': {
            const request = msg;
            switch (request.command) {
                case 'setBreakpoints':
                    fixSourcePath(true, request.arguments.source);
                    break;
                case 'breakpointLocations':
                    fixSourcePath(true, request.arguments.source);
                    break;
                case 'source':
                    fixSourcePath(true, request.arguments.source);
                    break;
                case 'gotoTargets':
                    fixSourcePath(true, request.arguments.source);
                    break;
                case 'launchVSCode':
                    request.arguments.args.forEach((arg) => fixSourcePath(false, arg));
                    break;
            }
            break;
        }
        case 'response': {
            const response = msg;
            if (response.success && response.body) {
                switch (response.command) {
                    case 'stackTrace':
                        response.body.stackFrames.forEach(frame => fixSourcePath(false, frame.source));
                        break;
                    case 'loadedSources':
                        response.body.sources.forEach(source => fixSourcePath(false, source));
                        break;
                    case 'scopes':
                        response.body.scopes.forEach(scope => fixSourcePath(false, scope.source));
                        break;
                    case 'setFunctionBreakpoints':
                        response.body.breakpoints.forEach(bp => fixSourcePath(false, bp.source));
                        break;
                    case 'setBreakpoints':
                        response.body.breakpoints.forEach(bp => fixSourcePath(false, bp.source));
                        break;
                    case 'disassemble':
                        {
                            const di = response;
                            di.body?.instructions.forEach(di => fixSourcePath(false, di.location));
                        }
                        break;
                }
            }
            break;
        }
    }
}
function getVisibleAndSorted(array) {
    return array.filter(config => !config.presentation?.hidden).sort((first, second) => {
        if (!first.presentation) {
            if (!second.presentation) {
                return 0;
            }
            return 1;
        }
        if (!second.presentation) {
            return -1;
        }
        if (!first.presentation.group) {
            if (!second.presentation.group) {
                return compareOrders(first.presentation.order, second.presentation.order);
            }
            return 1;
        }
        if (!second.presentation.group) {
            return -1;
        }
        if (first.presentation.group !== second.presentation.group) {
            return first.presentation.group.localeCompare(second.presentation.group);
        }
        return compareOrders(first.presentation.order, second.presentation.order);
    });
}
function compareOrders(first, second) {
    if (typeof first !== 'number') {
        if (typeof second !== 'number') {
            return 0;
        }
        return 1;
    }
    if (typeof second !== 'number') {
        return -1;
    }
    return first - second;
}
async function saveAllBeforeDebugStart(configurationService, editorService) {
    const saveBeforeStartConfig = configurationService.getValue('debug.saveBeforeStart', { overrideIdentifier: editorService.activeTextEditorLanguageId });
    if (saveBeforeStartConfig !== 'none') {
        await editorService.saveAll();
        if (saveBeforeStartConfig === 'allEditorsInActiveGroup') {
            const activeEditor = editorService.activeEditorPane;
            if (activeEditor && activeEditor.input.resource?.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.untitled) {
                await editorService.save({ editor: activeEditor.input, groupId: activeEditor.group.id });
            }
        }
    }
    await configurationService.reloadConfiguration();
}
const sourcesEqual = (a, b) => !a || !b ? a === b : a.name === b.name && a.path === b.path && a.sourceReference === b.sourceReference;



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookCommon.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookCommon.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACCESSIBLE_NOTEBOOK_DISPLAY_ORDER: () => (/* binding */ ACCESSIBLE_NOTEBOOK_DISPLAY_ORDER),
/* harmony export */   CellEditType: () => (/* binding */ CellEditType),
/* harmony export */   CellKind: () => (/* binding */ CellKind),
/* harmony export */   CellStatusbarAlignment: () => (/* binding */ CellStatusbarAlignment),
/* harmony export */   CellUri: () => (/* binding */ CellUri),
/* harmony export */   EXECUTE_REPL_COMMAND_ID: () => (/* binding */ EXECUTE_REPL_COMMAND_ID),
/* harmony export */   INTERACTIVE_WINDOW_EDITOR_ID: () => (/* binding */ INTERACTIVE_WINDOW_EDITOR_ID),
/* harmony export */   MOVE_CURSOR_1_LINE_COMMAND: () => (/* binding */ MOVE_CURSOR_1_LINE_COMMAND),
/* harmony export */   MimeTypeDisplayOrder: () => (/* binding */ MimeTypeDisplayOrder),
/* harmony export */   NOTEBOOK_DIFF_EDITOR_ID: () => (/* binding */ NOTEBOOK_DIFF_EDITOR_ID),
/* harmony export */   NOTEBOOK_DISPLAY_ORDER: () => (/* binding */ NOTEBOOK_DISPLAY_ORDER),
/* harmony export */   NOTEBOOK_EDITOR_CURSOR_BOUNDARY: () => (/* binding */ NOTEBOOK_EDITOR_CURSOR_BOUNDARY),
/* harmony export */   NOTEBOOK_EDITOR_CURSOR_LINE_BOUNDARY: () => (/* binding */ NOTEBOOK_EDITOR_CURSOR_LINE_BOUNDARY),
/* harmony export */   NOTEBOOK_EDITOR_ID: () => (/* binding */ NOTEBOOK_EDITOR_ID),
/* harmony export */   NotebookCellExecutionState: () => (/* binding */ NotebookCellExecutionState),
/* harmony export */   NotebookCellsChangeType: () => (/* binding */ NotebookCellsChangeType),
/* harmony export */   NotebookEditorPriority: () => (/* binding */ NotebookEditorPriority),
/* harmony export */   NotebookExecutionState: () => (/* binding */ NotebookExecutionState),
/* harmony export */   NotebookFindScopeType: () => (/* binding */ NotebookFindScopeType),
/* harmony export */   NotebookRendererMatch: () => (/* binding */ NotebookRendererMatch),
/* harmony export */   NotebookSetting: () => (/* binding */ NotebookSetting),
/* harmony export */   NotebookWorkingCopyTypeIdentifier: () => (/* binding */ NotebookWorkingCopyTypeIdentifier),
/* harmony export */   RENDERER_EQUIVALENT_EXTENSIONS: () => (/* binding */ RENDERER_EQUIVALENT_EXTENSIONS),
/* harmony export */   RENDERER_NOT_AVAILABLE: () => (/* binding */ RENDERER_NOT_AVAILABLE),
/* harmony export */   REPL_EDITOR_ID: () => (/* binding */ REPL_EDITOR_ID),
/* harmony export */   RendererMessagingSpec: () => (/* binding */ RendererMessagingSpec),
/* harmony export */   SelectionStateType: () => (/* binding */ SelectionStateType),
/* harmony export */   compressOutputItemStreams: () => (/* binding */ compressOutputItemStreams),
/* harmony export */   diff: () => (/* binding */ diff),
/* harmony export */   isDocumentExcludePattern: () => (/* binding */ isDocumentExcludePattern),
/* harmony export */   isTextStreamMime: () => (/* binding */ isTextStreamMime)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/glob.js */ "./node_modules/vscode/vscode/src/vs/base/common/glob.js");
/* harmony import */ var _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/iterator.js */ "./node_modules/vscode/vscode/src/vs/base/common/iterator.js");
/* harmony import */ var _base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/mime.js */ "./node_modules/vscode/vscode/src/vs/base/common/mime.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");
/* harmony import */ var _services_notebook_common_notebookDocumentService_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../services/notebook/common/notebookDocumentService.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/notebook/common/notebookDocumentService.js");









const NOTEBOOK_EDITOR_ID = 'workbench.editor.notebook';
const NOTEBOOK_DIFF_EDITOR_ID = 'workbench.editor.notebookTextDiffEditor';
const INTERACTIVE_WINDOW_EDITOR_ID = 'workbench.editor.interactive';
const REPL_EDITOR_ID = 'workbench.editor.repl';
const EXECUTE_REPL_COMMAND_ID = 'replNotebook.input.execute';
var CellKind;
( (function(CellKind) {
    CellKind[CellKind["Markup"] = 1] = "Markup";
    CellKind[CellKind["Code"] = 2] = "Code";
})(CellKind || (CellKind = {})));
const NOTEBOOK_DISPLAY_ORDER = [
    'application/json',
    'application/javascript',
    'text/html',
    'image/svg+xml',
    _base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__.Mimes.latex,
    _base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__.Mimes.markdown,
    'image/png',
    'image/jpeg',
    _base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__.Mimes.text
];
const ACCESSIBLE_NOTEBOOK_DISPLAY_ORDER = [
    _base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__.Mimes.latex,
    _base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__.Mimes.markdown,
    'application/json',
    'text/html',
    'image/svg+xml',
    'image/png',
    'image/jpeg',
    _base_common_mime_js__WEBPACK_IMPORTED_MODULE_3__.Mimes.text,
];
const RENDERER_EQUIVALENT_EXTENSIONS = ( new Map([
    ['ms-toolsai.jupyter', ( new Set(['jupyter-notebook', 'interactive']))],
    ['ms-toolsai.jupyter-renderers', ( new Set(['jupyter-notebook', 'interactive']))],
]));
const RENDERER_NOT_AVAILABLE = '_notAvailable';
var NotebookCellExecutionState;
( (function(NotebookCellExecutionState) {
    NotebookCellExecutionState[NotebookCellExecutionState["Unconfirmed"] = 1] = "Unconfirmed";
    NotebookCellExecutionState[NotebookCellExecutionState["Pending"] = 2] = "Pending";
    NotebookCellExecutionState[NotebookCellExecutionState["Executing"] = 3] = "Executing";
})(NotebookCellExecutionState || (NotebookCellExecutionState = {})));
var NotebookExecutionState;
( (function(NotebookExecutionState) {
    NotebookExecutionState[NotebookExecutionState["Unconfirmed"] = 1] = "Unconfirmed";
    NotebookExecutionState[NotebookExecutionState["Pending"] = 2] = "Pending";
    NotebookExecutionState[NotebookExecutionState["Executing"] = 3] = "Executing";
})(NotebookExecutionState || (NotebookExecutionState = {})));
var NotebookRendererMatch;
( (function(NotebookRendererMatch) {
    NotebookRendererMatch[NotebookRendererMatch["WithHardKernelDependency"] = 0] = "WithHardKernelDependency";
    NotebookRendererMatch[NotebookRendererMatch["WithOptionalKernelDependency"] = 1] = "WithOptionalKernelDependency";
    NotebookRendererMatch[NotebookRendererMatch["Pure"] = 2] = "Pure";
    NotebookRendererMatch[NotebookRendererMatch["Never"] = 3] = "Never";
})(NotebookRendererMatch || (NotebookRendererMatch = {})));
var RendererMessagingSpec;
( (function(RendererMessagingSpec) {
    RendererMessagingSpec["Always"] = "always";
    RendererMessagingSpec["Never"] = "never";
    RendererMessagingSpec["Optional"] = "optional";
})(RendererMessagingSpec || (RendererMessagingSpec = {})));
var NotebookCellsChangeType;
( (function(NotebookCellsChangeType) {
    NotebookCellsChangeType[NotebookCellsChangeType["ModelChange"] = 1] = "ModelChange";
    NotebookCellsChangeType[NotebookCellsChangeType["Move"] = 2] = "Move";
    NotebookCellsChangeType[NotebookCellsChangeType["ChangeCellLanguage"] = 5] = "ChangeCellLanguage";
    NotebookCellsChangeType[NotebookCellsChangeType["Initialize"] = 6] = "Initialize";
    NotebookCellsChangeType[NotebookCellsChangeType["ChangeCellMetadata"] = 7] = "ChangeCellMetadata";
    NotebookCellsChangeType[NotebookCellsChangeType["Output"] = 8] = "Output";
    NotebookCellsChangeType[NotebookCellsChangeType["OutputItem"] = 9] = "OutputItem";
    NotebookCellsChangeType[NotebookCellsChangeType["ChangeCellContent"] = 10] = "ChangeCellContent";
    NotebookCellsChangeType[NotebookCellsChangeType["ChangeDocumentMetadata"] = 11] = "ChangeDocumentMetadata";
    NotebookCellsChangeType[NotebookCellsChangeType["ChangeCellInternalMetadata"] = 12] = "ChangeCellInternalMetadata";
    NotebookCellsChangeType[NotebookCellsChangeType["ChangeCellMime"] = 13] = "ChangeCellMime";
    NotebookCellsChangeType[NotebookCellsChangeType["Unknown"] = 100] = "Unknown";
})(NotebookCellsChangeType || (NotebookCellsChangeType = {})));
var SelectionStateType;
( (function(SelectionStateType) {
    SelectionStateType[SelectionStateType["Handle"] = 0] = "Handle";
    SelectionStateType[SelectionStateType["Index"] = 1] = "Index";
})(SelectionStateType || (SelectionStateType = {})));
var CellEditType;
( (function(CellEditType) {
    CellEditType[CellEditType["Replace"] = 1] = "Replace";
    CellEditType[CellEditType["Output"] = 2] = "Output";
    CellEditType[CellEditType["Metadata"] = 3] = "Metadata";
    CellEditType[CellEditType["CellLanguage"] = 4] = "CellLanguage";
    CellEditType[CellEditType["DocumentMetadata"] = 5] = "DocumentMetadata";
    CellEditType[CellEditType["Move"] = 6] = "Move";
    CellEditType[CellEditType["OutputItems"] = 7] = "OutputItems";
    CellEditType[CellEditType["PartialMetadata"] = 8] = "PartialMetadata";
    CellEditType[CellEditType["PartialInternalMetadata"] = 9] = "PartialInternalMetadata";
})(CellEditType || (CellEditType = {})));
var CellUri;
( (function(CellUri) {
    CellUri.scheme = _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.vscodeNotebookCell;
    function generate$1(notebook, handle) {
        return (0,_services_notebook_common_notebookDocumentService_js__WEBPACK_IMPORTED_MODULE_8__.generate)(notebook, handle);
    }
    CellUri.generate = generate$1;
    function parse$1(cell) {
        return (0,_services_notebook_common_notebookDocumentService_js__WEBPACK_IMPORTED_MODULE_8__.parse)(cell);
    }
    CellUri.parse = parse$1;
    function generateCellOutputUri(notebook, outputId) {
        return notebook.with({
            scheme: _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.vscodeNotebookCellOutput,
            fragment: `op${outputId ?? ''},${notebook.scheme !== _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.file ? notebook.scheme : ''}`
        });
    }
    CellUri.generateCellOutputUri = generateCellOutputUri;
    function parseCellOutputUri(uri) {
        if (uri.scheme !== _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.vscodeNotebookCellOutput) {
            return;
        }
        const match = /^op([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?\,(.*)$/i.exec(uri.fragment);
        if (!match) {
            return undefined;
        }
        const outputId = (match[1] && match[1] !== '') ? match[1] : undefined;
        const scheme = match[2];
        return {
            outputId,
            notebook: uri.with({
                scheme: scheme || _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.file,
                fragment: null
            })
        };
    }
    CellUri.parseCellOutputUri = parseCellOutputUri;
    function generateCellPropertyUri(notebook, handle, scheme) {
        return CellUri.generate(notebook, handle).with({ scheme: scheme });
    }
    CellUri.generateCellPropertyUri = generateCellPropertyUri;
    function parseCellPropertyUri(uri, propertyScheme) {
        if (uri.scheme !== propertyScheme) {
            return undefined;
        }
        return CellUri.parse(uri.with({ scheme: CellUri.scheme }));
    }
    CellUri.parseCellPropertyUri = parseCellPropertyUri;
})(CellUri || (CellUri = {})));
const normalizeSlashes = (str) => _base_common_platform_js__WEBPACK_IMPORTED_MODULE_6__.isWindows ? str.replace(/\//g, '\\') : str;
class MimeTypeDisplayOrder {
    constructor(initialValue = [], defaultOrder = NOTEBOOK_DISPLAY_ORDER) {
        this.defaultOrder = defaultOrder;
        this.order = ( [...( new Set(initialValue))].map(pattern => ({
            pattern,
            matches: (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.parse)(normalizeSlashes(pattern))
        })));
    }
    sort(mimetypes) {
        const remaining = ( new Map(( _base_common_iterator_js__WEBPACK_IMPORTED_MODULE_2__.Iterable.map(mimetypes, m => [m, normalizeSlashes(m)]))));
        let sorted = [];
        for (const { matches } of this.order) {
            for (const [original, normalized] of remaining) {
                if (matches(normalized)) {
                    sorted.push(original);
                    remaining.delete(original);
                    break;
                }
            }
        }
        if (remaining.size) {
            sorted = sorted.concat([...( remaining.keys())].sort((a, b) => this.defaultOrder.indexOf(a) - this.defaultOrder.indexOf(b)));
        }
        return sorted;
    }
    prioritize(chosenMimetype, otherMimetypes) {
        const chosenIndex = this.findIndex(chosenMimetype);
        if (chosenIndex === -1) {
            this.order.unshift({ pattern: chosenMimetype, matches: (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.parse)(normalizeSlashes(chosenMimetype)) });
            return;
        }
        const uniqueIndicies = ( new Set(( otherMimetypes.map(m => this.findIndex(m, chosenIndex)))));
        uniqueIndicies.delete(-1);
        const otherIndices = Array.from(uniqueIndicies).sort();
        this.order.splice(chosenIndex + 1, 0, ...( otherIndices.map(i => this.order[i])));
        for (let oi = otherIndices.length - 1; oi >= 0; oi--) {
            this.order.splice(otherIndices[oi], 1);
        }
    }
    toArray() {
        return ( this.order.map(o => o.pattern));
    }
    findIndex(mimeType, maxIndex = this.order.length) {
        const normalized = normalizeSlashes(mimeType);
        for (let i = 0; i < maxIndex; i++) {
            if (this.order[i].matches(normalized)) {
                return i;
            }
        }
        return -1;
    }
}
function diff(before, after, contains, equal = (a, b) => a === b) {
    const result = [];
    function pushSplice(start, deleteCount, toInsert) {
        if (deleteCount === 0 && toInsert.length === 0) {
            return;
        }
        const latest = result[result.length - 1];
        if (latest && latest.start + latest.deleteCount === start) {
            latest.deleteCount += deleteCount;
            latest.toInsert.push(...toInsert);
        }
        else {
            result.push({ start, deleteCount, toInsert });
        }
    }
    let beforeIdx = 0;
    let afterIdx = 0;
    while (true) {
        if (beforeIdx === before.length) {
            pushSplice(beforeIdx, 0, after.slice(afterIdx));
            break;
        }
        if (afterIdx === after.length) {
            pushSplice(beforeIdx, before.length - beforeIdx, []);
            break;
        }
        const beforeElement = before[beforeIdx];
        const afterElement = after[afterIdx];
        if (equal(beforeElement, afterElement)) {
            beforeIdx += 1;
            afterIdx += 1;
            continue;
        }
        if (contains(afterElement)) {
            pushSplice(beforeIdx, 1, []);
            beforeIdx += 1;
        }
        else {
            pushSplice(beforeIdx, 0, [afterElement]);
            afterIdx += 1;
        }
    }
    return result;
}
const NOTEBOOK_EDITOR_CURSOR_BOUNDARY = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_7__.RawContextKey('notebookEditorCursorAtBoundary', 'none'));
const NOTEBOOK_EDITOR_CURSOR_LINE_BOUNDARY = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_7__.RawContextKey('notebookEditorCursorAtLineBoundary', 'none'));
var NotebookEditorPriority;
( (function(NotebookEditorPriority) {
    NotebookEditorPriority["default"] = "default";
    NotebookEditorPriority["option"] = "option";
})(NotebookEditorPriority || (NotebookEditorPriority = {})));
var NotebookFindScopeType;
( (function(NotebookFindScopeType) {
    NotebookFindScopeType["Cells"] = "cells";
    NotebookFindScopeType["Text"] = "text";
    NotebookFindScopeType["None"] = "none";
})(NotebookFindScopeType || (NotebookFindScopeType = {})));
function isDocumentExcludePattern(filenamePattern) {
    const arg = filenamePattern;
    if ((typeof arg.include === 'string' || (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.isRelativePattern)(arg.include))
        && (typeof arg.exclude === 'string' || (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.isRelativePattern)(arg.exclude))) {
        return true;
    }
    return false;
}
const NotebookSetting = {
    displayOrder: 'notebook.displayOrder',
    cellToolbarLocation: 'notebook.cellToolbarLocation',
    cellToolbarVisibility: 'notebook.cellToolbarVisibility',
    showCellStatusBar: 'notebook.showCellStatusBar',
    textDiffEditorPreview: 'notebook.diff.enablePreview',
    diffOverviewRuler: 'notebook.diff.overviewRuler',
    experimentalInsertToolbarAlignment: 'notebook.experimental.insertToolbarAlignment',
    compactView: 'notebook.compactView',
    focusIndicator: 'notebook.cellFocusIndicator',
    insertToolbarLocation: 'notebook.insertToolbarLocation',
    globalToolbar: 'notebook.globalToolbar',
    stickyScrollEnabled: 'notebook.stickyScroll.enabled',
    stickyScrollMode: 'notebook.stickyScroll.mode',
    undoRedoPerCell: 'notebook.undoRedoPerCell',
    consolidatedOutputButton: 'notebook.consolidatedOutputButton',
    showFoldingControls: 'notebook.showFoldingControls',
    dragAndDropEnabled: 'notebook.dragAndDropEnabled',
    cellEditorOptionsCustomizations: 'notebook.editorOptionsCustomizations',
    consolidatedRunButton: 'notebook.consolidatedRunButton',
    openGettingStarted: 'notebook.experimental.openGettingStarted',
    globalToolbarShowLabel: 'notebook.globalToolbarShowLabel',
    markupFontSize: 'notebook.markup.fontSize',
    markdownLineHeight: 'notebook.markdown.lineHeight',
    interactiveWindowCollapseCodeCells: 'interactiveWindow.collapseCellInputCode',
    outputScrollingDeprecated: 'notebook.experimental.outputScrolling',
    outputScrolling: 'notebook.output.scrolling',
    textOutputLineLimit: 'notebook.output.textLineLimit',
    LinkifyOutputFilePaths: 'notebook.output.linkifyFilePaths',
    minimalErrorRendering: 'notebook.output.minimalErrorRendering',
    formatOnSave: 'notebook.formatOnSave.enabled',
    insertFinalNewline: 'notebook.insertFinalNewline',
    defaultFormatter: 'notebook.defaultFormatter',
    formatOnCellExecution: 'notebook.formatOnCellExecution',
    codeActionsOnSave: 'notebook.codeActionsOnSave',
    outputWordWrap: 'notebook.output.wordWrap',
    outputLineHeightDeprecated: 'notebook.outputLineHeight',
    outputLineHeight: 'notebook.output.lineHeight',
    outputFontSizeDeprecated: 'notebook.outputFontSize',
    outputFontSize: 'notebook.output.fontSize',
    outputFontFamilyDeprecated: 'notebook.outputFontFamily',
    outputFontFamily: 'notebook.output.fontFamily',
    findFilters: 'notebook.find.filters',
    logging: 'notebook.logging',
    confirmDeleteRunningCell: 'notebook.confirmDeleteRunningCell',
    remoteSaving: 'notebook.experimental.remoteSave',
    gotoSymbolsAllSymbols: 'notebook.gotoSymbols.showAllSymbols',
    outlineShowMarkdownHeadersOnly: 'notebook.outline.showMarkdownHeadersOnly',
    outlineShowCodeCells: 'notebook.outline.showCodeCells',
    outlineShowCodeCellSymbols: 'notebook.outline.showCodeCellSymbols',
    breadcrumbsShowCodeCells: 'notebook.breadcrumbs.showCodeCells',
    scrollToRevealCell: 'notebook.scrolling.revealNextCellOnExecute',
    cellChat: 'notebook.experimental.cellChat',
    cellGenerate: 'notebook.experimental.generate',
    notebookVariablesView: 'notebook.experimental.variablesView',
    InteractiveWindowPromptToSave: 'interactiveWindow.promptToSaveOnClose',
    cellFailureDiagnostics: 'notebook.cellFailureDiagnostics',
    outputBackupSizeLimit: 'notebook.backup.sizeLimit',
};
var CellStatusbarAlignment;
( (function(CellStatusbarAlignment) {
    CellStatusbarAlignment[CellStatusbarAlignment["Left"] = 1] = "Left";
    CellStatusbarAlignment[CellStatusbarAlignment["Right"] = 2] = "Right";
})(CellStatusbarAlignment || (CellStatusbarAlignment = {})));
class NotebookWorkingCopyTypeIdentifier {
    static { this._prefix = 'notebook/'; }
    static create(viewType) {
        return `${NotebookWorkingCopyTypeIdentifier._prefix}${viewType}`;
    }
    static parse(candidate) {
        if (candidate.startsWith(NotebookWorkingCopyTypeIdentifier._prefix)) {
            return candidate.substring(NotebookWorkingCopyTypeIdentifier._prefix.length);
        }
        return undefined;
    }
}
function isTextStreamMime(mimeType) {
    return ['application/vnd.code.notebook.stdout', 'application/vnd.code.notebook.stderr'].includes(mimeType);
}
const textDecoder = ( new TextDecoder());
function compressOutputItemStreams(outputs) {
    const buffers = [];
    let startAppending = false;
    for (const output of outputs) {
        if ((buffers.length === 0 || startAppending)) {
            buffers.push(output);
            startAppending = true;
        }
    }
    let didCompression = compressStreamBuffer(buffers);
    const concatenated = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.concat(( buffers.map(buffer => _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.wrap(buffer))));
    const data = formatStreamText(concatenated);
    didCompression = didCompression || data.byteLength !== concatenated.byteLength;
    return { data, didCompression };
}
const MOVE_CURSOR_1_LINE_COMMAND = `${String.fromCharCode(27)}[A`;
const MOVE_CURSOR_1_LINE_COMMAND_BYTES = ( MOVE_CURSOR_1_LINE_COMMAND.split('').map(c => c.charCodeAt(0)));
const LINE_FEED = 10;
function compressStreamBuffer(streams) {
    let didCompress = false;
    streams.forEach((stream, index) => {
        if (index === 0 || stream.length < MOVE_CURSOR_1_LINE_COMMAND.length) {
            return;
        }
        const previousStream = streams[index - 1];
        const command = stream.subarray(0, MOVE_CURSOR_1_LINE_COMMAND.length);
        if (command[0] === MOVE_CURSOR_1_LINE_COMMAND_BYTES[0] && command[1] === MOVE_CURSOR_1_LINE_COMMAND_BYTES[1] && command[2] === MOVE_CURSOR_1_LINE_COMMAND_BYTES[2]) {
            const lastIndexOfLineFeed = previousStream.lastIndexOf(LINE_FEED);
            if (lastIndexOfLineFeed === -1) {
                return;
            }
            didCompress = true;
            streams[index - 1] = previousStream.subarray(0, lastIndexOfLineFeed);
            streams[index] = stream.subarray(MOVE_CURSOR_1_LINE_COMMAND.length);
        }
    });
    return didCompress;
}
function fixBackspace(txt) {
    let tmp = txt;
    do {
        txt = tmp;
        tmp = txt.replace(/[^\n]\x08/gm, '');
    } while (tmp.length < txt.length);
    return txt;
}
function fixCarriageReturn(txt) {
    txt = txt.replace(/\r+\n/gm, '\n');
    while (txt.search(/\r[^$]/g) > -1) {
        const base = txt.match(/^(.*)\r+/m)[1];
        let insert = txt.match(/\r+(.*)$/m)[1];
        insert = insert + base.slice(insert.length, base.length);
        txt = txt.replace(/\r+.*$/m, '\r').replace(/^.*\r/m, insert);
    }
    return txt;
}
const BACKSPACE_CHARACTER = '\b'.charCodeAt(0);
const CARRIAGE_RETURN_CHARACTER = '\r'.charCodeAt(0);
function formatStreamText(buffer) {
    if (!buffer.buffer.includes(BACKSPACE_CHARACTER) && !buffer.buffer.includes(CARRIAGE_RETURN_CHARACTER)) {
        return buffer;
    }
    return _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.fromString(fixCarriageReturn(fixBackspace(textDecoder.decode(buffer.buffer))));
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookExecutionService.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookExecutionService.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CellExecutionUpdateType: () => (/* binding */ CellExecutionUpdateType)
/* harmony export */ });
var CellExecutionUpdateType;
( (function(CellExecutionUpdateType) {
    CellExecutionUpdateType[CellExecutionUpdateType["Output"] = 1] = "Output";
    CellExecutionUpdateType[CellExecutionUpdateType["OutputItems"] = 2] = "OutputItems";
    CellExecutionUpdateType[CellExecutionUpdateType["ExecutionState"] = 3] = "ExecutionState";
})(CellExecutionUpdateType || (CellExecutionUpdateType = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookKernelService.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/notebook/common/notebookKernelService.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   variablePageSize: () => (/* binding */ variablePageSize)
/* harmony export */ });
const variablePageSize = 100;



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/search/common/cellSearchModel.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/search/common/cellSearchModel.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CellSearchModel: () => (/* binding */ CellSearchModel)
/* harmony export */ });
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _editor_common_model_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../editor/common/model.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model.js");
/* harmony import */ var _editor_common_model_pieceTreeTextBuffer_pieceTreeTextBufferBuilder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js");
/* harmony import */ var _editor_common_model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../editor/common/model/textModelSearch.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/textModelSearch.js");





class CellSearchModel extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_0__.Disposable {
    constructor(_source, _inputTextBuffer, _outputs) {
        super();
        this._source = _source;
        this._inputTextBuffer = _inputTextBuffer;
        this._outputs = _outputs;
        this._outputTextBuffers = undefined;
    }
    _getFullModelRange(buffer) {
        const lineCount = buffer.getLineCount();
        return ( new _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_1__.Range(1, 1, lineCount, this._getLineMaxColumn(buffer, lineCount)));
    }
    _getLineMaxColumn(buffer, lineNumber) {
        if (lineNumber < 1 || lineNumber > buffer.getLineCount()) {
            throw ( new Error('Illegal value for lineNumber'));
        }
        return buffer.getLineLength(lineNumber) + 1;
    }
    get inputTextBuffer() {
        if (!this._inputTextBuffer) {
            const builder = ( new _editor_common_model_pieceTreeTextBuffer_pieceTreeTextBufferBuilder_js__WEBPACK_IMPORTED_MODULE_3__.PieceTreeTextBufferBuilder());
            builder.acceptChunk(this._source);
            const bufferFactory = builder.finish(true);
            const { textBuffer, disposable } = bufferFactory.create(_editor_common_model_js__WEBPACK_IMPORTED_MODULE_2__.DefaultEndOfLine.LF);
            this._inputTextBuffer = textBuffer;
            this._register(disposable);
        }
        return this._inputTextBuffer;
    }
    get outputTextBuffers() {
        if (!this._outputTextBuffers) {
            this._outputTextBuffers = ( this._outputs.map((output) => {
                const builder = ( new _editor_common_model_pieceTreeTextBuffer_pieceTreeTextBufferBuilder_js__WEBPACK_IMPORTED_MODULE_3__.PieceTreeTextBufferBuilder());
                builder.acceptChunk(output);
                const bufferFactory = builder.finish(true);
                const { textBuffer, disposable } = bufferFactory.create(_editor_common_model_js__WEBPACK_IMPORTED_MODULE_2__.DefaultEndOfLine.LF);
                this._register(disposable);
                return textBuffer;
            }));
        }
        return this._outputTextBuffers;
    }
    findInInputs(target) {
        const searchParams = ( new _editor_common_model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_4__.SearchParams(target, false, false, null));
        const searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return [];
        }
        const fullInputRange = this._getFullModelRange(this.inputTextBuffer);
        return this.inputTextBuffer.findMatchesLineByLine(fullInputRange, searchData, true, 5000);
    }
    findInOutputs(target) {
        const searchParams = ( new _editor_common_model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_4__.SearchParams(target, false, false, null));
        const searchData = searchParams.parseSearchRequest();
        if (!searchData) {
            return [];
        }
        return ( this.outputTextBuffers.map(buffer => {
            const matches = buffer.findMatchesLineByLine(this._getFullModelRange(buffer), searchData, true, 5000);
            if (matches.length === 0) {
                return undefined;
            }
            return {
                textBuffer: buffer,
                matches
            };
        })).filter((item) => !!item);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/search/common/searchNotebookHelpers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/search/common/searchNotebookHelpers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   genericCellMatchesToTextSearchMatches: () => (/* binding */ genericCellMatchesToTextSearchMatches),
/* harmony export */   isINotebookFileMatchNoModel: () => (/* binding */ isINotebookFileMatchNoModel),
/* harmony export */   rawCellPrefix: () => (/* binding */ rawCellPrefix)
/* harmony export */ });
/* harmony import */ var _services_search_common_search_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../services/search/common/search.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");


function isINotebookFileMatchNoModel(object) {
    return 'cellResults' in object;
}
const rawCellPrefix = 'rawCell#';
function genericCellMatchesToTextSearchMatches(contentMatches, buffer) {
    let previousEndLine = -1;
    const contextGroupings = [];
    let currentContextGrouping = [];
    contentMatches.forEach((match) => {
        if (match.range.startLineNumber !== previousEndLine) {
            if (currentContextGrouping.length > 0) {
                contextGroupings.push([...currentContextGrouping]);
                currentContextGrouping = [];
            }
        }
        currentContextGrouping.push(match);
        previousEndLine = match.range.endLineNumber;
    });
    if (currentContextGrouping.length > 0) {
        contextGroupings.push([...currentContextGrouping]);
    }
    const textSearchResults = ( contextGroupings.map((grouping) => {
        const lineTexts = [];
        const firstLine = grouping[0].range.startLineNumber;
        const lastLine = grouping[grouping.length - 1].range.endLineNumber;
        for (let i = firstLine; i <= lastLine; i++) {
            lineTexts.push(buffer.getLineContent(i));
        }
        return ( new _services_search_common_search_js__WEBPACK_IMPORTED_MODULE_0__.TextSearchMatch(lineTexts.join('\n') + '\n', ( grouping.map(m => ( new _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_1__.Range(
            m.range.startLineNumber - 1,
            m.range.startColumn - 1,
            m.range.endLineNumber - 1,
            m.range.endColumn - 1
        ))))));
    }));
    return textSearchResults;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TaskDefinitionRegistry: () => (/* binding */ TaskDefinitionRegistry)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _services_extensions_common_extensionsRegistry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/extensions/common/extensionsRegistry.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");






const _moduleId = "vs/workbench/contrib/tasks/common/taskDefinitionRegistry";
const taskDefinitionSchema = {
    type: 'object',
    additionalProperties: false,
    properties: {
        type: {
            type: 'string',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                0,
                'The actual task type. Please note that types starting with a \'$\' are reserved for internal usage.'
            ))
        },
        required: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        properties: {
            type: 'object',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 1, 'Additional properties of the task type')),
            additionalProperties: {
                $ref: 'http://json-schema.org/draft-07/schema#'
            }
        },
        when: {
            type: 'string',
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                2,
                'Condition which must be true to enable this type of task. Consider using `shellExecutionSupported`, `processExecutionSupported`, and `customExecutionSupported` as appropriate for this task definition. See the [API documentation](https://code.visualstudio.com/api/extension-guides/task-provider#when-clause) for more information.'
            )),
            default: ''
        }
    }
};
var Configuration;
( ((function(Configuration) {
    function from(value, extensionId, messageCollector) {
        if (!value) {
            return undefined;
        }
        const taskType = (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value.type) ? value.type : undefined;
        if (!taskType || taskType.length === 0) {
            messageCollector.error(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                3,
                'The task type configuration is missing the required \'taskType\' property'
            )));
            return undefined;
        }
        const required = [];
        if (Array.isArray(value.required)) {
            for (const element of value.required) {
                if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(element)) {
                    required.push(element);
                }
            }
        }
        return {
            extensionId: extensionId.value,
            taskType, required: required,
            properties: value.properties ? (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(value.properties) : {},
            when: value.when ? _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_4__.ContextKeyExpr.deserialize(value.when) : undefined
        };
    }
    Configuration.from = from;
})(Configuration || (Configuration = {}))));
const taskDefinitionsExtPoint = _services_extensions_common_extensionsRegistry_js__WEBPACK_IMPORTED_MODULE_3__.ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'taskDefinitions',
    activationEventsGenerator: (contributions, result) => {
        for (const task of contributions) {
            if (task.type) {
                result.push(`onTaskType:${task.type}`);
            }
        }
    },
    jsonSchema: {
        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 4, 'Contributes task kinds')),
        type: 'array',
        items: taskDefinitionSchema
    }
});
class TaskDefinitionRegistryImpl {
    constructor() {
        this._onDefinitionsChanged = ( (new _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Emitter()));
        this.onDefinitionsChanged = this._onDefinitionsChanged.event;
        this.taskTypes = Object.create(null);
        this.readyPromise = ( (new Promise((resolve, reject) => {
            taskDefinitionsExtPoint.setHandler((extensions, delta) => {
                this._schema = undefined;
                try {
                    for (const extension of delta.removed) {
                        const taskTypes = extension.value;
                        for (const taskType of taskTypes) {
                            if (this.taskTypes && taskType.type && this.taskTypes[taskType.type]) {
                                delete this.taskTypes[taskType.type];
                            }
                        }
                    }
                    for (const extension of delta.added) {
                        const taskTypes = extension.value;
                        for (const taskType of taskTypes) {
                            const type = Configuration.from(taskType, extension.description.identifier, extension.collector);
                            if (type) {
                                this.taskTypes[type.taskType] = type;
                            }
                        }
                    }
                    if ((delta.removed.length > 0) || (delta.added.length > 0)) {
                        this._onDefinitionsChanged.fire();
                    }
                }
                catch (error) {
                }
                resolve(undefined);
            });
        })));
    }
    onReady() {
        return this.readyPromise;
    }
    get(key) {
        return this.taskTypes[key];
    }
    all() {
        return (
             (( (Object.keys(this.taskTypes))).map(key => this.taskTypes[key]))
        );
    }
    getJsonSchema() {
        if (this._schema === undefined) {
            const schemas = [];
            for (const definition of this.all()) {
                const schema = {
                    type: 'object',
                    additionalProperties: false
                };
                if (definition.required.length > 0) {
                    schema.required = definition.required.slice(0);
                }
                if (definition.properties !== undefined) {
                    schema.properties = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(definition.properties);
                }
                else {
                    schema.properties = Object.create(null);
                }
                schema.properties.type = {
                    type: 'string',
                    enum: [definition.taskType]
                };
                schemas.push(schema);
            }
            this._schema = { oneOf: schemas };
        }
        return this._schema;
    }
}
const TaskDefinitionRegistry = ( (new TaskDefinitionRegistryImpl()));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/tasks/common/tasks.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/tasks/common/tasks.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CUSTOMIZED_TASK_TYPE: () => (/* binding */ CUSTOMIZED_TASK_TYPE),
/* harmony export */   CommandOptions: () => (/* binding */ CommandOptions),
/* harmony export */   CommandString: () => (/* binding */ CommandString),
/* harmony export */   CommonTask: () => (/* binding */ CommonTask),
/* harmony export */   ConfiguringTask: () => (/* binding */ ConfiguringTask),
/* harmony export */   ContributedTask: () => (/* binding */ ContributedTask),
/* harmony export */   CustomTask: () => (/* binding */ CustomTask),
/* harmony export */   DependsOrder: () => (/* binding */ DependsOrder),
/* harmony export */   ExecutionEngine: () => (/* binding */ ExecutionEngine),
/* harmony export */   InMemoryTask: () => (/* binding */ InMemoryTask),
/* harmony export */   JsonSchemaVersion: () => (/* binding */ JsonSchemaVersion),
/* harmony export */   KeyedTaskIdentifier: () => (/* binding */ KeyedTaskIdentifier),
/* harmony export */   PanelKind: () => (/* binding */ PanelKind),
/* harmony export */   PresentationOptions: () => (/* binding */ PresentationOptions),
/* harmony export */   RevealKind: () => (/* binding */ RevealKind),
/* harmony export */   RevealProblemKind: () => (/* binding */ RevealProblemKind),
/* harmony export */   RunOnOptions: () => (/* binding */ RunOnOptions),
/* harmony export */   RunOptions: () => (/* binding */ RunOptions),
/* harmony export */   RuntimeType: () => (/* binding */ RuntimeType),
/* harmony export */   ShellQuoting: () => (/* binding */ ShellQuoting),
/* harmony export */   TASKS_CATEGORY: () => (/* binding */ TASKS_CATEGORY),
/* harmony export */   TASK_RUNNING_STATE: () => (/* binding */ TASK_RUNNING_STATE),
/* harmony export */   TaskDefinition: () => (/* binding */ TaskDefinition),
/* harmony export */   TaskEvent: () => (/* binding */ TaskEvent),
/* harmony export */   TaskEventKind: () => (/* binding */ TaskEventKind),
/* harmony export */   TaskGroup: () => (/* binding */ TaskGroup),
/* harmony export */   TaskRunSource: () => (/* binding */ TaskRunSource),
/* harmony export */   TaskRunType: () => (/* binding */ TaskRunType),
/* harmony export */   TaskScope: () => (/* binding */ TaskScope),
/* harmony export */   TaskSettingId: () => (/* binding */ TaskSettingId),
/* harmony export */   TaskSorter: () => (/* binding */ TaskSorter),
/* harmony export */   TaskSourceKind: () => (/* binding */ TaskSourceKind),
/* harmony export */   TasksSchemaProperties: () => (/* binding */ TasksSchemaProperties),
/* harmony export */   USER_TASKS_GROUP_KEY: () => (/* binding */ USER_TASKS_GROUP_KEY)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");
/* harmony import */ var _taskDefinitionRegistry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./taskDefinitionRegistry.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/tasks/common/taskDefinitionRegistry.js");
/* harmony import */ var _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../platform/configuration/common/configuration.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.js");







const _moduleId = "vs/workbench/contrib/tasks/common/tasks";
const USER_TASKS_GROUP_KEY = 'settings';
const TASK_RUNNING_STATE = ( (new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_4__.RawContextKey('taskRunning', false, ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 0, "Whether a task is currently running.")))));
const TASKS_CATEGORY = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localize2WithPath)(_moduleId, 1, "Tasks"));
var ShellQuoting;
( ((function(ShellQuoting) {
    ShellQuoting[ShellQuoting["Escape"] = 1] = "Escape";
    ShellQuoting[ShellQuoting["Strong"] = 2] = "Strong";
    ShellQuoting[ShellQuoting["Weak"] = 3] = "Weak";
})(ShellQuoting || (ShellQuoting = {}))));
const CUSTOMIZED_TASK_TYPE = '$customized';
( ((function(ShellQuoting) {
    function from(value) {
        if (!value) {
            return ShellQuoting.Strong;
        }
        switch (value.toLowerCase()) {
            case 'escape':
                return ShellQuoting.Escape;
            case 'strong':
                return ShellQuoting.Strong;
            case 'weak':
                return ShellQuoting.Weak;
            default:
                return ShellQuoting.Strong;
        }
    }
    ShellQuoting.from = from;
})(ShellQuoting || (ShellQuoting = {}))));
var CommandOptions;
( ((function(CommandOptions) {
    CommandOptions.defaults = { cwd: '${workspaceFolder}' };
})(CommandOptions || (CommandOptions = {}))));
var RevealKind;
( ((function(RevealKind) {
    RevealKind[RevealKind["Always"] = 1] = "Always";
    RevealKind[RevealKind["Silent"] = 2] = "Silent";
    RevealKind[RevealKind["Never"] = 3] = "Never";
})(RevealKind || (RevealKind = {}))));
( ((function(RevealKind) {
    function fromString(value) {
        switch (value.toLowerCase()) {
            case 'always':
                return RevealKind.Always;
            case 'silent':
                return RevealKind.Silent;
            case 'never':
                return RevealKind.Never;
            default:
                return RevealKind.Always;
        }
    }
    RevealKind.fromString = fromString;
})(RevealKind || (RevealKind = {}))));
var RevealProblemKind;
( ((function(RevealProblemKind) {
    RevealProblemKind[RevealProblemKind["Never"] = 1] = "Never";
    RevealProblemKind[RevealProblemKind["OnProblem"] = 2] = "OnProblem";
    RevealProblemKind[RevealProblemKind["Always"] = 3] = "Always";
})(RevealProblemKind || (RevealProblemKind = {}))));
( ((function(RevealProblemKind) {
    function fromString(value) {
        switch (value.toLowerCase()) {
            case 'always':
                return RevealProblemKind.Always;
            case 'never':
                return RevealProblemKind.Never;
            case 'onproblem':
                return RevealProblemKind.OnProblem;
            default:
                return RevealProblemKind.OnProblem;
        }
    }
    RevealProblemKind.fromString = fromString;
})(RevealProblemKind || (RevealProblemKind = {}))));
var PanelKind;
( ((function(PanelKind) {
    PanelKind[PanelKind["Shared"] = 1] = "Shared";
    PanelKind[PanelKind["Dedicated"] = 2] = "Dedicated";
    PanelKind[PanelKind["New"] = 3] = "New";
})(PanelKind || (PanelKind = {}))));
( ((function(PanelKind) {
    function fromString(value) {
        switch (value.toLowerCase()) {
            case 'shared':
                return PanelKind.Shared;
            case 'dedicated':
                return PanelKind.Dedicated;
            case 'new':
                return PanelKind.New;
            default:
                return PanelKind.Shared;
        }
    }
    PanelKind.fromString = fromString;
})(PanelKind || (PanelKind = {}))));
var PresentationOptions;
( ((function(PresentationOptions) {
    PresentationOptions.defaults = {
        echo: true, reveal: RevealKind.Always, revealProblems: RevealProblemKind.Never, focus: false, panel: PanelKind.Shared, showReuseMessage: true, clear: false
    };
})(PresentationOptions || (PresentationOptions = {}))));
var RuntimeType;
( ((function(RuntimeType) {
    RuntimeType[RuntimeType["Shell"] = 1] = "Shell";
    RuntimeType[RuntimeType["Process"] = 2] = "Process";
    RuntimeType[RuntimeType["CustomExecution"] = 3] = "CustomExecution";
})(RuntimeType || (RuntimeType = {}))));
( ((function(RuntimeType) {
    function fromString(value) {
        switch (value.toLowerCase()) {
            case 'shell':
                return RuntimeType.Shell;
            case 'process':
                return RuntimeType.Process;
            case 'customExecution':
                return RuntimeType.CustomExecution;
            default:
                return RuntimeType.Process;
        }
    }
    RuntimeType.fromString = fromString;
    function toString(value) {
        switch (value) {
            case RuntimeType.Shell: return 'shell';
            case RuntimeType.Process: return 'process';
            case RuntimeType.CustomExecution: return 'customExecution';
            default: return 'process';
        }
    }
    RuntimeType.toString = toString;
})(RuntimeType || (RuntimeType = {}))));
var CommandString;
( ((function(CommandString) {
    function value(value) {
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {
            return value;
        }
        else {
            return value.value;
        }
    }
    CommandString.value = value;
})(CommandString || (CommandString = {}))));
var TaskGroup;
( ((function(TaskGroup) {
    TaskGroup.Clean = { _id: 'clean', isDefault: false };
    TaskGroup.Build = { _id: 'build', isDefault: false };
    TaskGroup.Rebuild = { _id: 'rebuild', isDefault: false };
    TaskGroup.Test = { _id: 'test', isDefault: false };
    function is(value) {
        return value === TaskGroup.Clean._id || value === TaskGroup.Build._id || value === TaskGroup.Rebuild._id || value === TaskGroup.Test._id;
    }
    TaskGroup.is = is;
    function from(value) {
        if (value === undefined) {
            return undefined;
        }
        else if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(value)) {
            if (is(value)) {
                return { _id: value, isDefault: false };
            }
            return undefined;
        }
        else {
            return value;
        }
    }
    TaskGroup.from = from;
})(TaskGroup || (TaskGroup = {}))));
var TaskScope;
( ((function(TaskScope) {
    TaskScope[TaskScope["Global"] = 1] = "Global";
    TaskScope[TaskScope["Workspace"] = 2] = "Workspace";
    TaskScope[TaskScope["Folder"] = 3] = "Folder";
})(TaskScope || (TaskScope = {}))));
var TaskSourceKind;
( ((function(TaskSourceKind) {
    TaskSourceKind.Workspace = 'workspace';
    TaskSourceKind.Extension = 'extension';
    TaskSourceKind.InMemory = 'inMemory';
    TaskSourceKind.WorkspaceFile = 'workspaceFile';
    TaskSourceKind.User = 'user';
    function toConfigurationTarget(kind) {
        switch (kind) {
            case TaskSourceKind.User: return _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.USER;
            case TaskSourceKind.WorkspaceFile: return _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE;
            default: return _platform_configuration_common_configuration_js__WEBPACK_IMPORTED_MODULE_6__.ConfigurationTarget.WORKSPACE_FOLDER;
        }
    }
    TaskSourceKind.toConfigurationTarget = toConfigurationTarget;
})(TaskSourceKind || (TaskSourceKind = {}))));
var DependsOrder;
( ((function(DependsOrder) {
    DependsOrder["parallel"] = "parallel";
    DependsOrder["sequence"] = "sequence";
})(DependsOrder || (DependsOrder = {}))));
var RunOnOptions;
( ((function(RunOnOptions) {
    RunOnOptions[RunOnOptions["default"] = 1] = "default";
    RunOnOptions[RunOnOptions["folderOpen"] = 2] = "folderOpen";
})(RunOnOptions || (RunOnOptions = {}))));
var RunOptions;
( ((function(RunOptions) {
    RunOptions.defaults = { reevaluateOnRerun: true, runOn: RunOnOptions.default, instanceLimit: 1 };
})(RunOptions || (RunOptions = {}))));
class CommonTask {
    constructor(id, label, type, runOptions, configurationProperties, source) {
        this._label = '';
        this._id = id;
        if (label) {
            this._label = label;
        }
        if (type) {
            this.type = type;
        }
        this.runOptions = runOptions;
        this.configurationProperties = configurationProperties;
        this._source = source;
    }
    getDefinition(useSource) {
        return undefined;
    }
    getMapKey() {
        return this._id;
    }
    getKey() {
        return undefined;
    }
    getCommonTaskId() {
        const key = { folder: this.getFolderId(), id: this._id };
        return JSON.stringify(key);
    }
    clone() {
        return this.fromObject(Object.assign({}, this));
    }
    getWorkspaceFolder() {
        return undefined;
    }
    getWorkspaceFileName() {
        return undefined;
    }
    getTelemetryKind() {
        return 'unknown';
    }
    matches(key, compareId = false) {
        if (key === undefined) {
            return false;
        }
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_1__.isString)(key)) {
            return key === this._label || key === this.configurationProperties.identifier || (compareId && key === this._id);
        }
        const identifier = this.getDefinition(true);
        return identifier !== undefined && identifier._key === key._key;
    }
    getQualifiedLabel() {
        const workspaceFolder = this.getWorkspaceFolder();
        if (workspaceFolder) {
            return `${this._label} (${workspaceFolder.name})`;
        }
        else {
            return this._label;
        }
    }
    getTaskExecution() {
        const result = {
            id: this._id,
            task: this
        };
        return result;
    }
    addTaskLoadMessages(messages) {
        if (this._taskLoadMessages === undefined) {
            this._taskLoadMessages = [];
        }
        if (messages) {
            this._taskLoadMessages = this._taskLoadMessages.concat(messages);
        }
    }
    get taskLoadMessages() {
        return this._taskLoadMessages;
    }
}
class CustomTask extends CommonTask {
    constructor(id, source, label, type, command, hasDefinedMatchers, runOptions, configurationProperties) {
        super(id, label, undefined, runOptions, configurationProperties, source);
        this.command = {};
        this._source = source;
        this.hasDefinedMatchers = hasDefinedMatchers;
        if (command) {
            this.command = command;
        }
    }
    clone() {
        return (
             (new CustomTask(
                this._id,
                this._source,
                this._label,
                this.type,
                this.command,
                this.hasDefinedMatchers,
                this.runOptions,
                this.configurationProperties
            ))
        );
    }
    customizes() {
        if (this._source && this._source.customizes) {
            return this._source.customizes;
        }
        return undefined;
    }
    getDefinition(useSource = false) {
        if (useSource && this._source.customizes !== undefined) {
            return this._source.customizes;
        }
        else {
            let type;
            const commandRuntime = this.command ? this.command.runtime : undefined;
            switch (commandRuntime) {
                case RuntimeType.Shell:
                    type = 'shell';
                    break;
                case RuntimeType.Process:
                    type = 'process';
                    break;
                case RuntimeType.CustomExecution:
                    type = 'customExecution';
                    break;
                case undefined:
                    type = '$composite';
                    break;
                default:
                    throw ( (new Error('Unexpected task runtime')));
            }
            const result = {
                type,
                _key: this._id,
                id: this._id
            };
            return result;
        }
    }
    static is(value) {
        return value instanceof CustomTask;
    }
    getMapKey() {
        const workspaceFolder = this._source.config.workspaceFolder;
        return workspaceFolder ? `${( (workspaceFolder.uri.toString()))}|${this._id}|${this.instance}` : `${this._id}|${this.instance}`;
    }
    getFolderId() {
        return this._source.kind === TaskSourceKind.User ? USER_TASKS_GROUP_KEY : this._source.config.workspaceFolder?.uri.toString();
    }
    getCommonTaskId() {
        return this._source.customizes ? super.getCommonTaskId() : (this.getKey() ?? super.getCommonTaskId());
    }
    getKey() {
        const workspaceFolder = this.getFolderId();
        if (!workspaceFolder) {
            return undefined;
        }
        let id = this.configurationProperties.identifier;
        if (this._source.kind !== TaskSourceKind.Workspace) {
            id += this._source.kind;
        }
        const key = { type: CUSTOMIZED_TASK_TYPE, folder: workspaceFolder, id };
        return JSON.stringify(key);
    }
    getWorkspaceFolder() {
        return this._source.config.workspaceFolder;
    }
    getWorkspaceFileName() {
        return (this._source.config.workspace && this._source.config.workspace.configuration) ? (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_2__.basename)(this._source.config.workspace.configuration) : undefined;
    }
    getTelemetryKind() {
        if (this._source.customizes) {
            return 'workspace>extension';
        }
        else {
            return 'workspace';
        }
    }
    fromObject(object) {
        return (
             (new CustomTask(
                object._id,
                object._source,
                object._label,
                object.type,
                object.command,
                object.hasDefinedMatchers,
                object.runOptions,
                object.configurationProperties
            ))
        );
    }
}
class ConfiguringTask extends CommonTask {
    constructor(id, source, label, type, configures, runOptions, configurationProperties) {
        super(id, label, type, runOptions, configurationProperties, source);
        this._source = source;
        this.configures = configures;
    }
    static is(value) {
        return value instanceof ConfiguringTask;
    }
    fromObject(object) {
        return object;
    }
    getDefinition() {
        return this.configures;
    }
    getWorkspaceFileName() {
        return (this._source.config.workspace && this._source.config.workspace.configuration) ? (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_2__.basename)(this._source.config.workspace.configuration) : undefined;
    }
    getWorkspaceFolder() {
        return this._source.config.workspaceFolder;
    }
    getFolderId() {
        return this._source.kind === TaskSourceKind.User ? USER_TASKS_GROUP_KEY : this._source.config.workspaceFolder?.uri.toString();
    }
    getKey() {
        const workspaceFolder = this.getFolderId();
        if (!workspaceFolder) {
            return undefined;
        }
        let id = this.configurationProperties.identifier;
        if (this._source.kind !== TaskSourceKind.Workspace) {
            id += this._source.kind;
        }
        const key = { type: CUSTOMIZED_TASK_TYPE, folder: workspaceFolder, id };
        return JSON.stringify(key);
    }
}
class ContributedTask extends CommonTask {
    constructor(id, source, label, type, defines, command, hasDefinedMatchers, runOptions, configurationProperties) {
        super(id, label, type, runOptions, configurationProperties, source);
        this.defines = defines;
        this.hasDefinedMatchers = hasDefinedMatchers;
        this.command = command;
        this.icon = configurationProperties.icon;
        this.hide = configurationProperties.hide;
    }
    clone() {
        return (
             (new ContributedTask(
                this._id,
                this._source,
                this._label,
                this.type,
                this.defines,
                this.command,
                this.hasDefinedMatchers,
                this.runOptions,
                this.configurationProperties
            ))
        );
    }
    getDefinition() {
        return this.defines;
    }
    static is(value) {
        return value instanceof ContributedTask;
    }
    getMapKey() {
        const workspaceFolder = this._source.workspaceFolder;
        return workspaceFolder
            ? `${( (this._source.scope.toString()))}|${( (workspaceFolder.uri.toString()))}|${this._id}|${this.instance}`
            : `${( (this._source.scope.toString()))}|${this._id}|${this.instance}`;
    }
    getFolderId() {
        if (this._source.scope === TaskScope.Folder && this._source.workspaceFolder) {
            return (
                 (this._source.workspaceFolder.uri.toString())
            );
        }
        return undefined;
    }
    getKey() {
        const key = { type: 'contributed', scope: this._source.scope, id: this._id };
        key.folder = this.getFolderId();
        return JSON.stringify(key);
    }
    getWorkspaceFolder() {
        return this._source.workspaceFolder;
    }
    getTelemetryKind() {
        return 'extension';
    }
    fromObject(object) {
        return (
             (new ContributedTask(
                object._id,
                object._source,
                object._label,
                object.type,
                object.defines,
                object.command,
                object.hasDefinedMatchers,
                object.runOptions,
                object.configurationProperties
            ))
        );
    }
}
class InMemoryTask extends CommonTask {
    constructor(id, source, label, type, runOptions, configurationProperties) {
        super(id, label, type, runOptions, configurationProperties, source);
        this._source = source;
    }
    clone() {
        return (
             (new InMemoryTask(
                this._id,
                this._source,
                this._label,
                this.type,
                this.runOptions,
                this.configurationProperties
            ))
        );
    }
    static is(value) {
        return value instanceof InMemoryTask;
    }
    getTelemetryKind() {
        return 'composite';
    }
    getMapKey() {
        return `${this._id}|${this.instance}`;
    }
    getFolderId() {
        return undefined;
    }
    fromObject(object) {
        return (
             (new InMemoryTask(
                object._id,
                object._source,
                object._label,
                object.type,
                object.runOptions,
                object.configurationProperties
            ))
        );
    }
}
var ExecutionEngine;
( ((function(ExecutionEngine) {
    ExecutionEngine[ExecutionEngine["Process"] = 1] = "Process";
    ExecutionEngine[ExecutionEngine["Terminal"] = 2] = "Terminal";
})(ExecutionEngine || (ExecutionEngine = {}))));
( ((function(ExecutionEngine) {
    ExecutionEngine._default = ExecutionEngine.Terminal;
})(ExecutionEngine || (ExecutionEngine = {}))));
var JsonSchemaVersion;
( ((function(JsonSchemaVersion) {
    JsonSchemaVersion[JsonSchemaVersion["V0_1_0"] = 1] = "V0_1_0";
    JsonSchemaVersion[JsonSchemaVersion["V2_0_0"] = 2] = "V2_0_0";
})(JsonSchemaVersion || (JsonSchemaVersion = {}))));
class TaskSorter {
    constructor(workspaceFolders) {
        this._order = ( (new Map()));
        for (let i = 0; i < workspaceFolders.length; i++) {
            this._order.set(( (workspaceFolders[i].uri.toString())), i);
        }
    }
    compare(a, b) {
        const aw = a.getWorkspaceFolder();
        const bw = b.getWorkspaceFolder();
        if (aw && bw) {
            let ai = this._order.get(( (aw.uri.toString())));
            ai = ai === undefined ? 0 : ai + 1;
            let bi = this._order.get(( (bw.uri.toString())));
            bi = bi === undefined ? 0 : bi + 1;
            if (ai === bi) {
                return a._label.localeCompare(b._label);
            }
            else {
                return ai - bi;
            }
        }
        else if (!aw && bw) {
            return -1;
        }
        else if (aw && !bw) {
            return +1;
        }
        else {
            return 0;
        }
    }
}
var TaskEventKind;
( ((function(TaskEventKind) {
    TaskEventKind["DependsOnStarted"] = "dependsOnStarted";
    TaskEventKind["AcquiredInput"] = "acquiredInput";
    TaskEventKind["Start"] = "start";
    TaskEventKind["ProcessStarted"] = "processStarted";
    TaskEventKind["Active"] = "active";
    TaskEventKind["Inactive"] = "inactive";
    TaskEventKind["Changed"] = "changed";
    TaskEventKind["Terminated"] = "terminated";
    TaskEventKind["ProcessEnded"] = "processEnded";
    TaskEventKind["End"] = "end";
})(TaskEventKind || (TaskEventKind = {}))));
var TaskRunType;
( ((function(TaskRunType) {
    TaskRunType["SingleRun"] = "singleRun";
    TaskRunType["Background"] = "background";
})(TaskRunType || (TaskRunType = {}))));
var TaskRunSource;
( ((function(TaskRunSource) {
    TaskRunSource[TaskRunSource["System"] = 0] = "System";
    TaskRunSource[TaskRunSource["User"] = 1] = "User";
    TaskRunSource[TaskRunSource["FolderOpen"] = 2] = "FolderOpen";
    TaskRunSource[TaskRunSource["ConfigurationChange"] = 3] = "ConfigurationChange";
    TaskRunSource[TaskRunSource["Reconnect"] = 4] = "Reconnect";
})(TaskRunSource || (TaskRunSource = {}))));
var TaskEvent;
( ((function(TaskEvent) {
    function common(task) {
        return {
            taskId: task._id,
            taskName: task.configurationProperties.name,
            runType: task.configurationProperties.isBackground ? TaskRunType.Background : TaskRunType.SingleRun,
            group: task.configurationProperties.group,
            __task: task,
        };
    }
    function start(task, terminalId, resolvedVariables) {
        return {
            ...common(task),
            kind: TaskEventKind.Start,
            terminalId,
            resolvedVariables,
        };
    }
    TaskEvent.start = start;
    function processStarted(task, terminalId, processId) {
        return {
            ...common(task),
            kind: TaskEventKind.ProcessStarted,
            terminalId,
            processId,
        };
    }
    TaskEvent.processStarted = processStarted;
    function processEnded(task, terminalId, exitCode) {
        return {
            ...common(task),
            kind: TaskEventKind.ProcessEnded,
            terminalId,
            exitCode,
        };
    }
    TaskEvent.processEnded = processEnded;
    function terminated(task, terminalId, exitReason) {
        return {
            ...common(task),
            kind: TaskEventKind.Terminated,
            exitReason,
            terminalId,
        };
    }
    TaskEvent.terminated = terminated;
    function general(kind, task, terminalId) {
        return {
            ...common(task),
            kind,
            terminalId,
        };
    }
    TaskEvent.general = general;
    function changed() {
        return { kind: TaskEventKind.Changed };
    }
    TaskEvent.changed = changed;
})(TaskEvent || (TaskEvent = {}))));
var KeyedTaskIdentifier;
( ((function(KeyedTaskIdentifier) {
    function sortedStringify(literal) {
        const keys = ( (Object.keys(literal))).sort();
        let result = '';
        for (const key of keys) {
            let stringified = literal[key];
            if (stringified instanceof Object) {
                stringified = sortedStringify(stringified);
            }
            else if (typeof stringified === 'string') {
                stringified = stringified.replace(/,/g, ',,');
            }
            result += key + ',' + stringified + ',';
        }
        return result;
    }
    function create(value) {
        const resultKey = sortedStringify(value);
        const result = { _key: resultKey, type: value.taskType };
        Object.assign(result, value);
        return result;
    }
    KeyedTaskIdentifier.create = create;
})(KeyedTaskIdentifier || (KeyedTaskIdentifier = {}))));
var TaskSettingId;
( ((function(TaskSettingId) {
    TaskSettingId["AutoDetect"] = "task.autoDetect";
    TaskSettingId["SaveBeforeRun"] = "task.saveBeforeRun";
    TaskSettingId["ShowDecorations"] = "task.showDecorations";
    TaskSettingId["ProblemMatchersNeverPrompt"] = "task.problemMatchers.neverPrompt";
    TaskSettingId["SlowProviderWarning"] = "task.slowProviderWarning";
    TaskSettingId["QuickOpenHistory"] = "task.quickOpen.history";
    TaskSettingId["QuickOpenDetail"] = "task.quickOpen.detail";
    TaskSettingId["QuickOpenSkip"] = "task.quickOpen.skip";
    TaskSettingId["QuickOpenShowAll"] = "task.quickOpen.showAll";
    TaskSettingId["AllowAutomaticTasks"] = "task.allowAutomaticTasks";
    TaskSettingId["Reconnection"] = "task.reconnection";
    TaskSettingId["VerboseLogging"] = "task.verboseLogging";
})(TaskSettingId || (TaskSettingId = {}))));
var TasksSchemaProperties;
( ((function(TasksSchemaProperties) {
    TasksSchemaProperties["Tasks"] = "tasks";
    TasksSchemaProperties["SuppressTaskName"] = "tasks.suppressTaskName";
    TasksSchemaProperties["Windows"] = "tasks.windows";
    TasksSchemaProperties["Osx"] = "tasks.osx";
    TasksSchemaProperties["Linux"] = "tasks.linux";
    TasksSchemaProperties["ShowOutput"] = "tasks.showOutput";
    TasksSchemaProperties["IsShellCommand"] = "tasks.isShellCommand";
    TasksSchemaProperties["ServiceTestSetting"] = "tasks.service.testSetting";
})(TasksSchemaProperties || (TasksSchemaProperties = {}))));
var TaskDefinition;
( ((function(TaskDefinition) {
    function createTaskIdentifier(external, reporter) {
        const definition = _taskDefinitionRegistry_js__WEBPACK_IMPORTED_MODULE_5__.TaskDefinitionRegistry.get(external.type);
        if (definition === undefined) {
            const copy = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__.deepClone)(external);
            delete copy._key;
            return KeyedTaskIdentifier.create(copy);
        }
        const literal = Object.create(null);
        literal.type = definition.taskType;
        const required = ( (new Set()));
        definition.required.forEach(element => required.add(element));
        const properties = definition.properties;
        for (const property of ( (Object.keys(properties)))) {
            const value = external[property];
            if (value !== undefined && value !== null) {
                literal[property] = value;
            }
            else if (( (required.has(property)))) {
                const schema = properties[property];
                if (schema.default !== undefined) {
                    literal[property] = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__.deepClone)(schema.default);
                }
                else {
                    switch (schema.type) {
                        case 'boolean':
                            literal[property] = false;
                            break;
                        case 'number':
                        case 'integer':
                            literal[property] = 0;
                            break;
                        case 'string':
                            literal[property] = '';
                            break;
                        default:
                            reporter.error(( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                _moduleId,
                                2,
                                'Error: the task identifier \'{0}\' is missing the required property \'{1}\'. The task identifier will be ignored.',
                                JSON.stringify(external, undefined, 0),
                                property
                            )));
                            return undefined;
                    }
                }
            }
        }
        return KeyedTaskIdentifier.create(literal);
    }
    TaskDefinition.createTaskIdentifier = createTaskIdentifier;
})(TaskDefinition || (TaskDefinition = {}))));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/constants.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/constants.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TestCommandId: () => (/* binding */ TestCommandId),
/* harmony export */   TestExplorerViewMode: () => (/* binding */ TestExplorerViewMode),
/* harmony export */   TestExplorerViewSorting: () => (/* binding */ TestExplorerViewSorting),
/* harmony export */   Testing: () => (/* binding */ Testing),
/* harmony export */   labelForTestInState: () => (/* binding */ labelForTestInState),
/* harmony export */   testConfigurationGroupNames: () => (/* binding */ testConfigurationGroupNames)
/* harmony export */ });
/* harmony import */ var _base_common_iconLabels_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/iconLabels.js */ "./node_modules/vscode/vscode/src/vs/base/common/iconLabels.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _testTypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./testTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testTypes.js");



const _moduleId = "vs/workbench/contrib/testing/common/constants";
var Testing;
( ((function(Testing) {
    Testing["ViewletId"] = "workbench.view.extension.test";
    Testing["ExplorerViewId"] = "workbench.view.testing";
    Testing["OutputPeekContributionId"] = "editor.contrib.testingOutputPeek";
    Testing["DecorationsContributionId"] = "editor.contrib.testingDecorations";
    Testing["CoverageDecorationsContributionId"] = "editor.contrib.coverageDecorations";
    Testing["CoverageViewId"] = "workbench.view.testCoverage";
    Testing["ResultsPanelId"] = "workbench.panel.testResults";
    Testing["ResultsViewId"] = "workbench.panel.testResults.view";
    Testing["MessageLanguageId"] = "vscodeInternalTestMessage";
})(Testing || (Testing = {}))));
var TestExplorerViewMode;
( ((function(TestExplorerViewMode) {
    TestExplorerViewMode["List"] = "list";
    TestExplorerViewMode["Tree"] = "true";
})(TestExplorerViewMode || (TestExplorerViewMode = {}))));
var TestExplorerViewSorting;
( ((function(TestExplorerViewSorting) {
    TestExplorerViewSorting["ByLocation"] = "location";
    TestExplorerViewSorting["ByStatus"] = "status";
    TestExplorerViewSorting["ByDuration"] = "duration";
})(TestExplorerViewSorting || (TestExplorerViewSorting = {}))));
const testStateNames = {
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestResultState.Errored]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 0, 'Errored')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestResultState.Failed]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 1, 'Failed')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestResultState.Passed]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 2, 'Passed')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestResultState.Queued]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 3, 'Queued')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestResultState.Running]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 4, 'Running')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestResultState.Skipped]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 5, 'Skipped')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestResultState.Unset]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 6, 'Not yet run')),
};
const labelForTestInState = (label, state) => ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 7, '{0} ({1})', (0,_base_common_iconLabels_js__WEBPACK_IMPORTED_MODULE_0__.stripIcons)(label), testStateNames[state]));
const testConfigurationGroupNames = {
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestRunProfileBitset.Debug]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 8, 'Debug')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestRunProfileBitset.Run]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 9, 'Run')),
    [_testTypes_js__WEBPACK_IMPORTED_MODULE_2__.TestRunProfileBitset.Coverage]: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_1__.localizeWithPath)(_moduleId, 10, 'Coverage')),
};
var TestCommandId;
( ((function(TestCommandId) {
    TestCommandId["CancelTestRefreshAction"] = "testing.cancelTestRefresh";
    TestCommandId["CancelTestRunAction"] = "testing.cancelRun";
    TestCommandId["ClearTestResultsAction"] = "testing.clearTestResults";
    TestCommandId["CollapseAllAction"] = "testing.collapseAll";
    TestCommandId["ConfigureTestProfilesAction"] = "testing.configureProfile";
    TestCommandId["ContinousRunUsingForTest"] = "testing.continuousRunUsingForTest";
    TestCommandId["CoverageAtCursor"] = "testing.coverageAtCursor";
    TestCommandId["CoverageByUri"] = "testing.coverage.uri";
    TestCommandId["CoverageClear"] = "testing.coverage.close";
    TestCommandId["CoverageCurrentFile"] = "testing.coverageCurrentFile";
    TestCommandId["CoverageFilterToTest"] = "testing.coverageFilterToTest";
    TestCommandId["CoverageFilterToTestInEditor"] = "testing.coverageFilterToTestInEditor";
    TestCommandId["CoverageLastRun"] = "testing.coverageLastRun";
    TestCommandId["CoverageSelectedAction"] = "testing.coverageSelected";
    TestCommandId["CoverageToggleToolbar"] = "testing.coverageToggleToolbar";
    TestCommandId["CoverageViewChangeSorting"] = "testing.coverageViewChangeSorting";
    TestCommandId["DebugAction"] = "testing.debug";
    TestCommandId["DebugAllAction"] = "testing.debugAll";
    TestCommandId["DebugAtCursor"] = "testing.debugAtCursor";
    TestCommandId["DebugByUri"] = "testing.debug.uri";
    TestCommandId["DebugCurrentFile"] = "testing.debugCurrentFile";
    TestCommandId["DebugFailedTests"] = "testing.debugFailTests";
    TestCommandId["DebugLastRun"] = "testing.debugLastRun";
    TestCommandId["DebugSelectedAction"] = "testing.debugSelected";
    TestCommandId["FilterAction"] = "workbench.actions.treeView.testExplorer.filter";
    TestCommandId["GetExplorerSelection"] = "_testing.getExplorerSelection";
    TestCommandId["GetSelectedProfiles"] = "testing.getSelectedProfiles";
    TestCommandId["GoToTest"] = "testing.editFocusedTest";
    TestCommandId["HideTestAction"] = "testing.hideTest";
    TestCommandId["OpenCoverage"] = "testing.openCoverage";
    TestCommandId["OpenOutputPeek"] = "testing.openOutputPeek";
    TestCommandId["RefreshTestsAction"] = "testing.refreshTests";
    TestCommandId["ReRunFailedTests"] = "testing.reRunFailTests";
    TestCommandId["ReRunLastRun"] = "testing.reRunLastRun";
    TestCommandId["RunAction"] = "testing.run";
    TestCommandId["RunAllAction"] = "testing.runAll";
    TestCommandId["RunAllWithCoverageAction"] = "testing.coverageAll";
    TestCommandId["RunAtCursor"] = "testing.runAtCursor";
    TestCommandId["RunByUri"] = "testing.run.uri";
    TestCommandId["RunCurrentFile"] = "testing.runCurrentFile";
    TestCommandId["RunSelectedAction"] = "testing.runSelected";
    TestCommandId["RunUsingProfileAction"] = "testing.runUsing";
    TestCommandId["RunWithCoverageAction"] = "testing.coverage";
    TestCommandId["SearchForTestExtension"] = "testing.searchForTestExtension";
    TestCommandId["SelectDefaultTestProfiles"] = "testing.selectDefaultTestProfiles";
    TestCommandId["ShowMostRecentOutputAction"] = "testing.showMostRecentOutput";
    TestCommandId["StartContinousRun"] = "testing.startContinuousRun";
    TestCommandId["StopContinousRun"] = "testing.stopContinuousRun";
    TestCommandId["TestingSortByDurationAction"] = "testing.sortByDuration";
    TestCommandId["TestingSortByLocationAction"] = "testing.sortByLocation";
    TestCommandId["TestingSortByStatusAction"] = "testing.sortByStatus";
    TestCommandId["TestingViewAsListAction"] = "testing.viewAsList";
    TestCommandId["TestingViewAsTreeAction"] = "testing.viewAsTree";
    TestCommandId["ToggleContinousRunForTest"] = "testing.toggleContinuousRunForTest";
    TestCommandId["ToggleInlineTestOutput"] = "testing.toggleInlineTestOutput";
    TestCommandId["UnhideAllTestsAction"] = "testing.unhideAllTests";
    TestCommandId["UnhideTestAction"] = "testing.unhideTest";
})(TestCommandId || (TestCommandId = {}))));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testId.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testId.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TestId: () => (/* binding */ TestId),
/* harmony export */   TestIdPathParts: () => (/* binding */ TestIdPathParts),
/* harmony export */   TestPosition: () => (/* binding */ TestPosition)
/* harmony export */ });
var TestIdPathParts;
( (function(TestIdPathParts) {
    TestIdPathParts["Delimiter"] = "\0";
})(TestIdPathParts || (TestIdPathParts = {})));
var TestPosition;
( (function(TestPosition) {
    TestPosition[TestPosition["IsSame"] = 0] = "IsSame";
    TestPosition[TestPosition["Disconnected"] = 1] = "Disconnected";
    TestPosition[TestPosition["IsChild"] = 2] = "IsChild";
    TestPosition[TestPosition["IsParent"] = 3] = "IsParent";
})(TestPosition || (TestPosition = {})));
class TestId {
    static fromExtHostTestItem(item, rootId, parent = item.parent) {
        if (item._isRoot) {
            return ( new TestId([rootId]));
        }
        const path = [item.id];
        for (let i = parent; i && i.id !== rootId; i = i.parent) {
            path.push(i.id);
        }
        path.push(rootId);
        return ( new TestId(path.reverse()));
    }
    static isRoot(idString) {
        return !idString.includes(TestIdPathParts.Delimiter);
    }
    static root(idString) {
        const idx = idString.indexOf(TestIdPathParts.Delimiter);
        return idx === -1 ? idString : idString.slice(0, idx);
    }
    static fromString(idString) {
        return ( new TestId(idString.split(TestIdPathParts.Delimiter)));
    }
    static join(base, b) {
        return ( new TestId([...base.path, b]));
    }
    static joinToString(base, b) {
        return ( base.toString()) + TestIdPathParts.Delimiter + b;
    }
    static parentId(idString) {
        const idx = idString.lastIndexOf(TestIdPathParts.Delimiter);
        return idx === -1 ? undefined : idString.slice(0, idx);
    }
    static localId(idString) {
        const idx = idString.lastIndexOf(TestIdPathParts.Delimiter);
        return idx === -1 ? idString : idString.slice(idx + TestIdPathParts.Delimiter.length);
    }
    static isChild(maybeParent, maybeChild) {
        return maybeChild.startsWith(maybeParent) && maybeChild[maybeParent.length] === TestIdPathParts.Delimiter;
    }
    static compare(a, b) {
        if (a === b) {
            return TestPosition.IsSame;
        }
        if (TestId.isChild(a, b)) {
            return TestPosition.IsChild;
        }
        if (TestId.isChild(b, a)) {
            return TestPosition.IsParent;
        }
        return TestPosition.Disconnected;
    }
    static getLengthOfCommonPrefix(length, getId) {
        if (length === 0) {
            return 0;
        }
        let commonPrefix = 0;
        while (commonPrefix < length - 1) {
            for (let i = 1; i < length; i++) {
                const a = getId(i - 1);
                const b = getId(i);
                if (a.path[commonPrefix] !== b.path[commonPrefix]) {
                    return commonPrefix;
                }
            }
            commonPrefix++;
        }
        return commonPrefix;
    }
    constructor(path, viewEnd = path.length) {
        this.path = path;
        this.viewEnd = viewEnd;
        if (path.length === 0 || viewEnd < 1) {
            throw ( new Error('cannot create test with empty path'));
        }
    }
    get rootId() {
        return ( new TestId(this.path, 1));
    }
    get parentId() {
        return this.viewEnd > 1 ? ( new TestId(this.path, this.viewEnd - 1)) : undefined;
    }
    get localId() {
        return this.path[this.viewEnd - 1];
    }
    get controllerId() {
        return this.path[0];
    }
    get isRoot() {
        return this.viewEnd === 1;
    }
    *idsFromRoot() {
        for (let i = 1; i <= this.viewEnd; i++) {
            yield ( new TestId(this.path, i));
        }
    }
    *idsToRoot() {
        for (let i = this.viewEnd; i > 0; i--) {
            yield ( new TestId(this.path, i));
        }
    }
    compare(other) {
        if (typeof other === 'string') {
            return TestId.compare(( this.toString()), other);
        }
        for (let i = 0; i < other.viewEnd && i < this.viewEnd; i++) {
            if (other.path[i] !== this.path[i]) {
                return TestPosition.Disconnected;
            }
        }
        if (other.viewEnd > this.viewEnd) {
            return TestPosition.IsChild;
        }
        if (other.viewEnd < this.viewEnd) {
            return TestPosition.IsParent;
        }
        return TestPosition.IsSame;
    }
    toJSON() {
        return ( this.toString());
    }
    toString() {
        if (!this.stringifed) {
            this.stringifed = this.path[0];
            for (let i = 1; i < this.viewEnd; i++) {
                this.stringifed += TestIdPathParts.Delimiter;
                this.stringifed += this.path[i];
            }
        }
        return this.stringifed;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testItemCollection.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testItemCollection.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DuplicateTestItemError: () => (/* binding */ DuplicateTestItemError),
/* harmony export */   InvalidTestItemError: () => (/* binding */ InvalidTestItemError),
/* harmony export */   MixedTestItemController: () => (/* binding */ MixedTestItemController),
/* harmony export */   TestItemCollection: () => (/* binding */ TestItemCollection),
/* harmony export */   TestItemEventOp: () => (/* binding */ TestItemEventOp),
/* harmony export */   createTestItemChildren: () => (/* binding */ createTestItemChildren)
/* harmony export */ });
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/assert.js */ "./node_modules/vscode/vscode/src/vs/base/common/assert.js");
/* harmony import */ var _testTypes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./testTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testTypes.js");
/* harmony import */ var _testId_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./testId.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testId.js");






var TestItemEventOp;
( (function(TestItemEventOp) {
    TestItemEventOp[TestItemEventOp["Upsert"] = 0] = "Upsert";
    TestItemEventOp[TestItemEventOp["SetTags"] = 1] = "SetTags";
    TestItemEventOp[TestItemEventOp["UpdateCanResolveChildren"] = 2] = "UpdateCanResolveChildren";
    TestItemEventOp[TestItemEventOp["RemoveChild"] = 3] = "RemoveChild";
    TestItemEventOp[TestItemEventOp["SetProp"] = 4] = "SetProp";
    TestItemEventOp[TestItemEventOp["Bulk"] = 5] = "Bulk";
    TestItemEventOp[TestItemEventOp["DocumentSynced"] = 6] = "DocumentSynced";
})(TestItemEventOp || (TestItemEventOp = {})));
const strictEqualComparator = (a, b) => a === b;
const diffableProps = {
    range: (a, b) => {
        if (a === b) {
            return true;
        }
        if (!a || !b) {
            return false;
        }
        return a.equalsRange(b);
    },
    busy: strictEqualComparator,
    label: strictEqualComparator,
    description: strictEqualComparator,
    error: strictEqualComparator,
    sortText: strictEqualComparator,
    tags: (a, b) => {
        if (a.length !== b.length) {
            return false;
        }
        if (( a.some(t1 => !b.includes(t1)))) {
            return false;
        }
        return true;
    },
};
const diffableEntries = Object.entries(diffableProps);
const diffTestItems = (a, b) => {
    let output;
    for (const [key, cmp] of diffableEntries) {
        if (!cmp(a[key], b[key])) {
            if (output) {
                output[key] = b[key];
            }
            else {
                output = { [key]: b[key] };
            }
        }
    }
    return output;
};
class TestItemCollection extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_2__.Disposable {
    get root() {
        return this.options.root;
    }
    constructor(options) {
        super();
        this.options = options;
        this.debounceSendDiff = this._register(( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.RunOnceScheduler(() => this.flushDiff(), 200)));
        this.diffOpEmitter = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter()));
        this.tree = ( new Map());
        this.tags = ( new Map());
        this.diff = [];
        this.onDidGenerateDiff = this.diffOpEmitter.event;
        this.root.canResolveChildren = true;
        this.upsertItem(this.root, undefined);
    }
    set resolveHandler(handler) {
        this._resolveHandler = handler;
        for (const test of ( this.tree.values())) {
            this.updateExpandability(test);
        }
    }
    get resolveHandler() {
        return this._resolveHandler;
    }
    collectDiff() {
        const diff = this.diff;
        this.diff = [];
        return diff;
    }
    pushDiff(diff) {
        switch (diff.op) {
            case _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.DocumentSynced: {
                for (const existing of this.diff) {
                    if (existing.op === _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.DocumentSynced && existing.uri === diff.uri) {
                        existing.docv = diff.docv;
                        return;
                    }
                }
                break;
            }
            case _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Update: {
                const last = this.diff[this.diff.length - 1];
                if (last) {
                    if (last.op === _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Update && last.item.extId === diff.item.extId) {
                        (0,_testTypes_js__WEBPACK_IMPORTED_MODULE_4__.applyTestItemUpdate)(last.item, diff.item);
                        return;
                    }
                    if (last.op === _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Add && last.item.item.extId === diff.item.extId) {
                        (0,_testTypes_js__WEBPACK_IMPORTED_MODULE_4__.applyTestItemUpdate)(last.item, diff.item);
                        return;
                    }
                }
                break;
            }
        }
        this.diff.push(diff);
        if (!this.debounceSendDiff.isScheduled()) {
            this.debounceSendDiff.schedule();
        }
    }
    expand(testId, levels) {
        const internal = this.tree.get(testId);
        if (!internal) {
            return;
        }
        if (internal.expandLevels === undefined || levels > internal.expandLevels) {
            internal.expandLevels = levels;
        }
        if (internal.expand === _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.Expandable) {
            const r = this.resolveChildren(internal);
            return !r.isOpen()
                ? r.wait().then(() => this.expandChildren(internal, levels - 1))
                : this.expandChildren(internal, levels - 1);
        }
        else if (internal.expand === _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.Expanded) {
            return internal.resolveBarrier?.isOpen() === false
                ? internal.resolveBarrier.wait().then(() => this.expandChildren(internal, levels - 1))
                : this.expandChildren(internal, levels - 1);
        }
    }
    dispose() {
        for (const item of ( this.tree.values())) {
            this.options.getApiFor(item.actual).listener = undefined;
        }
        this.tree.clear();
        this.diff = [];
        super.dispose();
    }
    onTestItemEvent(internal, evt) {
        switch (evt.op) {
            case TestItemEventOp.RemoveChild:
                this.removeItem(_testId_js__WEBPACK_IMPORTED_MODULE_5__.TestId.joinToString(internal.fullId, evt.id));
                break;
            case TestItemEventOp.Upsert:
                this.upsertItem(evt.item, internal);
                break;
            case TestItemEventOp.Bulk:
                for (const op of evt.ops) {
                    this.onTestItemEvent(internal, op);
                }
                break;
            case TestItemEventOp.SetTags:
                this.diffTagRefs(evt.new, evt.old, ( internal.fullId.toString()));
                break;
            case TestItemEventOp.UpdateCanResolveChildren:
                this.updateExpandability(internal);
                break;
            case TestItemEventOp.SetProp:
                this.pushDiff({
                    op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Update,
                    item: {
                        extId: ( internal.fullId.toString()),
                        item: evt.update,
                    }
                });
                break;
            case TestItemEventOp.DocumentSynced:
                this.documentSynced(internal.actual.uri);
                break;
            default:
                (0,_base_common_assert_js__WEBPACK_IMPORTED_MODULE_3__.assertNever)();
        }
    }
    documentSynced(uri) {
        if (uri) {
            this.pushDiff({
                op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.DocumentSynced,
                uri,
                docv: this.options.getDocumentVersion(uri)
            });
        }
    }
    upsertItem(actual, parent) {
        const fullId = _testId_js__WEBPACK_IMPORTED_MODULE_5__.TestId.fromExtHostTestItem(actual, this.root.id, parent?.actual);
        const privateApi = this.options.getApiFor(actual);
        if (privateApi.parent && privateApi.parent !== parent?.actual) {
            this.options.getChildren(privateApi.parent).delete(actual.id);
        }
        let internal = this.tree.get(( fullId.toString()));
        if (!internal) {
            internal = {
                fullId,
                actual,
                expandLevels: parent?.expandLevels  ? parent.expandLevels - 1 : undefined,
                expand: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.NotExpandable,
            };
            actual.tags.forEach(this.incrementTagRefs, this);
            this.tree.set(( internal.fullId.toString()), internal);
            this.setItemParent(actual, parent);
            this.pushDiff({
                op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Add,
                item: {
                    controllerId: this.options.controllerId,
                    expand: internal.expand,
                    item: this.options.toITestItem(actual),
                },
            });
            this.connectItemAndChildren(actual, internal, parent);
            return;
        }
        if (internal.actual === actual) {
            this.connectItem(actual, internal, parent);
            return;
        }
        if (internal.actual.uri?.toString() !== actual.uri?.toString()) {
            this.removeItem(( fullId.toString()));
            return this.upsertItem(actual, parent);
        }
        const oldChildren = this.options.getChildren(internal.actual);
        const oldActual = internal.actual;
        const update = diffTestItems(this.options.toITestItem(oldActual), this.options.toITestItem(actual));
        this.options.getApiFor(oldActual).listener = undefined;
        internal.actual = actual;
        internal.resolveBarrier = undefined;
        internal.expand = _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.NotExpandable;
        if (update) {
            if (update.hasOwnProperty('tags')) {
                this.diffTagRefs(actual.tags, oldActual.tags, ( fullId.toString()));
                delete update.tags;
            }
            this.onTestItemEvent(internal, { op: TestItemEventOp.SetProp, update });
        }
        this.connectItemAndChildren(actual, internal, parent);
        for (const [_, child] of oldChildren) {
            if (!this.options.getChildren(actual).get(child.id)) {
                this.removeItem(_testId_js__WEBPACK_IMPORTED_MODULE_5__.TestId.joinToString(fullId, child.id));
            }
        }
        const expandLevels = internal.expandLevels;
        if (expandLevels !== undefined) {
            queueMicrotask(() => {
                if (internal.expand === _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.Expandable) {
                    internal.expandLevels = undefined;
                    this.expand(( fullId.toString()), expandLevels);
                }
            });
        }
        this.documentSynced(internal.actual.uri);
    }
    diffTagRefs(newTags, oldTags, extId) {
        const toDelete = ( new Set(( oldTags.map(t => t.id))));
        for (const tag of newTags) {
            if (!toDelete.delete(tag.id)) {
                this.incrementTagRefs(tag);
            }
        }
        this.pushDiff({
            op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Update,
            item: { extId, item: { tags: ( newTags.map(v => (0,_testTypes_js__WEBPACK_IMPORTED_MODULE_4__.namespaceTestTag)(this.options.controllerId, v.id))) } }
        });
        toDelete.forEach(this.decrementTagRefs, this);
    }
    incrementTagRefs(tag) {
        const existing = this.tags.get(tag.id);
        if (existing) {
            existing.refCount++;
        }
        else {
            this.tags.set(tag.id, { refCount: 1 });
            this.pushDiff({
                op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.AddTag, tag: {
                    id: (0,_testTypes_js__WEBPACK_IMPORTED_MODULE_4__.namespaceTestTag)(this.options.controllerId, tag.id),
                }
            });
        }
    }
    decrementTagRefs(tagId) {
        const existing = this.tags.get(tagId);
        if (existing && !--existing.refCount) {
            this.tags.delete(tagId);
            this.pushDiff({ op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.RemoveTag, id: (0,_testTypes_js__WEBPACK_IMPORTED_MODULE_4__.namespaceTestTag)(this.options.controllerId, tagId) });
        }
    }
    setItemParent(actual, parent) {
        this.options.getApiFor(actual).parent = parent && parent.actual !== this.root ? parent.actual : undefined;
    }
    connectItem(actual, internal, parent) {
        this.setItemParent(actual, parent);
        const api = this.options.getApiFor(actual);
        api.parent = parent?.actual;
        api.listener = evt => this.onTestItemEvent(internal, evt);
        this.updateExpandability(internal);
    }
    connectItemAndChildren(actual, internal, parent) {
        this.connectItem(actual, internal, parent);
        for (const [_, child] of this.options.getChildren(actual)) {
            this.upsertItem(child, internal);
        }
    }
    updateExpandability(internal) {
        let newState;
        if (!this._resolveHandler) {
            newState = _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.NotExpandable;
        }
        else if (internal.resolveBarrier) {
            newState = internal.resolveBarrier.isOpen()
                ? _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.Expanded
                : _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.BusyExpanding;
        }
        else {
            newState = internal.actual.canResolveChildren
                ? _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.Expandable
                : _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.NotExpandable;
        }
        if (newState === internal.expand) {
            return;
        }
        internal.expand = newState;
        this.pushDiff({ op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Update, item: { extId: ( internal.fullId.toString()), expand: newState } });
        if (newState === _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.Expandable && internal.expandLevels !== undefined) {
            this.resolveChildren(internal);
        }
    }
    expandChildren(internal, levels) {
        if (levels < 0) {
            return;
        }
        const expandRequests = [];
        for (const [_, child] of this.options.getChildren(internal.actual)) {
            const promise = this.expand(_testId_js__WEBPACK_IMPORTED_MODULE_5__.TestId.joinToString(internal.fullId, child.id), levels);
            if ((0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.isThenable)(promise)) {
                expandRequests.push(promise);
            }
        }
        if (expandRequests.length) {
            return Promise.all(expandRequests).then(() => { });
        }
    }
    resolveChildren(internal) {
        if (internal.resolveBarrier) {
            return internal.resolveBarrier;
        }
        if (!this._resolveHandler) {
            const b = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.Barrier());
            b.open();
            return b;
        }
        internal.expand = _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestItemExpandState.BusyExpanding;
        this.pushExpandStateUpdate(internal);
        const barrier = internal.resolveBarrier = ( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.Barrier());
        const applyError = (err) => {
            console.error(`Unhandled error in resolveHandler of test controller "${this.options.controllerId}"`, err);
        };
        let r;
        try {
            r = this._resolveHandler(internal.actual === this.root ? undefined : internal.actual);
        }
        catch (err) {
            applyError(err);
        }
        if ((0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.isThenable)(r)) {
            r.catch(applyError).then(() => {
                barrier.open();
                this.updateExpandability(internal);
            });
        }
        else {
            barrier.open();
            this.updateExpandability(internal);
        }
        return internal.resolveBarrier;
    }
    pushExpandStateUpdate(internal) {
        this.pushDiff({ op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Update, item: { extId: ( internal.fullId.toString()), expand: internal.expand } });
    }
    removeItem(childId) {
        const childItem = this.tree.get(childId);
        if (!childItem) {
            throw ( new Error('attempting to remove non-existent child'));
        }
        this.pushDiff({ op: _testTypes_js__WEBPACK_IMPORTED_MODULE_4__.TestDiffOpType.Remove, itemId: childId });
        const queue = [childItem];
        while (queue.length) {
            const item = queue.pop();
            if (!item) {
                continue;
            }
            this.options.getApiFor(item.actual).listener = undefined;
            for (const tag of item.actual.tags) {
                this.decrementTagRefs(tag.id);
            }
            this.tree.delete(( item.fullId.toString()));
            for (const [_, child] of this.options.getChildren(item.actual)) {
                queue.push(this.tree.get(_testId_js__WEBPACK_IMPORTED_MODULE_5__.TestId.joinToString(item.fullId, child.id)));
            }
        }
    }
    flushDiff() {
        const diff = this.collectDiff();
        if (diff.length) {
            this.diffOpEmitter.fire(diff);
        }
    }
}
class DuplicateTestItemError extends Error {
    constructor(id) {
        super(`Attempted to insert a duplicate test item ID ${id}`);
    }
}
class InvalidTestItemError extends Error {
    constructor(id) {
        super(`TestItem with ID "${id}" is invalid. Make sure to create it from the createTestItem method.`);
    }
}
class MixedTestItemController extends Error {
    constructor(id, ctrlA, ctrlB) {
        super(`TestItem with ID "${id}" is from controller "${ctrlA}" and cannot be added as a child of an item from controller "${ctrlB}".`);
    }
}
const createTestItemChildren = (api, getApi, checkCtor) => {
    let mapped = ( new Map());
    return {
        get size() {
            return mapped.size;
        },
        forEach(callback, thisArg) {
            for (const item of ( mapped.values())) {
                callback.call(thisArg, item, this);
            }
        },
        [Symbol.iterator]() {
            return mapped.entries();
        },
        replace(items) {
            const newMapped = ( new Map());
            const toDelete = ( new Set(( mapped.keys())));
            const bulk = { op: TestItemEventOp.Bulk, ops: [] };
            for (const item of items) {
                if (!(item instanceof checkCtor)) {
                    throw ( new InvalidTestItemError(item.id));
                }
                const itemController = getApi(item).controllerId;
                if (itemController !== api.controllerId) {
                    throw ( new MixedTestItemController(item.id, itemController, api.controllerId));
                }
                if (( newMapped.has(item.id))) {
                    throw ( new DuplicateTestItemError(item.id));
                }
                newMapped.set(item.id, item);
                toDelete.delete(item.id);
                bulk.ops.push({ op: TestItemEventOp.Upsert, item });
            }
            for (const id of ( toDelete.keys())) {
                bulk.ops.push({ op: TestItemEventOp.RemoveChild, id });
            }
            api.listener?.(bulk);
            mapped = newMapped;
        },
        add(item) {
            if (!(item instanceof checkCtor)) {
                throw ( new InvalidTestItemError(item.id));
            }
            mapped.set(item.id, item);
            api.listener?.({ op: TestItemEventOp.Upsert, item });
        },
        delete(id) {
            if (mapped.delete(id)) {
                api.listener?.({ op: TestItemEventOp.RemoveChild, id });
            }
        },
        get(itemId) {
            return mapped.get(itemId);
        },
        toJSON() {
            return Array.from(( mapped.values()));
        },
    };
};



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testTypes.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testTypes.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractIncrementalTestCollection: () => (/* binding */ AbstractIncrementalTestCollection),
/* harmony export */   CoverageDetails: () => (/* binding */ CoverageDetails),
/* harmony export */   DetailType: () => (/* binding */ DetailType),
/* harmony export */   ExtTestRunProfileKind: () => (/* binding */ ExtTestRunProfileKind),
/* harmony export */   IBranchCoverage: () => (/* binding */ IBranchCoverage),
/* harmony export */   ICoverageCount: () => (/* binding */ ICoverageCount),
/* harmony export */   IDeclarationCoverage: () => (/* binding */ IDeclarationCoverage),
/* harmony export */   IFileCoverage: () => (/* binding */ IFileCoverage),
/* harmony export */   IRichLocation: () => (/* binding */ IRichLocation),
/* harmony export */   IStatementCoverage: () => (/* binding */ IStatementCoverage),
/* harmony export */   ITestErrorMessage: () => (/* binding */ ITestErrorMessage),
/* harmony export */   ITestItem: () => (/* binding */ ITestItem),
/* harmony export */   ITestItemUpdate: () => (/* binding */ ITestItemUpdate),
/* harmony export */   ITestMessage: () => (/* binding */ ITestMessage),
/* harmony export */   ITestOutputMessage: () => (/* binding */ ITestOutputMessage),
/* harmony export */   ITestTaskState: () => (/* binding */ ITestTaskState),
/* harmony export */   InternalTestItem: () => (/* binding */ InternalTestItem),
/* harmony export */   TestDiffOpType: () => (/* binding */ TestDiffOpType),
/* harmony export */   TestItemExpandState: () => (/* binding */ TestItemExpandState),
/* harmony export */   TestMessageType: () => (/* binding */ TestMessageType),
/* harmony export */   TestResultItem: () => (/* binding */ TestResultItem),
/* harmony export */   TestResultState: () => (/* binding */ TestResultState),
/* harmony export */   TestRunProfileBitset: () => (/* binding */ TestRunProfileBitset),
/* harmony export */   TestsDiffOp: () => (/* binding */ TestsDiffOp),
/* harmony export */   applyTestItemUpdate: () => (/* binding */ applyTestItemUpdate),
/* harmony export */   denamespaceTestTag: () => (/* binding */ denamespaceTestTag),
/* harmony export */   getMarkId: () => (/* binding */ getMarkId),
/* harmony export */   isStartControllerTests: () => (/* binding */ isStartControllerTests),
/* harmony export */   namespaceTestTag: () => (/* binding */ namespaceTestTag),
/* harmony export */   testResultStateToContextValues: () => (/* binding */ testResultStateToContextValues),
/* harmony export */   testRunProfileBitsetList: () => (/* binding */ testRunProfileBitsetList)
/* harmony export */ });
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_core_position_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../editor/common/core/position.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/position.js");
/* harmony import */ var _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../editor/common/core/range.js */ "./node_modules/vscode/vscode/src/vs/editor/common/core/range.js");
/* harmony import */ var _testId_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./testId.js */ "./node_modules/vscode/vscode/src/vs/workbench/contrib/testing/common/testId.js");




var TestResultState;
( (function(TestResultState) {
    TestResultState[TestResultState["Unset"] = 0] = "Unset";
    TestResultState[TestResultState["Queued"] = 1] = "Queued";
    TestResultState[TestResultState["Running"] = 2] = "Running";
    TestResultState[TestResultState["Passed"] = 3] = "Passed";
    TestResultState[TestResultState["Failed"] = 4] = "Failed";
    TestResultState[TestResultState["Skipped"] = 5] = "Skipped";
    TestResultState[TestResultState["Errored"] = 6] = "Errored";
})(TestResultState || (TestResultState = {})));
const testResultStateToContextValues = {
    [TestResultState.Unset]: 'unset',
    [TestResultState.Queued]: 'queued',
    [TestResultState.Running]: 'running',
    [TestResultState.Passed]: 'passed',
    [TestResultState.Failed]: 'failed',
    [TestResultState.Skipped]: 'skipped',
    [TestResultState.Errored]: 'errored',
};
var ExtTestRunProfileKind;
( (function(ExtTestRunProfileKind) {
    ExtTestRunProfileKind[ExtTestRunProfileKind["Run"] = 1] = "Run";
    ExtTestRunProfileKind[ExtTestRunProfileKind["Debug"] = 2] = "Debug";
    ExtTestRunProfileKind[ExtTestRunProfileKind["Coverage"] = 3] = "Coverage";
})(ExtTestRunProfileKind || (ExtTestRunProfileKind = {})));
var TestRunProfileBitset;
( (function(TestRunProfileBitset) {
    TestRunProfileBitset[TestRunProfileBitset["Run"] = 2] = "Run";
    TestRunProfileBitset[TestRunProfileBitset["Debug"] = 4] = "Debug";
    TestRunProfileBitset[TestRunProfileBitset["Coverage"] = 8] = "Coverage";
    TestRunProfileBitset[TestRunProfileBitset["HasNonDefaultProfile"] = 16] = "HasNonDefaultProfile";
    TestRunProfileBitset[TestRunProfileBitset["HasConfigurable"] = 32] = "HasConfigurable";
    TestRunProfileBitset[TestRunProfileBitset["SupportsContinuousRun"] = 64] = "SupportsContinuousRun";
})(TestRunProfileBitset || (TestRunProfileBitset = {})));
const testRunProfileBitsetList = [
    TestRunProfileBitset.Run,
    TestRunProfileBitset.Debug,
    TestRunProfileBitset.Coverage,
    TestRunProfileBitset.HasNonDefaultProfile,
    TestRunProfileBitset.HasConfigurable,
    TestRunProfileBitset.SupportsContinuousRun,
];
const isStartControllerTests = (t) => 'runId' in t;
var IRichLocation;
( (function(IRichLocation) {
    IRichLocation.serialize = (location) => ({
        range: location.range.toJSON(),
        uri: location.uri.toJSON(),
    });
    IRichLocation.deserialize = (uriIdentity, location) => ({
        range: _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(location.range),
        uri: uriIdentity.asCanonicalUri(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(location.uri)),
    });
})(IRichLocation || (IRichLocation = {})));
var TestMessageType;
( (function(TestMessageType) {
    TestMessageType[TestMessageType["Error"] = 0] = "Error";
    TestMessageType[TestMessageType["Output"] = 1] = "Output";
})(TestMessageType || (TestMessageType = {})));
var ITestErrorMessage;
( (function(ITestErrorMessage) {
    ITestErrorMessage.serialize = (message) => ({
        message: message.message,
        type: TestMessageType.Error,
        expected: message.expected,
        actual: message.actual,
        contextValue: message.contextValue,
        location: message.location && IRichLocation.serialize(message.location),
    });
    ITestErrorMessage.deserialize = (uriIdentity, message) => ({
        message: message.message,
        type: TestMessageType.Error,
        expected: message.expected,
        actual: message.actual,
        contextValue: message.contextValue,
        location: message.location && IRichLocation.deserialize(uriIdentity, message.location),
    });
})(ITestErrorMessage || (ITestErrorMessage = {})));
const getMarkId = (marker, start) => `${start ? 's' : 'e'}${marker}`;
var ITestOutputMessage;
( (function(ITestOutputMessage) {
    ITestOutputMessage.serialize = (message) => ({
        message: message.message,
        type: TestMessageType.Output,
        offset: message.offset,
        length: message.length,
        location: message.location && IRichLocation.serialize(message.location),
    });
    ITestOutputMessage.deserialize = (uriIdentity, message) => ({
        message: message.message,
        type: TestMessageType.Output,
        offset: message.offset,
        length: message.length,
        location: message.location && IRichLocation.deserialize(uriIdentity, message.location),
    });
})(ITestOutputMessage || (ITestOutputMessage = {})));
var ITestMessage;
( (function(ITestMessage) {
    ITestMessage.serialize = (message) => message.type === TestMessageType.Error ? ITestErrorMessage.serialize(message) : ITestOutputMessage.serialize(message);
    ITestMessage.deserialize = (uriIdentity, message) => message.type === TestMessageType.Error ? ITestErrorMessage.deserialize(uriIdentity, message) : ITestOutputMessage.deserialize(uriIdentity, message);
})(ITestMessage || (ITestMessage = {})));
var ITestTaskState;
( (function(ITestTaskState) {
    ITestTaskState.serializeWithoutMessages = (state) => ({
        state: state.state,
        duration: state.duration,
        messages: [],
    });
    ITestTaskState.serialize = (state) => ({
        state: state.state,
        duration: state.duration,
        messages: ( state.messages.map(ITestMessage.serialize)),
    });
    ITestTaskState.deserialize = (uriIdentity, state) => ({
        state: state.state,
        duration: state.duration,
        messages: ( state.messages.map(m => ITestMessage.deserialize(uriIdentity, m))),
    });
})(ITestTaskState || (ITestTaskState = {})));
const testTagDelimiter = '\0';
const namespaceTestTag = (ctrlId, tagId) => ctrlId + testTagDelimiter + tagId;
const denamespaceTestTag = (namespaced) => {
    const index = namespaced.indexOf(testTagDelimiter);
    return { ctrlId: namespaced.slice(0, index), tagId: namespaced.slice(index + 1) };
};
var ITestItem;
( (function(ITestItem) {
    ITestItem.serialize = (item) => ({
        extId: item.extId,
        label: item.label,
        tags: item.tags,
        busy: item.busy,
        children: undefined,
        uri: item.uri?.toJSON(),
        range: item.range?.toJSON() || null,
        description: item.description,
        error: item.error,
        sortText: item.sortText
    });
    ITestItem.deserialize = (uriIdentity, serialized) => ({
        extId: serialized.extId,
        label: serialized.label,
        tags: serialized.tags,
        busy: serialized.busy,
        children: undefined,
        uri: serialized.uri ? uriIdentity.asCanonicalUri(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(serialized.uri)) : undefined,
        range: serialized.range ? _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(serialized.range) : null,
        description: serialized.description,
        error: serialized.error,
        sortText: serialized.sortText
    });
})(ITestItem || (ITestItem = {})));
var TestItemExpandState;
( (function(TestItemExpandState) {
    TestItemExpandState[TestItemExpandState["NotExpandable"] = 0] = "NotExpandable";
    TestItemExpandState[TestItemExpandState["Expandable"] = 1] = "Expandable";
    TestItemExpandState[TestItemExpandState["BusyExpanding"] = 2] = "BusyExpanding";
    TestItemExpandState[TestItemExpandState["Expanded"] = 3] = "Expanded";
})(TestItemExpandState || (TestItemExpandState = {})));
var InternalTestItem;
( (function(InternalTestItem) {
    InternalTestItem.serialize = (item) => ({
        expand: item.expand,
        item: ITestItem.serialize(item.item)
    });
    InternalTestItem.deserialize = (uriIdentity, serialized) => ({
        controllerId: _testId_js__WEBPACK_IMPORTED_MODULE_3__.TestId.root(serialized.item.extId),
        expand: serialized.expand,
        item: ITestItem.deserialize(uriIdentity, serialized.item)
    });
})(InternalTestItem || (InternalTestItem = {})));
var ITestItemUpdate;
( (function(ITestItemUpdate) {
    ITestItemUpdate.serialize = (u) => {
        let item;
        if (u.item) {
            item = {};
            if (u.item.label !== undefined) {
                item.label = u.item.label;
            }
            if (u.item.tags !== undefined) {
                item.tags = u.item.tags;
            }
            if (u.item.busy !== undefined) {
                item.busy = u.item.busy;
            }
            if (u.item.uri !== undefined) {
                item.uri = u.item.uri?.toJSON();
            }
            if (u.item.range !== undefined) {
                item.range = u.item.range?.toJSON();
            }
            if (u.item.description !== undefined) {
                item.description = u.item.description;
            }
            if (u.item.error !== undefined) {
                item.error = u.item.error;
            }
            if (u.item.sortText !== undefined) {
                item.sortText = u.item.sortText;
            }
        }
        return { extId: u.extId, expand: u.expand, item };
    };
    ITestItemUpdate.deserialize = (u) => {
        let item;
        if (u.item) {
            item = {};
            if (u.item.label !== undefined) {
                item.label = u.item.label;
            }
            if (u.item.tags !== undefined) {
                item.tags = u.item.tags;
            }
            if (u.item.busy !== undefined) {
                item.busy = u.item.busy;
            }
            if (u.item.range !== undefined) {
                item.range = u.item.range ? _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(u.item.range) : null;
            }
            if (u.item.description !== undefined) {
                item.description = u.item.description;
            }
            if (u.item.error !== undefined) {
                item.error = u.item.error;
            }
            if (u.item.sortText !== undefined) {
                item.sortText = u.item.sortText;
            }
        }
        return { extId: u.extId, expand: u.expand, item };
    };
})(ITestItemUpdate || (ITestItemUpdate = {})));
const applyTestItemUpdate = (internal, patch) => {
    if (patch.expand !== undefined) {
        internal.expand = patch.expand;
    }
    if (patch.item !== undefined) {
        internal.item = internal.item ? Object.assign(internal.item, patch.item) : patch.item;
    }
};
var TestResultItem;
( (function(TestResultItem) {
    TestResultItem.serializeWithoutMessages = (original) => ({
        ...InternalTestItem.serialize(original),
        ownComputedState: original.ownComputedState,
        computedState: original.computedState,
        tasks: ( original.tasks.map(ITestTaskState.serializeWithoutMessages)),
    });
    TestResultItem.serialize = (original) => ({
        ...InternalTestItem.serialize(original),
        ownComputedState: original.ownComputedState,
        computedState: original.computedState,
        tasks: ( original.tasks.map(ITestTaskState.serialize)),
    });
    TestResultItem.deserialize = (uriIdentity, serialized) => ({
        ...InternalTestItem.deserialize(uriIdentity, serialized),
        ownComputedState: serialized.ownComputedState,
        computedState: serialized.computedState,
        tasks: ( serialized.tasks.map(m => ITestTaskState.deserialize(uriIdentity, m))),
        retired: true,
    });
})(TestResultItem || (TestResultItem = {})));
var ICoverageCount;
( (function(ICoverageCount) {
    ICoverageCount.empty = () => ({ covered: 0, total: 0 });
    ICoverageCount.sum = (target, src) => {
        target.covered += src.covered;
        target.total += src.total;
    };
})(ICoverageCount || (ICoverageCount = {})));
var IFileCoverage;
( (function(IFileCoverage) {
    IFileCoverage.serialize = (original) => ({
        id: original.id,
        statement: original.statement,
        branch: original.branch,
        declaration: original.declaration,
        testIds: original.testIds,
        uri: original.uri.toJSON(),
    });
    IFileCoverage.deserialize = (uriIdentity, serialized) => ({
        id: serialized.id,
        statement: serialized.statement,
        branch: serialized.branch,
        declaration: serialized.declaration,
        testIds: serialized.testIds,
        uri: uriIdentity.asCanonicalUri(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(serialized.uri)),
    });
    IFileCoverage.empty = (id, uri) => ({
        id,
        uri,
        statement: ICoverageCount.empty(),
    });
})(IFileCoverage || (IFileCoverage = {})));
function serializeThingWithLocation(serialized) {
    return {
        ...serialized,
        location: serialized.location?.toJSON(),
    };
}
function deserializeThingWithLocation(serialized) {
    serialized.location = serialized.location ? (_editor_common_core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position.isIPosition(serialized.location) ? _editor_common_core_position_js__WEBPACK_IMPORTED_MODULE_1__.Position.lift(serialized.location) : _editor_common_core_range_js__WEBPACK_IMPORTED_MODULE_2__.Range.lift(serialized.location)) : undefined;
    return serialized;
}
var DetailType;
( (function(DetailType) {
    DetailType[DetailType["Declaration"] = 0] = "Declaration";
    DetailType[DetailType["Statement"] = 1] = "Statement";
    DetailType[DetailType["Branch"] = 2] = "Branch";
})(DetailType || (DetailType = {})));
var CoverageDetails;
( (function(CoverageDetails) {
    CoverageDetails.serialize = (original) => original.type === DetailType.Declaration ? IDeclarationCoverage.serialize(original) : IStatementCoverage.serialize(original);
    CoverageDetails.deserialize = (serialized) => serialized.type === DetailType.Declaration ? IDeclarationCoverage.deserialize(serialized) : IStatementCoverage.deserialize(serialized);
})(CoverageDetails || (CoverageDetails = {})));
var IBranchCoverage;
( (function(IBranchCoverage) {
    IBranchCoverage.serialize = serializeThingWithLocation;
    IBranchCoverage.deserialize = deserializeThingWithLocation;
})(IBranchCoverage || (IBranchCoverage = {})));
var IDeclarationCoverage;
( (function(IDeclarationCoverage) {
    IDeclarationCoverage.serialize = serializeThingWithLocation;
    IDeclarationCoverage.deserialize = deserializeThingWithLocation;
})(IDeclarationCoverage || (IDeclarationCoverage = {})));
var IStatementCoverage;
( (function(IStatementCoverage) {
    IStatementCoverage.serialize = (original) => ({
        ...serializeThingWithLocation(original),
        branches: original.branches?.map(IBranchCoverage.serialize),
    });
    IStatementCoverage.deserialize = (serialized) => ({
        ...deserializeThingWithLocation(serialized),
        branches: serialized.branches?.map(IBranchCoverage.deserialize),
    });
})(IStatementCoverage || (IStatementCoverage = {})));
var TestDiffOpType;
( (function(TestDiffOpType) {
    TestDiffOpType[TestDiffOpType["Add"] = 0] = "Add";
    TestDiffOpType[TestDiffOpType["Update"] = 1] = "Update";
    TestDiffOpType[TestDiffOpType["DocumentSynced"] = 2] = "DocumentSynced";
    TestDiffOpType[TestDiffOpType["Remove"] = 3] = "Remove";
    TestDiffOpType[TestDiffOpType["IncrementPendingExtHosts"] = 4] = "IncrementPendingExtHosts";
    TestDiffOpType[TestDiffOpType["Retire"] = 5] = "Retire";
    TestDiffOpType[TestDiffOpType["AddTag"] = 6] = "AddTag";
    TestDiffOpType[TestDiffOpType["RemoveTag"] = 7] = "RemoveTag";
})(TestDiffOpType || (TestDiffOpType = {})));
var TestsDiffOp;
( (function(TestsDiffOp) {
    TestsDiffOp.deserialize = (uriIdentity, u) => {
        if (u.op === TestDiffOpType.Add) {
            return { op: u.op, item: InternalTestItem.deserialize(uriIdentity, u.item) };
        }
        else if (u.op === TestDiffOpType.Update) {
            return { op: u.op, item: ITestItemUpdate.deserialize(u.item) };
        }
        else if (u.op === TestDiffOpType.DocumentSynced) {
            return { op: u.op, uri: uriIdentity.asCanonicalUri(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_0__.URI.revive(u.uri)), docv: u.docv };
        }
        else {
            return u;
        }
    };
    TestsDiffOp.serialize = (u) => {
        if (u.op === TestDiffOpType.Add) {
            return { op: u.op, item: InternalTestItem.serialize(u.item) };
        }
        else if (u.op === TestDiffOpType.Update) {
            return { op: u.op, item: ITestItemUpdate.serialize(u.item) };
        }
        else {
            return u;
        }
    };
})(TestsDiffOp || (TestsDiffOp = {})));
class AbstractIncrementalTestCollection {
    constructor(uriIdentity) {
        this.uriIdentity = uriIdentity;
        this._tags = ( new Map());
        this.items = ( new Map());
        this.roots = ( new Set());
        this.busyControllerCount = 0;
        this.pendingRootCount = 0;
        this.tags = this._tags;
    }
    apply(diff) {
        const changes = this.createChangeCollector();
        for (const op of diff) {
            switch (op.op) {
                case TestDiffOpType.Add:
                    this.add(InternalTestItem.deserialize(this.uriIdentity, op.item), changes);
                    break;
                case TestDiffOpType.Update:
                    this.update(ITestItemUpdate.deserialize(op.item), changes);
                    break;
                case TestDiffOpType.Remove:
                    this.remove(op.itemId, changes);
                    break;
                case TestDiffOpType.Retire:
                    this.retireTest(op.itemId);
                    break;
                case TestDiffOpType.IncrementPendingExtHosts:
                    this.updatePendingRoots(op.amount);
                    break;
                case TestDiffOpType.AddTag:
                    this._tags.set(op.tag.id, op.tag);
                    break;
                case TestDiffOpType.RemoveTag:
                    this._tags.delete(op.id);
                    break;
            }
        }
        changes.complete?.();
    }
    add(item, changes) {
        const parentId = _testId_js__WEBPACK_IMPORTED_MODULE_3__.TestId.parentId(item.item.extId)?.toString();
        let created;
        if (!parentId) {
            created = this.createItem(item);
            this.roots.add(created);
            this.items.set(item.item.extId, created);
        }
        else if (( this.items.has(parentId))) {
            const parent = this.items.get(parentId);
            parent.children.add(item.item.extId);
            created = this.createItem(item, parent);
            this.items.set(item.item.extId, created);
        }
        else {
            console.error(`Test with unknown parent ID: ${JSON.stringify(item)}`);
            return;
        }
        changes.add?.(created);
        if (item.expand === TestItemExpandState.BusyExpanding) {
            this.busyControllerCount++;
        }
        return created;
    }
    update(patch, changes) {
        const existing = this.items.get(patch.extId);
        if (!existing) {
            return;
        }
        if (patch.expand !== undefined) {
            if (existing.expand === TestItemExpandState.BusyExpanding) {
                this.busyControllerCount--;
            }
            if (patch.expand === TestItemExpandState.BusyExpanding) {
                this.busyControllerCount++;
            }
        }
        applyTestItemUpdate(existing, patch);
        changes.update?.(existing);
        return existing;
    }
    remove(itemId, changes) {
        const toRemove = this.items.get(itemId);
        if (!toRemove) {
            return;
        }
        const parentId = _testId_js__WEBPACK_IMPORTED_MODULE_3__.TestId.parentId(toRemove.item.extId)?.toString();
        if (parentId) {
            const parent = this.items.get(parentId);
            parent.children.delete(toRemove.item.extId);
        }
        else {
            this.roots.delete(toRemove);
        }
        const queue = [[itemId]];
        while (queue.length) {
            for (const itemId of queue.pop()) {
                const existing = this.items.get(itemId);
                if (existing) {
                    queue.push(existing.children);
                    this.items.delete(itemId);
                    changes.remove?.(existing, existing !== toRemove);
                    if (existing.expand === TestItemExpandState.BusyExpanding) {
                        this.busyControllerCount--;
                    }
                }
            }
        }
    }
    retireTest(testId) {
    }
    updatePendingRoots(delta) {
        this.pendingRootCount += delta;
    }
    createChangeCollector() {
        return {};
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/contrib/webview/common/webview.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/contrib/webview/common/webview.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   asWebviewUri: () => (/* binding */ asWebviewUri),
/* harmony export */   decodeAuthority: () => (/* binding */ decodeAuthority),
/* harmony export */   webviewGenericCspSource: () => (/* binding */ webviewGenericCspSource),
/* harmony export */   webviewResourceBaseHost: () => (/* binding */ webviewResourceBaseHost),
/* harmony export */   webviewRootResourceAuthority: () => (/* binding */ webviewRootResourceAuthority)
/* harmony export */ });
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");



const webviewResourceBaseHost = 'vscode-cdn.net';
const webviewRootResourceAuthority = `vscode-resource.${webviewResourceBaseHost}`;
const webviewGenericCspSource = `'self' https://*.${webviewResourceBaseHost}`;
function asWebviewUri(resource, remoteInfo) {
    if (resource.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.http || resource.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.https) {
        return resource;
    }
    if (remoteInfo && remoteInfo.authority && remoteInfo.isRemote && resource.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.file) {
        resource = ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.from({
            scheme: _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.vscodeRemote,
            authority: remoteInfo.authority,
            path: resource.path,
        }));
    }
    return ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_2__.URI.from({
        scheme: _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.https,
        authority: `${resource.scheme}+${encodeAuthority(resource.authority)}.${webviewRootResourceAuthority}`,
        path: resource.path,
        fragment: resource.fragment,
        query: resource.query,
    }));
}
function encodeAuthority(authority) {
    return authority.replace(/./g, char => {
        const code = char.charCodeAt(0);
        if ((code >= _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.a && code <= _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.z)
            || (code >= _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.A && code <= _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Z)
            || (code >= _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Digit0 && code <= _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_0__.CharCode.Digit9)) {
            return char;
        }
        return '-' + ( code.toString(16)).padStart(4, '0');
    });
}
function decodeAuthority(authority) {
    return authority.replace(/-([0-9a-f]{4})/g, (_, code) => String.fromCharCode(parseInt(code, 16)));
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/authentication/common/authentication.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/authentication/common/authentication.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INTERNAL_AUTH_PROVIDER_PREFIX: () => (/* binding */ INTERNAL_AUTH_PROVIDER_PREFIX)
/* harmony export */ });
const INTERNAL_AUTH_PROVIDER_PREFIX = '__';



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/configurationResolver/common/configurationResolver.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/configurationResolver/common/configurationResolver.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VariableError: () => (/* binding */ VariableError),
/* harmony export */   VariableKind: () => (/* binding */ VariableKind)
/* harmony export */ });
var VariableKind;
( (function(VariableKind) {
    VariableKind["Unknown"] = "unknown";
    VariableKind["Env"] = "env";
    VariableKind["Config"] = "config";
    VariableKind["Command"] = "command";
    VariableKind["Input"] = "input";
    VariableKind["ExtensionInstallFolder"] = "extensionInstallFolder";
    VariableKind["WorkspaceFolder"] = "workspaceFolder";
    VariableKind["Cwd"] = "cwd";
    VariableKind["WorkspaceFolderBasename"] = "workspaceFolderBasename";
    VariableKind["UserHome"] = "userHome";
    VariableKind["LineNumber"] = "lineNumber";
    VariableKind["SelectedText"] = "selectedText";
    VariableKind["File"] = "file";
    VariableKind["FileWorkspaceFolder"] = "fileWorkspaceFolder";
    VariableKind["FileWorkspaceFolderBasename"] = "fileWorkspaceFolderBasename";
    VariableKind["RelativeFile"] = "relativeFile";
    VariableKind["RelativeFileDirname"] = "relativeFileDirname";
    VariableKind["FileDirname"] = "fileDirname";
    VariableKind["FileExtname"] = "fileExtname";
    VariableKind["FileBasename"] = "fileBasename";
    VariableKind["FileBasenameNoExtension"] = "fileBasenameNoExtension";
    VariableKind["FileDirnameBasename"] = "fileDirnameBasename";
    VariableKind["ExecPath"] = "execPath";
    VariableKind["ExecInstallFolder"] = "execInstallFolder";
    VariableKind["PathSeparator"] = "pathSeparator";
    VariableKind["PathSeparatorAlias"] = "/";
})(VariableKind || (VariableKind = {})));
class VariableError extends Error {
    constructor(variable, message) {
        super(message);
        this.variable = variable;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/configurationResolver/common/variableResolver.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/configurationResolver/common/variableResolver.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractVariableResolverService: () => (/* binding */ AbstractVariableResolverService)
/* harmony export */ });
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_process_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/process.js */ "./node_modules/vscode/vscode/src/vs/base/common/process.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/platform.js */ "./node_modules/vscode/vscode/src/vs/base/common/platform.js");
/* harmony import */ var _base_common_labels_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/labels.js */ "./node_modules/vscode/vscode/src/vs/base/common/labels.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./configurationResolver.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/configurationResolver/common/configurationResolver.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");









const _moduleId = "vs/workbench/services/configurationResolver/common/variableResolver";
class AbstractVariableResolverService {
    static { this.VARIABLE_LHS = '${'; }
    static { this.VARIABLE_REGEXP = /\$\{(.*?)\}/g; }
    constructor(_context, _labelService, _userHomePromise, _envVariablesPromise) {
        this._contributedVariables = ( new Map());
        this._context = _context;
        this._labelService = _labelService;
        this._userHomePromise = _userHomePromise;
        if (_envVariablesPromise) {
            this._envVariablesPromise = _envVariablesPromise.then(envVariables => {
                return this.prepareEnv(envVariables);
            });
        }
    }
    prepareEnv(envVariables) {
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_4__.isWindows) {
            const ev = Object.create(null);
            ( Object.keys(envVariables)).forEach(key => {
                ev[key.toLowerCase()] = envVariables[key];
            });
            return ev;
        }
        return envVariables;
    }
    resolveWithEnvironment(environment, root, value) {
        return this.recursiveResolve({ env: this.prepareEnv(environment), userHome: undefined }, root ? root.uri : undefined, value);
    }
    async resolveAsync(root, value) {
        const environment = {
            env: await this._envVariablesPromise,
            userHome: await this._userHomePromise
        };
        return this.recursiveResolve(environment, root ? root.uri : undefined, value);
    }
    async resolveAnyBase(workspaceFolder, config, commandValueMapping, resolvedVariables) {
        const result = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_3__.deepClone)(config);
        if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_4__.isWindows && result.windows) {
            ( Object.keys(result.windows)).forEach(key => result[key] = result.windows[key]);
        }
        else if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_4__.isMacintosh && result.osx) {
            ( Object.keys(result.osx)).forEach(key => result[key] = result.osx[key]);
        }
        else if (_base_common_platform_js__WEBPACK_IMPORTED_MODULE_4__.isLinux && result.linux) {
            ( Object.keys(result.linux)).forEach(key => result[key] = result.linux[key]);
        }
        delete result.windows;
        delete result.osx;
        delete result.linux;
        const environmentPromises = {
            env: await this._envVariablesPromise,
            userHome: await this._userHomePromise
        };
        return this.recursiveResolve(environmentPromises, workspaceFolder ? workspaceFolder.uri : undefined, result, commandValueMapping, resolvedVariables);
    }
    async resolveAnyAsync(workspaceFolder, config, commandValueMapping) {
        return this.resolveAnyBase(workspaceFolder, config, commandValueMapping);
    }
    async resolveAnyMap(workspaceFolder, config, commandValueMapping) {
        const resolvedVariables = ( new Map());
        const newConfig = await this.resolveAnyBase(workspaceFolder, config, commandValueMapping, resolvedVariables);
        return { newConfig, resolvedVariables };
    }
    resolveWithInteractionReplace(folder, config, section, variables) {
        throw ( new Error('resolveWithInteractionReplace not implemented.'));
    }
    resolveWithInteraction(folder, config, section, variables) {
        throw ( new Error('resolveWithInteraction not implemented.'));
    }
    contributeVariable(variable, resolution) {
        if (( this._contributedVariables.has(variable))) {
            throw ( new Error('Variable ' + variable + ' is contributed twice.'));
        }
        else {
            this._contributedVariables.set(variable, resolution);
        }
    }
    async recursiveResolve(environment, folderUri, value, commandValueMapping, resolvedVariables) {
        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(value)) {
            return this.resolveString(environment, folderUri, value, commandValueMapping, resolvedVariables);
        }
        else if (Array.isArray(value)) {
            return Promise.all(( value.map(
                s => this.recursiveResolve(environment, folderUri, s, commandValueMapping, resolvedVariables)
            )));
        }
        else if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(value)) {
            const result = Object.create(null);
            const replaced = await Promise.all(( ( Object.keys(value)).map(async (key) => {
                const replaced = await this.resolveString(environment, folderUri, key, commandValueMapping, resolvedVariables);
                return [replaced, await this.recursiveResolve(environment, folderUri, value[key], commandValueMapping, resolvedVariables)];
            })));
            for (const [key, value] of replaced) {
                result[key] = value;
            }
            return result;
        }
        return value;
    }
    resolveString(environment, folderUri, value, commandValueMapping, resolvedVariables) {
        return (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_8__.replaceAsync)(value, AbstractVariableResolverService.VARIABLE_REGEXP, async (match, variable) => {
            if (variable.includes(AbstractVariableResolverService.VARIABLE_LHS)) {
                return match;
            }
            let resolvedValue = await this.evaluateSingleVariable(environment, match, variable, folderUri, commandValueMapping);
            resolvedVariables?.set(variable, resolvedValue);
            if ((resolvedValue !== match) && (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(resolvedValue) && resolvedValue.match(AbstractVariableResolverService.VARIABLE_REGEXP)) {
                resolvedValue = await this.resolveString(environment, folderUri, resolvedValue, commandValueMapping, resolvedVariables);
            }
            return resolvedValue;
        });
    }
    fsPath(displayUri) {
        return this._labelService ? this._labelService.getUriLabel(displayUri, { noPrefix: true }) : displayUri.fsPath;
    }
    async evaluateSingleVariable(environment, match, variable, folderUri, commandValueMapping) {
        let argument;
        const parts = variable.split(':');
        if (parts.length > 1) {
            variable = parts[0];
            argument = parts[1];
        }
        const getFilePath = (variableKind) => {
            const filePath = this._context.getFilePath();
            if (filePath) {
                return (0,_base_common_labels_js__WEBPACK_IMPORTED_MODULE_5__.normalizeDriveLetter)(filePath);
            }
            throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(variableKind, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                _moduleId,
                0,
                "Variable {0} can not be resolved. Please open an editor.",
                match
            )));
        };
        const getFolderPathForFile = (variableKind) => {
            const filePath = getFilePath(variableKind);
            if (this._context.getWorkspaceFolderPathForFile) {
                const folderPath = this._context.getWorkspaceFolderPathForFile();
                if (folderPath) {
                    return (0,_base_common_labels_js__WEBPACK_IMPORTED_MODULE_5__.normalizeDriveLetter)(folderPath);
                }
            }
            throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(variableKind, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                _moduleId,
                1,
                "Variable {0}: can not find workspace folder of '{1}'.",
                match,
                (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(filePath)
            )));
        };
        const getFolderUri = (variableKind) => {
            if (argument) {
                const folder = this._context.getFolderUri(argument);
                if (folder) {
                    return folder;
                }
                throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(variableKind, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                    _moduleId,
                    2,
                    "Variable {0} can not be resolved. No such folder '{1}'.",
                    match,
                    argument
                )));
            }
            if (folderUri) {
                return folderUri;
            }
            if (this._context.getWorkspaceFolderCount() > 1) {
                throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(variableKind, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                    _moduleId,
                    3,
                    "Variable {0} can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.",
                    match
                )));
            }
            throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(variableKind, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                _moduleId,
                4,
                "Variable {0} can not be resolved. Please open a folder.",
                match
            )));
        };
        switch (variable) {
            case 'env':
                if (argument) {
                    if (environment.env) {
                        const env = environment.env[_base_common_platform_js__WEBPACK_IMPORTED_MODULE_4__.isWindows ? argument.toLowerCase() : argument];
                        if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isString)(env)) {
                            return env;
                        }
                    }
                    return '';
                }
                throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Env, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                    _moduleId,
                    5,
                    "Variable {0} can not be resolved because no environment variable name is given.",
                    match
                )));
            case 'config':
                if (argument) {
                    const config = this._context.getConfigurationValue(folderUri, argument);
                    if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isUndefinedOrNull)(config)) {
                        throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Config, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                            _moduleId,
                            6,
                            "Variable {0} can not be resolved because setting '{1}' not found.",
                            match,
                            argument
                        )));
                    }
                    if ((0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_2__.isObject)(config)) {
                        throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Config, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                            _moduleId,
                            7,
                            "Variable {0} can not be resolved because '{1}' is a structured value.",
                            match,
                            argument
                        )));
                    }
                    return config;
                }
                throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Config, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                    _moduleId,
                    8,
                    "Variable {0} can not be resolved because no settings name is given.",
                    match
                )));
            case 'command':
                return this.resolveFromMap(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Command, match, argument, commandValueMapping, 'command');
            case 'input':
                return this.resolveFromMap(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Input, match, argument, commandValueMapping, 'input');
            case 'extensionInstallFolder':
                if (argument) {
                    const ext = await this._context.getExtension(argument);
                    if (!ext) {
                        throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.ExtensionInstallFolder, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                            _moduleId,
                            9,
                            "Variable {0} can not be resolved because the extension {1} is not installed.",
                            match,
                            argument
                        )));
                    }
                    return this.fsPath(ext.extensionLocation);
                }
                throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.ExtensionInstallFolder, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                    _moduleId,
                    10,
                    "Variable {0} can not be resolved because no extension name is given.",
                    match
                )));
            default: {
                switch (variable) {
                    case 'workspaceRoot':
                    case 'workspaceFolder':
                        return (0,_base_common_labels_js__WEBPACK_IMPORTED_MODULE_5__.normalizeDriveLetter)(this.fsPath(getFolderUri(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.WorkspaceFolder)));
                    case 'cwd':
                        return ((folderUri || argument) ? (0,_base_common_labels_js__WEBPACK_IMPORTED_MODULE_5__.normalizeDriveLetter)(this.fsPath(getFolderUri(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Cwd))) : (0,_base_common_process_js__WEBPACK_IMPORTED_MODULE_1__.cwd)());
                    case 'workspaceRootFolderName':
                    case 'workspaceFolderBasename':
                        return (0,_base_common_labels_js__WEBPACK_IMPORTED_MODULE_5__.normalizeDriveLetter)((0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(this.fsPath(getFolderUri(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.WorkspaceFolderBasename))));
                    case 'userHome': {
                        if (environment.userHome) {
                            return environment.userHome;
                        }
                        throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.UserHome, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                            _moduleId,
                            11,
                            "Variable {0} can not be resolved. UserHome path is not defined",
                            match
                        )));
                    }
                    case 'lineNumber': {
                        const lineNumber = this._context.getLineNumber();
                        if (lineNumber) {
                            return lineNumber;
                        }
                        throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.LineNumber, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                            _moduleId,
                            12,
                            "Variable {0} can not be resolved. Make sure to have a line selected in the active editor.",
                            match
                        )));
                    }
                    case 'selectedText': {
                        const selectedText = this._context.getSelectedText();
                        if (selectedText) {
                            return selectedText;
                        }
                        throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.SelectedText, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                            _moduleId,
                            13,
                            "Variable {0} can not be resolved. Make sure to have some text selected in the active editor.",
                            match
                        )));
                    }
                    case 'file':
                        return getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.File);
                    case 'fileWorkspaceFolder':
                        return getFolderPathForFile(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.FileWorkspaceFolder);
                    case 'fileWorkspaceFolderBasename':
                        return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(getFolderPathForFile(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.FileWorkspaceFolderBasename));
                    case 'relativeFile':
                        if (folderUri || argument) {
                            return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.relative)(this.fsPath(getFolderUri(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.RelativeFile)), getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.RelativeFile));
                        }
                        return getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.RelativeFile);
                    case 'relativeFileDirname': {
                        const dirname$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.dirname)(getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.RelativeFileDirname));
                        if (folderUri || argument) {
                            const relative$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.relative)(this.fsPath(getFolderUri(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.RelativeFileDirname)), dirname$1);
                            return relative$1.length === 0 ? '.' : relative$1;
                        }
                        return dirname$1;
                    }
                    case 'fileDirname':
                        return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.dirname)(getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.FileDirname));
                    case 'fileExtname':
                        return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.extname)(getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.FileExtname));
                    case 'fileBasename':
                        return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.FileBasename));
                    case 'fileBasenameNoExtension': {
                        const basename$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.FileBasenameNoExtension));
                        return (basename$1.slice(0, basename$1.length - (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.extname)(basename$1).length));
                    }
                    case 'fileDirnameBasename':
                        return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)((0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.dirname)(getFilePath(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.FileDirnameBasename)));
                    case 'execPath': {
                        const ep = this._context.getExecPath();
                        if (ep) {
                            return ep;
                        }
                        return match;
                    }
                    case 'execInstallFolder': {
                        const ar = this._context.getAppRoot();
                        if (ar) {
                            return ar;
                        }
                        return match;
                    }
                    case 'pathSeparator':
                    case '/':
                        return _base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.sep;
                    default:
                        try {
                            const key = argument ? `${variable}:${argument}` : variable;
                            return this.resolveFromMap(_configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableKind.Unknown, match, key, commandValueMapping, undefined);
                        }
                        catch (error) {
                            return match;
                        }
                }
            }
        }
    }
    resolveFromMap(variableKind, match, argument, commandValueMapping, prefix) {
        if (argument && commandValueMapping) {
            const v = (prefix === undefined) ? commandValueMapping[argument] : commandValueMapping[prefix + ':' + argument];
            if (typeof v === 'string') {
                return v;
            }
            throw ( new _configurationResolver_js__WEBPACK_IMPORTED_MODULE_7__.VariableError(variableKind, (0,_nls_js__WEBPACK_IMPORTED_MODULE_6__.localizeWithPath)(
                _moduleId,
                14,
                "Variable {0} can not be resolved because the command has no value.",
                match
            )));
        }
        return match;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorGroupsService.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorGroupsService.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GroupDirection: () => (/* binding */ GroupDirection),
/* harmony export */   GroupLocation: () => (/* binding */ GroupLocation),
/* harmony export */   GroupOrientation: () => (/* binding */ GroupOrientation),
/* harmony export */   GroupsArrangement: () => (/* binding */ GroupsArrangement),
/* harmony export */   GroupsOrder: () => (/* binding */ GroupsOrder),
/* harmony export */   MergeGroupMode: () => (/* binding */ MergeGroupMode),
/* harmony export */   isEditorGroup: () => (/* binding */ isEditorGroup),
/* harmony export */   isEditorReplacement: () => (/* binding */ isEditorReplacement),
/* harmony export */   preferredSideBySideGroupDirection: () => (/* binding */ preferredSideBySideGroupDirection)
/* harmony export */ });
/* harmony import */ var _common_editor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/editor.js */ "./node_modules/vscode/vscode/src/vs/workbench/common/editor.js");

var GroupDirection;
( (function(GroupDirection) {
    GroupDirection[GroupDirection["UP"] = 0] = "UP";
    GroupDirection[GroupDirection["DOWN"] = 1] = "DOWN";
    GroupDirection[GroupDirection["LEFT"] = 2] = "LEFT";
    GroupDirection[GroupDirection["RIGHT"] = 3] = "RIGHT";
})(GroupDirection || (GroupDirection = {})));
var GroupOrientation;
( (function(GroupOrientation) {
    GroupOrientation[GroupOrientation["HORIZONTAL"] = 0] = "HORIZONTAL";
    GroupOrientation[GroupOrientation["VERTICAL"] = 1] = "VERTICAL";
})(GroupOrientation || (GroupOrientation = {})));
var GroupLocation;
( (function(GroupLocation) {
    GroupLocation[GroupLocation["FIRST"] = 0] = "FIRST";
    GroupLocation[GroupLocation["LAST"] = 1] = "LAST";
    GroupLocation[GroupLocation["NEXT"] = 2] = "NEXT";
    GroupLocation[GroupLocation["PREVIOUS"] = 3] = "PREVIOUS";
})(GroupLocation || (GroupLocation = {})));
var GroupsArrangement;
( (function(GroupsArrangement) {
    GroupsArrangement[GroupsArrangement["MAXIMIZE"] = 0] = "MAXIMIZE";
    GroupsArrangement[GroupsArrangement["EXPAND"] = 1] = "EXPAND";
    GroupsArrangement[GroupsArrangement["EVEN"] = 2] = "EVEN";
})(GroupsArrangement || (GroupsArrangement = {})));
var MergeGroupMode;
( (function(MergeGroupMode) {
    MergeGroupMode[MergeGroupMode["COPY_EDITORS"] = 0] = "COPY_EDITORS";
    MergeGroupMode[MergeGroupMode["MOVE_EDITORS"] = 1] = "MOVE_EDITORS";
})(MergeGroupMode || (MergeGroupMode = {})));
function isEditorReplacement(replacement) {
    const candidate = replacement;
    return (0,_common_editor_js__WEBPACK_IMPORTED_MODULE_0__.isEditorInput)(candidate?.editor) && (0,_common_editor_js__WEBPACK_IMPORTED_MODULE_0__.isEditorInput)(candidate?.replacement);
}
var GroupsOrder;
( (function(GroupsOrder) {
    GroupsOrder[GroupsOrder["CREATION_TIME"] = 0] = "CREATION_TIME";
    GroupsOrder[GroupsOrder["MOST_RECENTLY_ACTIVE"] = 1] = "MOST_RECENTLY_ACTIVE";
    GroupsOrder[GroupsOrder["GRID_APPEARANCE"] = 2] = "GRID_APPEARANCE";
})(GroupsOrder || (GroupsOrder = {})));
function isEditorGroup(obj) {
    const group = obj;
    return !!group && typeof group.id === 'number' && Array.isArray(group.editors);
}
function preferredSideBySideGroupDirection(configurationService) {
    const openSideBySideDirection = configurationService.getValue('workbench.editor.openSideBySideDirection');
    if (openSideBySideDirection === 'down') {
        return GroupDirection.DOWN;
    }
    return GroupDirection.RIGHT;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorGroupsService.service.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorGroupsService.service.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IEditorGroupsService: () => (/* binding */ IEditorGroupsService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IEditorGroupsService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('editorGroupsService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorResolverService.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorResolverService.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RegisteredEditorPriority: () => (/* binding */ RegisteredEditorPriority),
/* harmony export */   ResolvedStatus: () => (/* binding */ ResolvedStatus),
/* harmony export */   editorsAssociationsSettingId: () => (/* binding */ editorsAssociationsSettingId),
/* harmony export */   globMatchesResource: () => (/* binding */ globMatchesResource),
/* harmony export */   priorityToRank: () => (/* binding */ priorityToRank)
/* harmony export */ });
/* harmony import */ var _base_common_glob_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/glob.js */ "./node_modules/vscode/vscode/src/vs/base/common/glob.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _common_configuration_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../common/configuration.js */ "./node_modules/vscode/vscode/src/vs/workbench/common/configuration.js");
/* harmony import */ var _platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../platform/configuration/common/configurationRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configurationRegistry.js");
/* harmony import */ var _platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../platform/registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");








const _moduleId = "vs/workbench/services/editor/common/editorResolverService";
const editorsAssociationsSettingId = 'workbench.editorAssociations';
const configurationRegistry = ( (_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_7__.Registry.as(_platform_configuration_common_configurationRegistry_js__WEBPACK_IMPORTED_MODULE_6__.Extensions.Configuration)));
const editorAssociationsConfigurationNode = {
    ..._common_configuration_js__WEBPACK_IMPORTED_MODULE_5__.workbenchConfigurationNodeBase,
    properties: {
        'workbench.editorAssociations': {
            type: 'object',
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_4__.localizeWithPath)(
                _moduleId,
                0,
                "Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\"*.hex\": \"hexEditor.hexedit\"`). These have precedence over the default behavior."
            )),
            additionalProperties: {
                type: 'string'
            }
        }
    }
};
configurationRegistry.registerConfiguration(editorAssociationsConfigurationNode);
var RegisteredEditorPriority;
( ((function(RegisteredEditorPriority) {
    RegisteredEditorPriority["builtin"] = "builtin";
    RegisteredEditorPriority["option"] = "option";
    RegisteredEditorPriority["exclusive"] = "exclusive";
    RegisteredEditorPriority["default"] = "default";
})(RegisteredEditorPriority || (RegisteredEditorPriority = {}))));
var ResolvedStatus;
( ((function(ResolvedStatus) {
    ResolvedStatus[ResolvedStatus["ABORT"] = 1] = "ABORT";
    ResolvedStatus[ResolvedStatus["NONE"] = 2] = "NONE";
})(ResolvedStatus || (ResolvedStatus = {}))));
function priorityToRank(priority) {
    switch (priority) {
        case RegisteredEditorPriority.exclusive:
            return 5;
        case RegisteredEditorPriority.default:
            return 4;
        case RegisteredEditorPriority.builtin:
            return 3;
        case RegisteredEditorPriority.option:
        default:
            return 1;
    }
}
function globMatchesResource(globPattern, resource) {
    const excludedSchemes = ( (new Set([
        _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.extension,
        _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.webviewPanel,
        _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.vscodeWorkspaceTrust,
        _base_common_network_js__WEBPACK_IMPORTED_MODULE_1__.Schemas.vscodeSettings
    ])));
    if (( (excludedSchemes.has(resource.scheme)))) {
        return false;
    }
    const matchOnPath = typeof globPattern === 'string' && globPattern.indexOf(_base_common_path_js__WEBPACK_IMPORTED_MODULE_2__.posix.sep) >= 0;
    const target = matchOnPath ? `${resource.scheme}:${resource.path}` : (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_3__.basename)(resource);
    return (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_0__.match)(typeof globPattern === 'string' ? globPattern.toLowerCase() : globPattern, target.toLowerCase());
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorService.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorService.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACTIVE_GROUP: () => (/* binding */ ACTIVE_GROUP),
/* harmony export */   AUX_WINDOW_GROUP: () => (/* binding */ AUX_WINDOW_GROUP),
/* harmony export */   SIDE_GROUP: () => (/* binding */ SIDE_GROUP),
/* harmony export */   isPreferredGroup: () => (/* binding */ isPreferredGroup)
/* harmony export */ });
/* harmony import */ var _editorGroupsService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editorGroupsService.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorGroupsService.js");

const ACTIVE_GROUP = -1;
const SIDE_GROUP = -2;
const AUX_WINDOW_GROUP = -3;
function isPreferredGroup(obj) {
    const candidate = obj;
    return typeof obj === 'number' || (0,_editorGroupsService_js__WEBPACK_IMPORTED_MODULE_0__.isEditorGroup)(candidate);
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionDescriptionRegistry.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionDescriptionRegistry.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DeltaExtensionsResult: () => (/* binding */ DeltaExtensionsResult),
/* harmony export */   ExtensionDescriptionRegistry: () => (/* binding */ ExtensionDescriptionRegistry),
/* harmony export */   ExtensionDescriptionRegistryLock: () => (/* binding */ ExtensionDescriptionRegistryLock),
/* harmony export */   ExtensionDescriptionRegistrySnapshot: () => (/* binding */ ExtensionDescriptionRegistrySnapshot),
/* harmony export */   LockableExtensionDescriptionRegistry: () => (/* binding */ LockableExtensionDescriptionRegistry)
/* harmony export */ });
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");





class DeltaExtensionsResult {
    constructor(versionId, removedDueToLooping) {
        this.versionId = versionId;
        this.removedDueToLooping = removedDueToLooping;
    }
}
class ExtensionDescriptionRegistry {
    static isHostExtension(extensionId, myRegistry, globalRegistry) {
        if (myRegistry.getExtensionDescription(extensionId)) {
            return false;
        }
        const extensionDescription = globalRegistry.getExtensionDescription(extensionId);
        if (!extensionDescription) {
            return false;
        }
        if ((extensionDescription.main || extensionDescription.browser) && extensionDescription.api === 'none') {
            return true;
        }
        return false;
    }
    constructor(_activationEventsReader, extensionDescriptions) {
        this._activationEventsReader = _activationEventsReader;
        this._onDidChange = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter());
        this.onDidChange = this._onDidChange.event;
        this._versionId = 0;
        this._extensionDescriptions = extensionDescriptions;
        this._initialize();
    }
    _initialize() {
        this._extensionDescriptions.sort(extensionCmp);
        this._extensionsMap = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.ExtensionIdentifierMap());
        this._extensionsArr = [];
        this._activationMap = ( new Map());
        for (const extensionDescription of this._extensionDescriptions) {
            if (( this._extensionsMap.has(extensionDescription.identifier))) {
                console.error('Extension `' + extensionDescription.identifier.value + '` is already registered');
                continue;
            }
            this._extensionsMap.set(extensionDescription.identifier, extensionDescription);
            this._extensionsArr.push(extensionDescription);
            const activationEvents = this._activationEventsReader.readActivationEvents(extensionDescription);
            for (const activationEvent of activationEvents) {
                if (!( this._activationMap.has(activationEvent))) {
                    this._activationMap.set(activationEvent, []);
                }
                this._activationMap.get(activationEvent).push(extensionDescription);
            }
        }
    }
    set(extensionDescriptions) {
        this._extensionDescriptions = extensionDescriptions;
        this._initialize();
        this._versionId++;
        this._onDidChange.fire(undefined);
        return {
            versionId: this._versionId
        };
    }
    deltaExtensions(toAdd, toRemove) {
        this._extensionDescriptions = removeExtensions(this._extensionDescriptions, toRemove);
        this._extensionDescriptions = this._extensionDescriptions.concat(toAdd);
        const looping = ExtensionDescriptionRegistry._findLoopingExtensions(this._extensionDescriptions);
        this._extensionDescriptions = removeExtensions(this._extensionDescriptions, ( looping.map(ext => ext.identifier)));
        this._initialize();
        this._versionId++;
        this._onDidChange.fire(undefined);
        return ( new DeltaExtensionsResult(this._versionId, looping));
    }
    static _findLoopingExtensions(extensionDescriptions) {
        const G = new (class {
            constructor() {
                this._arcs = ( new Map());
                this._nodesSet = ( new Set());
                this._nodesArr = [];
            }
            addNode(id) {
                if (!( this._nodesSet.has(id))) {
                    this._nodesSet.add(id);
                    this._nodesArr.push(id);
                }
            }
            addArc(from, to) {
                this.addNode(from);
                this.addNode(to);
                if (( this._arcs.has(from))) {
                    this._arcs.get(from).push(to);
                }
                else {
                    this._arcs.set(from, [to]);
                }
            }
            getArcs(id) {
                if (( this._arcs.has(id))) {
                    return this._arcs.get(id);
                }
                return [];
            }
            hasOnlyGoodArcs(id, good) {
                const dependencies = G.getArcs(id);
                for (let i = 0; i < dependencies.length; i++) {
                    if (!( good.has(dependencies[i]))) {
                        return false;
                    }
                }
                return true;
            }
            getNodes() {
                return this._nodesArr;
            }
        });
        const descs = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.ExtensionIdentifierMap());
        for (const extensionDescription of extensionDescriptions) {
            descs.set(extensionDescription.identifier, extensionDescription);
            if (extensionDescription.extensionDependencies) {
                for (const depId of extensionDescription.extensionDependencies) {
                    G.addArc(_platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.ExtensionIdentifier.toKey(extensionDescription.identifier), _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.ExtensionIdentifier.toKey(depId));
                }
            }
        }
        const good = ( new Set());
        G.getNodes().filter(id => G.getArcs(id).length === 0).forEach(id => good.add(id));
        const nodes = G.getNodes().filter(id => !( good.has(id)));
        let madeProgress;
        do {
            madeProgress = false;
            for (let i = 0; i < nodes.length; i++) {
                const id = nodes[i];
                if (G.hasOnlyGoodArcs(id, good)) {
                    nodes.splice(i, 1);
                    i--;
                    good.add(id);
                    madeProgress = true;
                }
            }
        } while (madeProgress);
        return ( nodes.map(id => descs.get(id)));
    }
    containsActivationEvent(activationEvent) {
        return ( this._activationMap.has(activationEvent));
    }
    containsExtension(extensionId) {
        return ( this._extensionsMap.has(extensionId));
    }
    getExtensionDescriptionsForActivationEvent(activationEvent) {
        const extensions = this._activationMap.get(activationEvent);
        return extensions ? extensions.slice(0) : [];
    }
    getAllExtensionDescriptions() {
        return this._extensionsArr.slice(0);
    }
    getSnapshot() {
        return ( new ExtensionDescriptionRegistrySnapshot(this._versionId, this.getAllExtensionDescriptions()));
    }
    getExtensionDescription(extensionId) {
        const extension = this._extensionsMap.get(extensionId);
        return extension ? extension : undefined;
    }
    getExtensionDescriptionByUUID(uuid) {
        for (const extensionDescription of this._extensionsArr) {
            if (extensionDescription.uuid === uuid) {
                return extensionDescription;
            }
        }
        return undefined;
    }
    getExtensionDescriptionByIdOrUUID(extensionId, uuid) {
        return (this.getExtensionDescription(extensionId)
            ?? (uuid ? this.getExtensionDescriptionByUUID(uuid) : undefined));
    }
}
class ExtensionDescriptionRegistrySnapshot {
    constructor(versionId, extensions) {
        this.versionId = versionId;
        this.extensions = extensions;
    }
}
class LockableExtensionDescriptionRegistry {
    constructor(activationEventsReader) {
        this._lock = ( new Lock());
        this._actual = ( new ExtensionDescriptionRegistry(activationEventsReader, []));
    }
    async acquireLock(customerName) {
        const lock = await this._lock.acquire(customerName);
        return ( new ExtensionDescriptionRegistryLock(this, lock));
    }
    deltaExtensions(acquiredLock, toAdd, toRemove) {
        if (!acquiredLock.isAcquiredFor(this)) {
            throw ( new Error('Lock is not held'));
        }
        return this._actual.deltaExtensions(toAdd, toRemove);
    }
    containsActivationEvent(activationEvent) {
        return this._actual.containsActivationEvent(activationEvent);
    }
    containsExtension(extensionId) {
        return this._actual.containsExtension(extensionId);
    }
    getExtensionDescriptionsForActivationEvent(activationEvent) {
        return this._actual.getExtensionDescriptionsForActivationEvent(activationEvent);
    }
    getAllExtensionDescriptions() {
        return this._actual.getAllExtensionDescriptions();
    }
    getSnapshot() {
        return this._actual.getSnapshot();
    }
    getExtensionDescription(extensionId) {
        return this._actual.getExtensionDescription(extensionId);
    }
    getExtensionDescriptionByUUID(uuid) {
        return this._actual.getExtensionDescriptionByUUID(uuid);
    }
    getExtensionDescriptionByIdOrUUID(extensionId, uuid) {
        return this._actual.getExtensionDescriptionByIdOrUUID(extensionId, uuid);
    }
}
class ExtensionDescriptionRegistryLock extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.Disposable {
    constructor(_registry, lock) {
        super();
        this._registry = _registry;
        this._isDisposed = false;
        this._register(lock);
    }
    isAcquiredFor(registry) {
        return !this._isDisposed && this._registry === registry;
    }
}
class LockCustomer {
    constructor(name) {
        this.name = name;
        const withResolvers = (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_4__.promiseWithResolvers)();
        this.promise = withResolvers.promise;
        this._resolve = withResolvers.resolve;
    }
    resolve(value) {
        this._resolve(value);
    }
}
class Lock {
    constructor() {
        this._pendingCustomers = [];
        this._isLocked = false;
    }
    async acquire(customerName) {
        const customer = ( new LockCustomer(customerName));
        this._pendingCustomers.push(customer);
        this._advance();
        return customer.promise;
    }
    _advance() {
        if (this._isLocked) {
            return;
        }
        if (this._pendingCustomers.length === 0) {
            return;
        }
        const customer = this._pendingCustomers.shift();
        this._isLocked = true;
        let customerHoldsLock = true;
        const logLongRunningCustomerTimeout = setTimeout(() => {
            if (customerHoldsLock) {
                console.warn(`The customer named ${customer.name} has been holding on to the lock for 30s. This might be a problem.`);
            }
        }, 30 * 1000 );
        const releaseLock = () => {
            if (!customerHoldsLock) {
                return;
            }
            clearTimeout(logLongRunningCustomerTimeout);
            customerHoldsLock = false;
            this._isLocked = false;
            this._advance();
        };
        customer.resolve((0,_base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_3__.toDisposable)(releaseLock));
    }
}
var SortBucket;
( (function(SortBucket) {
    SortBucket[SortBucket["Builtin"] = 0] = "Builtin";
    SortBucket[SortBucket["User"] = 1] = "User";
    SortBucket[SortBucket["Dev"] = 2] = "Dev";
})(SortBucket || (SortBucket = {})));
function extensionCmp(a, b) {
    const aSortBucket = (a.isBuiltin ? SortBucket.Builtin : a.isUnderDevelopment ? SortBucket.Dev : SortBucket.User);
    const bSortBucket = (b.isBuiltin ? SortBucket.Builtin : b.isUnderDevelopment ? SortBucket.Dev : SortBucket.User);
    if (aSortBucket !== bSortBucket) {
        return aSortBucket - bSortBucket;
    }
    const aLastSegment = _base_common_path_js__WEBPACK_IMPORTED_MODULE_2__.posix.basename(a.extensionLocation.path);
    const bLastSegment = _base_common_path_js__WEBPACK_IMPORTED_MODULE_2__.posix.basename(b.extensionLocation.path);
    if (aLastSegment < bLastSegment) {
        return -1;
    }
    if (aLastSegment > bLastSegment) {
        return 1;
    }
    return 0;
}
function removeExtensions(arr, toRemove) {
    const toRemoveSet = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_0__.ExtensionIdentifierSet(toRemove));
    return arr.filter(extension => !( toRemoveSet.has(extension.identifier)));
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionHostProtocol.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionHostProtocol.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtensionHostExitCode: () => (/* binding */ ExtensionHostExitCode),
/* harmony export */   MessageType: () => (/* binding */ MessageType),
/* harmony export */   UIKind: () => (/* binding */ UIKind),
/* harmony export */   createMessageOfType: () => (/* binding */ createMessageOfType),
/* harmony export */   isMessageOfType: () => (/* binding */ isMessageOfType)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");

var UIKind;
( (function(UIKind) {
    UIKind[UIKind["Desktop"] = 1] = "Desktop";
    UIKind[UIKind["Web"] = 2] = "Web";
})(UIKind || (UIKind = {})));
var ExtensionHostExitCode;
( (function(ExtensionHostExitCode) {
    ExtensionHostExitCode[ExtensionHostExitCode["VersionMismatch"] = 55] = "VersionMismatch";
    ExtensionHostExitCode[ExtensionHostExitCode["UnexpectedError"] = 81] = "UnexpectedError";
})(ExtensionHostExitCode || (ExtensionHostExitCode = {})));
var MessageType;
( (function(MessageType) {
    MessageType[MessageType["Initialized"] = 0] = "Initialized";
    MessageType[MessageType["Ready"] = 1] = "Ready";
    MessageType[MessageType["Terminate"] = 2] = "Terminate";
})(MessageType || (MessageType = {})));
function createMessageOfType(type) {
    const result = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.alloc(1);
    switch (type) {
        case MessageType.Initialized:
            result.writeUInt8(1, 0);
            break;
        case MessageType.Ready:
            result.writeUInt8(2, 0);
            break;
        case MessageType.Terminate:
            result.writeUInt8(3, 0);
            break;
    }
    return result;
}
function isMessageOfType(message, type) {
    if (message.byteLength !== 1) {
        return false;
    }
    switch (message.readUInt8(0)) {
        case 1: return type === MessageType.Initialized;
        case 2: return type === MessageType.Ready;
        case 3: return type === MessageType.Terminate;
        default: return false;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActivationKind: () => (/* binding */ ActivationKind),
/* harmony export */   ActivationTimes: () => (/* binding */ ActivationTimes),
/* harmony export */   ExtensionHostExtensions: () => (/* binding */ ExtensionHostExtensions),
/* harmony export */   ExtensionHostStartup: () => (/* binding */ ExtensionHostStartup),
/* harmony export */   ExtensionPointContribution: () => (/* binding */ ExtensionPointContribution),
/* harmony export */   MissingExtensionDependency: () => (/* binding */ MissingExtensionDependency),
/* harmony export */   NullExtensionService: () => (/* binding */ NullExtensionService),
/* harmony export */   checkProposedApiEnabled: () => (/* binding */ checkProposedApiEnabled),
/* harmony export */   isProposedApiEnabled: () => (/* binding */ isProposedApiEnabled),
/* harmony export */   nullExtensionDescription: () => (/* binding */ nullExtensionDescription),
/* harmony export */   toExtension: () => (/* binding */ toExtension),
/* harmony export */   toExtensionDescription: () => (/* binding */ toExtensionDescription),
/* harmony export */   webWorkerExtHostConfig: () => (/* binding */ webWorkerExtHostConfig)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _platform_extensionManagement_common_extensionManagementUtil_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../platform/extensionManagement/common/extensionManagementUtil.js */ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/extensionManagementUtil.js");
/* harmony import */ var _platform_extensionManagement_common_implicitActivationEvents_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../platform/extensionManagement/common/implicitActivationEvents.js */ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/implicitActivationEvents.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");





const nullExtensionDescription = ( Object.freeze({
    identifier: ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifier('nullExtensionDescription')),
    name: 'Null Extension Description',
    version: '0.0.0',
    publisher: 'vscode',
    engines: { vscode: '' },
    extensionLocation: ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.parse('void:location')),
    isBuiltin: false,
    targetPlatform: _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.TargetPlatform.UNDEFINED,
    isUserBuiltin: false,
    isUnderDevelopment: false
}));
const webWorkerExtHostConfig = 'extensions.webWorker';
class MissingExtensionDependency {
    constructor(dependency) {
        this.dependency = dependency;
    }
}
var ExtensionHostStartup;
( (function(ExtensionHostStartup) {
    ExtensionHostStartup[ExtensionHostStartup["EagerAutoStart"] = 1] = "EagerAutoStart";
    ExtensionHostStartup[ExtensionHostStartup["EagerManualStart"] = 2] = "EagerManualStart";
    ExtensionHostStartup[ExtensionHostStartup["Lazy"] = 3] = "Lazy";
})(ExtensionHostStartup || (ExtensionHostStartup = {})));
class ExtensionHostExtensions {
    get versionId() {
        return this._versionId;
    }
    get allExtensions() {
        return this._allExtensions;
    }
    get myExtensions() {
        return this._myExtensions;
    }
    constructor(versionId, allExtensions, myExtensions) {
        this._versionId = versionId;
        this._allExtensions = allExtensions.slice(0);
        this._myExtensions = myExtensions.slice(0);
        this._myActivationEvents = null;
    }
    toSnapshot() {
        return {
            versionId: this._versionId,
            allExtensions: this._allExtensions,
            myExtensions: this._myExtensions,
            activationEvents: _platform_extensionManagement_common_implicitActivationEvents_js__WEBPACK_IMPORTED_MODULE_3__.ImplicitActivationEvents.createActivationEventsMap(this._allExtensions)
        };
    }
    set(versionId, allExtensions, myExtensions) {
        if (this._versionId > versionId) {
            throw ( new Error(
                `ExtensionHostExtensions: invalid versionId ${versionId} (current: ${this._versionId})`
            ));
        }
        const toRemove = [];
        const toAdd = [];
        const myToRemove = [];
        const myToAdd = [];
        const oldExtensionsMap = extensionDescriptionArrayToMap(this._allExtensions);
        const newExtensionsMap = extensionDescriptionArrayToMap(allExtensions);
        const extensionsAreTheSame = (a, b) => {
            return ((( a.extensionLocation.toString()) === ( b.extensionLocation.toString()))
                || (a.isBuiltin === b.isBuiltin)
                || (a.isUserBuiltin === b.isUserBuiltin) || (a.isUnderDevelopment === b.isUnderDevelopment));
        };
        for (const oldExtension of this._allExtensions) {
            const newExtension = newExtensionsMap.get(oldExtension.identifier);
            if (!newExtension) {
                toRemove.push(oldExtension.identifier);
                oldExtensionsMap.delete(oldExtension.identifier);
                continue;
            }
            if (!extensionsAreTheSame(oldExtension, newExtension)) {
                toRemove.push(oldExtension.identifier);
                oldExtensionsMap.delete(oldExtension.identifier);
                continue;
            }
        }
        for (const newExtension of allExtensions) {
            const oldExtension = oldExtensionsMap.get(newExtension.identifier);
            if (!oldExtension) {
                toAdd.push(newExtension);
                continue;
            }
            if (!extensionsAreTheSame(oldExtension, newExtension)) {
                toRemove.push(oldExtension.identifier);
                oldExtensionsMap.delete(oldExtension.identifier);
                continue;
            }
        }
        const myOldExtensionsSet = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifierSet(this._myExtensions));
        const myNewExtensionsSet = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifierSet(myExtensions));
        for (const oldExtensionId of this._myExtensions) {
            if (!( myNewExtensionsSet.has(oldExtensionId))) {
                myToRemove.push(oldExtensionId);
            }
        }
        for (const newExtensionId of myExtensions) {
            if (!( myOldExtensionsSet.has(newExtensionId))) {
                myToAdd.push(newExtensionId);
            }
        }
        const addActivationEvents = _platform_extensionManagement_common_implicitActivationEvents_js__WEBPACK_IMPORTED_MODULE_3__.ImplicitActivationEvents.createActivationEventsMap(toAdd);
        const delta = { versionId, toRemove, toAdd, addActivationEvents, myToRemove, myToAdd };
        this.delta(delta);
        return delta;
    }
    delta(extensionsDelta) {
        if (this._versionId >= extensionsDelta.versionId) {
            return null;
        }
        const { toRemove, toAdd, myToRemove, myToAdd } = extensionsDelta;
        const toRemoveSet = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifierSet(toRemove));
        const myToRemoveSet = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifierSet(myToRemove));
        for (let i = 0; i < this._allExtensions.length; i++) {
            if (( toRemoveSet.has(this._allExtensions[i].identifier))) {
                this._allExtensions.splice(i, 1);
                i--;
            }
        }
        for (let i = 0; i < this._myExtensions.length; i++) {
            if (( myToRemoveSet.has(this._myExtensions[i]))) {
                this._myExtensions.splice(i, 1);
                i--;
            }
        }
        for (const extension of toAdd) {
            this._allExtensions.push(extension);
        }
        for (const extensionId of myToAdd) {
            this._myExtensions.push(extensionId);
        }
        this._myActivationEvents = null;
        return extensionsDelta;
    }
    containsExtension(extensionId) {
        for (const myExtensionId of this._myExtensions) {
            if (_platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifier.equals(myExtensionId, extensionId)) {
                return true;
            }
        }
        return false;
    }
    containsActivationEvent(activationEvent) {
        if (!this._myActivationEvents) {
            this._myActivationEvents = this._readMyActivationEvents();
        }
        return ( this._myActivationEvents.has(activationEvent));
    }
    _readMyActivationEvents() {
        const result = ( new Set());
        for (const extensionDescription of this._allExtensions) {
            if (!this.containsExtension(extensionDescription.identifier)) {
                continue;
            }
            const activationEvents = _platform_extensionManagement_common_implicitActivationEvents_js__WEBPACK_IMPORTED_MODULE_3__.ImplicitActivationEvents.readActivationEvents(extensionDescription);
            for (const activationEvent of activationEvents) {
                result.add(activationEvent);
            }
        }
        return result;
    }
}
function extensionDescriptionArrayToMap(extensions) {
    const result = ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifierMap());
    for (const extension of extensions) {
        result.set(extension.identifier, extension);
    }
    return result;
}
function isProposedApiEnabled(extension, proposal) {
    if (!extension.enabledApiProposals) {
        return false;
    }
    return extension.enabledApiProposals.includes(proposal);
}
function checkProposedApiEnabled(extension, proposal) {
    if (!isProposedApiEnabled(extension, proposal)) {
        throw ( new Error(
            `Extension '${extension.identifier.value}' CANNOT use API proposal: ${proposal}.\nIts package.json#enabledApiProposals-property declares: ${extension.enabledApiProposals?.join(', ') ?? '[]'} but NOT ${proposal}.\n The missing proposal MUST be added and you must start in extension development mode or use the following command line switch: --enable-proposed-api ${extension.identifier.value}`
        ));
    }
}
class ActivationTimes {
    constructor(codeLoadingTime, activateCallTime, activateResolvedTime, activationReason) {
        this.codeLoadingTime = codeLoadingTime;
        this.activateCallTime = activateCallTime;
        this.activateResolvedTime = activateResolvedTime;
        this.activationReason = activationReason;
    }
}
class ExtensionPointContribution {
    constructor(description, value) {
        this.description = description;
        this.value = value;
    }
}
var ActivationKind;
( (function(ActivationKind) {
    ActivationKind[ActivationKind["Normal"] = 0] = "Normal";
    ActivationKind[ActivationKind["Immediate"] = 1] = "Immediate";
})(ActivationKind || (ActivationKind = {})));
function toExtension(extensionDescription) {
    return {
        type: extensionDescription.isBuiltin ? _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionType.System : _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionType.User,
        isBuiltin: extensionDescription.isBuiltin || extensionDescription.isUserBuiltin,
        identifier: { id: (0,_platform_extensionManagement_common_extensionManagementUtil_js__WEBPACK_IMPORTED_MODULE_2__.getGalleryExtensionId)(extensionDescription.publisher, extensionDescription.name), uuid: extensionDescription.uuid },
        manifest: extensionDescription,
        location: extensionDescription.extensionLocation,
        targetPlatform: extensionDescription.targetPlatform,
        validations: [],
        isValid: true
    };
}
function toExtensionDescription(extension, isUnderDevelopment) {
    const id = (0,_platform_extensionManagement_common_extensionManagementUtil_js__WEBPACK_IMPORTED_MODULE_2__.getExtensionId)(extension.manifest.publisher, extension.manifest.name);
    return {
        id,
        identifier: ( new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionIdentifier(id)),
        isBuiltin: extension.type === _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionType.System,
        isUserBuiltin: extension.type === _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_4__.ExtensionType.User && extension.isBuiltin,
        isUnderDevelopment: !!isUnderDevelopment,
        extensionLocation: extension.location,
        uuid: extension.identifier.uuid,
        targetPlatform: extension.targetPlatform,
        publisherDisplayName: extension.publisherDisplayName,
        ...extension.manifest
    };
}
class NullExtensionService {
    constructor() {
        this.onDidRegisterExtensions = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
        this.onDidChangeExtensionsStatus = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
        this.onDidChangeExtensions = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
        this.onWillActivateByEvent = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
        this.onDidChangeResponsiveChange = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
        this.onWillStop = _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Event.None;
        this.extensions = [];
    }
    activateByEvent(_activationEvent) { return Promise.resolve(undefined); }
    activateById(extensionId, reason) { return Promise.resolve(undefined); }
    activationEventIsDone(_activationEvent) { return false; }
    whenInstalledExtensionsRegistered() { return Promise.resolve(true); }
    getExtension() { return Promise.resolve(undefined); }
    readExtensionPointContributions(_extPoint) { return Promise.resolve(Object.create(null)); }
    getExtensionsStatus() { return Object.create(null); }
    getInspectPorts(_extensionHostKind, _tryEnableInspector) { return Promise.resolve([]); }
    stopExtensionHosts() { }
    async startExtensionHosts() { }
    async setRemoteEnvironment(_env) { }
    canAddExtension() { return false; }
    canRemoveExtension() { return false; }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.service.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensions.service.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IExtensionService: () => (/* binding */ IExtensionService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IExtensionService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('extensionService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/extensionsRegistry.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtensionMessageCollector: () => (/* binding */ ExtensionMessageCollector),
/* harmony export */   ExtensionPoint: () => (/* binding */ ExtensionPoint),
/* harmony export */   ExtensionPointUserDelta: () => (/* binding */ ExtensionPointUserDelta),
/* harmony export */   ExtensionsRegistry: () => (/* binding */ ExtensionsRegistry),
/* harmony export */   ExtensionsRegistryImpl: () => (/* binding */ ExtensionsRegistryImpl),
/* harmony export */   schema: () => (/* binding */ schema)
/* harmony export */ });
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_severity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/severity.js */ "./node_modules/vscode/vscode/src/vs/base/common/severity.js");
/* harmony import */ var _platform_extensionManagement_common_extensionManagement_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../platform/extensionManagement/common/extensionManagement.js */ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/extensionManagement.js");
/* harmony import */ var _platform_jsonschemas_common_jsonContributionRegistry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../platform/jsonschemas/common/jsonContributionRegistry.js */ "./node_modules/vscode/vscode/src/vs/platform/jsonschemas/common/jsonContributionRegistry.js");
/* harmony import */ var _platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../platform/registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");
/* harmony import */ var _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../platform/extensions/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensions.js");
/* harmony import */ var _platform_product_common_productService_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../platform/product/common/productService.js */ "./node_modules/vscode/vscode/src/vs/platform/product/common/productService.js");
/* harmony import */ var _platform_extensionManagement_common_implicitActivationEvents_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../platform/extensionManagement/common/implicitActivationEvents.js */ "./node_modules/vscode/vscode/src/vs/platform/extensionManagement/common/implicitActivationEvents.js");
/* harmony import */ var _platform_extensions_common_extensionsApiProposals_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../platform/extensions/common/extensionsApiProposals.js */ "./node_modules/vscode/vscode/src/vs/platform/extensions/common/extensionsApiProposals.js");










const _moduleId = "vs/workbench/services/extensions/common/extensionsRegistry";
const schemaRegistry = ( (_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_5__.Registry.as(_platform_jsonschemas_common_jsonContributionRegistry_js__WEBPACK_IMPORTED_MODULE_4__.Extensions.JSONContribution)));
class ExtensionMessageCollector {
    constructor(messageHandler, extension, extensionPointId) {
        this._messageHandler = messageHandler;
        this._extension = extension;
        this._extensionPointId = extensionPointId;
    }
    _msg(type, message) {
        this._messageHandler({
            type: type,
            message: message,
            extensionId: this._extension.identifier,
            extensionPointId: this._extensionPointId
        });
    }
    error(message) {
        this._msg(_base_common_severity_js__WEBPACK_IMPORTED_MODULE_2__["default"].Error, message);
    }
    warn(message) {
        this._msg(_base_common_severity_js__WEBPACK_IMPORTED_MODULE_2__["default"].Warning, message);
    }
    info(message) {
        this._msg(_base_common_severity_js__WEBPACK_IMPORTED_MODULE_2__["default"].Info, message);
    }
}
class ExtensionPointUserDelta {
    static _toSet(arr) {
        const result = ( (new _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.ExtensionIdentifierSet()));
        for (let i = 0, len = arr.length; i < len; i++) {
            result.add(arr[i].description.identifier);
        }
        return result;
    }
    static compute(previous, current) {
        if (!previous || !previous.length) {
            return (
                 (new ExtensionPointUserDelta(current, []))
            );
        }
        if (!current || !current.length) {
            return (
                 (new ExtensionPointUserDelta([], previous))
            );
        }
        const previousSet = this._toSet(previous);
        const currentSet = this._toSet(current);
        const added = current.filter(user => !( (previousSet.has(user.description.identifier))));
        const removed = previous.filter(user => !( (currentSet.has(user.description.identifier))));
        return (
             (new ExtensionPointUserDelta(added, removed))
        );
    }
    constructor(added, removed) {
        this.added = added;
        this.removed = removed;
    }
}
class ExtensionPoint {
    constructor(name, defaultExtensionKind) {
        this.name = name;
        this.defaultExtensionKind = defaultExtensionKind;
        this._handler = null;
        this._users = null;
        this._delta = null;
    }
    setHandler(handler) {
        if (this._handler !== null) {
            throw ( (new Error('Handler already set!')));
        }
        this._handler = handler;
        this._handle();
        return {
            dispose: () => {
                this._handler = null;
            }
        };
    }
    acceptUsers(users) {
        this._delta = ExtensionPointUserDelta.compute(this._users, users);
        this._users = users;
        this._handle();
    }
    _handle() {
        if (this._handler === null || this._users === null || this._delta === null) {
            return;
        }
        try {
            this._handler(this._users, this._delta);
        }
        catch (err) {
            (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_1__.onUnexpectedError)(err);
        }
    }
}
const extensionKindSchema = {
    type: 'string',
    enum: [
        'ui',
        'workspace'
    ],
    enumDescriptions: [
        ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
            _moduleId,
            0,
            "UI extension kind. In a remote window, such extensions are enabled only when available on the local machine."
        )),
        ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
            _moduleId,
            1,
            "Workspace extension kind. In a remote window, such extensions are enabled only when available on the remote."
        )),
    ],
};
const schemaId = 'vscode://schemas/vscode-extensions';
const schema = {
    properties: {
        engines: {
            type: 'object',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 2, "Engine compatibility.")),
            properties: {
                'vscode': {
                    type: 'string',
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        3,
                        'For VS Code extensions, specifies the VS Code version that the extension is compatible with. Cannot be *. For example: ^0.10.5 indicates compatibility with a minimum VS Code version of 0.10.5.'
                    )),
                    default: '^1.22.0',
                }
            }
        },
        publisher: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 4, 'The publisher of the VS Code extension.')),
            type: 'string'
        },
        displayName: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                5,
                'The display name for the extension used in the VS Code gallery.'
            )),
            type: 'string'
        },
        categories: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                6,
                'The categories used by the VS Code gallery to categorize the extension.'
            )),
            type: 'array',
            uniqueItems: true,
            items: {
                oneOf: [{
                        type: 'string',
                        enum: _platform_extensions_common_extensions_js__WEBPACK_IMPORTED_MODULE_6__.EXTENSION_CATEGORIES,
                    },
                    {
                        type: 'string',
                        const: 'Languages',
                        deprecationMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 7, 'Use \'Programming  Languages\' instead')),
                    }]
            }
        },
        galleryBanner: {
            type: 'object',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 8, 'Banner used in the VS Code marketplace.')),
            properties: {
                color: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 9, 'The banner color on the VS Code marketplace page header.')),
                    type: 'string'
                },
                theme: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 10, 'The color theme for the font used in the banner.')),
                    type: 'string',
                    enum: ['dark', 'light']
                }
            }
        },
        contributes: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                11,
                'All contributions of the VS Code extension represented by this package.'
            )),
            type: 'object',
            properties: {
            },
            default: {}
        },
        preview: {
            type: 'boolean',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                12,
                'Sets the extension to be flagged as a Preview in the Marketplace.'
            )),
        },
        enableProposedApi: {
            type: 'boolean',
            deprecationMessage: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 13, 'Use `enabledApiProposals` instead.')),
        },
        enabledApiProposals: {
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                14,
                'Enable API proposals to try them out. Only valid **during development**. Extensions **cannot be published** with this property. For more details visit: https://code.visualstudio.com/api/advanced-topics/using-proposed-api'
            )),
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string',
                enum: ( (( (Object.keys(_platform_extensions_common_extensionsApiProposals_js__WEBPACK_IMPORTED_MODULE_9__.allApiProposals))).map(proposalName => proposalName))),
                markdownEnumDescriptions: ( (( (Object.values(_platform_extensions_common_extensionsApiProposals_js__WEBPACK_IMPORTED_MODULE_9__.allApiProposals))).map(value => value.proposal)))
            }
        },
        api: {
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                15,
                'Describe the API provided by this extension. For more details visit: https://code.visualstudio.com/api/advanced-topics/remote-extensions#handling-dependencies-with-remote-extensions'
            )),
            type: 'string',
            enum: ['none'],
            enumDescriptions: [
                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                    _moduleId,
                    16,
                    "Give up entirely the ability to export any APIs. This allows other extensions that depend on this extension to run in a separate extension host process or in a remote machine."
                ))
            ]
        },
        activationEvents: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 17, 'Activation events for the VS Code extension.')),
            type: 'array',
            items: {
                type: 'string',
                defaultSnippets: [
                    {
                        label: 'onWebviewPanel',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            18,
                            'An activation event emmited when a webview is loaded of a certain viewType'
                        )),
                        body: 'onWebviewPanel:viewType'
                    },
                    {
                        label: 'onLanguage',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            19,
                            'An activation event emitted whenever a file that resolves to the specified language gets opened.'
                        )),
                        body: 'onLanguage:${1:languageId}'
                    },
                    {
                        label: 'onCommand',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            20,
                            'An activation event emitted whenever the specified command gets invoked.'
                        )),
                        body: 'onCommand:${2:commandId}'
                    },
                    {
                        label: 'onDebug',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            21,
                            'An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.'
                        )),
                        body: 'onDebug'
                    },
                    {
                        label: 'onDebugInitialConfigurations',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            22,
                            'An activation event emitted whenever a "launch.json" needs to be created (and all provideDebugConfigurations methods need to be called).'
                        )),
                        body: 'onDebugInitialConfigurations'
                    },
                    {
                        label: 'onDebugDynamicConfigurations',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            23,
                            'An activation event emitted whenever a list of all debug configurations needs to be created (and all provideDebugConfigurations methods for the "dynamic" scope need to be called).'
                        )),
                        body: 'onDebugDynamicConfigurations'
                    },
                    {
                        label: 'onDebugResolve',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            24,
                            'An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).'
                        )),
                        body: 'onDebugResolve:${6:type}'
                    },
                    {
                        label: 'onDebugAdapterProtocolTracker',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            25,
                            'An activation event emitted whenever a debug session with the specific type is about to be launched and a debug protocol tracker might be needed.'
                        )),
                        body: 'onDebugAdapterProtocolTracker:${6:type}'
                    },
                    {
                        label: 'workspaceContains',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            26,
                            'An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.'
                        )),
                        body: 'workspaceContains:${4:filePattern}'
                    },
                    {
                        label: 'onStartupFinished',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            27,
                            'An activation event emitted after the start-up finished (after all `*` activated extensions have finished activating).'
                        )),
                        body: 'onStartupFinished'
                    },
                    {
                        label: 'onTaskType',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            28,
                            'An activation event emitted whenever tasks of a certain type need to be listed or resolved.'
                        )),
                        body: 'onTaskType:${1:taskType}'
                    },
                    {
                        label: 'onFileSystem',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            29,
                            'An activation event emitted whenever a file or folder is accessed with the given scheme.'
                        )),
                        body: 'onFileSystem:${1:scheme}'
                    },
                    {
                        label: 'onEditSession',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            30,
                            'An activation event emitted whenever an edit session is accessed with the given scheme.'
                        )),
                        body: 'onEditSession:${1:scheme}'
                    },
                    {
                        label: 'onSearch',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            31,
                            'An activation event emitted whenever a search is started in the folder with the given scheme.'
                        )),
                        body: 'onSearch:${7:scheme}'
                    },
                    {
                        label: 'onView',
                        body: 'onView:${5:viewId}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            32,
                            'An activation event emitted whenever the specified view is expanded.'
                        )),
                    },
                    {
                        label: 'onUri',
                        body: 'onUri',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            33,
                            'An activation event emitted whenever a system-wide Uri directed towards this extension is open.'
                        )),
                    },
                    {
                        label: 'onOpenExternalUri',
                        body: 'onOpenExternalUri',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            34,
                            'An activation event emitted whenever a external uri (such as an http or https link) is being opened.'
                        )),
                    },
                    {
                        label: 'onCustomEditor',
                        body: 'onCustomEditor:${9:viewType}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            35,
                            'An activation event emitted whenever the specified custom editor becomes visible.'
                        )),
                    },
                    {
                        label: 'onNotebook',
                        body: 'onNotebook:${1:type}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            36,
                            'An activation event emitted whenever the specified notebook document is opened.'
                        )),
                    },
                    {
                        label: 'onAuthenticationRequest',
                        body: 'onAuthenticationRequest:${11:authenticationProviderId}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            37,
                            'An activation event emitted whenever sessions are requested from the specified authentication provider.'
                        ))
                    },
                    {
                        label: 'onRenderer',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            38,
                            'An activation event emitted whenever a notebook output renderer is used.'
                        )),
                        body: 'onRenderer:${11:rendererId}'
                    },
                    {
                        label: 'onTerminalProfile',
                        body: 'onTerminalProfile:${1:terminalId}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            39,
                            'An activation event emitted when a specific terminal profile is launched.'
                        )),
                    },
                    {
                        label: 'onTerminalQuickFixRequest',
                        body: 'onTerminalQuickFixRequest:${1:quickFixId}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            40,
                            'An activation event emitted when a command matches the selector associated with this ID'
                        )),
                    },
                    {
                        label: 'onWalkthrough',
                        body: 'onWalkthrough:${1:walkthroughID}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            41,
                            'An activation event emitted when a specified walkthrough is opened.'
                        )),
                    },
                    {
                        label: 'onIssueReporterOpened',
                        body: 'onIssueReporterOpened',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            42,
                            'An activation event emitted when the issue reporter is opened.'
                        )),
                    },
                    {
                        label: 'onChatParticipant',
                        body: 'onChatParticipant:${1:participantId}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            43,
                            'An activation event emitted when the specified chat participant is invoked.'
                        )),
                    },
                    {
                        label: 'onLanguageModelTool',
                        body: 'onLanguageModelTool:${1:toolName}',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            44,
                            'An activation event emitted when the specified language model tool is invoked.'
                        )),
                    },
                    {
                        label: '*',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                            _moduleId,
                            45,
                            'An activation event emitted on VS Code startup. To ensure a great end user experience, please use this activation event in your extension only when no other activation events combination works in your use-case.'
                        )),
                        body: '*'
                    }
                ],
            }
        },
        badges: {
            type: 'array',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                46,
                'Array of badges to display in the sidebar of the Marketplace\'s extension page.'
            )),
            items: {
                type: 'object',
                required: ['url', 'href', 'description'],
                properties: {
                    url: {
                        type: 'string',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 47, 'Badge image URL.'))
                    },
                    href: {
                        type: 'string',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 48, 'Badge link.'))
                    },
                    description: {
                        type: 'string',
                        description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 49, 'Badge description.'))
                    }
                }
            }
        },
        markdown: {
            type: 'string',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                50,
                "Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard."
            )),
            enum: ['github', 'standard'],
            default: 'github'
        },
        qna: {
            default: 'marketplace',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                51,
                "Controls the Q&A link in the Marketplace. Set to marketplace to enable the default Marketplace Q & A site. Set to a string to provide the URL of a custom Q & A site. Set to false to disable Q & A altogether."
            )),
            anyOf: [
                {
                    type: ['string', 'boolean'],
                    enum: ['marketplace', false]
                },
                {
                    type: 'string'
                }
            ]
        },
        extensionDependencies: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                52,
                'Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.'
            )),
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string',
                pattern: _platform_extensionManagement_common_extensionManagement_js__WEBPACK_IMPORTED_MODULE_3__.EXTENSION_IDENTIFIER_PATTERN
            }
        },
        extensionPack: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                53,
                "A set of extensions that can be installed together. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp."
            )),
            type: 'array',
            uniqueItems: true,
            items: {
                type: 'string',
                pattern: _platform_extensionManagement_common_extensionManagement_js__WEBPACK_IMPORTED_MODULE_3__.EXTENSION_IDENTIFIER_PATTERN
            }
        },
        extensionKind: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                54,
                "Define the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions run on the remote."
            )),
            type: 'array',
            items: extensionKindSchema,
            default: ['workspace'],
            defaultSnippets: [
                {
                    body: ['ui'],
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        55,
                        "Define an extension which can run only on the local machine when connected to remote window."
                    ))
                },
                {
                    body: ['workspace'],
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        56,
                        "Define an extension which can run only on the remote machine when connected remote window."
                    ))
                },
                {
                    body: ['ui', 'workspace'],
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        57,
                        "Define an extension which can run on either side, with a preference towards running on the local machine."
                    ))
                },
                {
                    body: ['workspace', 'ui'],
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        58,
                        "Define an extension which can run on either side, with a preference towards running on the remote machine."
                    ))
                },
                {
                    body: [],
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        59,
                        "Define an extension which cannot run in a remote context, neither on the local, nor on the remote machine."
                    ))
                }
            ]
        },
        capabilities: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                60,
                "Declare the set of supported capabilities by the extension."
            )),
            type: 'object',
            properties: {
                virtualWorkspaces: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        61,
                        "Declares whether the extension should be enabled in virtual workspaces. A virtual workspace is a workspace which is not backed by any on-disk resources. When false, this extension will be automatically disabled in virtual workspaces. Default is true."
                    )),
                    type: ['boolean', 'object'],
                    defaultSnippets: [
                        { label: 'limited', body: { supported: '${1:limited}', description: '${2}' } },
                        { label: 'false', body: { supported: false, description: '${2}' } },
                    ],
                    default: true.valueOf,
                    properties: {
                        supported: {
                            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                _moduleId,
                                62,
                                "Declares the level of support for virtual workspaces by the extension."
                            )),
                            type: ['string', 'boolean'],
                            enum: ['limited', true, false],
                            enumDescriptions: [
                                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                    _moduleId,
                                    63,
                                    "The extension will be enabled in virtual workspaces with some functionality disabled."
                                )),
                                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                    _moduleId,
                                    64,
                                    "The extension will be enabled in virtual workspaces with all functionality enabled."
                                )),
                                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 65, "The extension will not be enabled in virtual workspaces.")),
                            ]
                        },
                        description: {
                            type: 'string',
                            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                _moduleId,
                                66,
                                "A description of how virtual workspaces affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."
                            )),
                        }
                    }
                },
                untrustedWorkspaces: {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        67,
                        'Declares how the extension should be handled in untrusted workspaces.'
                    )),
                    type: 'object',
                    required: ['supported'],
                    defaultSnippets: [
                        { body: { supported: '${1:limited}', description: '${2}' } },
                    ],
                    properties: {
                        supported: {
                            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                _moduleId,
                                68,
                                "Declares the level of support for untrusted workspaces by the extension."
                            )),
                            type: ['string', 'boolean'],
                            enum: ['limited', true, false],
                            enumDescriptions: [
                                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                    _moduleId,
                                    69,
                                    "The extension will be enabled in untrusted workspaces with some functionality disabled."
                                )),
                                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                    _moduleId,
                                    70,
                                    "The extension will be enabled in untrusted workspaces with all functionality enabled."
                                )),
                                ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                    _moduleId,
                                    71,
                                    "The extension will not be enabled in untrusted workspaces."
                                )),
                            ]
                        },
                        restrictedConfigurations: {
                            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                _moduleId,
                                72,
                                "A list of configuration keys contributed by the extension that should not use workspace values in untrusted workspaces."
                            )),
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        description: {
                            type: 'string',
                            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                                _moduleId,
                                73,
                                "A description of how workspace trust affects the extensions behavior and why it is needed. This only applies when `supported` is not `true`."
                            )),
                        }
                    }
                }
            }
        },
        sponsor: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                74,
                "Specify the location from where users can sponsor your extension."
            )),
            type: 'object',
            defaultSnippets: [
                { body: { url: '${1:https:}' } },
            ],
            properties: {
                'url': {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        75,
                        "URL from where users can sponsor your extension. It must be a valid URL with a HTTP or HTTPS protocol. Example value: https://github.com/sponsors/nvaccess"
                    )),
                    type: 'string',
                }
            }
        },
        scripts: {
            type: 'object',
            properties: {
                'vscode:prepublish': {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        76,
                        'Script executed before the package is published as a VS Code extension.'
                    )),
                    type: 'string'
                },
                'vscode:uninstall': {
                    description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                        _moduleId,
                        77,
                        'Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.'
                    )),
                    type: 'string'
                }
            }
        },
        icon: {
            type: 'string',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(_moduleId, 78, 'The path to a 128x128 pixel icon.'))
        },
        l10n: {
            type: 'string',
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                79,
                'The relative path to a folder containing localization (bundle.l10n.*.json) files. Must be specified if you are using the vscode.l10n API.'
            ))
        },
        pricing: {
            type: 'string',
            markdownDescription: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                80,
                'The pricing information for the extension. Can be Free (default) or Trial. For more details visit: https://code.visualstudio.com/api/working-with-extensions/publishing-extension#extension-pricing-label'
            )),
            enum: ['Free', 'Trial'],
            default: 'Free'
        }
    }
};
class ExtensionsRegistryImpl {
    constructor() {
        this._extensionPoints = ( (new Map()));
    }
    registerExtensionPoint(desc) {
        if (( (this._extensionPoints.has(desc.extensionPoint)))) {
            throw ( (new Error('Duplicate extension point: ' + desc.extensionPoint)));
        }
        const result = ( (new ExtensionPoint(desc.extensionPoint, desc.defaultExtensionKind)));
        this._extensionPoints.set(desc.extensionPoint, result);
        if (desc.activationEventsGenerator) {
            _platform_extensionManagement_common_implicitActivationEvents_js__WEBPACK_IMPORTED_MODULE_8__.ImplicitActivationEvents.register(desc.extensionPoint, desc.activationEventsGenerator);
        }
        schema.properties['contributes'].properties[desc.extensionPoint] = desc.jsonSchema;
        schemaRegistry.registerSchema(schemaId, schema);
        return result;
    }
    getExtensionPoints() {
        return Array.from(( (this._extensionPoints.values())));
    }
}
const PRExtensions = {
    ExtensionsRegistry: 'ExtensionsRegistry'
};
_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_5__.Registry.add(PRExtensions.ExtensionsRegistry, ( (new ExtensionsRegistryImpl())));
const ExtensionsRegistry = ( (_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_5__.Registry.as(PRExtensions.ExtensionsRegistry)));
schemaRegistry.registerSchema(schemaId, schema);
schemaRegistry.registerSchema(_platform_product_common_productService_js__WEBPACK_IMPORTED_MODULE_7__.productSchemaId, {
    properties: {
        extensionEnabledApiProposals: {
            description: ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_0__.localizeWithPath)(
                _moduleId,
                81,
                "API proposals that the respective extensions can freely use."
            )),
            type: 'object',
            properties: {},
            additionalProperties: {
                anyOf: [{
                        type: 'array',
                        uniqueItems: true,
                        items: {
                            type: 'string',
                            enum: ( (Object.keys(_platform_extensions_common_extensionsApiProposals_js__WEBPACK_IMPORTED_MODULE_9__.allApiProposals))),
                            markdownEnumDescriptions: ( (( (Object.values(_platform_extensions_common_extensionsApiProposals_js__WEBPACK_IMPORTED_MODULE_9__.allApiProposals))).map(value => value.proposal)))
                        }
                    }]
            }
        }
    }
});



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/lazyPromise.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/lazyPromise.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CanceledLazyPromise: () => (/* binding */ CanceledLazyPromise),
/* harmony export */   LazyPromise: () => (/* binding */ LazyPromise)
/* harmony export */ });
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");

class LazyPromise {
    constructor() {
        this._actual = null;
        this._actualOk = null;
        this._actualErr = null;
        this._hasValue = false;
        this._value = null;
        this._hasErr = false;
        this._err = null;
    }
    get [Symbol.toStringTag]() {
        return ( this.toString());
    }
    _ensureActual() {
        if (!this._actual) {
            this._actual = ( new Promise((c, e) => {
                this._actualOk = c;
                this._actualErr = e;
                if (this._hasValue) {
                    this._actualOk(this._value);
                }
                if (this._hasErr) {
                    this._actualErr(this._err);
                }
            }));
        }
        return this._actual;
    }
    resolveOk(value) {
        if (this._hasValue || this._hasErr) {
            return;
        }
        this._hasValue = true;
        this._value = value;
        if (this._actual) {
            this._actualOk(value);
        }
    }
    resolveErr(err) {
        if (this._hasValue || this._hasErr) {
            return;
        }
        this._hasErr = true;
        this._err = err;
        if (this._actual) {
            this._actualErr(err);
        }
        else {
            (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.onUnexpectedError)(err);
        }
    }
    then(success, error) {
        return this._ensureActual().then(success, error);
    }
    catch(error) {
        return this._ensureActual().then(undefined, error);
    }
    finally(callback) {
        return this._ensureActual().finally(callback);
    }
}
class CanceledLazyPromise extends LazyPromise {
    constructor() {
        super();
        this._hasErr = true;
        this._err = ( new _base_common_errors_js__WEBPACK_IMPORTED_MODULE_0__.CancellationError());
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ProxyIdentifier: () => (/* binding */ ProxyIdentifier),
/* harmony export */   SerializableObjectWithBuffers: () => (/* binding */ SerializableObjectWithBuffers),
/* harmony export */   createProxyIdentifier: () => (/* binding */ createProxyIdentifier),
/* harmony export */   getStringIdentifierForProxy: () => (/* binding */ getStringIdentifierForProxy)
/* harmony export */ });
class ProxyIdentifier {
    static { this.count = 0; }
    constructor(sid) {
        this._proxyIdentifierBrand = undefined;
        this.sid = sid;
        this.nid = (++ProxyIdentifier.count);
    }
}
const identifiers = [];
function createProxyIdentifier(identifier) {
    const result = ( new ProxyIdentifier(identifier));
    identifiers[result.nid] = result;
    return result;
}
function getStringIdentifierForProxy(nid) {
    return identifiers[nid].sid;
}
class SerializableObjectWithBuffers {
    constructor(value) {
        this.value = value;
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/rpcProtocol.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/rpcProtocol.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   RPCProtocol: () => (/* binding */ RPCProtocol),
/* harmony export */   RequestInitiator: () => (/* binding */ RequestInitiator),
/* harmony export */   ResponsiveState: () => (/* binding */ ResponsiveState),
/* harmony export */   parseJsonAndRestoreBufferRefs: () => (/* binding */ parseJsonAndRestoreBufferRefs),
/* harmony export */   stringifyJsonWithBufferRefs: () => (/* binding */ stringifyJsonWithBufferRefs)
/* harmony export */ });
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/charCode.js */ "./node_modules/vscode/vscode/src/vs/base/common/charCode.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../base/common/lifecycle.js */ "./node_modules/vscode/vscode/src/vs/base/common/lifecycle.js");
/* harmony import */ var _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../base/common/marshallingIds.js */ "./node_modules/vscode/vscode/src/vs/base/common/marshallingIds.js");
/* harmony import */ var _base_common_uriIpc_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../base/common/uriIpc.js */ "./node_modules/vscode/vscode/src/vs/base/common/uriIpc.js");
/* harmony import */ var _lazyPromise_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lazyPromise.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/lazyPromise.js");
/* harmony import */ var _proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./proxyIdentifier.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/proxyIdentifier.js");











var _a;
function safeStringify(obj, replacer) {
    try {
        return JSON.stringify(obj, replacer);
    }
    catch (err) {
        return 'null';
    }
}
const refSymbolName = '$$ref$$';
const undefinedRef = { [refSymbolName]: -1 };
function stringifyJsonWithBufferRefs(obj, replacer = null, useSafeStringify = false) {
    const foundBuffers = [];
    const serialized = (useSafeStringify ? safeStringify : JSON.stringify)(obj, (key, value) => {
        if (typeof value === 'undefined') {
            return undefinedRef;
        }
        else if (typeof value === 'object') {
            if (value instanceof _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer) {
                const bufferIndex = foundBuffers.push(value) - 1;
                return { [refSymbolName]: bufferIndex };
            }
            if (replacer) {
                return replacer(key, value);
            }
        }
        return value;
    });
    return {
        jsonString: serialized,
        referencedBuffers: foundBuffers
    };
}
function parseJsonAndRestoreBufferRefs(jsonString, buffers, uriTransformer) {
    return JSON.parse(jsonString, (_key, value) => {
        if (value) {
            const ref = value[refSymbolName];
            if (typeof ref === 'number') {
                return buffers[ref];
            }
            if (uriTransformer && value.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_7__.MarshalledId.Uri) {
                return uriTransformer.transformIncoming(value);
            }
        }
        return value;
    });
}
function stringify(obj, replacer) {
    return JSON.stringify(obj, replacer);
}
function createURIReplacer(transformer) {
    if (!transformer) {
        return null;
    }
    return (key, value) => {
        if (value && value.$mid === _base_common_marshallingIds_js__WEBPACK_IMPORTED_MODULE_7__.MarshalledId.Uri) {
            return transformer.transformOutgoing(value);
        }
        return value;
    };
}
var RequestInitiator;
( (function(RequestInitiator) {
    RequestInitiator[RequestInitiator["LocalSide"] = 0] = "LocalSide";
    RequestInitiator[RequestInitiator["OtherSide"] = 1] = "OtherSide";
})(RequestInitiator || (RequestInitiator = {})));
var ResponsiveState;
( (function(ResponsiveState) {
    ResponsiveState[ResponsiveState["Responsive"] = 0] = "Responsive";
    ResponsiveState[ResponsiveState["Unresponsive"] = 1] = "Unresponsive";
})(ResponsiveState || (ResponsiveState = {})));
const noop = () => { };
const _RPCProtocolSymbol = Symbol.for('rpcProtocol');
const _RPCProxySymbol = Symbol.for('rpcProxy');
class RPCProtocol extends _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.Disposable {
    static { _a = _RPCProtocolSymbol; }
    static { this.UNRESPONSIVE_TIME = 3 * 1000; }
    constructor(protocol, logger = null, transformer = null) {
        super();
        this[_a] = true;
        this._onDidChangeResponsiveState = this._register(( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_5__.Emitter()));
        this.onDidChangeResponsiveState = this._onDidChangeResponsiveState.event;
        this._protocol = protocol;
        this._logger = logger;
        this._uriTransformer = transformer;
        this._uriReplacer = createURIReplacer(this._uriTransformer);
        this._isDisposed = false;
        this._locals = [];
        this._proxies = [];
        for (let i = 0, len = _proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.ProxyIdentifier.count; i < len; i++) {
            this._locals[i] = null;
            this._proxies[i] = null;
        }
        this._lastMessageId = 0;
        this._cancelInvokedHandlers = Object.create(null);
        this._pendingRPCReplies = {};
        this._responsiveState = ResponsiveState.Responsive;
        this._unacknowledgedCount = 0;
        this._unresponsiveTime = 0;
        this._asyncCheckUresponsive = this._register(( new _base_common_async_js__WEBPACK_IMPORTED_MODULE_0__.RunOnceScheduler(() => this._checkUnresponsive(), 1000)));
        this._register(this._protocol.onMessage((msg) => this._receiveOneMessage(msg)));
    }
    dispose() {
        this._isDisposed = true;
        ( Object.keys(this._pendingRPCReplies)).forEach((msgId) => {
            const pending = this._pendingRPCReplies[msgId];
            delete this._pendingRPCReplies[msgId];
            pending.resolveErr((0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__.canceled)());
        });
        super.dispose();
    }
    drain() {
        if (typeof this._protocol.drain === 'function') {
            return this._protocol.drain();
        }
        return Promise.resolve();
    }
    _onWillSendRequest(req) {
        if (this._unacknowledgedCount === 0) {
            this._unresponsiveTime = Date.now() + RPCProtocol.UNRESPONSIVE_TIME;
        }
        this._unacknowledgedCount++;
        if (!this._asyncCheckUresponsive.isScheduled()) {
            this._asyncCheckUresponsive.schedule();
        }
    }
    _onDidReceiveAcknowledge(req) {
        this._unresponsiveTime = Date.now() + RPCProtocol.UNRESPONSIVE_TIME;
        this._unacknowledgedCount--;
        if (this._unacknowledgedCount === 0) {
            this._asyncCheckUresponsive.cancel();
        }
        this._setResponsiveState(ResponsiveState.Responsive);
    }
    _checkUnresponsive() {
        if (this._unacknowledgedCount === 0) {
            return;
        }
        if (Date.now() > this._unresponsiveTime) {
            this._setResponsiveState(ResponsiveState.Unresponsive);
        }
        else {
            this._asyncCheckUresponsive.schedule();
        }
    }
    _setResponsiveState(newResponsiveState) {
        if (this._responsiveState === newResponsiveState) {
            return;
        }
        this._responsiveState = newResponsiveState;
        this._onDidChangeResponsiveState.fire(this._responsiveState);
    }
    get responsiveState() {
        return this._responsiveState;
    }
    transformIncomingURIs(obj) {
        if (!this._uriTransformer) {
            return obj;
        }
        return (0,_base_common_uriIpc_js__WEBPACK_IMPORTED_MODULE_8__.transformIncomingURIs)(obj, this._uriTransformer);
    }
    getProxy(identifier) {
        const { nid: rpcId, sid } = identifier;
        if (!this._proxies[rpcId]) {
            this._proxies[rpcId] = this._createProxy(rpcId, sid);
        }
        return this._proxies[rpcId];
    }
    _createProxy(rpcId, debugName) {
        const handler = {
            get: (target, name) => {
                if (typeof name === 'string' && !target[name] && name.charCodeAt(0) === _base_common_charCode_js__WEBPACK_IMPORTED_MODULE_3__.CharCode.DollarSign) {
                    target[name] = (...myArgs) => {
                        return this._remoteCall(rpcId, name, myArgs);
                    };
                }
                if (name === _RPCProxySymbol) {
                    return debugName;
                }
                return target[name];
            }
        };
        return ( new Proxy(Object.create(null), handler));
    }
    set(identifier, value) {
        this._locals[identifier.nid] = value;
        return value;
    }
    assertRegistered(identifiers) {
        for (let i = 0, len = identifiers.length; i < len; i++) {
            const identifier = identifiers[i];
            if (!this._locals[identifier.nid]) {
                throw ( new Error(`Missing proxy instance ${identifier.sid}`));
            }
        }
    }
    _receiveOneMessage(rawmsg) {
        if (this._isDisposed) {
            return;
        }
        const msgLength = rawmsg.byteLength;
        const buff = MessageBuffer.read(rawmsg, 0);
        const messageType = buff.readUInt8();
        const req = buff.readUInt32();
        switch (messageType) {
            case MessageType.RequestJSONArgs:
            case MessageType.RequestJSONArgsWithCancellation: {
                let { rpcId, method, args } = MessageIO.deserializeRequestJSONArgs(buff);
                if (this._uriTransformer) {
                    args = (0,_base_common_uriIpc_js__WEBPACK_IMPORTED_MODULE_8__.transformIncomingURIs)(args, this._uriTransformer);
                }
                this._receiveRequest(msgLength, req, rpcId, method, args, (messageType === MessageType.RequestJSONArgsWithCancellation));
                break;
            }
            case MessageType.RequestMixedArgs:
            case MessageType.RequestMixedArgsWithCancellation: {
                let { rpcId, method, args } = MessageIO.deserializeRequestMixedArgs(buff);
                if (this._uriTransformer) {
                    args = (0,_base_common_uriIpc_js__WEBPACK_IMPORTED_MODULE_8__.transformIncomingURIs)(args, this._uriTransformer);
                }
                this._receiveRequest(msgLength, req, rpcId, method, args, (messageType === MessageType.RequestMixedArgsWithCancellation));
                break;
            }
            case MessageType.Acknowledged: {
                this._logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, `ack`);
                this._onDidReceiveAcknowledge(req);
                break;
            }
            case MessageType.Cancel: {
                this._receiveCancel(msgLength, req);
                break;
            }
            case MessageType.ReplyOKEmpty: {
                this._receiveReply(msgLength, req, undefined);
                break;
            }
            case MessageType.ReplyOKJSON: {
                let value = MessageIO.deserializeReplyOKJSON(buff);
                if (this._uriTransformer) {
                    value = (0,_base_common_uriIpc_js__WEBPACK_IMPORTED_MODULE_8__.transformIncomingURIs)(value, this._uriTransformer);
                }
                this._receiveReply(msgLength, req, value);
                break;
            }
            case MessageType.ReplyOKJSONWithBuffers: {
                const value = MessageIO.deserializeReplyOKJSONWithBuffers(buff, this._uriTransformer);
                this._receiveReply(msgLength, req, value);
                break;
            }
            case MessageType.ReplyOKVSBuffer: {
                const value = MessageIO.deserializeReplyOKVSBuffer(buff);
                this._receiveReply(msgLength, req, value);
                break;
            }
            case MessageType.ReplyErrError: {
                let err = MessageIO.deserializeReplyErrError(buff);
                if (this._uriTransformer) {
                    err = (0,_base_common_uriIpc_js__WEBPACK_IMPORTED_MODULE_8__.transformIncomingURIs)(err, this._uriTransformer);
                }
                this._receiveReplyErr(msgLength, req, err);
                break;
            }
            case MessageType.ReplyErrEmpty: {
                this._receiveReplyErr(msgLength, req, undefined);
                break;
            }
            default:
                console.error(`received unexpected message`);
                console.error(rawmsg);
        }
    }
    _receiveRequest(msgLength, req, rpcId, method, args, usesCancellationToken) {
        this._logger?.logIncoming(msgLength, req, RequestInitiator.OtherSide, `receiveRequest ${(0,_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.getStringIdentifierForProxy)(rpcId)}.${method}(`, args);
        const callId = String(req);
        let promise;
        let cancel;
        if (usesCancellationToken) {
            const cancellationTokenSource = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationTokenSource());
            args.push(cancellationTokenSource.token);
            promise = this._invokeHandler(rpcId, method, args);
            cancel = () => cancellationTokenSource.cancel();
        }
        else {
            promise = this._invokeHandler(rpcId, method, args);
            cancel = noop;
        }
        this._cancelInvokedHandlers[callId] = cancel;
        const msg = MessageIO.serializeAcknowledged(req);
        this._logger?.logOutgoing(msg.byteLength, req, RequestInitiator.OtherSide, `ack`);
        this._protocol.send(msg);
        promise.then((r) => {
            delete this._cancelInvokedHandlers[callId];
            const msg = MessageIO.serializeReplyOK(req, r, this._uriReplacer);
            this._logger?.logOutgoing(msg.byteLength, req, RequestInitiator.OtherSide, `reply:`, r);
            this._protocol.send(msg);
        }, (err) => {
            delete this._cancelInvokedHandlers[callId];
            const msg = MessageIO.serializeReplyErr(req, err);
            this._logger?.logOutgoing(msg.byteLength, req, RequestInitiator.OtherSide, `replyErr:`, err);
            this._protocol.send(msg);
        });
    }
    _receiveCancel(msgLength, req) {
        this._logger?.logIncoming(msgLength, req, RequestInitiator.OtherSide, `receiveCancel`);
        const callId = String(req);
        this._cancelInvokedHandlers[callId]?.();
    }
    _receiveReply(msgLength, req, value) {
        this._logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, `receiveReply:`, value);
        const callId = String(req);
        if (!this._pendingRPCReplies.hasOwnProperty(callId)) {
            return;
        }
        const pendingReply = this._pendingRPCReplies[callId];
        delete this._pendingRPCReplies[callId];
        pendingReply.resolveOk(value);
    }
    _receiveReplyErr(msgLength, req, value) {
        this._logger?.logIncoming(msgLength, req, RequestInitiator.LocalSide, `receiveReplyErr:`, value);
        const callId = String(req);
        if (!this._pendingRPCReplies.hasOwnProperty(callId)) {
            return;
        }
        const pendingReply = this._pendingRPCReplies[callId];
        delete this._pendingRPCReplies[callId];
        let err = undefined;
        if (value) {
            if (value.$isError) {
                err = ( new Error());
                err.name = value.name;
                err.message = value.message;
                err.stack = value.stack;
            }
            else {
                err = value;
            }
        }
        pendingReply.resolveErr(err);
    }
    _invokeHandler(rpcId, methodName, args) {
        try {
            return Promise.resolve(this._doInvokeHandler(rpcId, methodName, args));
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    _doInvokeHandler(rpcId, methodName, args) {
        const actor = this._locals[rpcId];
        if (!actor) {
            throw ( new Error('Unknown actor ' + (0,_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.getStringIdentifierForProxy)(rpcId)));
        }
        const method = actor[methodName];
        if (typeof method !== 'function') {
            throw ( new Error(
                'Unknown method ' + methodName + ' on actor ' + (0,_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.getStringIdentifierForProxy)(rpcId)
            ));
        }
        return method.apply(actor, args);
    }
    _remoteCall(rpcId, methodName, args) {
        if (this._isDisposed) {
            return ( new _lazyPromise_js__WEBPACK_IMPORTED_MODULE_9__.CanceledLazyPromise());
        }
        let cancellationToken = null;
        if (args.length > 0 && _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.isCancellationToken(args[args.length - 1])) {
            cancellationToken = args.pop();
        }
        if (cancellationToken && cancellationToken.isCancellationRequested) {
            return Promise.reject((0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__.canceled)());
        }
        const serializedRequestArguments = MessageIO.serializeRequestArguments(args, this._uriReplacer);
        const req = ++this._lastMessageId;
        const callId = String(req);
        const result = ( new _lazyPromise_js__WEBPACK_IMPORTED_MODULE_9__.LazyPromise());
        const disposable = ( new _base_common_lifecycle_js__WEBPACK_IMPORTED_MODULE_6__.DisposableStore());
        if (cancellationToken) {
            disposable.add(cancellationToken.onCancellationRequested(() => {
                const msg = MessageIO.serializeCancel(req);
                this._logger?.logOutgoing(msg.byteLength, req, RequestInitiator.LocalSide, `cancel`);
                this._protocol.send(MessageIO.serializeCancel(req));
            }));
        }
        this._pendingRPCReplies[callId] = ( new PendingRPCReply(result, disposable));
        this._onWillSendRequest(req);
        const msg = MessageIO.serializeRequest(req, rpcId, methodName, serializedRequestArguments, !!cancellationToken);
        this._logger?.logOutgoing(msg.byteLength, req, RequestInitiator.LocalSide, `request: ${(0,_proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.getStringIdentifierForProxy)(rpcId)}.${methodName}(`, args);
        this._protocol.send(msg);
        return result;
    }
}
class PendingRPCReply {
    constructor(_promise, _disposable) {
        this._promise = _promise;
        this._disposable = _disposable;
    }
    resolveOk(value) {
        this._promise.resolveOk(value);
        this._disposable.dispose();
    }
    resolveErr(err) {
        this._promise.resolveErr(err);
        this._disposable.dispose();
    }
}
class MessageBuffer {
    static alloc(type, req, messageSize) {
        const result = ( new MessageBuffer(_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.alloc(messageSize + 1  + 4 ), 0));
        result.writeUInt8(type);
        result.writeUInt32(req);
        return result;
    }
    static read(buff, offset) {
        return ( new MessageBuffer(buff, offset));
    }
    get buffer() {
        return this._buff;
    }
    constructor(buff, offset) {
        this._buff = buff;
        this._offset = offset;
    }
    static sizeUInt8() {
        return 1;
    }
    static { this.sizeUInt32 = 4; }
    writeUInt8(n) {
        this._buff.writeUInt8(n, this._offset);
        this._offset += 1;
    }
    readUInt8() {
        const n = this._buff.readUInt8(this._offset);
        this._offset += 1;
        return n;
    }
    writeUInt32(n) {
        this._buff.writeUInt32BE(n, this._offset);
        this._offset += 4;
    }
    readUInt32() {
        const n = this._buff.readUInt32BE(this._offset);
        this._offset += 4;
        return n;
    }
    static sizeShortString(str) {
        return 1  + str.byteLength ;
    }
    writeShortString(str) {
        this._buff.writeUInt8(str.byteLength, this._offset);
        this._offset += 1;
        this._buff.set(str, this._offset);
        this._offset += str.byteLength;
    }
    readShortString() {
        const strByteLength = this._buff.readUInt8(this._offset);
        this._offset += 1;
        const strBuff = this._buff.slice(this._offset, this._offset + strByteLength);
        const str = ( strBuff.toString());
        this._offset += strByteLength;
        return str;
    }
    static sizeLongString(str) {
        return 4  + str.byteLength ;
    }
    writeLongString(str) {
        this._buff.writeUInt32BE(str.byteLength, this._offset);
        this._offset += 4;
        this._buff.set(str, this._offset);
        this._offset += str.byteLength;
    }
    readLongString() {
        const strByteLength = this._buff.readUInt32BE(this._offset);
        this._offset += 4;
        const strBuff = this._buff.slice(this._offset, this._offset + strByteLength);
        const str = ( strBuff.toString());
        this._offset += strByteLength;
        return str;
    }
    writeBuffer(buff) {
        this._buff.writeUInt32BE(buff.byteLength, this._offset);
        this._offset += 4;
        this._buff.set(buff, this._offset);
        this._offset += buff.byteLength;
    }
    static sizeVSBuffer(buff) {
        return 4  + buff.byteLength ;
    }
    writeVSBuffer(buff) {
        this._buff.writeUInt32BE(buff.byteLength, this._offset);
        this._offset += 4;
        this._buff.set(buff, this._offset);
        this._offset += buff.byteLength;
    }
    readVSBuffer() {
        const buffLength = this._buff.readUInt32BE(this._offset);
        this._offset += 4;
        const buff = this._buff.slice(this._offset, this._offset + buffLength);
        this._offset += buffLength;
        return buff;
    }
    static sizeMixedArray(arr) {
        let size = 0;
        size += 1;
        for (let i = 0, len = arr.length; i < len; i++) {
            const el = arr[i];
            size += 1;
            switch (el.type) {
                case ArgType.String:
                    size += this.sizeLongString(el.value);
                    break;
                case ArgType.VSBuffer:
                    size += this.sizeVSBuffer(el.value);
                    break;
                case ArgType.SerializedObjectWithBuffers:
                    size += this.sizeUInt32;
                    size += this.sizeLongString(el.value);
                    for (let i = 0; i < el.buffers.length; ++i) {
                        size += this.sizeVSBuffer(el.buffers[i]);
                    }
                    break;
            }
        }
        return size;
    }
    writeMixedArray(arr) {
        this._buff.writeUInt8(arr.length, this._offset);
        this._offset += 1;
        for (let i = 0, len = arr.length; i < len; i++) {
            const el = arr[i];
            switch (el.type) {
                case ArgType.String:
                    this.writeUInt8(ArgType.String);
                    this.writeLongString(el.value);
                    break;
                case ArgType.VSBuffer:
                    this.writeUInt8(ArgType.VSBuffer);
                    this.writeVSBuffer(el.value);
                    break;
                case ArgType.SerializedObjectWithBuffers:
                    this.writeUInt8(ArgType.SerializedObjectWithBuffers);
                    this.writeUInt32(el.buffers.length);
                    this.writeLongString(el.value);
                    for (let i = 0; i < el.buffers.length; ++i) {
                        this.writeBuffer(el.buffers[i]);
                    }
                    break;
                case ArgType.Undefined:
                    this.writeUInt8(ArgType.Undefined);
                    break;
            }
        }
    }
    readMixedArray() {
        const arrLen = this._buff.readUInt8(this._offset);
        this._offset += 1;
        const arr = ( new Array(arrLen));
        for (let i = 0; i < arrLen; i++) {
            const argType = this.readUInt8();
            switch (argType) {
                case ArgType.String:
                    arr[i] = this.readLongString();
                    break;
                case ArgType.VSBuffer:
                    arr[i] = this.readVSBuffer();
                    break;
                case ArgType.SerializedObjectWithBuffers: {
                    const bufferCount = this.readUInt32();
                    const jsonString = this.readLongString();
                    const buffers = [];
                    for (let i = 0; i < bufferCount; ++i) {
                        buffers.push(this.readVSBuffer());
                    }
                    arr[i] = ( new _proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.SerializableObjectWithBuffers(parseJsonAndRestoreBufferRefs(jsonString, buffers, null)));
                    break;
                }
                case ArgType.Undefined:
                    arr[i] = undefined;
                    break;
            }
        }
        return arr;
    }
}
var SerializedRequestArgumentType;
( (function(SerializedRequestArgumentType) {
    SerializedRequestArgumentType[SerializedRequestArgumentType["Simple"] = 0] = "Simple";
    SerializedRequestArgumentType[SerializedRequestArgumentType["Mixed"] = 1] = "Mixed";
})(SerializedRequestArgumentType || (SerializedRequestArgumentType = {})));
class MessageIO {
    static _useMixedArgSerialization(arr) {
        for (let i = 0, len = arr.length; i < len; i++) {
            if (arr[i] instanceof _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer) {
                return true;
            }
            if (arr[i] instanceof _proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.SerializableObjectWithBuffers) {
                return true;
            }
            if (typeof arr[i] === 'undefined') {
                return true;
            }
        }
        return false;
    }
    static serializeRequestArguments(args, replacer) {
        if (this._useMixedArgSerialization(args)) {
            const massagedArgs = [];
            for (let i = 0, len = args.length; i < len; i++) {
                const arg = args[i];
                if (arg instanceof _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer) {
                    massagedArgs[i] = { type: ArgType.VSBuffer, value: arg };
                }
                else if (typeof arg === 'undefined') {
                    massagedArgs[i] = { type: ArgType.Undefined };
                }
                else if (arg instanceof _proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.SerializableObjectWithBuffers) {
                    const { jsonString, referencedBuffers } = stringifyJsonWithBufferRefs(arg.value, replacer);
                    massagedArgs[i] = { type: ArgType.SerializedObjectWithBuffers, value: _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(jsonString), buffers: referencedBuffers };
                }
                else {
                    massagedArgs[i] = { type: ArgType.String, value: _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(stringify(arg, replacer)) };
                }
            }
            return {
                type: SerializedRequestArgumentType.Mixed,
                args: massagedArgs,
            };
        }
        return {
            type: SerializedRequestArgumentType.Simple,
            args: stringify(args, replacer)
        };
    }
    static serializeRequest(req, rpcId, method, serializedArgs, usesCancellationToken) {
        switch (serializedArgs.type) {
            case SerializedRequestArgumentType.Simple:
                return this._requestJSONArgs(req, rpcId, method, serializedArgs.args, usesCancellationToken);
            case SerializedRequestArgumentType.Mixed:
                return this._requestMixedArgs(req, rpcId, method, serializedArgs.args, usesCancellationToken);
        }
    }
    static _requestJSONArgs(req, rpcId, method, args, usesCancellationToken) {
        const methodBuff = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(method);
        const argsBuff = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(args);
        let len = 0;
        len += MessageBuffer.sizeUInt8();
        len += MessageBuffer.sizeShortString(methodBuff);
        len += MessageBuffer.sizeLongString(argsBuff);
        const result = MessageBuffer.alloc(usesCancellationToken ? MessageType.RequestJSONArgsWithCancellation : MessageType.RequestJSONArgs, req, len);
        result.writeUInt8(rpcId);
        result.writeShortString(methodBuff);
        result.writeLongString(argsBuff);
        return result.buffer;
    }
    static deserializeRequestJSONArgs(buff) {
        const rpcId = buff.readUInt8();
        const method = buff.readShortString();
        const args = buff.readLongString();
        return {
            rpcId: rpcId,
            method: method,
            args: JSON.parse(args)
        };
    }
    static _requestMixedArgs(req, rpcId, method, args, usesCancellationToken) {
        const methodBuff = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(method);
        let len = 0;
        len += MessageBuffer.sizeUInt8();
        len += MessageBuffer.sizeShortString(methodBuff);
        len += MessageBuffer.sizeMixedArray(args);
        const result = MessageBuffer.alloc(usesCancellationToken ? MessageType.RequestMixedArgsWithCancellation : MessageType.RequestMixedArgs, req, len);
        result.writeUInt8(rpcId);
        result.writeShortString(methodBuff);
        result.writeMixedArray(args);
        return result.buffer;
    }
    static deserializeRequestMixedArgs(buff) {
        const rpcId = buff.readUInt8();
        const method = buff.readShortString();
        const rawargs = buff.readMixedArray();
        const args = ( new Array(rawargs.length));
        for (let i = 0, len = rawargs.length; i < len; i++) {
            const rawarg = rawargs[i];
            if (typeof rawarg === 'string') {
                args[i] = JSON.parse(rawarg);
            }
            else {
                args[i] = rawarg;
            }
        }
        return {
            rpcId: rpcId,
            method: method,
            args: args
        };
    }
    static serializeAcknowledged(req) {
        return MessageBuffer.alloc(MessageType.Acknowledged, req, 0).buffer;
    }
    static serializeCancel(req) {
        return MessageBuffer.alloc(MessageType.Cancel, req, 0).buffer;
    }
    static serializeReplyOK(req, res, replacer) {
        if (typeof res === 'undefined') {
            return this._serializeReplyOKEmpty(req);
        }
        else if (res instanceof _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer) {
            return this._serializeReplyOKVSBuffer(req, res);
        }
        else if (res instanceof _proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.SerializableObjectWithBuffers) {
            const { jsonString, referencedBuffers } = stringifyJsonWithBufferRefs(res.value, replacer, true);
            return this._serializeReplyOKJSONWithBuffers(req, jsonString, referencedBuffers);
        }
        else {
            return this._serializeReplyOKJSON(req, safeStringify(res, replacer));
        }
    }
    static _serializeReplyOKEmpty(req) {
        return MessageBuffer.alloc(MessageType.ReplyOKEmpty, req, 0).buffer;
    }
    static _serializeReplyOKVSBuffer(req, res) {
        let len = 0;
        len += MessageBuffer.sizeVSBuffer(res);
        const result = MessageBuffer.alloc(MessageType.ReplyOKVSBuffer, req, len);
        result.writeVSBuffer(res);
        return result.buffer;
    }
    static deserializeReplyOKVSBuffer(buff) {
        return buff.readVSBuffer();
    }
    static _serializeReplyOKJSON(req, res) {
        const resBuff = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(res);
        let len = 0;
        len += MessageBuffer.sizeLongString(resBuff);
        const result = MessageBuffer.alloc(MessageType.ReplyOKJSON, req, len);
        result.writeLongString(resBuff);
        return result.buffer;
    }
    static _serializeReplyOKJSONWithBuffers(req, res, buffers) {
        const resBuff = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(res);
        let len = 0;
        len += MessageBuffer.sizeUInt32;
        len += MessageBuffer.sizeLongString(resBuff);
        for (const buffer of buffers) {
            len += MessageBuffer.sizeVSBuffer(buffer);
        }
        const result = MessageBuffer.alloc(MessageType.ReplyOKJSONWithBuffers, req, len);
        result.writeUInt32(buffers.length);
        result.writeLongString(resBuff);
        for (const buffer of buffers) {
            result.writeBuffer(buffer);
        }
        return result.buffer;
    }
    static deserializeReplyOKJSON(buff) {
        const res = buff.readLongString();
        return JSON.parse(res);
    }
    static deserializeReplyOKJSONWithBuffers(buff, uriTransformer) {
        const bufferCount = buff.readUInt32();
        const res = buff.readLongString();
        const buffers = [];
        for (let i = 0; i < bufferCount; ++i) {
            buffers.push(buff.readVSBuffer());
        }
        return ( new _proxyIdentifier_js__WEBPACK_IMPORTED_MODULE_10__.SerializableObjectWithBuffers(parseJsonAndRestoreBufferRefs(res, buffers, uriTransformer)));
    }
    static serializeReplyErr(req, err) {
        const errStr = (err ? safeStringify((0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_4__.transformErrorForSerialization)(err), null) : undefined);
        if (typeof errStr !== 'string') {
            return this._serializeReplyErrEmpty(req);
        }
        const errBuff = _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_1__.VSBuffer.fromString(errStr);
        let len = 0;
        len += MessageBuffer.sizeLongString(errBuff);
        const result = MessageBuffer.alloc(MessageType.ReplyErrError, req, len);
        result.writeLongString(errBuff);
        return result.buffer;
    }
    static deserializeReplyErrError(buff) {
        const err = buff.readLongString();
        return JSON.parse(err);
    }
    static _serializeReplyErrEmpty(req) {
        return MessageBuffer.alloc(MessageType.ReplyErrEmpty, req, 0).buffer;
    }
}
var MessageType;
( (function(MessageType) {
    MessageType[MessageType["RequestJSONArgs"] = 1] = "RequestJSONArgs";
    MessageType[MessageType["RequestJSONArgsWithCancellation"] = 2] = "RequestJSONArgsWithCancellation";
    MessageType[MessageType["RequestMixedArgs"] = 3] = "RequestMixedArgs";
    MessageType[MessageType["RequestMixedArgsWithCancellation"] = 4] = "RequestMixedArgsWithCancellation";
    MessageType[MessageType["Acknowledged"] = 5] = "Acknowledged";
    MessageType[MessageType["Cancel"] = 6] = "Cancel";
    MessageType[MessageType["ReplyOKEmpty"] = 7] = "ReplyOKEmpty";
    MessageType[MessageType["ReplyOKVSBuffer"] = 8] = "ReplyOKVSBuffer";
    MessageType[MessageType["ReplyOKJSON"] = 9] = "ReplyOKJSON";
    MessageType[MessageType["ReplyOKJSONWithBuffers"] = 10] = "ReplyOKJSONWithBuffers";
    MessageType[MessageType["ReplyErrError"] = 11] = "ReplyErrError";
    MessageType[MessageType["ReplyErrEmpty"] = 12] = "ReplyErrEmpty";
})(MessageType || (MessageType = {})));
var ArgType;
( (function(ArgType) {
    ArgType[ArgType["String"] = 1] = "String";
    ArgType[ArgType["VSBuffer"] = 2] = "VSBuffer";
    ArgType[ArgType["SerializedObjectWithBuffers"] = 3] = "SerializedObjectWithBuffers";
    ArgType[ArgType["Undefined"] = 4] = "Undefined";
})(ArgType || (ArgType = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/workspaceContains.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/common/workspaceContains.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkActivateWorkspaceContainsExtension: () => (/* binding */ checkActivateWorkspaceContainsExtension),
/* harmony export */   checkGlobFileExists: () => (/* binding */ checkGlobFileExists)
/* harmony export */ });
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");
/* harmony import */ var _search_common_queryBuilder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../search/common/queryBuilder.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/queryBuilder.js");
/* harmony import */ var _search_common_search_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../search/common/search.service.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.service.js");
/* harmony import */ var _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../platform/workspace/common/workspace.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");









const WORKSPACE_CONTAINS_TIMEOUT = 7000;
function checkActivateWorkspaceContainsExtension(host, desc) {
    const activationEvents = desc.activationEvents;
    if (!activationEvents) {
        return Promise.resolve(undefined);
    }
    const fileNames = [];
    const globPatterns = [];
    for (const activationEvent of activationEvents) {
        if (/^workspaceContains:/.test(activationEvent)) {
            const fileNameOrGlob = activationEvent.substr('workspaceContains:'.length);
            if (fileNameOrGlob.indexOf('*') >= 0 || fileNameOrGlob.indexOf('?') >= 0 || host.forceUsingSearch) {
                globPatterns.push(fileNameOrGlob);
            }
            else {
                fileNames.push(fileNameOrGlob);
            }
        }
    }
    if (fileNames.length === 0 && globPatterns.length === 0) {
        return Promise.resolve(undefined);
    }
    const { promise, resolve } = (0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_8__.promiseWithResolvers)();
    const activate = (activationEvent) => resolve({ activationEvent });
    const fileNamePromise = Promise.all(( fileNames.map((fileName) => _activateIfFileName(host, fileName, activate)))).then(() => { });
    const globPatternPromise = _activateIfGlobPatterns(host, desc.identifier, globPatterns, activate);
    Promise.all([fileNamePromise, globPatternPromise]).then(() => {
        resolve(undefined);
    });
    return promise;
}
async function _activateIfFileName(host, fileName, activate) {
    for (const uri of host.folders) {
        if (await host.exists((0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_0__.joinPath)(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(uri), fileName))) {
            activate(`workspaceContains:${fileName}`);
            return;
        }
    }
}
async function _activateIfGlobPatterns(host, extensionId, globPatterns, activate) {
    if (globPatterns.length === 0) {
        return Promise.resolve(undefined);
    }
    const tokenSource = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationTokenSource());
    const searchP = host.checkExists(host.folders, globPatterns, tokenSource.token);
    const timer = setTimeout(async () => {
        tokenSource.cancel();
        host.logService.info(`Not activating extension '${extensionId.value}': Timed out while searching for 'workspaceContains' pattern ${globPatterns.join(',')}`);
    }, WORKSPACE_CONTAINS_TIMEOUT);
    let exists = false;
    try {
        exists = await searchP;
    }
    catch (err) {
        if (!(0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__.isCancellationError)(err)) {
            (0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__.onUnexpectedError)(err);
        }
    }
    tokenSource.dispose();
    clearTimeout(timer);
    if (exists) {
        activate(`workspaceContains:${globPatterns.join(',')}`);
    }
}
function checkGlobFileExists(accessor, folders, includes, token) {
    const instantiationService = accessor.get(_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__.IInstantiationService);
    const searchService = accessor.get(_search_common_search_service_js__WEBPACK_IMPORTED_MODULE_6__.ISearchService);
    const queryBuilder = instantiationService.createInstance(_search_common_queryBuilder_js__WEBPACK_IMPORTED_MODULE_5__.QueryBuilder);
    const query = queryBuilder.file(( folders.map(folder => (0,_platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_7__.toWorkspaceFolder)(_base_common_uri_js__WEBPACK_IMPORTED_MODULE_1__.URI.revive(folder)))), {
        _reason: 'checkExists',
        includePattern: includes,
        exists: true
    });
    return searchService.fileSearch(query, token).then(result => {
        return !!result.limitHit;
    }, err => {
        if (!(0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_3__.isCancellationError)(err)) {
            return Promise.reject(err);
        }
        return false;
    });
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/extensions/worker/polyfillNestedWorker.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/extensions/worker/polyfillNestedWorker.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NestedWorker: () => (/* binding */ NestedWorker)
/* harmony export */ });
const _bootstrapFnSource = ( (function _bootstrapFn(workerUrl) {
    const listener = (event) => {
        globalThis.removeEventListener('message', listener);
        const port = event.data;
        Object.defineProperties(globalThis, {
            'postMessage': {
                value(data, transferOrOptions) {
                    port.postMessage(data, transferOrOptions);
                }
            },
            'onmessage': {
                get() {
                    return port.onmessage;
                },
                set(value) {
                    port.onmessage = value;
                }
            }
        });
        port.addEventListener('message', msg => {
            globalThis.dispatchEvent(( new MessageEvent(
                'message',
                { data: msg.data, ports: msg.ports ? [...msg.ports] : undefined }
            )));
        });
        port.start();
        globalThis.Worker = class {
            constructor() { throw ( new TypeError('Nested workers from within nested worker are NOT supported.')); }
        };
        importScripts(workerUrl);
    };
    globalThis.addEventListener('message', listener);
}).toString());
class NestedWorker extends EventTarget {
    constructor(nativePostMessage, stringOrUrl, options) {
        super();
        this.onmessage = null;
        this.onmessageerror = null;
        this.onerror = null;
        const bootstrap = `((${_bootstrapFnSource})('${stringOrUrl}'))`;
        const blob = ( new Blob([bootstrap], { type: 'application/javascript' }));
        const blobUrl = URL.createObjectURL(blob);
        const channel = ( new MessageChannel());
        const id = blobUrl;
        const msg = {
            type: '_newWorker',
            id,
            port: channel.port2,
            url: blobUrl,
            options,
        };
        nativePostMessage(msg, [channel.port2]);
        this.postMessage = channel.port1.postMessage.bind(channel.port1);
        this.terminate = () => {
            const msg = {
                type: '_terminateWorker',
                id
            };
            nativePostMessage(msg);
            URL.revokeObjectURL(blobUrl);
            channel.port1.close();
            channel.port2.close();
        };
        Object.defineProperties(this, {
            'onmessage': {
                get() {
                    return channel.port1.onmessage;
                },
                set(value) {
                    channel.port1.onmessage = value;
                }
            },
            'onmessageerror': {
                get() {
                    return channel.port1.onmessageerror;
                },
                set(value) {
                    channel.port1.onmessageerror = value;
                }
            },
        });
        channel.port1.addEventListener('messageerror', evt => {
            const msgEvent = ( new MessageEvent('messageerror', { data: evt.data }));
            this.dispatchEvent(msgEvent);
        });
        channel.port1.addEventListener('message', evt => {
            const msgEvent = ( new MessageEvent('message', { data: evt.data }));
            this.dispatchEvent(msgEvent);
        });
        channel.port1.start();
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/notebook/common/notebookDocumentService.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/notebook/common/notebookDocumentService.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NotebookDocumentWorkbenchService: () => (/* binding */ NotebookDocumentWorkbenchService),
/* harmony export */   generate: () => (/* binding */ generate),
/* harmony export */   parse: () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/buffer.js */ "./node_modules/vscode/vscode/src/vs/base/common/buffer.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _platform_instantiation_common_extensions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../platform/instantiation/common/extensions.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/extensions.js");
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");





const _lengths = ['W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f'];
const _padRegexp = ( new RegExp(`^[${_lengths.join('')}]+`));
const _radix = 7;
function parse(cell) {
    if (cell.scheme !== _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.vscodeNotebookCell) {
        return undefined;
    }
    const idx = cell.fragment.indexOf('s');
    if (idx < 0) {
        return undefined;
    }
    const handle = parseInt(cell.fragment.substring(0, idx).replace(_padRegexp, ''), _radix);
    const _scheme = ( (0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.decodeBase64)(cell.fragment.substring(idx + 1)).toString());
    if (isNaN(handle)) {
        return undefined;
    }
    return {
        handle,
        notebook: cell.with({ scheme: _scheme, fragment: null })
    };
}
function generate(notebook, handle) {
    const s = ( handle.toString(_radix));
    const p = s.length < _lengths.length ? _lengths[s.length - 1] : 'z';
    const fragment = `${p}${s}s${(0,_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.encodeBase64)(_base_common_buffer_js__WEBPACK_IMPORTED_MODULE_0__.VSBuffer.fromString(notebook.scheme), true, true)}`;
    return notebook.with({ scheme: _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.vscodeNotebookCell, fragment });
}
class NotebookDocumentWorkbenchService {
    constructor() {
        this._documents = ( new _base_common_map_js__WEBPACK_IMPORTED_MODULE_1__.ResourceMap());
    }
    getNotebook(uri) {
        if (uri.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_2__.Schemas.vscodeNotebookCell) {
            const cellUri = parse(uri);
            if (cellUri) {
                const document = this._documents.get(cellUri.notebook);
                if (document) {
                    return document;
                }
            }
        }
        return this._documents.get(uri);
    }
    addNotebookDocument(document) {
        this._documents.set(document.uri, document);
    }
    removeNotebookDocument(document) {
        this._documents.delete(document.uri);
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/output/common/output.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/output/common/output.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ACTIVE_OUTPUT_CHANNEL_CONTEXT: () => (/* binding */ ACTIVE_OUTPUT_CHANNEL_CONTEXT),
/* harmony export */   CONTEXT_ACTIVE_FILE_OUTPUT: () => (/* binding */ CONTEXT_ACTIVE_FILE_OUTPUT),
/* harmony export */   CONTEXT_ACTIVE_OUTPUT_LEVEL: () => (/* binding */ CONTEXT_ACTIVE_OUTPUT_LEVEL),
/* harmony export */   CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT: () => (/* binding */ CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT),
/* harmony export */   CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE: () => (/* binding */ CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE),
/* harmony export */   CONTEXT_IN_OUTPUT: () => (/* binding */ CONTEXT_IN_OUTPUT),
/* harmony export */   CONTEXT_OUTPUT_SCROLL_LOCK: () => (/* binding */ CONTEXT_OUTPUT_SCROLL_LOCK),
/* harmony export */   Extensions: () => (/* binding */ Extensions),
/* harmony export */   LOG_MIME: () => (/* binding */ LOG_MIME),
/* harmony export */   LOG_MODE_ID: () => (/* binding */ LOG_MODE_ID),
/* harmony export */   OUTPUT_MIME: () => (/* binding */ OUTPUT_MIME),
/* harmony export */   OUTPUT_MODE_ID: () => (/* binding */ OUTPUT_MODE_ID),
/* harmony export */   OUTPUT_SCHEME: () => (/* binding */ OUTPUT_SCHEME),
/* harmony export */   OUTPUT_VIEW_ID: () => (/* binding */ OUTPUT_VIEW_ID),
/* harmony export */   OutputChannelUpdateMode: () => (/* binding */ OutputChannelUpdateMode)
/* harmony export */ });
/* harmony import */ var _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/event.js */ "./node_modules/vscode/vscode/src/vs/base/common/event.js");
/* harmony import */ var _platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../platform/registry/common/platform.js */ "./node_modules/vscode/vscode/src/vs/platform/registry/common/platform.js");
/* harmony import */ var _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../platform/contextkey/common/contextkey.js */ "./node_modules/vscode/vscode/src/vs/platform/contextkey/common/contextkey.js");



const OUTPUT_MIME = 'text/x-code-output';
const OUTPUT_SCHEME = 'output';
const OUTPUT_MODE_ID = 'Log';
const LOG_MIME = 'text/x-code-log-output';
const LOG_MODE_ID = 'log';
const OUTPUT_VIEW_ID = 'workbench.panel.output';
const CONTEXT_IN_OUTPUT = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('inOutput', false));
const CONTEXT_ACTIVE_FILE_OUTPUT = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('activeLogOutput', false));
const CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('activeLogOutput.levelSettable', false));
const CONTEXT_ACTIVE_OUTPUT_LEVEL = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('activeLogOutput.level', ''));
const CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('activeLogOutput.levelIsDefault', false));
const CONTEXT_OUTPUT_SCROLL_LOCK = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey(`outputView.scrollLock`, false));
var OutputChannelUpdateMode;
( (function(OutputChannelUpdateMode) {
    OutputChannelUpdateMode[OutputChannelUpdateMode["Append"] = 1] = "Append";
    OutputChannelUpdateMode[OutputChannelUpdateMode["Replace"] = 2] = "Replace";
    OutputChannelUpdateMode[OutputChannelUpdateMode["Clear"] = 3] = "Clear";
})(OutputChannelUpdateMode || (OutputChannelUpdateMode = {})));
const Extensions = {
    OutputChannels: 'workbench.contributions.outputChannels'
};
class OutputChannelRegistry {
    constructor() {
        this.channels = ( new Map());
        this._onDidRegisterChannel = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidRegisterChannel = this._onDidRegisterChannel.event;
        this._onDidRemoveChannel = ( new _base_common_event_js__WEBPACK_IMPORTED_MODULE_0__.Emitter());
        this.onDidRemoveChannel = this._onDidRemoveChannel.event;
    }
    registerChannel(descriptor) {
        if (!( this.channels.has(descriptor.id))) {
            this.channels.set(descriptor.id, descriptor);
            this._onDidRegisterChannel.fire(descriptor.id);
        }
    }
    getChannels() {
        const result = [];
        this.channels.forEach(value => result.push(value));
        return result;
    }
    getChannel(id) {
        return this.channels.get(id);
    }
    removeChannel(id) {
        this.channels.delete(id);
        this._onDidRemoveChannel.fire(id);
    }
}
_platform_registry_common_platform_js__WEBPACK_IMPORTED_MODULE_1__.Registry.add(Extensions.OutputChannels, ( new OutputChannelRegistry()));
const ACTIVE_OUTPUT_CHANNEL_CONTEXT = ( new _platform_contextkey_common_contextkey_js__WEBPACK_IMPORTED_MODULE_2__.RawContextKey('activeOutputChannel', ''));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/path/common/pathService.service.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/path/common/pathService.service.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IPathService: () => (/* binding */ IPathService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IPathService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('pathService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/remote/common/remoteAgentService.service.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/remote/common/remoteAgentService.service.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   IRemoteAgentService: () => (/* binding */ IRemoteAgentService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const IRemoteAgentService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('remoteAgentService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/fileSearchManager.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/search/common/fileSearchManager.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FileSearchManager: () => (/* binding */ FileSearchManager)
/* harmony export */ });
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/errorMessage.js */ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js");
/* harmony import */ var _base_common_glob_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/glob.js */ "./node_modules/vscode/vscode/src/vs/base/common/glob.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/stopwatch.js */ "./node_modules/vscode/vscode/src/vs/base/common/stopwatch.js");
/* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./search.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js");







class FileSearchEngine {
    constructor(config, provider, sessionToken) {
        this.config = config;
        this.provider = provider;
        this.sessionToken = sessionToken;
        this.isLimitHit = false;
        this.resultCount = 0;
        this.isCanceled = false;
        this.filePattern = config.filePattern;
        this.includePattern = config.includePattern && (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_3__.parse)(config.includePattern);
        this.maxResults = config.maxResults || undefined;
        this.exists = config.exists;
        this.activeCancellationTokens = ( new Set());
        this.globalExcludePattern = config.excludePattern && (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_3__.parse)(config.excludePattern);
    }
    cancel() {
        this.isCanceled = true;
        this.activeCancellationTokens.forEach(t => t.cancel());
        this.activeCancellationTokens = ( new Set());
    }
    search(_onResult) {
        const folderQueries = this.config.folderQueries || [];
        return ( new Promise((resolve, reject) => {
            const onResult = (match) => {
                this.resultCount++;
                _onResult(match);
            };
            if (this.isCanceled) {
                return resolve({ limitHit: this.isLimitHit });
            }
            if (this.config.extraFileResources) {
                this.config.extraFileResources
                    .forEach(extraFile => {
                    const extraFileStr = ( extraFile.toString());
                    const basename$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(extraFileStr);
                    if (this.globalExcludePattern && this.globalExcludePattern(extraFileStr, basename$1)) {
                        return;
                    }
                    this.matchFile(onResult, { base: extraFile, basename: basename$1 });
                });
            }
            Promise.all(( folderQueries.map(fq => {
                return this.searchInFolder(fq, onResult);
            }))).then(stats => {
                resolve({
                    limitHit: this.isLimitHit,
                    stats: stats[0] || undefined
                });
            }, (err) => {
                reject(( new Error((0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_2__.toErrorMessage)(err))));
            });
        }));
    }
    async searchInFolder(fq, onResult) {
        const cancellation = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationTokenSource());
        const options = this.getSearchOptionsForFolder(fq);
        const tree = this.initDirectoryTree();
        const queryTester = ( new _search_js__WEBPACK_IMPORTED_MODULE_6__.QueryGlobTester(this.config, fq));
        const noSiblingsClauses = !queryTester.hasSiblingExcludeClauses();
        let providerSW;
        try {
            this.activeCancellationTokens.add(cancellation);
            providerSW = _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_5__.StopWatch.create();
            const results = await this.provider.provideFileSearchResults({
                pattern: this.config.filePattern || ''
            }, options, cancellation.token);
            const providerTime = providerSW.elapsed();
            const postProcessSW = _base_common_stopwatch_js__WEBPACK_IMPORTED_MODULE_5__.StopWatch.create();
            if (this.isCanceled && !this.isLimitHit) {
                return null;
            }
            if (results) {
                results.forEach(result => {
                    const relativePath = _base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.posix.relative(fq.folder.path, result.path);
                    if (noSiblingsClauses) {
                        const basename$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(result.path);
                        this.matchFile(onResult, { base: fq.folder, relativePath, basename: basename$1 });
                        return;
                    }
                    this.addDirectoryEntries(tree, fq.folder, relativePath, onResult);
                });
            }
            if (this.isCanceled && !this.isLimitHit) {
                return null;
            }
            this.matchDirectoryTree(tree, queryTester, onResult);
            return {
                providerTime,
                postProcessTime: postProcessSW.elapsed()
            };
        }
        finally {
            cancellation.dispose();
            this.activeCancellationTokens.delete(cancellation);
        }
    }
    getSearchOptionsForFolder(fq) {
        const includes = (0,_search_js__WEBPACK_IMPORTED_MODULE_6__.resolvePatternsForProvider)(this.config.includePattern, fq.includePattern);
        const excludes = (0,_search_js__WEBPACK_IMPORTED_MODULE_6__.resolvePatternsForProvider)(this.config.excludePattern, fq.excludePattern);
        return {
            folder: fq.folder,
            excludes,
            includes,
            useIgnoreFiles: !fq.disregardIgnoreFiles,
            useGlobalIgnoreFiles: !fq.disregardGlobalIgnoreFiles,
            useParentIgnoreFiles: !fq.disregardParentIgnoreFiles,
            followSymlinks: !fq.ignoreSymlinks,
            maxResults: this.config.maxResults,
            session: this.sessionToken
        };
    }
    initDirectoryTree() {
        const tree = {
            rootEntries: [],
            pathToEntries: Object.create(null)
        };
        tree.pathToEntries['.'] = tree.rootEntries;
        return tree;
    }
    addDirectoryEntries({ pathToEntries }, base, relativeFile, onResult) {
        if (relativeFile === this.filePattern) {
            const basename$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(this.filePattern);
            this.matchFile(onResult, { base: base, relativePath: this.filePattern, basename: basename$1 });
        }
        function add(relativePath) {
            const basename$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.basename)(relativePath);
            const dirname$1 = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_0__.dirname)(relativePath);
            let entries = pathToEntries[dirname$1];
            if (!entries) {
                entries = pathToEntries[dirname$1] = [];
                add(dirname$1);
            }
            entries.push({
                base,
                relativePath,
                basename: basename$1
            });
        }
        add(relativeFile);
    }
    matchDirectoryTree({ rootEntries, pathToEntries }, queryTester, onResult) {
        const self = this;
        const filePattern = this.filePattern;
        function matchDirectory(entries) {
            const hasSibling = (0,_search_js__WEBPACK_IMPORTED_MODULE_6__.hasSiblingFn)(() => ( entries.map(entry => entry.basename)));
            for (let i = 0, n = entries.length; i < n; i++) {
                const entry = entries[i];
                const { relativePath, basename } = entry;
                if (queryTester.matchesExcludesSync(relativePath, basename, filePattern !== basename ? hasSibling : undefined)) {
                    continue;
                }
                const sub = pathToEntries[relativePath];
                if (sub) {
                    matchDirectory(sub);
                }
                else {
                    if (relativePath === filePattern) {
                        continue;
                    }
                    self.matchFile(onResult, entry);
                }
                if (self.isLimitHit) {
                    break;
                }
            }
        }
        matchDirectory(rootEntries);
    }
    matchFile(onResult, candidate) {
        if (!this.includePattern || (candidate.relativePath && this.includePattern(candidate.relativePath, candidate.basename))) {
            if (this.exists || (this.maxResults && this.resultCount >= this.maxResults)) {
                this.isLimitHit = true;
                this.cancel();
            }
            if (!this.isLimitHit) {
                onResult(candidate);
            }
        }
    }
}
class FileSearchManager {
    constructor() {
        this.sessions = ( new Map());
    }
    static { this.BATCH_SIZE = 512; }
    fileSearch(config, provider, onBatch, token) {
        const sessionTokenSource = this.getSessionTokenSource(config.cacheKey);
        const engine = ( new FileSearchEngine(config, provider, sessionTokenSource && sessionTokenSource.token));
        let resultCount = 0;
        const onInternalResult = (batch) => {
            resultCount += batch.length;
            onBatch(( batch.map(m => this.rawMatchToSearchItem(m))));
        };
        return this.doSearch(engine, FileSearchManager.BATCH_SIZE, onInternalResult, token).then(result => {
            return {
                limitHit: result.limitHit,
                stats: result.stats ? {
                    fromCache: false,
                    type: 'fileSearchProvider',
                    resultCount,
                    detailStats: result.stats
                } : undefined,
                messages: []
            };
        });
    }
    clearCache(cacheKey) {
        const sessionTokenSource = this.getSessionTokenSource(cacheKey);
        sessionTokenSource?.cancel();
    }
    getSessionTokenSource(cacheKey) {
        if (!cacheKey) {
            return undefined;
        }
        if (!( this.sessions.has(cacheKey))) {
            this.sessions.set(cacheKey, ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationTokenSource()));
        }
        return this.sessions.get(cacheKey);
    }
    rawMatchToSearchItem(match) {
        if (match.relativePath) {
            return {
                resource: (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_4__.joinPath)(match.base, match.relativePath)
            };
        }
        else {
            return {
                resource: match.base
            };
        }
    }
    doSearch(engine, batchSize, onResultBatch, token) {
        const listener = token.onCancellationRequested(() => {
            engine.cancel();
        });
        const _onResult = (match) => {
            if (match) {
                batch.push(match);
                if (batchSize > 0 && batch.length >= batchSize) {
                    onResultBatch(batch);
                    batch = [];
                }
            }
        };
        let batch = [];
        return engine.search(_onResult).then(result => {
            if (batch.length) {
                onResultBatch(batch);
            }
            listener.dispose();
            return result;
        }, error => {
            if (batch.length) {
                onResultBatch(batch);
            }
            listener.dispose();
            return Promise.reject(error);
        });
    }
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/queryBuilder.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/search/common/queryBuilder.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   QueryBuilder: () => (/* binding */ QueryBuilder),
/* harmony export */   resolveResourcesForSearchIncludes: () => (/* binding */ resolveResourcesForSearchIncludes)
/* harmony export */ });
/* harmony import */ var _external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../../../external/tslib/tslib.es6.js */ "./node_modules/vscode/external/tslib/tslib.es6.js");
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_collections_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/collections.js */ "./node_modules/vscode/vscode/src/vs/base/common/collections.js");
/* harmony import */ var _base_common_glob_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/glob.js */ "./node_modules/vscode/vscode/src/vs/base/common/glob.js");
/* harmony import */ var _base_common_labels_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/labels.js */ "./node_modules/vscode/vscode/src/vs/base/common/labels.js");
/* harmony import */ var _base_common_map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/map.js */ "./node_modules/vscode/vscode/src/vs/base/common/map.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_types_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../base/common/types.js */ "./node_modules/vscode/vscode/src/vs/base/common/types.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _editor_common_model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../../editor/common/model/textModelSearch.js */ "./node_modules/vscode/vscode/src/vs/editor/common/model/textModelSearch.js");
/* harmony import */ var _nls_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../../nls.js */ "./node_modules/vscode/vscode/src/vs/nls.js");
/* harmony import */ var _platform_configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../../../platform/configuration/common/configuration.service.js */ "./node_modules/vscode/vscode/src/vs/platform/configuration/common/configuration.service.js");
/* harmony import */ var _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../../../platform/log/common/log.service.js */ "./node_modules/vscode/vscode/src/vs/platform/log/common/log.service.js");
/* harmony import */ var _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../../../platform/workspace/common/workspace.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.js");
/* harmony import */ var _platform_workspace_common_workspace_service_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../../../platform/workspace/common/workspace.service.js */ "./node_modules/vscode/vscode/src/vs/platform/workspace/common/workspace.service.js");
/* harmony import */ var _editor_common_editorGroupsService_service_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../editor/common/editorGroupsService.service.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/editor/common/editorGroupsService.service.js");
/* harmony import */ var _path_common_pathService_service_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../path/common/pathService.service.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/path/common/pathService.service.js");
/* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./search.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js");





















const _moduleId = "vs/workbench/services/search/common/queryBuilder";
let QueryBuilder = class QueryBuilder {
    constructor(configurationService, workspaceContextService, editorGroupsService, logService, pathService) {
        this.configurationService = configurationService;
        this.workspaceContextService = workspaceContextService;
        this.editorGroupsService = editorGroupsService;
        this.logService = logService;
        this.pathService = pathService;
    }
    text(contentPattern, folderResources, options = {}) {
        contentPattern = this.getContentPattern(contentPattern, options);
        const searchConfig = this.configurationService.getValue();
        const fallbackToPCRE = folderResources && ( (folderResources.some(folder => {
            const folderConfig = this.configurationService.getValue({ resource: folder });
            return !folderConfig.search.useRipgrep;
        })));
        const commonQuery = this.commonQuery(folderResources?.map(_platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_16__.toWorkspaceFolder), options);
        return {
            ...commonQuery,
            type: _search_js__WEBPACK_IMPORTED_MODULE_20__.QueryType.Text,
            contentPattern,
            previewOptions: options.previewOptions,
            maxFileSize: options.maxFileSize,
            usePCRE2: searchConfig.search.usePCRE2 || fallbackToPCRE || false,
            beforeContext: options.beforeContext,
            afterContext: options.afterContext,
            userDisabledExcludesAndIgnoreFiles: options.disregardExcludeSettings && options.disregardIgnoreFiles,
        };
    }
    getContentPattern(inputPattern, options) {
        const searchConfig = this.configurationService.getValue();
        if (inputPattern.isRegExp) {
            inputPattern.pattern = inputPattern.pattern.replace(/\r?\n/g, '\\n');
        }
        const newPattern = {
            ...inputPattern,
            wordSeparators: searchConfig.editor.wordSeparators
        };
        if (this.isCaseSensitive(inputPattern, options)) {
            newPattern.isCaseSensitive = true;
        }
        if (this.isMultiline(inputPattern)) {
            newPattern.isMultiline = true;
        }
        if (options.notebookSearchConfig?.includeMarkupInput) {
            if (!newPattern.notebookInfo) {
                newPattern.notebookInfo = {};
            }
            newPattern.notebookInfo.isInNotebookMarkdownInput = options.notebookSearchConfig.includeMarkupInput;
        }
        if (options.notebookSearchConfig?.includeMarkupPreview) {
            if (!newPattern.notebookInfo) {
                newPattern.notebookInfo = {};
            }
            newPattern.notebookInfo.isInNotebookMarkdownPreview = options.notebookSearchConfig.includeMarkupPreview;
        }
        if (options.notebookSearchConfig?.includeCodeInput) {
            if (!newPattern.notebookInfo) {
                newPattern.notebookInfo = {};
            }
            newPattern.notebookInfo.isInNotebookCellInput = options.notebookSearchConfig.includeCodeInput;
        }
        if (options.notebookSearchConfig?.includeOutput) {
            if (!newPattern.notebookInfo) {
                newPattern.notebookInfo = {};
            }
            newPattern.notebookInfo.isInNotebookCellOutput = options.notebookSearchConfig.includeOutput;
        }
        return newPattern;
    }
    file(folders, options = {}) {
        const commonQuery = this.commonQuery(folders, options);
        return {
            ...commonQuery,
            type: _search_js__WEBPACK_IMPORTED_MODULE_20__.QueryType.File,
            filePattern: options.filePattern
                ? options.filePattern.trim()
                : options.filePattern,
            exists: options.exists,
            sortByScore: options.sortByScore,
            cacheKey: options.cacheKey,
            shouldGlobMatchFilePattern: options.shouldGlobSearch
        };
    }
    handleIncludeExclude(pattern, expandPatterns) {
        if (!pattern) {
            return {};
        }
        pattern = Array.isArray(pattern) ? ( (pattern.map(normalizeSlashes))) : normalizeSlashes(pattern);
        return expandPatterns
            ? this.parseSearchPaths(pattern)
            : { pattern: patternListToIExpression(...(Array.isArray(pattern) ? pattern : [pattern])) };
    }
    commonQuery(folderResources = [], options = {}) {
        const includeSearchPathsInfo = this.handleIncludeExclude(options.includePattern, options.expandPatterns);
        const excludeSearchPathsInfo = this.handleIncludeExclude(options.excludePattern, options.expandPatterns);
        const includeFolderName = folderResources.length > 1;
        const folderQueries = (includeSearchPathsInfo.searchPaths && includeSearchPathsInfo.searchPaths.length ?
            ( (includeSearchPathsInfo.searchPaths.map(
            searchPath => this.getFolderQueryForSearchPath(searchPath, options, excludeSearchPathsInfo)
        ))) :
            ( (folderResources.map(
            folder => this.getFolderQueryForRoot(folder, options, excludeSearchPathsInfo, includeFolderName)
        ))))
            .filter(query => !!query);
        const queryProps = {
            _reason: options._reason,
            folderQueries,
            usingSearchPaths: !!(includeSearchPathsInfo.searchPaths && includeSearchPathsInfo.searchPaths.length),
            extraFileResources: options.extraFileResources,
            excludePattern: excludeSearchPathsInfo.pattern,
            includePattern: includeSearchPathsInfo.pattern,
            onlyOpenEditors: options.onlyOpenEditors,
            maxResults: options.maxResults
        };
        if (options.onlyOpenEditors) {
            const openEditors = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.coalesce)(this.editorGroupsService.groups.flatMap(group => ( (group.editors.map(editor => editor.resource)))));
            this.logService.trace('QueryBuilder#commonQuery - openEditor URIs', JSON.stringify(openEditors));
            const openEditorsInQuery = openEditors.filter(editor => (0,_search_js__WEBPACK_IMPORTED_MODULE_20__.pathIncludedInQuery)(queryProps, editor.fsPath));
            const openEditorsQueryProps = this.commonQueryFromFileList(openEditorsInQuery);
            this.logService.trace('QueryBuilder#commonQuery - openEditor Query', JSON.stringify(openEditorsQueryProps));
            return { ...queryProps, ...openEditorsQueryProps };
        }
        const extraFileResources = options.extraFileResources && options.extraFileResources.filter(extraFile => (0,_search_js__WEBPACK_IMPORTED_MODULE_20__.pathIncludedInQuery)(queryProps, extraFile.fsPath));
        queryProps.extraFileResources = extraFileResources && extraFileResources.length ? extraFileResources : undefined;
        return queryProps;
    }
    commonQueryFromFileList(files) {
        const folderQueries = [];
        const foldersToSearch = ( (new _base_common_map_js__WEBPACK_IMPORTED_MODULE_5__.ResourceMap()));
        const includePattern = {};
        let hasIncludedFile = false;
        files.forEach(file => {
            if (file.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_6__.Schemas.walkThrough) {
                return;
            }
            const providerExists = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_8__.isAbsolutePath)(file);
            if (providerExists) {
                const searchRoot = this.workspaceContextService.getWorkspaceFolder(file)?.uri ?? file.with({ path: (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_7__.dirname)(file.fsPath) });
                let folderQuery = foldersToSearch.get(searchRoot);
                if (!folderQuery) {
                    hasIncludedFile = true;
                    folderQuery = { folder: searchRoot, includePattern: {} };
                    folderQueries.push(folderQuery);
                    foldersToSearch.set(searchRoot, folderQuery);
                }
                const relPath = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_7__.relative)(searchRoot.fsPath, file.fsPath);
                (0,_base_common_types_js__WEBPACK_IMPORTED_MODULE_10__.assertIsDefined)(folderQuery.includePattern)[relPath.replace(/\\/g, '/')] = true;
            }
            else {
                if (file.fsPath) {
                    hasIncludedFile = true;
                    includePattern[file.fsPath] = true;
                }
            }
        });
        return {
            folderQueries,
            includePattern,
            usingSearchPaths: true,
            excludePattern: hasIncludedFile ? undefined : { '**/*': true }
        };
    }
    isCaseSensitive(contentPattern, options) {
        if (options.isSmartCase) {
            if (contentPattern.isRegExp) {
                if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__.containsUppercaseCharacter)(contentPattern.pattern, true)) {
                    return true;
                }
            }
            else if ((0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__.containsUppercaseCharacter)(contentPattern.pattern)) {
                return true;
            }
        }
        return !!contentPattern.isCaseSensitive;
    }
    isMultiline(contentPattern) {
        if (contentPattern.isMultiline) {
            return true;
        }
        if (contentPattern.isRegExp && (0,_editor_common_model_textModelSearch_js__WEBPACK_IMPORTED_MODULE_12__.isMultilineRegexSource)(contentPattern.pattern)) {
            return true;
        }
        if (contentPattern.pattern.indexOf('\n') >= 0) {
            return true;
        }
        return !!contentPattern.isMultiline;
    }
    parseSearchPaths(pattern) {
        const isSearchPath = (segment) => {
            return (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_7__.isAbsolute)(segment) || /^\.\.?([\/\\]|$)/.test(segment);
        };
        const patterns = Array.isArray(pattern) ? pattern : splitGlobPattern(pattern);
        const segments = ( (patterns
            .map(segment => {
            const userHome = this.pathService.resolvedUserHome;
            if (userHome) {
                return (0,_base_common_labels_js__WEBPACK_IMPORTED_MODULE_4__.untildify)(segment, userHome.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_6__.Schemas.file ? userHome.fsPath : userHome.path);
            }
            return segment;
        })));
        const groups = (0,_base_common_collections_js__WEBPACK_IMPORTED_MODULE_2__.groupBy)(segments, segment => isSearchPath(segment) ? 'searchPaths' : 'exprSegments');
        const expandedExprSegments = ( (( (( ((groups.exprSegments || [])
            .map(s => (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__.rtrim)(s, '/'))))
            .map(s => (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__.rtrim)(s, '\\'))))
            .map(p => {
            if (p[0] === '.') {
                p = '*' + p;
            }
            return expandGlobalGlob(p);
        })));
        const result = {};
        const searchPaths = this.expandSearchPathPatterns(groups.searchPaths || []);
        if (searchPaths && searchPaths.length) {
            result.searchPaths = searchPaths;
        }
        const exprSegments = expandedExprSegments.flat();
        const includePattern = patternListToIExpression(...exprSegments);
        if (includePattern) {
            result.pattern = includePattern;
        }
        return result;
    }
    getExcludesForFolder(folderConfig, options) {
        return options.disregardExcludeSettings ?
            undefined :
            (0,_search_js__WEBPACK_IMPORTED_MODULE_20__.getExcludes)(folderConfig, !options.disregardSearchExcludeSettings);
    }
    expandSearchPathPatterns(searchPaths) {
        if (!searchPaths || !searchPaths.length) {
            return [];
        }
        const expandedSearchPaths = searchPaths.flatMap(searchPath => {
            let { pathPortion, globPortion } = splitGlobFromPath(searchPath);
            if (globPortion) {
                globPortion = normalizeGlobPattern(globPortion);
            }
            const oneExpanded = this.expandOneSearchPath(pathPortion);
            return oneExpanded.flatMap(oneExpandedResult => this.resolveOneSearchPathPattern(oneExpandedResult, globPortion));
        });
        const searchPathPatternMap = ( (new Map()));
        expandedSearchPaths.forEach(oneSearchPathPattern => {
            const key = ( (oneSearchPathPattern.searchPath.toString()));
            const existing = searchPathPatternMap.get(key);
            if (existing) {
                if (oneSearchPathPattern.pattern) {
                    existing.pattern = existing.pattern || {};
                    existing.pattern[oneSearchPathPattern.pattern] = true;
                }
            }
            else {
                searchPathPatternMap.set(key, {
                    searchPath: oneSearchPathPattern.searchPath,
                    pattern: oneSearchPathPattern.pattern ? patternListToIExpression(oneSearchPathPattern.pattern) : undefined
                });
            }
        });
        return Array.from(( (searchPathPatternMap.values())));
    }
    expandOneSearchPath(searchPath) {
        if ((0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_7__.isAbsolute)(searchPath)) {
            const workspaceFolders = this.workspaceContextService.getWorkspace().folders;
            if (workspaceFolders[0] && workspaceFolders[0].uri.scheme !== _base_common_network_js__WEBPACK_IMPORTED_MODULE_6__.Schemas.file) {
                return [{
                        searchPath: workspaceFolders[0].uri.with({ path: searchPath })
                    }];
            }
            return [{
                    searchPath: _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.file((0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(searchPath))
                }];
        }
        if (this.workspaceContextService.getWorkbenchState() === _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_16__.WorkbenchState.FOLDER) {
            const workspaceUri = this.workspaceContextService.getWorkspace().folders[0].uri;
            searchPath = normalizeSlashes(searchPath);
            if (searchPath.startsWith('../') || searchPath === '..') {
                const resolvedPath = _base_common_path_js__WEBPACK_IMPORTED_MODULE_7__.posix.resolve(workspaceUri.path, searchPath);
                return [{
                        searchPath: workspaceUri.with({ path: resolvedPath })
                    }];
            }
            const cleanedPattern = normalizeGlobPattern(searchPath);
            return [{
                    searchPath: workspaceUri,
                    pattern: cleanedPattern
                }];
        }
        else if (searchPath === './' || searchPath === '.\\') {
            return [];
        }
        else {
            const searchPathWithoutDotSlash = searchPath.replace(/^\.[\/\\]/, '');
            const folders = this.workspaceContextService.getWorkspace().folders;
            const folderMatches = ( (folders.map(folder => {
                const match = searchPathWithoutDotSlash.match(( (new RegExp(`^${(0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_9__.escapeRegExpCharacters)(folder.name)}(?:/(.*)|$)`))));
                return match ? {
                    match,
                    folder
                } : null;
            }))).filter(_base_common_types_js__WEBPACK_IMPORTED_MODULE_10__.isDefined);
            if (folderMatches.length) {
                return (
                     (folderMatches.map(match => {
                        const patternMatch = match.match[1];
                        return {
                            searchPath: match.folder.uri,
                            pattern: patternMatch && normalizeGlobPattern(patternMatch)
                        };
                    }))
                );
            }
            else {
                const probableWorkspaceFolderNameMatch = searchPath.match(/\.[\/\\](.+)[\/\\]?/);
                const probableWorkspaceFolderName = probableWorkspaceFolderNameMatch ? probableWorkspaceFolderNameMatch[1] : searchPath;
                const searchPathNotFoundError = ( (0,_nls_js__WEBPACK_IMPORTED_MODULE_13__.localizeWithPath)(
                    _moduleId,
                    0,
                    "Workspace folder does not exist: {0}",
                    probableWorkspaceFolderName
                ));
                throw ( (new Error(searchPathNotFoundError)));
            }
        }
    }
    resolveOneSearchPathPattern(oneExpandedResult, globPortion) {
        const pattern = oneExpandedResult.pattern && globPortion ?
            `${oneExpandedResult.pattern}/${globPortion}` :
            oneExpandedResult.pattern || globPortion;
        const results = [
            {
                searchPath: oneExpandedResult.searchPath,
                pattern
            }
        ];
        if (pattern && !pattern.endsWith('**')) {
            results.push({
                searchPath: oneExpandedResult.searchPath,
                pattern: pattern + '/**'
            });
        }
        return results;
    }
    getFolderQueryForSearchPath(searchPath, options, searchPathExcludes) {
        const rootConfig = this.getFolderQueryForRoot((0,_platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_16__.toWorkspaceFolder)(searchPath.searchPath), options, searchPathExcludes, false);
        if (!rootConfig) {
            return null;
        }
        return {
            ...rootConfig,
            ...{
                includePattern: searchPath.pattern
            }
        };
    }
    getFolderQueryForRoot(folder, options, searchPathExcludes, includeFolderName) {
        let thisFolderExcludeSearchPathPattern;
        const folderUri = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.isUri(folder) ? folder : folder.uri;
        if (searchPathExcludes.searchPaths) {
            const thisFolderExcludeSearchPath = searchPathExcludes.searchPaths.filter(sp => (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_8__.isEqual)(sp.searchPath, folderUri))[0];
            if (thisFolderExcludeSearchPath && !thisFolderExcludeSearchPath.pattern) {
                return null;
            }
            else if (thisFolderExcludeSearchPath) {
                thisFolderExcludeSearchPathPattern = thisFolderExcludeSearchPath.pattern;
            }
        }
        const folderConfig = this.configurationService.getValue({ resource: folderUri });
        const settingExcludes = this.getExcludesForFolder(folderConfig, options);
        const excludePattern = {
            ...(settingExcludes || {}),
            ...(thisFolderExcludeSearchPathPattern || {})
        };
        const folderName = _base_common_uri_js__WEBPACK_IMPORTED_MODULE_11__.URI.isUri(folder) ? (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_8__.basename)(folder) : folder.name;
        return {
            folder: folderUri,
            folderName: includeFolderName ? folderName : undefined,
            excludePattern: ( (Object.keys(excludePattern))).length > 0 ? excludePattern : undefined,
            fileEncoding: folderConfig.files && folderConfig.files.encoding,
            disregardIgnoreFiles: typeof options.disregardIgnoreFiles === 'boolean' ? options.disregardIgnoreFiles : !folderConfig.search?.useIgnoreFiles,
            disregardGlobalIgnoreFiles: typeof options.disregardGlobalIgnoreFiles === 'boolean' ? options.disregardGlobalIgnoreFiles : !folderConfig.search?.useGlobalIgnoreFiles,
            disregardParentIgnoreFiles: typeof options.disregardParentIgnoreFiles === 'boolean' ? options.disregardParentIgnoreFiles : !folderConfig.search?.useParentIgnoreFiles,
            ignoreSymlinks: typeof options.ignoreSymlinks === 'boolean' ? options.ignoreSymlinks : !folderConfig.search?.followSymlinks,
        };
    }
};
QueryBuilder = ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(0, _platform_configuration_common_configuration_service_js__WEBPACK_IMPORTED_MODULE_14__.IConfigurationService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(1, _platform_workspace_common_workspace_service_js__WEBPACK_IMPORTED_MODULE_17__.IWorkspaceContextService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(2, _editor_common_editorGroupsService_service_js__WEBPACK_IMPORTED_MODULE_18__.IEditorGroupsService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(3, _platform_log_common_log_service_js__WEBPACK_IMPORTED_MODULE_15__.ILogService))),
    ( ((0,_external_tslib_tslib_es6_js__WEBPACK_IMPORTED_MODULE_0__.__param)(4, _path_common_pathService_service_js__WEBPACK_IMPORTED_MODULE_19__.IPathService)))
], QueryBuilder)));
function splitGlobFromPath(searchPath) {
    const globCharMatch = searchPath.match(/[\*\{\}\(\)\[\]\?]/);
    if (globCharMatch) {
        const globCharIdx = globCharMatch.index;
        const lastSlashMatch = searchPath.substr(0, globCharIdx).match(/[/|\\][^/\\]*$/);
        if (lastSlashMatch) {
            let pathPortion = searchPath.substr(0, lastSlashMatch.index);
            if (!pathPortion.match(/[/\\]/)) {
                pathPortion += '/';
            }
            return {
                pathPortion,
                globPortion: searchPath.substr((lastSlashMatch.index || 0) + 1)
            };
        }
    }
    return {
        pathPortion: searchPath
    };
}
function patternListToIExpression(...patterns) {
    return patterns.length ?
        patterns.reduce((glob, cur) => { glob[cur] = true; return glob; }, Object.create(null)) :
        undefined;
}
function splitGlobPattern(pattern) {
    return ( ((0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_3__.splitGlobAware)(pattern, ',')
        .map(s => s.trim())))
        .filter(s => !!s.length);
}
function expandGlobalGlob(pattern) {
    const patterns = [
        `**/${pattern}/**`,
        `**/${pattern}`
    ];
    return (
         (patterns.map(p => p.replace(/\*\*\/\*\*/g, '**')))
    );
}
function normalizeSlashes(pattern) {
    return pattern.replace(/\\/g, '/');
}
function normalizeGlobPattern(pattern) {
    return normalizeSlashes(pattern)
        .replace(/^\.\//, '')
        .replace(/\/+$/g, '');
}
function escapeGlobPattern(path) {
    return path.replace(/([?*[\]])/g, '[$1]');
}
function resolveResourcesForSearchIncludes(resources, contextService) {
    resources = (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_1__.distinct)(resources, resource => ( (resource.toString())));
    const folderPaths = [];
    const workspace = contextService.getWorkspace();
    if (resources) {
        resources.forEach(resource => {
            let folderPath;
            if (contextService.getWorkbenchState() === _platform_workspace_common_workspace_js__WEBPACK_IMPORTED_MODULE_16__.WorkbenchState.FOLDER) {
                folderPath = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_8__.relativePath)(workspace.folders[0].uri, resource);
                if (folderPath && folderPath !== '.') {
                    folderPath = './' + folderPath;
                }
            }
            else {
                const owningFolder = contextService.getWorkspaceFolder(resource);
                if (owningFolder) {
                    const owningRootName = owningFolder.name;
                    const isUniqueFolder = workspace.folders.filter(folder => folder.name === owningRootName).length === 1;
                    if (isUniqueFolder) {
                        const relPath = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_8__.relativePath)(owningFolder.uri, resource);
                        if (relPath === '') {
                            folderPath = `./${owningFolder.name}`;
                        }
                        else {
                            folderPath = `./${owningFolder.name}/${relPath}`;
                        }
                    }
                    else {
                        folderPath = resource.fsPath;
                    }
                }
            }
            if (folderPath) {
                folderPaths.push(escapeGlobPattern(folderPath));
            }
        });
    }
    return folderPaths;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEFAULT_MAX_SEARCH_RESULTS: () => (/* binding */ DEFAULT_MAX_SEARCH_RESULTS),
/* harmony export */   FileMatch: () => (/* binding */ FileMatch),
/* harmony export */   OneLineRange: () => (/* binding */ OneLineRange),
/* harmony export */   QueryGlobTester: () => (/* binding */ QueryGlobTester),
/* harmony export */   QueryType: () => (/* binding */ QueryType),
/* harmony export */   SEARCH_EXCLUDE_CONFIG: () => (/* binding */ SEARCH_EXCLUDE_CONFIG),
/* harmony export */   SEARCH_RESULT_LANGUAGE_ID: () => (/* binding */ SEARCH_RESULT_LANGUAGE_ID),
/* harmony export */   SearchCompletionExitCode: () => (/* binding */ SearchCompletionExitCode),
/* harmony export */   SearchError: () => (/* binding */ SearchError),
/* harmony export */   SearchErrorCode: () => (/* binding */ SearchErrorCode),
/* harmony export */   SearchProviderType: () => (/* binding */ SearchProviderType),
/* harmony export */   SearchRange: () => (/* binding */ SearchRange),
/* harmony export */   SearchSortOrder: () => (/* binding */ SearchSortOrder),
/* harmony export */   TextSearchCompleteMessageType: () => (/* reexport safe */ _searchExtTypes_js__WEBPACK_IMPORTED_MODULE_7__.TextSearchCompleteMessageType),
/* harmony export */   TextSearchMatch: () => (/* binding */ TextSearchMatch),
/* harmony export */   VIEWLET_ID: () => (/* binding */ VIEWLET_ID),
/* harmony export */   VIEW_ID: () => (/* binding */ VIEW_ID),
/* harmony export */   ViewMode: () => (/* binding */ ViewMode),
/* harmony export */   deserializeSearchError: () => (/* binding */ deserializeSearchError),
/* harmony export */   getExcludes: () => (/* binding */ getExcludes),
/* harmony export */   hasSiblingFn: () => (/* binding */ hasSiblingFn),
/* harmony export */   hasSiblingPromiseFn: () => (/* binding */ hasSiblingPromiseFn),
/* harmony export */   isFileMatch: () => (/* binding */ isFileMatch),
/* harmony export */   isProgressMessage: () => (/* binding */ isProgressMessage),
/* harmony export */   pathIncludedInQuery: () => (/* binding */ pathIncludedInQuery),
/* harmony export */   resolvePatternsForProvider: () => (/* binding */ resolvePatternsForProvider),
/* harmony export */   resultIsMatch: () => (/* binding */ resultIsMatch)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/glob.js */ "./node_modules/vscode/vscode/src/vs/base/common/glob.js");
/* harmony import */ var _base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/objects.js */ "./node_modules/vscode/vscode/src/vs/base/common/objects.js");
/* harmony import */ var _base_common_extpath_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/extpath.js */ "./node_modules/vscode/vscode/src/vs/base/common/extpath.js");
/* harmony import */ var _base_common_strings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/strings.js */ "./node_modules/vscode/vscode/src/vs/base/common/strings.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../base/common/errors.js */ "./node_modules/vscode/vscode/src/vs/base/common/errors.js");
/* harmony import */ var _searchExtTypes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./searchExtTypes.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/searchExtTypes.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");









const VIEWLET_ID = 'workbench.view.search';
const VIEW_ID = 'workbench.view.search';
const SEARCH_RESULT_LANGUAGE_ID = 'search-result';
const SEARCH_EXCLUDE_CONFIG = 'search.exclude';
const DEFAULT_MAX_SEARCH_RESULTS = 20000;
const SEARCH_ELIDED_PREFIX = '⟪ ';
const SEARCH_ELIDED_SUFFIX = ' characters skipped ⟫';
const SEARCH_ELIDED_MIN_LEN = (SEARCH_ELIDED_PREFIX.length + SEARCH_ELIDED_SUFFIX.length + 5) * 2;
var SearchProviderType;
( (function(SearchProviderType) {
    SearchProviderType[SearchProviderType["file"] = 0] = "file";
    SearchProviderType[SearchProviderType["text"] = 1] = "text";
    SearchProviderType[SearchProviderType["aiText"] = 2] = "aiText";
})(SearchProviderType || (SearchProviderType = {})));
var QueryType;
( (function(QueryType) {
    QueryType[QueryType["File"] = 1] = "File";
    QueryType[QueryType["Text"] = 2] = "Text";
    QueryType[QueryType["aiText"] = 3] = "aiText";
})(QueryType || (QueryType = {})));
function resultIsMatch(result) {
    return !!result.preview;
}
function isFileMatch(p) {
    return !!p.resource;
}
function isProgressMessage(p) {
    return !!p.message;
}
var SearchCompletionExitCode;
( (function(SearchCompletionExitCode) {
    SearchCompletionExitCode[SearchCompletionExitCode["Normal"] = 0] = "Normal";
    SearchCompletionExitCode[SearchCompletionExitCode["NewSearchStarted"] = 1] = "NewSearchStarted";
})(SearchCompletionExitCode || (SearchCompletionExitCode = {})));
class FileMatch {
    constructor(resource) {
        this.resource = resource;
        this.results = [];
    }
}
class TextSearchMatch {
    constructor(text, range, previewOptions, webviewIndex) {
        this.ranges = range;
        this.webviewIndex = webviewIndex;
        const ranges = Array.isArray(range) ? range : [range];
        if (previewOptions && previewOptions.matchLines === 1 && isSingleLineRangeList(ranges)) {
            text = (0,_base_common_strings_js__WEBPACK_IMPORTED_MODULE_4__.getNLines)(text, previewOptions.matchLines);
            let result = '';
            let shift = 0;
            let lastEnd = 0;
            const leadingChars = Math.floor(previewOptions.charsPerLine / 5);
            const matches = [];
            for (const range of ranges) {
                const previewStart = Math.max(range.startColumn - leadingChars, 0);
                const previewEnd = range.startColumn + previewOptions.charsPerLine;
                if (previewStart > lastEnd + leadingChars + SEARCH_ELIDED_MIN_LEN) {
                    const elision = SEARCH_ELIDED_PREFIX + (previewStart - lastEnd) + SEARCH_ELIDED_SUFFIX;
                    result += elision + text.slice(previewStart, previewEnd);
                    shift += previewStart - (lastEnd + elision.length);
                }
                else {
                    result += text.slice(lastEnd, previewEnd);
                }
                matches.push(( new OneLineRange(0, range.startColumn - shift, range.endColumn - shift)));
                lastEnd = previewEnd;
            }
            this.preview = { text: result, matches: Array.isArray(this.ranges) ? matches : matches[0] };
        }
        else {
            const firstMatchLine = Array.isArray(range) ? range[0].startLineNumber : range.startLineNumber;
            this.preview = {
                text,
                matches: (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.mapArrayOrNot)(range, r => ( new SearchRange(
                    r.startLineNumber - firstMatchLine,
                    r.startColumn,
                    r.endLineNumber - firstMatchLine,
                    r.endColumn
                )))
            };
        }
    }
}
function isSingleLineRangeList(ranges) {
    const line = ranges[0].startLineNumber;
    for (const r of ranges) {
        if (r.startLineNumber !== line || r.endLineNumber !== line) {
            return false;
        }
    }
    return true;
}
class SearchRange {
    constructor(startLineNumber, startColumn, endLineNumber, endColumn) {
        this.startLineNumber = startLineNumber;
        this.startColumn = startColumn;
        this.endLineNumber = endLineNumber;
        this.endColumn = endColumn;
    }
}
class OneLineRange extends SearchRange {
    constructor(lineNumber, startColumn, endColumn) {
        super(lineNumber, startColumn, lineNumber, endColumn);
    }
}
var ViewMode;
( (function(ViewMode) {
    ViewMode["List"] = "list";
    ViewMode["Tree"] = "tree";
})(ViewMode || (ViewMode = {})));
var SearchSortOrder;
( (function(SearchSortOrder) {
    SearchSortOrder["Default"] = "default";
    SearchSortOrder["FileNames"] = "fileNames";
    SearchSortOrder["Type"] = "type";
    SearchSortOrder["Modified"] = "modified";
    SearchSortOrder["CountDescending"] = "countDescending";
    SearchSortOrder["CountAscending"] = "countAscending";
})(SearchSortOrder || (SearchSortOrder = {})));
function getExcludes(configuration, includeSearchExcludes = true) {
    const fileExcludes = configuration && configuration.files && configuration.files.exclude;
    const searchExcludes = includeSearchExcludes && configuration && configuration.search && configuration.search.exclude;
    if (!fileExcludes && !searchExcludes) {
        return undefined;
    }
    if (!fileExcludes || !searchExcludes) {
        return fileExcludes || searchExcludes;
    }
    let allExcludes = Object.create(null);
    allExcludes = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__.mixin)(allExcludes, (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(fileExcludes));
    allExcludes = (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__.mixin)(allExcludes, (0,_base_common_objects_js__WEBPACK_IMPORTED_MODULE_2__.deepClone)(searchExcludes), true);
    return allExcludes;
}
function pathIncludedInQuery(queryProps, fsPath) {
    if (queryProps.excludePattern && (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.match)(queryProps.excludePattern, fsPath)) {
        return false;
    }
    if (queryProps.includePattern || queryProps.usingSearchPaths) {
        if (queryProps.includePattern && (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.match)(queryProps.includePattern, fsPath)) {
            return true;
        }
        if (queryProps.usingSearchPaths) {
            return !!queryProps.folderQueries && ( queryProps.folderQueries.some(fq => {
                const searchPath = fq.folder.fsPath;
                if ((0,_base_common_extpath_js__WEBPACK_IMPORTED_MODULE_3__.isEqualOrParent)(fsPath, searchPath)) {
                    const relPath = (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_5__.relative)(searchPath, fsPath);
                    return !fq.includePattern || !!(0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.match)(fq.includePattern, relPath);
                }
                else {
                    return false;
                }
            }));
        }
        return false;
    }
    return true;
}
var SearchErrorCode;
( (function(SearchErrorCode) {
    SearchErrorCode[SearchErrorCode["unknownEncoding"] = 1] = "unknownEncoding";
    SearchErrorCode[SearchErrorCode["regexParseError"] = 2] = "regexParseError";
    SearchErrorCode[SearchErrorCode["globParseError"] = 3] = "globParseError";
    SearchErrorCode[SearchErrorCode["invalidLiteral"] = 4] = "invalidLiteral";
    SearchErrorCode[SearchErrorCode["rgProcessError"] = 5] = "rgProcessError";
    SearchErrorCode[SearchErrorCode["other"] = 6] = "other";
    SearchErrorCode[SearchErrorCode["canceled"] = 7] = "canceled";
})(SearchErrorCode || (SearchErrorCode = {})));
class SearchError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}
function deserializeSearchError(error) {
    const errorMsg = error.message;
    if ((0,_base_common_errors_js__WEBPACK_IMPORTED_MODULE_6__.isCancellationError)(error)) {
        return ( new SearchError(errorMsg, SearchErrorCode.canceled));
    }
    try {
        const details = JSON.parse(errorMsg);
        return ( new SearchError(details.message, details.code));
    }
    catch (e) {
        return ( new SearchError(errorMsg, SearchErrorCode.other));
    }
}
function resolvePatternsForProvider(globalPattern, folderPattern) {
    const merged = {
        ...(globalPattern || {}),
        ...(folderPattern || {})
    };
    return ( Object.keys(merged))
        .filter(key => {
        const value = merged[key];
        return typeof value === 'boolean' && value;
    });
}
class QueryGlobTester {
    constructor(config, folderQuery) {
        this._parsedIncludeExpression = null;
        this._excludeExpression = {
            ...(config.excludePattern || {}),
            ...(folderQuery.excludePattern || {})
        };
        this._parsedExcludeExpression = (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.parse)(this._excludeExpression);
        let includeExpression = config.includePattern;
        if (folderQuery.includePattern) {
            if (includeExpression) {
                includeExpression = {
                    ...includeExpression,
                    ...folderQuery.includePattern
                };
            }
            else {
                includeExpression = folderQuery.includePattern;
            }
        }
        if (includeExpression) {
            this._parsedIncludeExpression = (0,_base_common_glob_js__WEBPACK_IMPORTED_MODULE_1__.parse)(includeExpression);
        }
    }
    matchesExcludesSync(testPath, basename, hasSibling) {
        if (this._parsedExcludeExpression && this._parsedExcludeExpression(testPath, basename, hasSibling)) {
            return true;
        }
        return false;
    }
    includedInQuerySync(testPath, basename, hasSibling) {
        if (this._parsedExcludeExpression && this._parsedExcludeExpression(testPath, basename, hasSibling)) {
            return false;
        }
        if (this._parsedIncludeExpression && !this._parsedIncludeExpression(testPath, basename, hasSibling)) {
            return false;
        }
        return true;
    }
    includedInQuery(testPath, basename, hasSibling) {
        const excluded = this._parsedExcludeExpression(testPath, basename, hasSibling);
        const isIncluded = () => {
            return this._parsedIncludeExpression ?
                !!(this._parsedIncludeExpression(testPath, basename, hasSibling)) :
                true;
        };
        if ((0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_8__.isThenable)(excluded)) {
            return excluded.then(excluded => {
                if (excluded) {
                    return false;
                }
                return isIncluded();
            });
        }
        return isIncluded();
    }
    hasSiblingExcludeClauses() {
        return hasSiblingClauses(this._excludeExpression);
    }
}
function hasSiblingClauses(pattern) {
    for (const key in pattern) {
        if (typeof pattern[key] !== 'boolean') {
            return true;
        }
    }
    return false;
}
function hasSiblingPromiseFn(siblingsFn) {
    if (!siblingsFn) {
        return undefined;
    }
    let siblings;
    return (name) => {
        if (!siblings) {
            siblings = (siblingsFn() || Promise.resolve([]))
                .then(list => list ? listToMap(list) : {});
        }
        return siblings.then(map => !!map[name]);
    };
}
function hasSiblingFn(siblingsFn) {
    if (!siblingsFn) {
        return undefined;
    }
    let siblings;
    return (name) => {
        if (!siblings) {
            const list = siblingsFn();
            siblings = list ? listToMap(list) : {};
        }
        return !!siblings[name];
    };
}
function listToMap(list) {
    const map = {};
    for (const key of list) {
        map[key] = true;
    }
    return map;
}



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.service.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.service.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ISearchService: () => (/* binding */ ISearchService)
/* harmony export */ });
/* harmony import */ var _platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../platform/instantiation/common/instantiation.js */ "./node_modules/vscode/vscode/src/vs/platform/instantiation/common/instantiation.js");

const ISearchService = ( (0,_platform_instantiation_common_instantiation_js__WEBPACK_IMPORTED_MODULE_0__.createDecorator)('searchService'));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/searchExtTypes.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/search/common/searchExtTypes.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextSearchCompleteMessageType: () => (/* binding */ TextSearchCompleteMessageType)
/* harmony export */ });
var TextSearchCompleteMessageType;
( (function(TextSearchCompleteMessageType) {
    TextSearchCompleteMessageType[TextSearchCompleteMessageType["Information"] = 1] = "Information";
    TextSearchCompleteMessageType[TextSearchCompleteMessageType["Warning"] = 2] = "Warning";
})(TextSearchCompleteMessageType || (TextSearchCompleteMessageType = {})));



/***/ }),

/***/ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/textSearchManager.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/vscode/vscode/src/vs/workbench/services/search/common/textSearchManager.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BatchedCollector: () => (/* binding */ BatchedCollector),
/* harmony export */   TextSearchManager: () => (/* binding */ TextSearchManager),
/* harmony export */   TextSearchResultsCollector: () => (/* binding */ TextSearchResultsCollector),
/* harmony export */   extensionResultIsMatch: () => (/* binding */ extensionResultIsMatch)
/* harmony export */ });
/* harmony import */ var _base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../base/common/arrays.js */ "./node_modules/vscode/vscode/src/vs/base/common/arrays.js");
/* harmony import */ var _base_common_async_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../base/common/async.js */ "./node_modules/vscode/vscode/src/vs/base/common/async.js");
/* harmony import */ var _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../base/common/cancellation.js */ "./node_modules/vscode/vscode/src/vs/base/common/cancellation.js");
/* harmony import */ var _base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../base/common/errorMessage.js */ "./node_modules/vscode/vscode/src/vs/base/common/errorMessage.js");
/* harmony import */ var _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../base/common/network.js */ "./node_modules/vscode/vscode/src/vs/base/common/network.js");
/* harmony import */ var _base_common_path_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../base/common/path.js */ "./node_modules/vscode/vscode/src/vs/base/common/path.js");
/* harmony import */ var _base_common_resources_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../base/common/resources.js */ "./node_modules/vscode/vscode/src/vs/base/common/resources.js");
/* harmony import */ var _base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../base/common/uri.js */ "./node_modules/vscode/vscode/src/vs/base/common/uri.js");
/* harmony import */ var _search_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./search.js */ "./node_modules/vscode/vscode/src/vs/workbench/services/search/common/search.js");









class TextSearchManager {
    constructor(queryProviderPair, fileUtils, processType) {
        this.queryProviderPair = queryProviderPair;
        this.fileUtils = fileUtils;
        this.processType = processType;
        this.collector = null;
        this.isLimitHit = false;
        this.resultCount = 0;
    }
    get query() {
        return this.queryProviderPair.query;
    }
    search(onProgress, token) {
        const folderQueries = this.query.folderQueries || [];
        const tokenSource = ( new _base_common_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationTokenSource(token));
        return ( new Promise((resolve, reject) => {
            this.collector = ( new TextSearchResultsCollector(onProgress));
            let isCanceled = false;
            const onResult = (result, folderIdx) => {
                if (isCanceled) {
                    return;
                }
                if (!this.isLimitHit) {
                    const resultSize = this.resultSize(result);
                    if (extensionResultIsMatch(result) && typeof this.query.maxResults === 'number' && this.resultCount + resultSize > this.query.maxResults) {
                        this.isLimitHit = true;
                        isCanceled = true;
                        tokenSource.cancel();
                        result = this.trimResultToSize(result, this.query.maxResults - this.resultCount);
                    }
                    const newResultSize = this.resultSize(result);
                    this.resultCount += newResultSize;
                    if (newResultSize > 0 || !extensionResultIsMatch(result)) {
                        this.collector.add(result, folderIdx);
                    }
                }
            };
            Promise.all(( folderQueries.map((fq, i) => {
                return this.searchInFolder(fq, r => onResult(r, i), tokenSource.token);
            }))).then(results => {
                tokenSource.dispose();
                this.collector.flush();
                const someFolderHitLImit = ( results.some(result => !!result && !!result.limitHit));
                resolve({
                    limitHit: this.isLimitHit || someFolderHitLImit,
                    messages: results.flatMap(result => {
                        if (!result?.message) {
                            return [];
                        }
                        if (Array.isArray(result.message)) {
                            return result.message;
                        }
                        else {
                            return [result.message];
                        }
                    }),
                    stats: {
                        type: this.processType
                    }
                });
            }, (err) => {
                tokenSource.dispose();
                const errMsg = (0,_base_common_errorMessage_js__WEBPACK_IMPORTED_MODULE_3__.toErrorMessage)(err);
                reject(( new Error(errMsg)));
            });
        }));
    }
    resultSize(result) {
        if (extensionResultIsMatch(result)) {
            return Array.isArray(result.ranges) ?
                result.ranges.length :
                1;
        }
        else {
            return 0;
        }
    }
    trimResultToSize(result, size) {
        const rangesArr = Array.isArray(result.ranges) ? result.ranges : [result.ranges];
        const matchesArr = Array.isArray(result.preview.matches) ? result.preview.matches : [result.preview.matches];
        return {
            ranges: rangesArr.slice(0, size),
            preview: {
                matches: matchesArr.slice(0, size),
                text: result.preview.text
            },
            uri: result.uri
        };
    }
    async searchInFolder(folderQuery, onResult, token) {
        const queryTester = ( new _search_js__WEBPACK_IMPORTED_MODULE_8__.QueryGlobTester(this.query, folderQuery));
        const testingPs = [];
        const progress = {
            report: (result) => {
                if (!this.validateProviderResult(result)) {
                    return;
                }
                const hasSibling = folderQuery.folder.scheme === _base_common_network_js__WEBPACK_IMPORTED_MODULE_4__.Schemas.file ?
                    (0,_search_js__WEBPACK_IMPORTED_MODULE_8__.hasSiblingPromiseFn)(() => {
                        return this.fileUtils.readdir((0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_6__.dirname)(result.uri));
                    }) :
                    undefined;
                const relativePath$1 = (0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_6__.relativePath)(folderQuery.folder, result.uri);
                if (relativePath$1) {
                    const included = queryTester.includedInQuery(relativePath$1, (0,_base_common_path_js__WEBPACK_IMPORTED_MODULE_5__.basename)(relativePath$1), hasSibling);
                    if ((0,_base_common_async_js__WEBPACK_IMPORTED_MODULE_1__.isThenable)(included)) {
                        testingPs.push(included.then(isIncluded => {
                            if (isIncluded) {
                                onResult(result);
                            }
                        }));
                    }
                    else if (included) {
                        onResult(result);
                    }
                }
            }
        };
        const searchOptions = this.getSearchOptionsForFolder(folderQuery);
        let result;
        if (this.queryProviderPair.query.type === _search_js__WEBPACK_IMPORTED_MODULE_8__.QueryType.aiText) {
            result = await this.queryProviderPair.provider.provideAITextSearchResults(this.queryProviderPair.query.contentPattern, searchOptions, progress, token);
        }
        else {
            result = await this.queryProviderPair.provider.provideTextSearchResults(patternInfoToQuery(this.queryProviderPair.query.contentPattern), searchOptions, progress, token);
        }
        if (testingPs.length) {
            await Promise.all(testingPs);
        }
        return result;
    }
    validateProviderResult(result) {
        if (extensionResultIsMatch(result)) {
            if (Array.isArray(result.ranges)) {
                if (!Array.isArray(result.preview.matches)) {
                    console.warn('INVALID - A text search provider match\'s`ranges` and`matches` properties must have the same type.');
                    return false;
                }
                if (result.preview.matches.length !== result.ranges.length) {
                    console.warn('INVALID - A text search provider match\'s`ranges` and`matches` properties must have the same length.');
                    return false;
                }
            }
            else {
                if (Array.isArray(result.preview.matches)) {
                    console.warn('INVALID - A text search provider match\'s`ranges` and`matches` properties must have the same length.');
                    return false;
                }
            }
        }
        return true;
    }
    getSearchOptionsForFolder(fq) {
        const includes = (0,_search_js__WEBPACK_IMPORTED_MODULE_8__.resolvePatternsForProvider)(this.query.includePattern, fq.includePattern);
        const excludes = (0,_search_js__WEBPACK_IMPORTED_MODULE_8__.resolvePatternsForProvider)(this.query.excludePattern, fq.excludePattern);
        const options = {
            folder: ( _base_common_uri_js__WEBPACK_IMPORTED_MODULE_7__.URI.from(fq.folder)),
            excludes,
            includes,
            useIgnoreFiles: !fq.disregardIgnoreFiles,
            useGlobalIgnoreFiles: !fq.disregardGlobalIgnoreFiles,
            useParentIgnoreFiles: !fq.disregardParentIgnoreFiles,
            followSymlinks: !fq.ignoreSymlinks,
            encoding: fq.fileEncoding && this.fileUtils.toCanonicalName(fq.fileEncoding),
            maxFileSize: this.query.maxFileSize,
            maxResults: this.query.maxResults ?? _search_js__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_MAX_SEARCH_RESULTS,
            previewOptions: this.query.previewOptions,
            afterContext: this.query.afterContext,
            beforeContext: this.query.beforeContext
        };
        if ('usePCRE2' in this.query) {
            options.usePCRE2 = this.query.usePCRE2;
        }
        return options;
    }
}
function patternInfoToQuery(patternInfo) {
    return {
        isCaseSensitive: patternInfo.isCaseSensitive || false,
        isRegExp: patternInfo.isRegExp || false,
        isWordMatch: patternInfo.isWordMatch || false,
        isMultiline: patternInfo.isMultiline || false,
        pattern: patternInfo.pattern
    };
}
class TextSearchResultsCollector {
    constructor(_onResult) {
        this._onResult = _onResult;
        this._currentFolderIdx = -1;
        this._currentFileMatch = null;
        this._batchedCollector = ( new BatchedCollector(512, items => this.sendItems(items)));
    }
    add(data, folderIdx) {
        if (this._currentFileMatch && (this._currentFolderIdx !== folderIdx || !(0,_base_common_resources_js__WEBPACK_IMPORTED_MODULE_6__.isEqual)(this._currentUri, data.uri))) {
            this.pushToCollector();
            this._currentFileMatch = null;
        }
        if (!this._currentFileMatch) {
            this._currentFolderIdx = folderIdx;
            this._currentFileMatch = {
                resource: data.uri,
                results: []
            };
        }
        this._currentFileMatch.results.push(extensionResultToFrontendResult(data));
    }
    pushToCollector() {
        const size = this._currentFileMatch && this._currentFileMatch.results ?
            this._currentFileMatch.results.length :
            0;
        this._batchedCollector.addItem(this._currentFileMatch, size);
    }
    flush() {
        this.pushToCollector();
        this._batchedCollector.flush();
    }
    sendItems(items) {
        this._onResult(items);
    }
}
function extensionResultToFrontendResult(data) {
    if (extensionResultIsMatch(data)) {
        return {
            preview: {
                matches: (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.mapArrayOrNot)(data.preview.matches, m => ({
                    startLineNumber: m.start.line,
                    startColumn: m.start.character,
                    endLineNumber: m.end.line,
                    endColumn: m.end.character
                })),
                text: data.preview.text
            },
            ranges: (0,_base_common_arrays_js__WEBPACK_IMPORTED_MODULE_0__.mapArrayOrNot)(data.ranges, r => ({
                startLineNumber: r.start.line,
                startColumn: r.start.character,
                endLineNumber: r.end.line,
                endColumn: r.end.character
            }))
        };
    }
    else {
        return {
            text: data.text,
            lineNumber: data.lineNumber
        };
    }
}
function extensionResultIsMatch(data) {
    return !!data.preview;
}
class BatchedCollector {
    static { this.TIMEOUT = 4000; }
    static { this.START_BATCH_AFTER_COUNT = 50; }
    constructor(maxBatchSize, cb) {
        this.maxBatchSize = maxBatchSize;
        this.cb = cb;
        this.totalNumberCompleted = 0;
        this.batch = [];
        this.batchSize = 0;
    }
    addItem(item, size) {
        if (!item) {
            return;
        }
        this.addItemToBatch(item, size);
    }
    addItems(items, size) {
        if (!items) {
            return;
        }
        this.addItemsToBatch(items, size);
    }
    addItemToBatch(item, size) {
        this.batch.push(item);
        this.batchSize += size;
        this.onUpdate();
    }
    addItemsToBatch(item, size) {
        this.batch = this.batch.concat(item);
        this.batchSize += size;
        this.onUpdate();
    }
    onUpdate() {
        if (this.totalNumberCompleted < BatchedCollector.START_BATCH_AFTER_COUNT) {
            this.flush();
        }
        else if (this.batchSize >= this.maxBatchSize) {
            this.flush();
        }
        else if (!this.timeoutHandle) {
            this.timeoutHandle = setTimeout(() => {
                this.flush();
            }, BatchedCollector.TIMEOUT);
        }
    }
    flush() {
        if (this.batchSize) {
            this.totalNumberCompleted += this.batchSize;
            this.cb(this.batch);
            this.batch = [];
            this.batchSize = 0;
            if (this.timeoutHandle) {
                clearTimeout(this.timeoutHandle);
                this.timeoutHandle = 0;
            }
        }
    }
}



/***/ }),

/***/ "./node_modules/vscode/workers/extensionHost.worker.js":
/*!*************************************************************!*\
  !*** ./node_modules/vscode/workers/extensionHost.worker.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vscode_src_vs_workbench_api_worker_extensionHostWorker_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../vscode/src/vs/workbench/api/worker/extensionHostWorker.js */ "./node_modules/vscode/vscode/src/vs/workbench/api/worker/extensionHostWorker.js");

const messageHandler = (0,_vscode_src_vs_workbench_api_worker_extensionHostWorker_js__WEBPACK_IMPORTED_MODULE_0__.create)();
globalThis.onmessage = (e) => messageHandler.onmessage(e.data);


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/******/ // expose the modules object (__webpack_modules__)
/******/ __webpack_require__.m = __webpack_modules__;
/******/ 
/******/ // the startup function
/******/ __webpack_require__.x = () => {
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_vscode_vscode_src_vs_base_common_assert_js-node_modules_vscode_vscode_sr-d1ce6a"], () => (__webpack_require__("./node_modules/vscode/workers/extensionHost.worker.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	return __webpack_exports__;
/******/ };
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/chunk loaded */
/******/ (() => {
/******/ 	var deferred = [];
/******/ 	__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 		if(chunkIds) {
/******/ 			priority = priority || 0;
/******/ 			for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 			deferred[i] = [chunkIds, fn, priority];
/******/ 			return;
/******/ 		}
/******/ 		var notFulfilled = Infinity;
/******/ 		for (var i = 0; i < deferred.length; i++) {
/******/ 			var [chunkIds, fn, priority] = deferred[i];
/******/ 			var fulfilled = true;
/******/ 			for (var j = 0; j < chunkIds.length; j++) {
/******/ 				if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 					chunkIds.splice(j--, 1);
/******/ 				} else {
/******/ 					fulfilled = false;
/******/ 					if(priority < notFulfilled) notFulfilled = priority;
/******/ 				}
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferred.splice(i--, 1)
/******/ 				var r = fn();
/******/ 				if (r !== undefined) result = r;
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/ensure chunk */
/******/ (() => {
/******/ 	__webpack_require__.f = {};
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = (chunkId) => {
/******/ 		return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 			__webpack_require__.f[key](chunkId, promises);
/******/ 			return promises;
/******/ 		}, []));
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/get javascript chunk filename */
/******/ (() => {
/******/ 	// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 	__webpack_require__.u = (chunkId) => {
/******/ 		// return url for filenames based on template
/******/ 		return "" + chunkId + ".main.js";
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/publicPath */
/******/ (() => {
/******/ 	var scriptUrl;
/******/ 	if (typeof import.meta.url === "string") scriptUrl = import.meta.url
/******/ 	// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 	// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 	if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 	scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 	__webpack_require__.p = scriptUrl;
/******/ })();
/******/ 
/******/ /* webpack/runtime/importScripts chunk loading */
/******/ (() => {
/******/ 	// no baseURI
/******/ 	
/******/ 	// object to store loaded chunks
/******/ 	// "1" means "already loaded"
/******/ 	var installedChunks = {
/******/ 		"vendors-node_modules_vscode_workers_extensionHost_worker_js": 1
/******/ 	};
/******/ 	
/******/ 	// importScripts chunk loading
/******/ 	var installChunk = (data) => {
/******/ 		var [chunkIds, moreModules, runtime] = data;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 				__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(runtime) runtime(__webpack_require__);
/******/ 		while(chunkIds.length)
/******/ 			installedChunks[chunkIds.pop()] = 1;
/******/ 		parentChunkLoadingFunction(data);
/******/ 	};
/******/ 	__webpack_require__.f.i = (chunkId, promises) => {
/******/ 		// "1" is the signal for "already loaded"
/******/ 		if(!installedChunks[chunkId]) {
/******/ 			if(true) { // all chunks have JS
/******/ 				importScripts(__webpack_require__.p + __webpack_require__.u(chunkId));
/******/ 			}
/******/ 		}
/******/ 	};
/******/ 	
/******/ 	var chunkLoadingGlobal = self["webpackChunkexample_client_webpack"] = self["webpackChunkexample_client_webpack"] || [];
/******/ 	var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);
/******/ 	chunkLoadingGlobal.push = installChunk;
/******/ 	
/******/ 	// no HMR
/******/ 	
/******/ 	// no HMR manifest
/******/ })();
/******/ 
/******/ /* webpack/runtime/startup chunk dependencies */
/******/ (() => {
/******/ 	var next = __webpack_require__.x;
/******/ 	__webpack_require__.x = () => {
/******/ 		return __webpack_require__.e("vendors-node_modules_vscode_vscode_src_vs_base_common_assert_js-node_modules_vscode_vscode_sr-d1ce6a").then(next);
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // run startup
/******/ var __webpack_exports__ = __webpack_require__.x();
/******/ 

//# sourceMappingURL=vendors-node_modules_vscode_workers_extensionHost_worker_js.main.js.map